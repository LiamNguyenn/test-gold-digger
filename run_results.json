{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.4", "generated_at": "2024-02-04T15:21:08.194120Z", "invocation_id": "54991a73-3f4c-4080-a321-9d0057b8e47f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.837043Z", "completed_at": "2024-02-04T15:19:43.865213Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.874502Z", "completed_at": "2024-02-04T15:19:43.874526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.052639007568359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_project.eh_internal_employee_job_titles", "compiled": true, "compiled_code": "with \n    raw_records as (\n    select \n        m.id as member_id, m.work_country as country, m.start_date, h.title\n    from\n        \"dev\".\"postgres_public\".\"members\" as m\n        join \"dev\".\"postgres_public\".\"users\" as u on \n            u.id = m.user_id\n            and not u.is_shadow_data\n            and not u._fivetran_deleted\n        join (\n            select * \n            from \"dev\".\"postgres_public\".\"employment_histories\"\n            where\n                id in (\n                    select FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n                    from \"dev\".\"postgres_public\".\"employment_histories\"\n                    where not _fivetran_deleted\n                    )\n            ) as h on m.id = h.member_id\n    where\n        m.organisation_id = 8701 \n        and m.active\n        and not m.system_manager\n        and not m.system_user\n        and not m._fivetran_deleted\n        and not m.is_shadow_data\n        and m.start_date is not null\n        --   and start_date<=getdate()\n    )\n    , t_cleansed as (\n        select title,  \n-- remove ending words   \ntrim(regexp_replace(trim(regexp_replace(trim(regexp_replace(trim(regexp_replace(         \n    trim(replace(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(replace(trim(lower(\n        -- abbreviations\n        trim(job_title_abbreviation_expand( \n            -- replace & with and\n            trim(replace(replace(\n                -- replace + with and\n                trim(replace(replace(\n                    -- 5. replace & with and\n                    trim(replace(replace(\n                        -- 4. replace ! with of\n                        trim(replace(replace(replace(replace(replace(replace(replace(\n                            -- 3. trim ending special characters\n                            trim(trim('&' from trim(trim('/' from trim(trim(':' from trim(trim('|' from trim(trim('-' from trim(trim('|' FROM ( \n                                -- 2. remove state\n                                trim(REGEXP_REPLACE(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(lower(   \n                                    -- 1. remove content inside bracket\n                                    trim(REGEXP_REPLACE(title, '\\\\([^)]*\\\\)'))\n                                ), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' '), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' ')), '-$'))\n                            )))))))))))))\n                        , ' - ', ' of '), ' : ', ' of '), ':', ' of '), ' | ', ' of '), '|', ' of '), ', ', ' of '), ',', ' of '))\n                    , ' / ', ' and '), '/', ' and '))\n                , ' + ', ' and '), '+', 'and'))\n            , ' & ', ' and '), '&', ' and '))\n        ))\n    )), ' the ', ' '), '^[-/]', ''), '[-/]$', '')), '  ', ' '))\n, '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', ''))\n as t_title,\n        member_id, country, start_date\n        from raw_records\n    )\n    , t_common as (\n        select t.title, trim(INITCAP(coalesce(m.title_common, t.t_title))) as processed_title,\n        member_id, country, start_date\n        from t_cleansed t \n        left join \"dev\".\"csv\".\"more_common_job_titles\" m on t.t_title = m.title_original\n    )\n    , eh_internal_employees as (\n        select title as original_title\n        ,  \ncase\n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i')) end\n AS processed_title\n        ,  \ncase when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when processed_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when processed_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when processed_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when processed_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when processed_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when processed_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when processed_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when processed_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when processed_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when processed_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when processed_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when processed_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when processed_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n AS seniority\n        , member_id, country, start_date\n        from t_common\n    )\n\nselect\n    original_title, processed_title\n    , case \n        when INITCAP(seniority) in ('Associate', 'Assistant', 'Graduate', 'Apprentice') then 'Junior'\n        when INITCAP(seniority) = '' or INITCAP(seniority) is null then 'Intermediate'\n        when INITCAP(seniority) in ('Principal') then 'Lead'\n        when INITCAP(seniority) in ('Managing') then 'Manager'\n        when INITCAP(seniority) in ('Head') then 'Head'\n        when INITCAP(seniority) in ('Vice', 'Executive') then 'Director'\n        else INITCAP(seniority) end as seniority\n    , member_id, country, start_date\nfrom eh_internal_employees", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.844506Z", "completed_at": "2024-02-04T15:19:43.866558Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.875738Z", "completed_at": "2024-02-04T15:19:43.875753Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05162358283996582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_candidate_experiences", "compiled": true, "compiled_code": "\n\nwith\ncandidate_experience as (\n    select\n        id,\n        user_id,\n        industry_standard_job_title,\n        trim(job_title)                                                                                                                                                                                                                                                                                        as trim_job_title\n        ,  \ncase\n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i')) end\n as job_title_without_seniority,\n        lower( \ncase when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when trim_job_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when trim_job_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when trim_job_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when trim_job_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when trim_job_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when trim_job_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when trim_job_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when trim_job_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when trim_job_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when trim_job_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when trim_job_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when trim_job_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when trim_job_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n)                                                                                                                                                                                                                                                                                                              as job_title_seniority,\n        company,\n        summary,\n        current_job,\n        case when coalesce(start_year, end_year) < 1900 or coalesce(start_year, end_year) > 2100 then NULL else to_date(coalesce(start_year, end_year) || '-' || coalesce(case when start_month > 12 or start_month < 1 then NULL else start_month end, 6) || '-' || coalesce(start_day, 1), 'YYYY-MM-DD') end as start_date,\n        case when coalesce(end_year, start_year) < 1900 or coalesce(end_year, start_year) > 2100 then NULL else to_date(coalesce(end_year, start_year) || '-' || coalesce(case when end_month > 12 or start_month < 1 then NULL else end_month end, 7) || '-' || coalesce(end_day, 1), 'YYYY-MM-DD') end       as end_date,\n        case when current_job then 0 else greatest(0, datediff('month', least(coalesce(end_date, current_date), current_date), current_date)::float / 12) end                                                                                                                                                  as gap_years_to_date,\n        greatest(0, datediff('month', least(coalesce(start_date, end_date), current_date), least(coalesce(end_date, current_date), current_date))::float / 12)                                                                                                                                                 as duration_years\n    from\n        \"dev\".\"postgres_public\".\"user_employment_histories\"\n    where not _fivetran_deleted\n),\n\nswag_job_profiles as (\n    select\n        u.uuid         as user_uuid,\n        u.id,\n        lower(u.email) as email,\n        u.created_at   as user_created_at,\n        u.updated_at   as user_updated_at,\n        ui.created_at,\n        ui.updated_at,\n        ui.first_name,\n        ui.last_name,\n        ui.user_verified_at,\n        ui.source,\n        ui.friendly_id,\n        ui.completed_profile,\n        ui.public_profile,\n        ui.last_public_profile_at,\n        ui.phone_number,\n        ui.country_code,\n        ui.city,\n        ui.state_code,\n        ui.headline,\n        ui.summary,\n        ui.marketing_consented_at\n    from\n        \"dev\".\"postgres_public\".\"users\" as u\n    inner join \"dev\".\"postgres_public\".\"user_infos\" as ui\n        on\n            u.id = ui.user_id\n            and not ui._fivetran_deleted\n    where\n        \n    u.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n        and ui.user_verified_at is not NULL\n        and (len(ui.country_code) is NULL or len(ui.country_code) != 3)\n)\n\nselect\n    e.id,\n    p.user_uuid,\n    p.id                                      as user_id,\n    p.email,\n    e.trim_job_title                          as job_title,\n    e.job_title_without_seniority\n    ,  \ncase \n        when INITCAP(job_title_seniority) in ('Associate', 'Assistant', 'Graduate', 'Apprentice', 'Trainee') then 'Junior'\n        when INITCAP(job_title_seniority) = '' or INITCAP(job_title_seniority) is null then 'Intermediate'\n        when INITCAP(job_title_seniority) in ('Principal', 'Leader') then 'Lead'\n        when INITCAP(job_title_seniority) in ('Managing') then 'Manager'\n        when INITCAP(job_title_seniority) in ('Head') then 'Head'\n        when INITCAP(job_title_seniority) in ('Vice', 'Executive') then 'Director'\n        else INITCAP(job_title_seniority) end \n as job_title_seniority,\n    e.industry_standard_job_title,\n    e.company,\n    e.summary,\n    e.current_job,\n    e.start_date,\n    e.end_date,\n    e.gap_years_to_date,\n    e.duration_years\nfrom\n    swag_job_profiles as p\ninner join candidate_experience as e on p.id = e.user_id", "relation_name": "\"dev\".\"ats\".\"candidate_experiences\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.850490Z", "completed_at": "2024-02-04T15:19:43.867677Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.876936Z", "completed_at": "2024-02-04T15:19:43.876951Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.051816463470458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_candidate_profiles", "compiled": true, "compiled_code": "\n\n--DEFINITION: \n-- 1. candidate :\n--      a.cannot have an active member\n--      b.must be verified\n--      c.cannot have applied to jobs from spam orgs\n--      d.length of country code cannot be 3 (created by country selector in the app not from swag jobs)\n\nwith\nspam_jobs_created as (\n    select j.id as job_id\n    from\n        \"dev\".\"ats_public\".\"jobs\" as j\n    -- using this just to get the org id that created the job, no need to filter\n    inner join \"dev\".\"postgres_public\".\"organisations\" as o\n        on\n            j.organisation_id = o.uuid\n            and o.id in (select id from \"dev\".\"ats\".\"spam_organisations\") -- SPAM organisations\n    where\n        not j._fivetran_deleted\n),\n\napplicants_to_spam_jobs as (\n    select\n        cj.id,\n        cj.job_id,\n        cj.created_at           as applied_at,\n        cj.source_name          as source,\n        lower(cj.applied_email) as applicant_email,\n        cj.user_id\n    from\n        \"dev\".\"ats_public\".\"candidate_jobs\" as cj\n    inner join spam_jobs_created as j\n        on\n            cj.job_id = j.job_id\n    where\n        not cj._fivetran_deleted\n),\n\nswag_job_profiles as (\n    select\n        u.uuid                                      as user_uuid,\n        u.id,\n        lower(u.email)                              as email,\n        u.created_at                                as user_created_at,\n        u.updated_at                                as user_updated_at,\n        ui.created_at,\n        ui.updated_at,\n        ui.first_name,\n        ui.last_name,\n        ui.user_verified_at,\n        ui.source,\n        ui.friendly_id,\n        ui.completed_profile,\n        ui.public_profile,\n        ui.last_public_profile_at,\n        ui.phone_number,\n        ui.country_code,\n        ui.state_code,\n        a.city,\n        g.latitude,\n        g.longitude,\n        ui.headline,\n        ui.summary,\n        ui.marketing_consented_at,\n        count(case when m.active then m.id end)     as active_members,\n        count(case when not m.active then m.id end) as terminated_members\n    from\n        \"dev\".\"postgres_public\".\"users\" as u\n    inner join \"dev\".\"postgres_public\".\"user_infos\" as ui\n        on\n            u.id = ui.user_id\n            and not ui._fivetran_deleted\n    left join \"dev\".\"postgres_public\".\"addresses\" as a on ui.address_id = a.id and not a._fivetran_deleted\n    left join \n\n(\nselect\n    *\n  from\n    \"dev\".\"postgres_public\".\"address_geolocations\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by address_id order by created_at desc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"postgres_public\".\"address_geolocations\"\n      where\n        not _fivetran_deleted\n    )\n)\n\n as g on a.id = g.address_id and not g._fivetran_deleted\n    left join \"dev\".\"postgres_public\".\"members\" as m\n        on\n            u.id = m.user_id\n            and not m._fivetran_deleted\n            and not m.is_shadow_data\n            and not m.system_user\n            and not m.system_manager\n    where\n        \n    u.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n        and not u._fivetran_deleted\n        and not u.is_shadow_data\n        and ui.user_verified_at is not NULL\n        and (len(ui.country_code) is NULL or len(ui.country_code) != 3)\n    group by 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24\n    having active_members = 0\n),\n\nemployment_history as (\n    select\n        user_id,\n        count(*) as employment_entries\n    from\n        \"dev\".\"postgres_public\".\"user_employment_histories\"\n    where\n        not _fivetran_deleted\n    group by 1\n),\n\neducation_history as (\n    select\n        user_id,\n        count(*) as education_entries\n    from\n        \"dev\".\"postgres_public\".\"user_education_histories\"\n    where\n        not _fivetran_deleted\n    group by 1\n),\n\nresume_and_cover_letter as (\n    select\n        user_id,\n        count(case when metadata ilike '%resume%' then 1 end)       as resume_entries,\n        count(case when metadata ilike '%cover_letter%' then 1 end) as cover_letter_entries\n    from\n        \"dev\".\"postgres_public\".\"user_attachments\"\n    where\n        not _fivetran_deleted\n    group by 1\n)\n\nselect\n    a.*,\n    coalesce(employment_entries, 0)   as number_of_employment_entries,\n    coalesce(education_entries, 0)    as number_of_education_entries,\n    coalesce(resume_entries, 0)       as number_of_resume_entries,\n    coalesce(cover_letter_entries, 0) as number_of_cover_letter_entries\nfrom\n    swag_job_profiles as a\nleft join employment_history as em\n    on a.id = em.user_id\nleft join education_history as ed\n    on a.id = ed.user_id\nleft join resume_and_cover_letter as r\n    on a.id = r.user_id\nwhere a.email not in (select distinct applicant_email from applicants_to_spam_jobs)", "relation_name": "\"dev\".\"ats\".\"candidate_profiles\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.858983Z", "completed_at": "2024-02-04T15:19:43.868845Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.878103Z", "completed_at": "2024-02-04T15:19:43.878117Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05086064338684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_candidates_previewed", "compiled": true, "compiled_code": "\n\nselect\n    \"time\",\n    case when json_extract_path_text(properties, 'organisation_code') = '' then NULL else json_extract_path_text(properties, 'organisation_code') end                                                                                                                                                  as org_uuid,\n    --  , o.id as org_id\n    coalesce(case when json_extract_path_text(properties, 'user_code') = '' then NULL else json_extract_path_text(properties, 'user_code') end, case when json_extract_path_text(properties, 'candidate_user_code') = '' then NULL else json_extract_path_text(properties, 'candidate_user_code') end) as user_uuid,\n    json_extract_path_text(properties, 'job_title')::varchar                                                                                                                                                                                                                                           as job_matched,\n    json_extract_path_text(properties, 'raw_job_title')::varchar                                                                                                                                                                                                                                       as raw_job_matched,\n    case when json_extract_path_text(properties, 'member_id') = '' then NULL else json_extract_path_text(properties, 'member_id') end                                                                                                                                                                  as employer_member_uuid,\n    case when json_extract_path_text(properties, 'candidate_rank') = '' then NULL else json_extract_path_text(properties, 'candidate_rank') end                                                                                                                                                        as candidate_rank,\n    case when json_extract_path_text(properties, 'candidate_session_id') = '' then NULL else json_extract_path_text(properties, 'candidate_session_id') end                                                                                                                                            as candidate_session_id,\n    case when json_extract_path_text(properties, 'job_id') = '' then NULL else json_extract_path_text(properties, 'job_id') end                                                                                                                                                                        as job_id,\n    case when json_extract_path_text(properties, 'location_source') = '' then NULL else json_extract_path_text(properties, 'location_source') end                                                                                                                                                      as location_source,\n    mp.name                                                                                                                                                                                                                                                                                            as event_name\n--  , case when app_version_string is not null then 'mobile' else 'web' end as app_type\nfrom \"dev\".\"mp\".\"event\" as mp\nwhere\n    mp.name in ('Smart Match - Candidate previewed')\n    and mp.\"time\" >= '2023-07-25' --go live date\n    and mp.\"time\" < (select date_trunc('day', max(\"time\")) from \"dev\".\"mp\".\"event\")\n", "relation_name": "\"dev\".\"ats\".\"smart_match_candidates_previewed\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.900519Z", "completed_at": "2024-02-04T15:19:43.925579Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.935785Z", "completed_at": "2024-02-04T15:19:43.935811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05215120315551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_candidates_saved_actioned", "compiled": true, "compiled_code": "\n\nselect\n    \"time\",\n    case when json_extract_path_text(properties, 'organisation_code') = '' then NULL else json_extract_path_text(properties, 'organisation_code') end                                                                                                                                                  as org_uuid,\n    coalesce(case when json_extract_path_text(properties, 'user_code') = '' then NULL else json_extract_path_text(properties, 'user_code') end, case when json_extract_path_text(properties, 'candidate_user_code') = '' then NULL else json_extract_path_text(properties, 'candidate_user_code') end) as user_uuid,\n    json_extract_path_text(properties, 'job_title')::varchar                                                                                                                                                                                                                                           as job_matched,\n    json_extract_path_text(properties, 'raw_job_title')::varchar                                                                                                                                                                                                                                       as raw_job_matched,\n    case when json_extract_path_text(properties, 'member_id') = '' then NULL else json_extract_path_text(properties, 'member_id') end                                                                                                                                                                  as employer_member_uuid,\n    case when json_extract_path_text(properties, 'candidate_rank') = '' then NULL else json_extract_path_text(properties, 'candidate_rank') end                                                                                                                                                        as candidate_rank,\n    case when json_extract_path_text(properties, 'candidate_session_id') = '' then NULL else json_extract_path_text(properties, 'candidate_session_id') end                                                                                                                                            as candidate_session_id,\n    case when json_extract_path_text(properties, 'job_id') = '' then NULL else json_extract_path_text(properties, 'job_id') end                                                                                                                                                                        as job_id,\n    case when json_extract_path_text(properties, 'location_source') = '' then NULL else json_extract_path_text(properties, 'location_source') end                                                                                                                                                      as location_source,\n    mp.name                                                                                                                                                                                                                                                                                            as event_name\n--  , case when app_version_string is not null then 'mobile' else 'web' end as app_type\nfrom \"dev\".\"mp\".\"event\" as mp\nwhere\n    mp.name in ('Smart Match - Candidate saved', 'Smart Match - Candidate added in talent pool')\n    -- 'Saved Candidates - Added to Talent Pool'\n    and mp.\"time\" >= '2023-07-25' --go live date  \n    and mp.\"time\" < (select date_trunc('day', max(\"time\")) from \"dev\".\"mp\".\"event\")\n", "relation_name": "\"dev\".\"ats\".\"smart_match_candidates_saved_actioned\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.912354Z", "completed_at": "2024-02-04T15:19:43.926858Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.936965Z", "completed_at": "2024-02-04T15:19:43.936977Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05094623565673828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_candidates_shown", "compiled": true, "compiled_code": "\n\nselect\n    \"time\",\n    case when json_extract_path_text(properties, 'organisation_code') = '' then NULL else json_extract_path_text(properties, 'organisation_code') end                                                                                                                                                  as org_uuid,\n    coalesce(case when json_extract_path_text(properties, 'user_code') = '' then NULL else json_extract_path_text(properties, 'user_code') end, case when json_extract_path_text(properties, 'candidate_user_code') = '' then NULL else json_extract_path_text(properties, 'candidate_user_code') end) as user_uuid,\n    json_extract_path_text(properties, 'job_title')::varchar                                                                                                                                                                                                                                           as job_matched,\n    json_extract_path_text(properties, 'raw_job_title')::varchar                                                                                                                                                                                                                                       as raw_job_matched,\n    case when json_extract_path_text(properties, 'member_id') = '' then NULL else json_extract_path_text(properties, 'member_id') end                                                                                                                                                                  as employer_member_uuid,\n    case when json_extract_path_text(properties, 'candidate_rank') = '' then NULL else json_extract_path_text(properties, 'candidate_rank') end                                                                                                                                                        as candidate_rank,\n    case when json_extract_path_text(properties, 'candidate_session_id') = '' then NULL else json_extract_path_text(properties, 'candidate_session_id') end                                                                                                                                            as candidate_session_id,\n    case when json_extract_path_text(properties, 'job_id') = '' then NULL else json_extract_path_text(properties, 'job_id') end                                                                                                                                                                        as job_id,\n    case when json_extract_path_text(properties, 'location_source') = '' then NULL else json_extract_path_text(properties, 'location_source') end                                                                                                                                                      as location_source,\n    mp.name                                                                                                                                                                                                                                                                                            as event_name\n--  , case when app_version_string is not null then 'mobile' else 'web' end as app_type \nfrom \"dev\".\"mp\".\"event\" as mp\nwhere\n    mp.name in ('Smart Match - Candidate shown in talent prompt')\n    and mp.\"time\" >= '2023-07-25' --go live date\n    and mp.\"time\" < (select date_trunc('day', max(\"time\")) from \"dev\".\"mp\".\"event\")\n", "relation_name": "\"dev\".\"ats\".\"smart_match_candidates_shown\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.906551Z", "completed_at": "2024-02-04T15:19:43.929258Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.938633Z", "completed_at": "2024-02-04T15:19:43.938645Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.059229373931884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_candidates_shortlisted_actioned", "compiled": true, "compiled_code": "\n\nselect\n    \"time\",\n    case when json_extract_path_text(properties, 'organisation_code') = '' then NULL else json_extract_path_text(properties, 'organisation_code') end                                                                                                                                                  as org_uuid,\n    coalesce(case when json_extract_path_text(properties, 'user_code') = '' then NULL else json_extract_path_text(properties, 'user_code') end, case when json_extract_path_text(properties, 'candidate_user_code') = '' then NULL else json_extract_path_text(properties, 'candidate_user_code') end) as user_uuid,\n    json_extract_path_text(properties, 'job_title')::varchar                                                                                                                                                                                                                                           as job_matched,\n    json_extract_path_text(properties, 'raw_job_title')::varchar                                                                                                                                                                                                                                       as raw_job_matched,\n    case when json_extract_path_text(properties, 'member_id') = '' then NULL else json_extract_path_text(properties, 'member_id') end                                                                                                                                                                  as employer_member_uuid,\n    case when json_extract_path_text(properties, 'candidate_rank') = '' then NULL else json_extract_path_text(properties, 'candidate_rank') end                                                                                                                                                        as candidate_rank,\n    case when json_extract_path_text(properties, 'candidate_session_id') = '' then NULL else json_extract_path_text(properties, 'candidate_session_id') end                                                                                                                                            as candidate_session_id,\n    case when json_extract_path_text(properties, 'job_id') = '' then NULL else json_extract_path_text(properties, 'job_id') end                                                                                                                                                                        as job_id,\n    case when json_extract_path_text(properties, 'location_source') = '' then NULL else json_extract_path_text(properties, 'location_source') end                                                                                                                                                      as location_source,\n    mp.name                                                                                                                                                                                                                                                                                            as event_name\n--  , case when app_version_string is not null then 'mobile' else 'web' end as app_type\nfrom \"dev\".\"mp\".\"event\" as mp\nwhere\n    mp.name in ('Smart Match - Candidate shortlisted from talent prompt', 'Smart Match - Candidate added to new job', 'Smart Match - Candidate shortlisted to existing job')\n    and mp.\"time\" >= '2023-07-25' --go live date  \n    and mp.\"time\" < (select date_trunc('day', max(\"time\")) from \"dev\".\"mp\".\"event\")\n", "relation_name": "\"dev\".\"ats\".\"smart_match_candidates_shortlisted_actioned\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.965879Z", "completed_at": "2024-02-04T15:19:43.982795Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.985367Z", "completed_at": "2024-02-04T15:19:43.985385Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029202699661254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.checkly_all_checks_results", "compiled": true, "compiled_code": "\nselect * from \"dev\".\"stg_checkly\".\"all_checks_results\"", "relation_name": "\"dev\".\"checkly\".\"all_checks_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.976883Z", "completed_at": "2024-02-04T15:19:43.989695Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:43.996906Z", "completed_at": "2024-02-04T15:19:43.996924Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04677081108093262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customer_support_project_status_daily", "compiled": true, "compiled_code": "with\ndates as (\n    select distinct dateadd('day', -generated_number::int, current_date) as date  -- noqa: RF04\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3000\n    order by generated_number\n\n)\n),\n\nproject_status_history as (\n    select distinct\n        ip.id                                                                                          as project_id,\n        (\n            case\n                when lower(a.geo_code_c) = 'au'\n                    then 'Australia'\n                when lower(a.geo_code_c) = 'uk'\n                    then 'United Kingdom'\n                when lower(a.geo_code_c) = 'sg'\n                    then 'Singapore'\n                when lower(a.geo_code_c) = 'my'\n                    then 'Malaysia'\n                when lower(a.geo_code_c) = 'nz'\n                    then 'New Zealand'\n                else 'untracked'\n            end\n        )\n        as country,\n        ip.service_offering_c                                                                          as service_offering,\n        iph.created_date::date                                                                         as agg_date,\n        iph.new_value,\n        row_number() over (partition by iph.id, iph.created_date::date order by iph.created_date desc) as rn\n    from\n        \"dev\".\"salesforce\".\"implementation_project_history\" as iph  -- noqa: AL06\n    inner join \"dev\".\"salesforce\".\"implementation_project_c\" as ip  -- noqa: AL06\n        on\n            iph.parent_id = ip.id\n            and iph.created_date >= '2019-01-01'\n            and ip.created_date >= '2019-01-01'\n    left join \"dev\".\"salesforce\".\"account\" as a on ip.account_c = a.id  -- noqa: AL06\n    where\n        iph.field = 'Status__c'\n-- and ip.id = 'a0B5h000002EjcnEAC'\n),\n\nmin_max_project as (\n    select\n        project_id,\n        min(agg_date) as min_agg_date\n    from\n        project_status_history\n    group by project_id\n),\n\nproject_over_time_w_status as (\n    select\n        *,\n        last_value(country ignore nulls) over (partition by project_id order by date rows unbounded preceding)          as country_c,\n        last_value(service_offering ignore nulls) over (partition by project_id order by date rows unbounded preceding) as service_offering_c,\n        last_value(value ignore nulls) over (partition by project_id order by date rows unbounded preceding)            as status\n    from\n        (\n            select\n                mmp.project_id,\n                d.*,\n                psh.new_value as value,  -- noqa: RF04\n                psh.country,\n                psh.service_offering\n            from\n                dates as d  -- noqa: AL06\n            inner join min_max_project as mmp  -- noqa: AL06\n                on\n                    d.date >= mmp.min_agg_date\n                    and d.date <= current_date\n            left join project_status_history as psh  -- noqa: AL06\n                on\n                    d.date = psh.agg_date\n                    and mmp.project_id = psh.project_id\n                    and psh.rn = 1\n            order by\n                mmp.project_id asc\n        )\n)\n\nselect\n    date::date                                                                                        as date,  -- noqa: RF04\n    coalesce(country_c, 'untracked')                                                                  as country,\n    coalesce(service_offering_c, 'untracked')                                                         as service_offering,\n    count(case when status in ('On-Hold') then project_id end)                                        as on_hold_projects,\n    count(case when status in ('Off track', 'Delayed', 'At risk') then project_id end)                as red_flag_projects,\n    count(case when status in ('Active', 'New', 'On track') then project_id end)                      as in_progress_projects,\n    count(case when status in ('Closed', 'Live', 'Delivered', 'Completed', 'CS') then project_id end) as completed_projects,\n    count(case when status in ('Churned', 'Expired') then project_id end)                             as churned_projects,\n    count(case when status is NULL then project_id end)                                               as null_projects\nfrom\n    project_over_time_w_status\nwhere\n    date >= '2019-01-01'::date\ngroup by\n    date,\n    country_c,\n    service_offering_c\norder by\n    date desc", "relation_name": "\"dev\".\"customer_support\".\"customer_support_project_status_daily\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.970335Z", "completed_at": "2024-02-04T15:19:43.992312Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.006186Z", "completed_at": "2024-02-04T15:19:44.006202Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.050217390060424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customer_support_project_key_metrics", "compiled": true, "compiled_code": "--please consult with Carina Murray for details on the queries below\nwith\n  project_imp_table as (\n    select distinct\n      ip.project_completion_date_c\n      , coalesce(ip.project_completion_date_c, ip.go_live_date_c) as completed_date\n      , date(ip.created_date) as created_date\n      , (\n        case\n          when ip.project_completion_date_c is not null\n            then datediff('day', ip.created_date, ip.project_completion_date_c)\n          when ip.go_live_date_c is not null\n            then datediff('day', ip.created_date, ip.go_live_date_c)\n          else 0\n        end\n      )\n      as days_to_implement\n      , ip.service_offering_c\n      , (\n        case\n          when lower(a.geo_code_c) = 'au'\n            then 'Australia'\n          when lower(a.geo_code_c) = 'uk'\n            then 'United Kingdom'\n          when lower(a.geo_code_c) = 'sg'\n            then 'Singapore'\n          when lower(a.geo_code_c) = 'my'\n            then 'Malaysia'\n          when lower(a.geo_code_c) = 'nz'\n            then 'New Zealand'\n          else 'untracked'\n        end\n      )\n      as country\n      , ip.id as proserv_id\n      , ip.stage_c\n      , ip.status_c\n    from\n      \"dev\".\"salesforce\".\"implementation_project_c\" ip\n      left join \"dev\".\"salesforce\".\"account\" a on\n        ip.account_c = a.id\n    where\n      ip.created_date >= '2019-01-01'\n      and ip.project_completion_date_c >= '2019-01-01'\n  )\n  , churn_table as (\n    select\n      date(c.created_date) as case_created_date\n      , (\n        case\n          when lower(ac.geo_code_c) = 'au'\n            then 'Australia'\n          when lower(ac.geo_code_c) = 'uk'\n            then 'United Kingdom'\n          when lower(ac.geo_code_c) = 'sg'\n            then 'Singapore'\n          when lower(ac.geo_code_c) = 'my'\n            then 'Malaysia'\n          when lower(ac.geo_code_c) = 'nz'\n            then 'New Zealand'\n          else 'untracked'\n        end\n      )\n      as country\n      , c.case_number\n      , ac.churn_request_date_c\n      , date(c.effective_date_c) as case_effective_date\n      , c.category_c\n    from\n      \"dev\".\"salesforce\".\"case\" c\n      left join \"dev\".\"salesforce\".\"account\" ac on\n        c.account_id = ac.id\n    where\n      ac.is_deleted = false\n      and c.category_c in (\n        'Term Amendment'\n        , 'Subscription Cancellation'\n        , 'Downgrade'\n        , 'Full Churn'\n      )\n  )\n--aggregation of metrics\n--avg_time_to_implement\nselect distinct\n  completed_date as date\n  , country\n  , 'service_offering' as sub_type\n  , (\n    case\n      when service_offering_c is null\n        then 'untracked'\n      else service_offering_c\n    end\n  )\nas sub_value\n, 'days_to_implement' as data_type\n, sum(completed_date-created_date) as num_value\nfrom\nproject_imp_table\nwhere\ncompleted_date is not null\ngroup by\n1\n, 2\n, 3\n, 4\n, 5\nunion\nselect distinct\ncompleted_date as date\n, country\n, 'service_offering' as sub_type\n, (\n  case\n    when service_offering_c is null\n      then 'untracked'\n    else service_offering_c\n  end\n)\nas sub_value\n, 'days_to_implement_projects_number' as data_type\n, count(distinct proserv_id) as num_value\nfrom\nproject_imp_table\nwhere\ncompleted_date is not null\ngroup by\n1\n, 2\n, 3\n, 4\n, 5\nunion\n--churn\nselect\ncase_effective_date as date\n-- set it to yesterday as only current record is needed\n, country\n, 'category' as sub_type\n, (\ncase\n  when category_c is null\n    then 'untracked'\n  else category_c\nend\n)\nas sub_value\n, 'churn' as data_type\n, count(distinct case_number) as num_value\nfrom\nchurn_table\nwhere\ncase_effective_date is not null\ngroup by\n1\n, 2\n, 3\n, 4\n, 5", "relation_name": "\"dev\".\"customer_support\".\"customer_support_project_key_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.998233Z", "completed_at": "2024-02-04T15:19:44.013121Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.022868Z", "completed_at": "2024-02-04T15:19:44.022881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04059624671936035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customer_support_ticket", "compiled": true, "compiled_code": "\n\nwith\n  product_mapping as (\n    select \n      po.product_family\n      , wo.product_line\n      , po.workstream\n      , po.hr_page as product\n      , po.product_owner\n      , case when po.payroll_integration = 'no' then false else true end as payroll_integration\n      , case \n          -- Billing was moved from General Settings sidebar\n          when po.sidebar = 'Billings' then 'hr_endpoint_general_settings__billing'\n    \n          -- To cater for the legacy tagging on Recruitment sidebar \n          when po.sidebar = 'Recruitment' and lower(po.sub_category) = 'ats' then 'hr_endpoint_recruitment__ats_'\n          when po.sidebar = 'Recruitment' and lower(po.sub_category) = 'job posting'\n            then 'hr_endpoint_recruitment__ats___post_to_job_board'\n          when po.sidebar = 'Recruitment' and lower(po.sub_category) = 'manage job board'\n            then 'hr_endpoint_recruitment__ats___manage_job_board_'\n          when po.sidebar = 'Recruitment' then 'hr_endpoint_recruitment__ats___' + lower(replace(po.sub_category, ' ', '_'))\n    \n          else 'hr_endpoint_' + lower(regexp_replace(replace(po.hr_page, '> ', '>'), '[^a-zA-Z0-9_&()>]+|[&()>]', '_')) \n        end as legacy_tag\n    \n      , 'employment_hero_hr_' + lower(regexp_replace(po.sidebar, '[^a-zA-Z0-9_&()]+|[&()]', '_')) as sidebar_tag\n      , lower(regexp_replace((po.sidebar + '_' + po.sub_category), '[^a-zA-Z0-9_&()]+|[&()]', '_')) as sub_category_tag\n      , lower(regexp_replace((po.sub_category + '_' + po.sub_sub_category), '[^a-zA-Z0-9_&()]+|[&()]', '_')) as sub_sub_category_tag\n      , coalesce(sub_sub_category_tag, sub_category_tag, sidebar_tag) as feature_tag\n    from\n      \"dev\".\"eh_product\".\"product_ownership\" as po\n      left join \"dev\".\"eh_product\".\"workstream_ownership\" as wo on\n        po.workstream = wo.workstream\n    order by\n      po.hr_page\n  )\n  , ticket_region as (\n    select\n      ticket_id\n      , ticket_region\n      , payroll_integration\n    from \n      (\n        select distinct\n          ticket.id as ticket_id, \"tag\"\n          , case\n              when ticket.custom_related_to_integration_true_if_checked_ and tt.\"tag\" ~* '(payroll|keypay|xero|myob|qbo)' then 'ANZ'\n              when ticket.custom_related_to_integration_true_if_checked_ and tt.\"tag\" ~* '(singapore|uk)' then 'SEA_UK'\n              else null\n            end as ticket_region\n          , case when ticket_region is null then 0 else 1 end as payroll_integration\n          , row_number() over(partition by ticket.id order by ticket_region) as rn\n        from\n          \"dev\".\"zendesk\".\"ticket\"\n          join \"dev\".\"zendesk\".\"ticket_tag\" as tt on\n            ticket.id = tt.ticket_id\n        where \n          ticket.status != 'deleted'\n      )\n    where rn = 1 \n  )\n  , ticket_tag as (\n    select\n      ticket_id\n      , feature_tag\n      , product_family\n      , product_line\n      , workstream\n      , product\n      , product_owner\n      , ticket_region\n    from\n      (\n        select distinct\n          ticket_tag.ticket_id\n          , case\n              when po.sub_sub_category_tag is not null then 3\n              when po.sub_category_tag is not null then 2\n              when po.sidebar_tag is not null then 1\n              else 0\n            end as ticket_level\n          , coalesce(po.sub_sub_category_tag, po.sub_category_tag, po.sidebar_tag, po.legacy_tag) as feature_tag\n          , po.product_family\n          , po.product_line\n          , po.workstream\n          , po.product\n          , po.product_owner\n          , tr.ticket_region\n          , row_number() over(partition by ticket_tag.ticket_id order by ticket_level desc) as rn\n        from \n          \"dev\".\"zendesk\".\"ticket_tag\"\n        left join ticket_region as tr on\n          ticket_tag.ticket_id = tr.ticket_id\n        left join product_mapping as po on\n           ( ticket_tag.\"tag\" = po.feature_tag\n              or ticket_tag.\"tag\" = po.legacy_tag )\n            and tr.payroll_integration = po.payroll_integration\n      )\n    where rn = 1 \n  )\nselect\n  t.id\n  , t.created_at\n  , t.updated_at\n  , t.subject\n  , t.priority\n  , t.status\n  , t.via_channel\n  , tfo_platform.name as platform\n  , tfo_type.name as type\n  , b.name as brand\n  , g.name as assignee_group\n  , r.name as requester\n  , r.email as requester_email\n  , tfo_requestor.name as requester_type\n  , a.name as assignee\n  , a.email as assignee_email\n  , o.name as zendesk_organisation\n  , tt.product\n  , tt.workstream\n  , tt.product_line\n  , tt.product_family\n  , tt.product_owner\n  , tt.ticket_region as region\n  , replace(nvl(theme_hr.name , theme_py.name), '::', ' > ') as theme\n  , o.custom_organisation_id::integer as hr_org_id\nfrom\n  \"dev\".\"zendesk\".\"ticket\" as t\n  join \"dev\".\"zendesk\".\"brand\" as b on\n    t.brand_id = b.id\n  left join zendesk.group as g on\n    t.group_id = g.id\n    and not g._fivetran_deleted\n  left join \"dev\".\"zendesk\".\"user\" as r on\n    t.requester_id = r.id\n  left join \"dev\".\"zendesk\".\"user\" as a on\n    t.assignee_id = a.id\n  left join \"dev\".\"zendesk\".\"organization\" as o on\n    t.organization_id = o.id\n  left join ticket_tag as tt on\n    t.id = tt.ticket_id\n  left join \"dev\".\"zendesk\".\"ticket_field_option\" as tfo_platform on\n    t.custom_product = tfo_platform.\"value\"\n  left join \"dev\".\"zendesk\".\"ticket_field_option\" as tfo_type on\n    coalesce(t.custom_enquiry_type_, t.custom_purpose_of_ticket) = tfo_type.\"value\"\n  left join \"dev\".\"zendesk\".\"ticket_field_option\" as tfo_requestor on\n    t.custom_end_user_type = tfo_requestor.\"value\"\n  left join \"dev\".\"zendesk\".\"ticket_field_option\" as theme_hr on\n    t.custom_specific_service_offering_hr_ = theme_hr.\"value\"\n  left join \"dev\".\"zendesk\".\"ticket_field_option\" as theme_py on\n    t.custom_specific_service_offering_payroll_ = theme_py.\"value\"\nwhere\n  not b._fivetran_deleted\n  and t.status != 'deleted'\norder by\n  t.created_at desc\n  , t.id", "relation_name": "\"dev\".\"customer_support\".\"ticket\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.025166Z", "completed_at": "2024-02-04T15:19:44.040105Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.050459Z", "completed_at": "2024-02-04T15:19:44.050473Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04540896415710449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customer_support_ticket_key_metrics", "compiled": true, "compiled_code": "with\n  ticket_master_table as (\n    select distinct\n      t.custom_country as country\n      , t.id as ticket_id\n      , g.name as group_name\n      , date(t.updated_at) updated_date\n      , t.custom_total_time_spent_sec_ / 60 as time_spent_min\n      , date(t.created_at) as created_at\n      , u.name as assignee\n      , tfh.value status\n    from\n      \"dev\".\"zendesk\".\"ticket\" t\n      inner join \"dev\".\"zendesk\".\"group\" g on\n        t.group_id = g.id\n        and g.name in (\n            'Support Partners AU'\n,'Support Partners NZ'\n,'Support Partners UK'\n,'Support Partners SEA'\n,'Support Swag AU'\n,'Support Swag NZ'\n,'Support Swag Partners NZ'\n,'Support Swag Partners AU'\n,'Support Swag UK'\n,'Support Swag Partners UK'\n,'Support Swag SEA'\n,'Support Swag Partners SEA'\n,'Support'\n,'Support HR AU'\n,'Support HR NZ'\n,'Support HR SEA'\n,'Support Payroll SEA'\n,'Support Payroll NZ'\n,'Support Payroll AU'\n,'Support Payroll Escalation'\n,'Support HR UK'\n,'Support Payroll UK'\n        )\n      left join \"dev\".\"zendesk\".\"ticket_field_history\" tfh on\n        t.id = tfh.ticket_id\n        and tfh.field_name ilike '%status%'\n      left join \"dev\".\"zendesk\".\"user\" as u on\n      t.assignee_id = u.id\n  where\n    t.via_channel != 'side_conversation'\n    and t.created_at >= '2019-01-01'\n  )\n  , dim_date as (\n    select distinct\n      DATEADD('day', -generated_number::int, current_date) as \"date\"\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3000\n    order by generated_number\n\n)\n  )\nselect distinct\n  cast(dim_date.date as date) date\n  , (case when avg_t.group_name is null then 'untracked' else avg_t.group_name end) as group_name\n  , (case \n          when avg_t.country = 'au' then 'Australia'\n          when avg_t.country = 'uk' then 'United Kingdom'\n          when avg_t.country = 'nz' then 'New Zealand' \n           when avg_t.country = 'my' then 'Malaysia' \n          when avg_t.country = 'sg' then 'Singapore'  \n          else 'untracked' end) as country\n  , sum(avg_t.ticket_count) total_tickets_assignees\n  , count (distinct avg_t.assignee) total_assignees\n  , (case when count(avg_t.assignee) >0 then sum(avg_t.ticket_count)/count (distinct avg_t.assignee) end) avg_ticket_per_agent \n  , sum(aht.total_tickets) total_tickets_time\n  , sum(aht.time_spent_min) as total_time_spent_min\n  , sum(aht.resolution_time_day) as total_resolution_time_day\nfrom\n  dim_date\n  -- avg tickets per agent\n  left join (\n    select\n      cast(created_at as date) as date\n      , group_name\n      , country\n      , assignee\n      , count(ticket_id) ticket_count\n    from\n      ticket_master_table\n    group by\n      1\n      , 2\n      , 3\n      , 4\n  )\n  avg_t on\n    avg_t.date = dim_date.date\n    -- avg handling time\n  left join (\n    select\n      updated_date as date\n      , group_name\n      , country\n      , sum(time_spent_min) time_spent_min\n      , sum(updated_date - created_at) resolution_time_day\n      , count( distinct ticket_id) total_tickets\n    from\n      ticket_master_table\n    where\n      status in (\n        'solved'\n      )\n      group by 1,2,3\n  )\n  aht on\n    dim_date.date = aht.date\n    and avg_t.country = aht.country\n    and avg_t.group_name = aht.group_name\ngroup by\n  1\n  , 2\n  , 3", "relation_name": "\"dev\".\"customer_support\".\"customer_support_ticket_key_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.032904Z", "completed_at": "2024-02-04T15:19:44.042790Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.059461Z", "completed_at": "2024-02-04T15:19:44.059476Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044605255126953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customer_support_ticket_status_daily", "compiled": true, "compiled_code": "with\n  dates as (\n    select distinct\n      DATEADD('day', -generated_number::int, current_date) as \"date\"\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3000\n    order by generated_number\n\n)\n  )\n  , ticket_status_history as (\n    select\n      th.ticket_id\n      , t.custom_country as country\n      , g.name as group_name\n      , th.updated::date as agg_date\n      , \"value\"\n      , row_number() over(partition by th.ticket_id, th.updated::date order by updated desc) as rn\n    from\n      \"dev\".\"zendesk\".\"ticket_field_history\" th\n      inner join \"dev\".\"zendesk\".\"ticket\" t on\n        th.ticket_id = t.id\n        and t.created_at >= '2019-01-01'\n        and t.via_channel != 'side_conversation'\n      inner join \"dev\".\"zendesk\".\"group\" g on\n        t.group_id = g.id\n        and g.name in (\n         'Support Partners AU'\n,'Support Partners NZ'\n,'Support Partners UK'\n,'Support Partners SEA'\n,'Support Swag AU'\n,'Support Swag NZ'\n,'Support Swag Partners NZ'\n,'Support Swag Partners AU'\n,'Support Swag UK'\n,'Support Swag Partners UK'\n,'Support Swag SEA'\n,'Support Swag Partners SEA'\n,'Support'\n,'Support HR AU'\n,'Support HR NZ'\n,'Support HR SEA'\n,'Support Payroll SEA'\n,'Support Payroll NZ'\n,'Support Payroll AU'\n,'Support Payroll Escalation'\n,'Support HR UK'\n,'Support Payroll UK'\n        )\n    where\n      th.field_name = 'status'\n  )\n  , min_max_ticket as (\n    select\n      ticket_id\n      , min(agg_date)\n    from\n      ticket_status_history\n    group by\n      1\n  )\n  , ticket_over_time_w_status as (\n    select\n      *\n      , last_value(country ignore nulls) over(partition by ticket_id order by date rows unbounded preceding) as country_c\n      , last_value(group_name ignore nulls) over(partition by ticket_id order by date rows unbounded preceding) as group_name_c \n      , last_value(value ignore nulls) over(partition by ticket_id order by date rows unbounded preceding) as status\n    from\n      (\n        select\n          mmt.ticket_id\n          , d.*\n          , tsh.value\n          , tsh.country\n          , tsh.group_name\n        from\n          dates d\n          join min_max_ticket mmt on\n            d.date >= mmt.min\n            and d.date <= current_date\n          left join ticket_status_history tsh on\n            d.date = agg_date\n            and mmt.ticket_id = tsh.ticket_id\n            and rn = 1\n        order by\n          1 asc\n      )\n  )\nselect\n  cast(date as date) date\n  , (\n    case\n      when country_c is null\n        then 'untracked'\n      else country_c\n    end\n  )\n  as country\n  , (\n    case\n      when group_name_c is null\n        then 'untracked'\n      else group_name_c\n    end\n  )\n  as group_name\n  , count(\n    case\n      when status = 'open'\n        then ticket_id\n      else null\n    end\n  )\n  as open_tickets\n  , count(\n    case\n      when status = 'closed'\n        then ticket_id\n      else null\n    end\n  )\n  as closed_tickets\n  , count(\n    case\n      when status = 'hold'\n        then ticket_id\n      else null\n    end\n  )\n  as hold_tickets\n  , count(\n    case\n      when status = 'solved'\n        then ticket_id\n      else null\n    end\n  )\n  as solved_tickets\n  , count(\n    case\n      when status = 'new'\n        then ticket_id\n      else null\n    end\n  )\n  as new_tickets\n  , count(\n    case\n      when status = 'pending'\n        then ticket_id\n      else null\n    end\n  )\n  as pending_tickets\n  , count(\n    case\n      when status = 'deleted'\n        then ticket_id\n      else null\n    end\n  )\n  as deleted_tickets\n  , count(\n    case\n      when status is null\n        then ticket_id\n      else null\n    end\n  )\n  as null_tickets\nfrom\n  ticket_over_time_w_status\nwhere\n  date >= cast('2019-01-01' as date)\ngroup by\n  1\n  , 2\n  , 3\norder by\n  date desc", "relation_name": "\"dev\".\"customer_support\".\"customer_support_ticket_status_daily\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.051605Z", "completed_at": "2024-02-04T15:19:44.067725Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.078028Z", "completed_at": "2024-02-04T15:19:44.078045Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05281805992126465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customers_int_events", "compiled": true, "compiled_code": "\n\nwith\n  all_events as (\n    select\n        e._fivetran_id as message_id\n        , e.time as timestamp\n        , e.name\n        , os\n        , device  \n        , browser\n        , screen_width\n        , screen_height\n        , screen_dpi\n        , app_version_string\n        , json_extract_path_text(properties, 'module') as module\n        , json_extract_path_text(properties, 'sub_module') as sub_module\n        , coalesce(\n            (case when user_id = '' then null else user_id end), \n            json_extract_path_text(properties, 'user_id')\n          ) as user_id\n        , json_extract_path_text(properties, 'user_uuid') as user_uuid\n        , json_extract_path_text(properties, 'eh_user_type') as eh_user_type\n        , json_extract_path_text(properties, 'login_provider') as login_provider\n        , json_extract_path_text(properties, 'email') as email\n        , json_extract_path_text(properties, 'member_id') as member_id\n        , json_extract_path_text(properties, 'member_uuid') as member_uuid\n        , json_extract_path_text(properties, 'organisation_id') as organisation_id\n        , json_extract_path_text(properties, 'user_type') as user_type\n        , json_extract_path_text(properties, 'user_email') as user_email\n        , json_extract_path_text(properties, 'kp_employee_id') as kp_employee_id\n        , json_extract_path_text(properties, 'kp_business_id') as kp_business_id\n        , json_extract_path_text(properties, 'kp_user_type') as kp_user_type\n        , json_extract_path_text(properties, 'platform') as platform\n        , json_extract_path_text(properties, 'module')    as shopnow_offer_module\n        , json_extract_path_text(properties, 'offerType') as shopnow_offer_type\n        , json_extract_path_text(properties, 'category')  as shopnow_offer_category\n        , json_extract_path_text(properties, 'utm_source') as utm_source\n        , json_extract_path_text(properties, 'utm_medium') as utm_medium\n        , json_extract_path_text(properties, 'utm_campaign') as utm_campaign\n        , json_extract_path_text(properties, 'utm_content') as utm_content\n        , json_extract_path_text(properties, 'utm_term') as utm_term\n    from\n        \"dev\".\"mp\".\"event\" e\n    where        \n        e.name not like '%$%'        \n        -- For non prod environments, only pull the last 2 days of data.\n        \n\n  )\n\nselect \n* \nfrom all_events e\n       \n     where e.timestamp > (SELECT MAX(ie.timestamp) FROM \"dev\".\"customers\".\"int_events\" ie)\n", "relation_name": "\"dev\".\"customers\".\"int_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:43.917814Z", "completed_at": "2024-02-04T15:19:44.062500Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.071618Z", "completed_at": "2024-02-04T15:19:44.071631Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21856474876403809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.checkly_all_checks", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg_checkly\".\"all_checks\"\n         where date_trunc('day', _transaction_date) = '2024-02-04'", "relation_name": "\"dev\".\"checkly\".\"all_checks\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.080895Z", "completed_at": "2024-02-04T15:19:44.103112Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.110568Z", "completed_at": "2024-02-04T15:19:44.110585Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05118513107299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customers_zuora_account_product", "compiled": true, "compiled_code": "\n\nwith snapshot_billed_employees as (\nselect\n  o.id as organisation_id\n  , count(*) as billed_users\n  , count(case when independent_contractor then 1 else null end) as contractors\n  from\n  \"dev\".\"postgres_public\".\"billed_employees\" be\n  join \"dev\".\"postgres_public\".\"billable_employee_snapshots\" bes on\n    be.billable_employee_snapshot_id = bes.id\n  join \"dev\".\"postgres_public\".\"organisations\" as o on\n    o.id = bes.organisation_id\nwhere\n  not be._fivetran_deleted\n  and not bes._fivetran_deleted\n  and not o._fivetran_deleted\n  and not o.is_shadow_data\n  and snapshot_date < DATE_TRUNC('month', getdate()) and snapshot_date > dateadd(month, -1, DATE_TRUNC('month', getdate()))  \n  group by 1\n  )\n\n,  orgs_per_zuora_subscription as (\n    select\n      s.account_id as zuora_account_id\n      , s.id as zuora_subscription_id\n      , count(distinct zs.organisation_id) as num_of_orgs\n      , sum(sbe.billed_users) as billed_users\n      , sum(sbe.contractors) as contractors\n    from \n      \"dev\".\"postgres_public\".\"zuora_subscriptions\" zs \n      join \"dev\".\"zuora\".\"subscription\" s on zs.zuora_subscription_number = s.name\n      left join \n          (\n          select *\n            from \"dev\".\"postgres_public\".\"agreements\"\n            where id in (\n              select\n                FIRST_VALUE(id) over (\n                  partition by \n                    organisation_id\n                    order by created_at desc \n                    rows between unbounded\n                    preceding and current row\n                 )\n              from\n                \"dev\".\"postgres_public\".\"agreements\"\n              where not _fivetran_deleted\n            )\n        )a\n        on zs.organisation_id = a.organisation_id\n      --left join [sub_plan_grouping as spg] on a.subscription_plan_id = spg.id\n      left join snapshot_billed_employees sbe on zs.organisation_id = sbe.organisation_id\n    where \n      not s._fivetran_deleted\n      and not zs._fivetran_deleted\n      --and pricing_tier !~ 'free'\n      and a.subscription_plan_id not in (\n        4, -- Startup Premium\n        7,\t-- Free (30 days)\n        11,\t-- Free\n        17, -- Demo\n        43, -- CHURN (FREE)\n        52, -- Implementations Free\n        53, -- Startup Standard\n        55, -- ANZ Free\n        144, -- International Free\n        145, -- Premium Trial\n        161, -- SUSPENDED (FREE) \n        162 -- SEA free\n      )\n    group by 1,2\n  )\n\n  , account_current_product as (\n    select\n    a.id as zuora_account_id\n    , a.account_number as zuora_account_num\n    , a.name as zuora_account_name\n    , s.id as subscription_id\n    , s.name as subscription_num\n    , a.crm_id as salesforce_id\n--     , a.batch\n    , p.id as product_id\n    , p.name as product_name\n    , prp.name  as product_rate_plan\n    , prp.id  as product_rate_plan_id\n    , rpc.mrr as product_mrr\n    , rpc.quantity as contracted_users\n    , ozs.num_of_orgs\n--     , rpc.effective_start_date\n--     , rpc.effective_end_date\n--     , rpc.name as charge_name\n  from\n    \"dev\".\"zuora\".\"account\" a\n    join \"dev\".\"zuora\".\"subscription\" s on\n        a.id = s.account_id \n    join \"dev\".\"zuora\".\"rate_plan_charge\" rpc on\n      rpc.subscription_id = s.id\n    join \"dev\".\"zuora\".\"product_rate_plan\" prp on\n      rpc.product_rate_plan_id = prp.id\n    join \"dev\".\"zuora\".\"product\" p on\n      p.id = prp.product_id\n    left join orgs_per_zuora_subscription ozs on\n      s.id = ozs.zuora_subscription_id\n  where\n    not a._fivetran_deleted\n    and not s._fivetran_deleted\n    and not p._fivetran_deleted\n    and not prp._fivetran_deleted\n    and not rpc._fivetran_deleted\n    and a.batch != 'Batch50'\n    and s.status != 'Expired'\n    and s.status != 'Cancelled'\n--     and p.name in ('EH HR Software','EH Payroll Software')\n    and rpc.name in ('Contracted Users','Contracted Employees')\n--     and prp.locale_c = 'AU'\n    and p.name not in ('Services', 'Discounts')\n    and a.geo_code_c = 'AU'\n    and rpc.effective_start_date <= getdate()\n    and (rpc.effective_end_date is null or rpc.effective_end_date > getdate())\n  )\n\n  , account_latest_invoice as (\n    -- to get the latest billed users per account, check latest invoice\n    -- recent accounts or accounts that changed tiers will not have recent invoices relating to their product so just use the contracted users calculated from previous CTE (coalese). same story with mrr\n    select * \n    from \n      (\n        select \n          invoice.account_id as zuora_account_id\n          , acp.zuora_account_num\n          , acp.zuora_account_name\n          , invoice_item.subscription_id\n          , acp.product_name\n          , acp.product_rate_plan_id\n          , acp.product_rate_plan\n          , invoice.invoice_number\n          , invoice_item.charge_name\n          , invoice_item.quantity as billed_users\n          , invoice_item.charge_amount\n--           , (invoice_item.unit_price + invoice_item.tax_amount) as price_incl_tax\n--           , invoice_item.charge_amount + invoice_item.tax_amount as charge_amount_incl_tax\n          , invoice.posted_date\n--           , rank() over(partition by invoice.account_id order by invoice.posted_date desc) rk\n          , rank() over(partition by invoice.account_id order by date_trunc('month', invoice.posted_date) desc) rk\n        from \"dev\".\"zuora\".\"invoice\"\n          join \"dev\".\"zuora\".\"invoice_item\" on invoice.id = invoice_item.invoice_id\n          join account_current_product acp on invoice_item.product_rate_plan_id = acp.product_rate_plan_id and acp.zuora_account_id = invoice.account_id\n        \n        where \n          not invoice._fivetran_deleted                       \n          and not invoice_item._fivetran_deleted\n          and invoice.status = 'Posted'              \n          and invoice.posted_date <= getdate()            \n          and invoice_item.charge_amount > 0\n          and charge_name not ilike '%sms%'\n      )\n    where rk = 1\n  )\n\n, global_teams as (     \n    select \n      za.account_number as zuora_account_num                  \n      , sp.name as product\n      , sum(so.opportunity_employees_c) as global_teams_opp_users\n    from \"dev\".\"zuora\".\"account\" za \n      join \"dev\".\"salesforce\".\"account\" sa on za.crm_id = sa.id\n      join \"dev\".\"salesforce\".\"opportunity\" so on so.account_id = sa.id\n      left join \"dev\".\"salesforce\".\"opportunity_line_item\" ol on so.id = ol.opportunity_id and not ol.is_deleted\n      left join \"dev\".\"salesforce\".\"product_2\" sp on ol.product_2_id = sp.id and not sp.is_deleted and sp.revenue_type_c != 'One-Off'\n    where not za._fivetran_deleted \n      and not sa.is_deleted\n      and not so.is_deleted\n      and not ol.is_deleted\n      and not sp.is_deleted\n      and so.is_closed \n      and so.stage_name = 'Won' \n      and sp.name ilike '%Global Teams%'\n  group by 1,2\n      )\n\n  , current_account_details as (\n    select\n      a.zuora_account_id\n      , a.zuora_account_num\n      , a.salesforce_id\n      , a.zuora_account_name \n      , coalesce(sa.industry_primary_c, 'Unknown') as salesforce_industry\n      , a.product      \n      , a.num_of_orgs\n      , a.contracted_mrr\n      , a.contracted_users\n      , coalesce(sum(i.billed_users), a.contracted_users) as recent_billed_users\n      , coalesce(sum(i.charge_amount), a.contracted_mrr) as current_mrr        \n    from\n      (\n        select \n          zuora_account_id\n          , zuora_account_num\n          , zuora_account_name\n          , salesforce_id\n          , product_rate_plan_id\n          , product_name\n          , (\n            case\n              when product_name = 'EH HR Software' and product_rate_plan ilike '%Platinum%'\n                then 'HR Platinum'\n              when product_name = 'EH HR Software' and product_rate_plan ilike '%Standard%'\n                then 'HR Standard'\n              when product_name = 'EH HR Software' and product_rate_plan ilike '%Premium%'\n                then 'HR Premium'\n              when product_name = 'EH HR Software' and product_rate_plan ilike '%Legacy%'\n                then 'HR Legacy'\n              when product_name = 'EH Payroll Software' and product_rate_plan ilike '%Standard%'\n                then 'Payroll Standard'\n              when product_name = 'EH Payroll Software' and product_rate_plan ilike '%Premium%'\n                then 'Payroll Premium'\n              else replace(product_rate_plan,' (Monthly)', '')\n            end\n            ) as product\n          , sum(product_mrr) as contracted_mrr\n          , sum(contracted_users) as contracted_users\n          , sum(num_of_orgs) as num_of_orgs\n        from account_current_product\n        group by 1,2,3,4,5,6,7\n      ) as a      \n      left join account_latest_invoice i\n        on a.zuora_account_id = i.zuora_account_id and a.product_rate_plan_id = i.product_rate_plan_id\n      left join \"dev\".\"salesforce\".\"account\" sa \n        on a.salesforce_id = sa.id\n    group by 1,2,3,4,5,6,7,8,9\n  )\n\n-- TBD: may be billed elsewhere?\n, accounts_no_users_and_mrr as (\n    -- dead in the water accounts, still having active zuora subscriptions and still recieving invoices but have zero usage (users)\n    -- needs to be excluded from current total and potential calculations\n    select \n      zuora_account_num\n    from\n      (select\n        zuora_account_num\n        ,sum(contracted_users) as contracted_users\n        ,sum(contracted_mrr) as contracted_mrr\n        ,sum(recent_billed_users) as recent_billed_users\n        ,sum(current_mrr) as current_mrr\n      from \n      current_account_details\n      group by 1)\n    where \n      contracted_users= 0 \n      and contracted_mrr= 0 \n      and recent_billed_users=0 \n      and current_mrr is null\n  )\n\n  select \n      cad.zuora_account_id\n      , cad.zuora_account_num\n      , cad.salesforce_id\n      , cad.zuora_account_name\n      , cad.salesforce_industry\n      , agt.GT1_opp_users\n      , agt.GT2_opp_users\n      , agt.GT4_opp_users\n\n      , sum(case when cad.product = 'HR Legacy' then cad.recent_billed_users end) hr_legacy_recent_billed_users\n      , sum(case when cad.product = 'HR Legacy' then ozs.eh_contractors end) hr_legacy_contractors\n--       , sum(case when cad.product = 'HR Legacy' then cad.num_of_orgs end) hr_legacy_num_of_orgs      \n      , sum(case when cad.product = 'HR Standard' then cad.recent_billed_users end) hr_standard_recent_billed_users\n      , sum(case when cad.product = 'HR Standard' then ozs.eh_contractors end) hr_standard_contractors\n--       , sum(case when cad.product = 'HR Standard' then cad.num_of_orgs end) hr_standard_num_of_orgs      \n      , sum(case when cad.product = 'HR Premium' then cad.recent_billed_users end) hr_premium_recent_billed_users\n      , sum(case when cad.product = 'HR Premium' then ozs.eh_contractors end) hr_premium_contractors\n--       , sum(case when cad.product = 'HR Premium' then cad.num_of_orgs end) hr_premium_num_of_orgs    \n      , sum(case when cad.product = 'HR Platinum' then cad.recent_billed_users end) hr_platinum_recent_billed_users\n      , sum(case when cad.product = 'HR Platinum' then ozs.eh_contractors end) hr_platinum_contractors\n--       , sum(case when cad.product = 'HR Platinum' then cad.num_of_orgs end) hr_platinum_num_of_orgs      \n      , sum(case when cad.product = 'Payroll Standard' then cad.recent_billed_users end) payroll_standard_recent_billed_users\n--       , sum(case when cad.product = 'Payroll Standard' then cad.num_of_orgs end) payroll_standard_num_of_orgs     \n      , sum(case when cad.product = 'Payroll Premium' then cad.recent_billed_users end) payroll_premium_recent_billed_users\n--       , sum(case when cad.product = 'Payroll Premium' then cad.num_of_orgs end) payroll_premium_num_of_orgs      \n      , sum(case when cad.product = 'EAP Standard' then cad.recent_billed_users end) eap_standard_recent_billed_users\n--       , sum(case when cad.product = 'EAP Standard' then cad.num_of_orgs end) eap_standard_num_of_orgs      \n      , sum(case when cad.product = 'EAP Premium' then cad.recent_billed_users end) eap_premium_recent_billed_users\n--       , sum(case when cad.product = 'EAP Premium' then cad.num_of_orgs end) eap_premium_num_of_orgs      \n      , sum(case when cad.product = 'HR Advisor' then cad.recent_billed_users end) hr_advisor_recent_billed_users\n--       , sum(case when cad.product = 'HR Advisor' then cad.num_of_orgs end) hr_advisor_num_of_orgs    \n      , sum(case when cad.product = 'Payroll Advisor' then cad.recent_billed_users end) payroll_advisor_recent_billed_users\n--       , sum(case when cad.product = 'Payroll Advisor' then cad.num_of_orgs end) payroll_advisor_num_of_orgs     \n      , sum(case when cad.product = 'Phone Technical Support' then cad.recent_billed_users end) phone_technical_support_recent_billed_users\n--       , sum(case when cad.product = 'Phone Technical Support' then cad.num_of_orgs end) phone_technical_support_num_of_orgs     \n      , sum(case when cad.product = 'Ultimate Support' then cad.recent_billed_users end) ultimate_support_recent_billed_users\n--       , sum(case when cad.product = 'Ultimate Support' then cad.num_of_orgs end) ultimate_support_num_of_orgs     \n      , sum(case when cad.product = 'LMS Plus' then cad.recent_billed_users end) lms_plus_recent_billed_users\n--       , sum(case when cad.product = 'LMS Plus' then num_of_orgs end) lms_plus_num_of_orgs\n\n\n      , sum(case when cad.product = 'HR Legacy' then cad.current_mrr end) hr_legacy_current_mrr\n      , sum(case when cad.product = 'HR Standard' then cad.current_mrr end) hr_standard_current_mrr\n      , sum(case when cad.product = 'HR Premium' then cad.current_mrr end) hr_premium_current_mrr\n      , sum(case when cad.product = 'HR Platinum' then cad.current_mrr end) hr_platinum_current_mrr\n      , sum(case when cad.product = 'Payroll Standard' then cad.current_mrr end) payroll_standard_current_mrr\n      , sum(case when cad.product = 'Payroll Premium' then cad.current_mrr end) payroll_premium_current_mrr\n      , sum(case when cad.product = 'EAP Standard' then cad.current_mrr end) eap_standard_current_mrr\n      , sum(case when cad.product = 'EAP Premium' then cad.current_mrr end) eap_premium_current_mrr\n      , sum(case when cad.product = 'HR Advisor' then cad.current_mrr end) hr_advisor_current_mrr\n      , sum(case when cad.product = 'Payroll Advisor' then cad.current_mrr end) payroll_advisor_current_mrr\n      , sum(case when cad.product = 'Phone Technical Support' then cad.current_mrr end) phone_technical_support_current_mrr \n      , sum(case when cad.product = 'Ultimate Support' then cad.current_mrr end) ultimate_support_current_mrr\n      , sum(case when cad.product = 'LMS Plus' then cad.current_mrr end) lms_plus_current_mrr  \n    from \n    current_account_details cad\n    left join (\n      select zuora_account_id, sum(contractors) as eh_contractors \n      from orgs_per_zuora_subscription group by 1) ozs on ozs.zuora_account_id = cad.zuora_account_id\n    left join (\n      select zuora_account_num\n        , sum(case when gt.product = 'Global Teams (PEO) - Tier 1' then gt.global_teams_opp_users end) GT1_opp_users\n        , sum(case when gt.product = 'Global Teams (PEO) - Tier 2' then gt.global_teams_opp_users end) GT2_opp_users\n        , sum(case when gt.product = 'Global Teams (PEO) - Tier 4' then gt.global_teams_opp_users end) GT4_opp_users\n      from global_teams gt group by 1)agt on agt.zuora_account_num = cad.zuora_account_num\n--where cad.zuora_account_num not in (select zuora_account_num from accounts_no_users_and_mrr\n     group by 1,2,3,4,5,6,7,8", "relation_name": "\"dev\".\"customers\".\"zuora_account_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.095817Z", "completed_at": "2024-02-04T15:19:44.108141Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.122672Z", "completed_at": "2024-02-04T15:19:44.122687Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.052767276763916016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_benefits_pillar_blacklist_organisations", "compiled": true, "compiled_code": "\n\n-- The blacklisted orgs are currently stored in ONE target group condition field: tg.conditions \nselect distinct o.id as organisation_id\nfrom \"dev\".\"feature_flag_public\".\"features\" f\n    join \"dev\".\"feature_flag_public\".\"features_target_groups\" ftg on ftg.feature_id = f.id \n    join \"dev\".\"feature_flag_public\".\"target_groups\" tg on ftg.target_group_id = tg.id \n    join \"dev\".\"postgres_public\".\"organisations\" o on tg.target_type = 'organisation' and tg.conditions like '%:' || o.id || '.%' \n    where f.code = 'eben_benefits_pillar_black_list'\n    and not f._fivetran_deleted\n    and not ftg._fivetran_deleted\n    and not tg._fivetran_deleted\n    and not o._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.114631Z", "completed_at": "2024-02-04T15:19:44.129492Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.153633Z", "completed_at": "2024-02-04T15:19:44.153650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.058084726333618164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_heroshop_transactions_order_details", "compiled": true, "compiled_code": "\n\nselect\n  t.id as transactions_id,\n  o.id as order_id,\n  od.id as order_details_id,\n  od.created_at,\n  m.id as member_id,\n  m.user_id as user_id,\n  m.organisation_id,\n  p.name,\n  p.country,\n  pc.name as product_category,\n  pv.variant_code,\n  od.status as order_status,\n  od.quantity,\n  od.price,\n  od.price*quantity as total_price,\n  od.freight_cost,\n  od.discount,\n  o.service_fee,\n  od.billable_amount,\n  case \n    when t.payment_method = 1 then 'Instapay'\n    when t.payment_method = 2 then 'HeroDollars'\n    else 'Credit Card' end\n  as payment_method,\n  t.transaction_fee,\n  t.amount,\n  t.transaction_fee + t.amount as amount_paid,\n  od.discount-od.transaction_fee as savings,\n  t.status as transaction_status\nfrom \n  \"dev\".\"heroshop_db_public\".\"order_details\" od\n  join \"dev\".\"heroshop_db_public\".\"product_variants\" pv on pv.id = od.product_variant_id\n  join \"dev\".\"heroshop_db_public\".\"orders\" o on od.order_id = o.id\n  join \"dev\".\"heroshop_db_public\".\"products\" p on p.id = pv.product_id\n  join \"dev\".\"postgres_public\".\"members\" m on \n    m.uuid = o.member_id\n    and not m.is_shadow_data \n    and not m._fivetran_deleted\n  join \"dev\".\"postgres_public\".\"organisations\" org on \n    m.organisation_id = org.id\n    and not org._fivetran_deleted\n  join \"dev\".\"heroshop_db_public\".\"transactions\" t on o.id = t.order_id\n  join \"dev\".\"heroshop_db_public\".\"product_categories\" pc on p.product_category_id = pc.id", "relation_name": "\"dev\".\"ebenefits\".\"_v_heroshop_transactions_order_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.135212Z", "completed_at": "2024-02-04T15:19:44.152408Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.166152Z", "completed_at": "2024-02-04T15:19:44.166167Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04313206672668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_instapay_blacklist_organisations", "compiled": true, "compiled_code": "\n\nselect distinct target_id as organisation_uuid\nfrom \"dev\".\"feature_flag_public\".\"features\" as f\njoin \"dev\".\"feature_flag_public\".\"features_target_objects\" as fto on f.id = fto.feature_id\njoin \"dev\".\"feature_flag_public\".\"target_objects\" as tob on fto.target_object_id = tob.id\njoin \"dev\".\"postgres_public\".\"organisations\" o on target_id = o.uuid \nwhere code in ('e2p0_instapay_refused', 'instapay_refused_by_swag', 'instapay_refused_employment_innovations')\n    and not f._fivetran_deleted\n    and not fto._fivetran_deleted\n    and not tob._fivetran_deleted\n    and not o._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_instapay_blacklist_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.146049Z", "completed_at": "2024-02-04T15:19:44.159884Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.168495Z", "completed_at": "2024-02-04T15:19:44.168508Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04358410835266113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_international_benefits_refused_organisations", "compiled": true, "compiled_code": "\n\nselect distinct tob.target_id as organisation_uuid\nfrom \"dev\".\"feature_flag_public\".\"features\" as f\njoin \"dev\".\"feature_flag_public\".\"features_target_objects\" as fto on f.id = fto.feature_id\njoin \"dev\".\"feature_flag_public\".\"target_objects\" as tob on fto.target_object_id = tob.id\njoin \"dev\".\"postgres_public\".\"organisations\" o on tob.target_id = o.uuid\nwhere code  = 'international_benefits_refused'\n    and not f._fivetran_deleted\n    and not fto._fivetran_deleted\n    and not tob._fivetran_deleted\n    and not o._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_international_benefits_refused_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.154919Z", "completed_at": "2024-02-04T15:19:44.164940Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.175453Z", "completed_at": "2024-02-04T15:19:44.175466Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03709864616394043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_money_pillar_blacklist_organisations", "compiled": true, "compiled_code": "\n\n-- The blacklisted orgs are currently stored in ONE target group condition field: tg.conditions \n        select distinct o.id as organisation_id                        \n        from \"dev\".\"feature_flag_public\".\"features\" f\n        join \"dev\".\"feature_flag_public\".\"features_target_groups\" ftg on ftg.feature_id = f.id \n        join \"dev\".\"feature_flag_public\".\"target_groups\" tg on ftg.target_group_id = tg.id \n        join \"dev\".\"postgres_public\".\"organisations\" o on tg.target_type = 'organisation' and tg.conditions like '%:' || o.id || '.%' \n        where f.code = 'eben_money_pillar_black_list'\n            and not f._fivetran_deleted\n            and not ftg._fivetran_deleted\n            and not tg._fivetran_deleted\n            and not o._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.183319Z", "completed_at": "2024-02-04T15:19:44.199199Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.214313Z", "completed_at": "2024-02-04T15:19:44.214328Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.045636653900146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_user_mapping", "compiled": true, "compiled_code": "\n\nselect distinct\n    (case when json_extract_path_text(detail, 'ehUUId')= '' then null else json_extract_path_text(detail, 'ehUUId') end) as eh_user_uuid\n    , (case when json_extract_path_text(detail, 'kpId')= '' then null else json_extract_path_text(detail, 'kpId') end) as kp_id\n    , (case when json_extract_path_text(detail, 'eBenUUId')= '' then null else json_extract_path_text(detail, 'eBenUUId') end) as eben_uuid\n    , (case when json_extract_path_text(detail, 'emailAddress')= '' then null else json_extract_path_text(detail, 'emailAddress') end) as email\nfrom \n    \"dev\".\"ebenefits\".\"user_created\"", "relation_name": "\"dev\".\"ebenefits\".\"_v_user_mapping\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.194110Z", "completed_at": "2024-02-04T15:19:44.215449Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.224066Z", "completed_at": "2024-02-04T15:19:44.224080Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.047516822814941406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_worklife_refused_organisations", "compiled": true, "compiled_code": "\n\nselect distinct tob.target_id as organisation_uuid\nfrom \"dev\".\"feature_flag_public\".\"features\" as f\njoin \"dev\".\"feature_flag_public\".\"features_target_objects\" as fto on f.id = fto.feature_id\njoin \"dev\".\"feature_flag_public\".\"target_objects\" as tob on fto.target_object_id = tob.id\njoin \"dev\".\"postgres_public\".\"organisations\" o on tob.target_id = o.uuid\nwhere code  = 'e2p0_worklife_refused'\n    and not f._fivetran_deleted\n    and not fto._fivetran_deleted\n    and not tob._fivetran_deleted\n    and not o._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_worklife_refused_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.201692Z", "completed_at": "2024-02-04T15:19:44.216645Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.225506Z", "completed_at": "2024-02-04T15:19:44.225518Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04323625564575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_wallet_customers", "compiled": true, "compiled_code": "\n\nselect\n    id\n    , cc.time::timestamp as created_at\n    , (case when json_extract_path_text(detail, 'accountHayId')= '' then null else json_extract_path_text(detail, 'accountHayId') end) as account_hay_id\n    , (case when json_extract_path_text(detail, 'hayCustomerId')= '' then null else json_extract_path_text(detail, 'hayCustomerId') end) as hay_customer_id\n    , (case when json_extract_path_text(detail, 'userId')= '' then null else json_extract_path_text(detail, 'userId') end) as eben_uuid\nfrom\n    \"dev\".\"ebenefits\".\"customer_created\" as cc", "relation_name": "\"dev\".\"ebenefits\".\"wallet_customers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.208121Z", "completed_at": "2024-02-04T15:19:44.221731Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.232290Z", "completed_at": "2024-02-04T15:19:44.232303Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044698238372802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.eh_internal_engineering_salary_range", "compiled": true, "compiled_code": "with\n    eh_eng_salary_data_to_add as (\n        select\n            occupation\n            , country\n            , seniority\n            , employment_type\n            , residential_state\n            , industry\n            , null::bigint as samples\n            , null::bigint as orgs\n            , round(0.85*p_25)::int as p10\n            , p_25 as p25\n            , p_50 as p50\n            , p_75 as p75\n            , round(1.05*p_75)::int as p90\n            , 'high'::varchar(256) as confidence_level\n        from \n            \"dev\".\"salary_guide\".\"eh_engineering_salary_range\"\n        where\n            country != 'AU'\n            -- decision is to use the Salary Guide API data for AU so ignore the next condition\n            -- or (country = 'AU' and seniority = 'manager' and occupation not in ('Software Developer - Machine Learning', 'Software Developer - Cloud'))\n    )\n\nselect \n    md5(cast(coalesce(cast(occupation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(seniority as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(employment_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(residential_state as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(industry as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id\n    , * \nfrom eh_eng_salary_data_to_add", "relation_name": "\"dev\".\"salary_guide\".\"eh_internal_engineering_salary_range\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.238743Z", "completed_at": "2024-02-04T15:19:44.251385Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.266894Z", "completed_at": "2024-02-04T15:19:44.266908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04683947563171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.eh_internal_non_engineering_salary_range", "compiled": true, "compiled_code": "with\n  internal_employees as (\n    select\n        _row\n        , job_title\n        , lower(seniority) as seniority\n        , country\n        , num_employees\n        , similar_job_title\n        , have_salary_range\n        , better_match_job_title_with_salary_range\n        , eng_band_ref\n        , aon_job_code\n        , standard_job_title\n        , coalesce(p_10_salary, round(0.85*p_25_salary))::bigint as p10\n        , p_25_salary::bigint as p25\n        , p_50_salary::bigint as p50\n        , p_75_salary::bigint as p75\n        , coalesce(p_90_salary, round(1.05*p_75_salary))::bigint as p90\n        , 'all'::varchar(256) as employment_type\n        , 'all'::varchar(256) as residential_state\n        , 'all'::varchar(256) as industry\n        , null::bigint as samples\n        , null::bigint as orgs\n        , 'high'::varchar(256) as confidence_level\n    from \"dev\".\"salary_guide\".\"eh_internal_salary_range\"\n    where eng_band_ref is null -- covered in engineering salary range, ignore countries that are not in engineering salary banding list\n  )\n--   case 1: have salary range (AU) but no good matching job titles with salary range (need to take AON data)\n  , case1 as (\n    select distinct\n      standard_job_title as occupation\n      , country, seniority, employment_type, residential_state, industry, samples, orgs\n      , p10, p25, p50, p75, p90, confidence_level\n    from internal_employees\n    where \n      have_salary_range \n      and standard_job_title is not null\n  )\n  , case1_all_seniority as (\n    select \n      occupation, country, 'all' as seniority, employment_type, residential_state, industry\n      , samples, orgs, p10, p25, p50, p75, p90, confidence_level\n    from case1\n  )\n--   case 2: dont have salary range (AU) and no good matching job titles with salary range (need to take AON data)\n  , case2 as (\n    select distinct\n      similar_job_title as occupation\n      , country, seniority, employment_type, residential_state, industry, samples, orgs\n      , p10, p25, p50, p75, p90, confidence_level\n    from internal_employees\n    where \n      not have_salary_range\n      and country = 'AU'\n      and better_match_job_title_with_salary_range is null\n  )\n  , case2_all_seniority as (\n    select \n      occupation, country, 'all' as seniority, employment_type, residential_state, industry\n      , samples, orgs, p10, p25, p50, p75, p90, confidence_level\n    from case2\n  )\n--   case 3: dont have salary range (outside AU) so definately need AON data\n  , case3 as (\n    select distinct\n      coalesce(standard_job_title, better_match_job_title_with_salary_range, similar_job_title) as occupation\n      , country, seniority, employment_type, residential_state, industry, samples, orgs\n      , p10, p25, p50, p75, p90, confidence_level\n    from \n      internal_employees \n    where\n      country not in ('AU','TW','NL','KR','ID') -- no AON data for these countries (outside AU)\n      and p50!=1 -- no AON data for these roles\n  )\n  , case3_all_seniority as (\n    select \n      occupation, country, 'all' as seniority, employment_type, residential_state, industry\n      , samples, orgs, p10, p25, p50, p75, p90, confidence_level\n    from (\n      select *, row_number() over (partition by occupation, country order by seniority) as rn\n      from case3\n      )\n    where rn=1\n  )\n\nselect \n    md5(cast(coalesce(cast(occupation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(seniority as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(employment_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(residential_state as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(industry as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id\n    , * \nfrom (\n    select * from case1_all_seniority\n    union \n    select * from case1\n    union\n    select * from case2_all_seniority\n    union \n    select * from case2\n    union\n    select * from case3_all_seniority\n    union \n    select * from case3\n)", "relation_name": "\"dev\".\"salary_guide\".\"eh_internal_non_engineering_salary_range\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.260986Z", "completed_at": "2024-02-04T15:19:44.275877Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.284509Z", "completed_at": "2024-02-04T15:19:44.284523Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.042119503021240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_active_employees_by_organisations", "compiled": true, "compiled_code": "\n\nselect organisation_id\n, count(*) as active_employees\nfrom \"dev\".\"postgres_public\".\"members\" m\njoin \"dev\".\"postgres_public\".\"users\" u on m.user_id = u.id \nwhere  \n    u.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n    and not m.system_manager \n    and not m.system_user \n    and not m.independent_contractor    \n    and not m.is_shadow_data \n    and not u.is_shadow_data \n    and not m._fivetran_deleted\n    and not u._fivetran_deleted\n    and m.active\ngroup  by 1", "relation_name": "\"dev\".\"employment_hero\".\"_v_active_employees_by_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.255085Z", "completed_at": "2024-02-04T15:19:44.277105Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.286828Z", "completed_at": "2024-02-04T15:19:44.286843Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04632091522216797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_guides", "compiled": true, "compiled_code": "\n\nselect\n  og.id as organisation_guides_id\n  ,og.organisation_id\n  ,case \n    when state = 0 then 'not started' \n    when state = 2 then 'completed' \n  end as state\n  ,convert_timezone('Australia/Sydney', completed_at) as guide_completed_at\n  ,og.reward_extra_trial_days\n  ,og.guide_id\n  ,g.type as guide_type\n  ,g.name as guide_name\n  ,g.requirements as guide_requirements\nfrom\n  \"dev\".\"postgres_public\".\"organisations\" o\n  join \"dev\".\"postgres_public\".\"organisation_guides\" og on\n    o.id = og.organisation_id\n  join \"dev\".\"postgres_public\".\"guides\" g on\n    og.guide_id = g.id\nwhere\n  not og._fivetran_deleted\n  and not g._fivetran_deleted\n  and not o._fivetran_deleted\n  and not o.is_shadow_data\n  -- the below condition is because org id = 47711 has guides before organisation created date; one off\n  and (convert_timezone('Australia/Sydney', o.created_at) < guide_completed_at or guide_completed_at is null)", "relation_name": "\"dev\".\"employment_hero\".\"guides\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.268195Z", "completed_at": "2024-02-04T15:19:44.280835Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.290692Z", "completed_at": "2024-02-04T15:19:44.290706Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04793906211853027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_connected_payrolls", "compiled": true, "compiled_code": "\n\n     select * \n        from \"dev\".\"postgres_public\".\"external_payroll_auths\"\n        where\n        id in (\n            select\n                FIRST_VALUE(a.id) over(partition by a.payroll_info_id order by a.updated_at desc rows between unbounded preceding and unbounded following)\n            from\n                \"dev\".\"postgres_public\".\"external_payroll_auths\" a \n                join \"dev\".\"postgres_public\".\"payroll_infos\" i on a.payroll_info_id = i.id \n            where not a._fivetran_deleted\n                and not i._fivetran_deleted\n                and i.status = 1    --connected\n        )", "relation_name": "\"dev\".\"employment_hero\".\"_v_connected_payrolls\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.293474Z", "completed_at": "2024-02-04T15:19:44.305864Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.319492Z", "completed_at": "2024-02-04T15:19:44.319507Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04390740394592285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_gt_employees", "compiled": true, "compiled_code": "\nwith \n  current_employment_history as (\n    select * from \"dev\".\"postgres_public\".\"employment_histories\"\n    where id in (\n      select\n        FIRST_VALUE(id) over (partition by member_id order by created_at desc rows between unbounded preceding and current row)\n      from\n        \"dev\".\"postgres_public\".\"employment_histories\"        \n      where not _fivetran_deleted\n      )\n  )\n\nselect\n  c.host_member_id\n  , h.first_name + ' ' + h.last_name as full_name\n  , h.organisation_id as host_organisation_id\n  , ho.name as host_organisation_name\n  , ho.country as host_organisation_country\n--   , ee.name as host_org_other_name\n  , p.organisation_id as peo_organisation_id\n  , po.name as peo_organisation_name\n  , replace(peo_organisation_name, 'Global Teams - ', '') as country\n  , u.email\n  , h.termination_date\n  , h.active\n--   , h.created_at as member_created_at\n--   , h.start_date as member_start_date\n  , h.global_teams_start_date\n--   , c.updated_at\n--   , c.created_at\n  , c.host_termination_info\n--   , c.status\n  , eh.title\n  , eh.employment_type\n  , c.peo_member_id\nfrom \n    \"dev\".\"postgres_public\".\"peo_connections\" c\n    left join \"dev\".\"postgres_public\".\"members\" h \n        on c.host_member_id = h.id\n        and not h._fivetran_deleted\n        and not h.is_shadow_data\n    left join \"dev\".\"postgres_public\".\"users\" u on \n        u.id = h.user_id\n        and not u._fivetran_deleted\n        and not u.is_shadow_data\n    left join current_employment_history eh\n        on c.host_member_id = eh.member_id        \n    left join \"dev\".\"postgres_public\".\"organisations\" ho on \n        h.organisation_id = ho.id\n        and not ho._fivetran_deleted\n        and not ho.is_shadow_data\n    left join \"dev\".\"postgres_public\".\"members\"  p on \n        c.peo_member_id = p.id\n        and not p._fivetran_deleted\n        and not p.is_shadow_data\n    left join  \"dev\".\"postgres_public\".\"organisations\" po on \n        p.organisation_id = po.id\n        and not po._fivetran_deleted\n        and not po.is_shadow_data\nwhere\n  not c._fivetran_deleted\n  and (\n    u.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n or \n    h.personal_email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n )\n  and not peo_organisation_id in (143661,143663,143665,135211,133883,132979,126535,137662,133713,126540,10096,79759,8000,74240)\n  and not host_organisation_id in (143661,143663,143665,135211,133883,132979,126535,137662,133713,126540,10096,79759,8000,74240)\n  and host_organisation_id != 8701 -- adding 8701 here just in case we want to see GT employees attributed to EH", "relation_name": "\"dev\".\"employment_hero\".\"_v_gt_employees\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.314502Z", "completed_at": "2024-02-04T15:19:44.333469Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.343016Z", "completed_at": "2024-02-04T15:19:44.343031Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04345393180847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_last_connected_payroll", "compiled": true, "compiled_code": "\n\n     select * \n        from \"dev\".\"postgres_public\".\"external_payroll_auths\"\n        where\n        id in (\n            select\n                FIRST_VALUE(a.id) over(partition by a.organisation_id order by a.created_at desc rows between unbounded preceding and unbounded following)\n            from\n                \"dev\".\"postgres_public\".\"external_payroll_auths\" a \n                join \"dev\".\"postgres_public\".\"payroll_infos\" i on a.payroll_info_id = i.id \n            where not a._fivetran_deleted\n                and not i._fivetran_deleted\n                and i.status = 1    --connected\n        )\n        and not _fivetran_deleted", "relation_name": "\"dev\".\"employment_hero\".\"_v_last_connected_payroll\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.321917Z", "completed_at": "2024-02-04T15:19:44.336955Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.346423Z", "completed_at": "2024-02-04T15:19:44.346438Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0469660758972168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_sub_plan_grouping", "compiled": true, "compiled_code": "\n\nselect \n  *,\n  -- what feature set orgs have access to\n  case when id in (\n    4, -- Startup Premium\n    7,\t-- Free (30 days)\n    11,\t-- Free\n    17, -- Demo\n    43, -- CHURN (FREE)\n    52, -- Implementations Free\n    53, -- Startup Standard\n    55, -- ANZ Free\n    144, -- International Free\n    145, -- Premium Trial\n    161, -- SUSPENDED (FREE) \n    162, -- SEA free\n    173 -- HR Free\n  ) then 'free'\n  when id in (\n    166 -- ATS Free\n    ) then 'free ats'\n  when id in (\n    6,\t-- Standard (6)\n    13, -- Standard (8)\n    19, -- Standard (5)\n    35, -- Standard + YY (3)\n    36, -- Implementation Standard\n    38, -- CSA Standard (5)\n    39, -- CSA Standard + YY (3)\n    48, -- EOFY CSA Standard (4)\n    50, -- Implementations Standard YY\n    61, -- YY Standard (1)\n    63, -- GB Free Standard\n    65, -- AMP Standard (Free)\n    66, -- CSA Standard HeroPay 3\n    68, -- HeroPay standard 3\n    72, -- Reseller Standard\n    106, -- Standard (6n)\n    142, -- International Standard\n    149, -- Standard (6) min 99\n    160, -- Zuora Standard\n    164, -- UK Organic Standard\n    165 -- UK CSA Standard\n  ) then 'standard'  \n  when id in (\n    14, -- CSA (8)\n    15, -- Yin Yang\n    20, -- Premium (8)\n    21, -- Premium + YY (6)\n    22, -- CSA (1.37)\n    23, -- CSA (3)\n    24, -- CSA (5)\n    25, -- CSA (5.5)\n    26, -- CSA (6)\n    27, -- CSA (6.375)\n    28, -- CSA (7)\n    29, -- CSA (7.2)\n    30, -- CSA (7.5)\n    37, -- Implementation Premium\n    40, -- CSA Premium (8)\n    41, -- CSA Premium + YY (6)\n    44, -- EOFY Premium (5)\n    45, -- EOFY Premium + YY (3)\n    46, -- Premium + YY (0)\n    47, -- EOFY Premium + YY (2)\n    49, -- CSA Premium (4)\n    51, -- Implementations Premium YY\n    56, -- ANZ Premium (Free)\n    58, -- ANZ Premium (5)\n    60, -- YY Premium (4)\n    64, -- GB Free Premium\n    67, -- CSA Premium HeroPay 5\n    69, -- HeroPay Premium 5\n    70, -- AON Premium (5)\n    71, -- AON Premium (Free)\n    73, -- Reseller Premium\n    107, -- Premium (9n)\n    140, -- AMP Premium (3)\n    141, -- AON Premium (4)\n    143, -- International Premium\n    147, -- CSA Frank (9.11)\n    150,  -- Premium (9) min 99\n    152, -- Premium (9n)\n    159, -- Zuora Premium\n    168 -- HR Plus\n  ) then 'premium'\n  when id in (\n    146, -- CSA Platinum (14)\n    148, -- ANZ Platinum CSA\n    151, -- Platinum (14) min 199\n    153, -- OE Platinum CSA\n    154, -- International Platinum\n    158, -- Zuora Platinum\n    167,  -- Reseller Platinum\n    170 -- HR Ultimate\n  ) then 'platinum'\n  when id in (\n    5, -- Premium (L)\n    9, -- Annual\n    10, -- Standard (L)\n    18, -- OE\n    163 -- Legacy\n  ) then 'legacy'\n  end as pricing_tier,\n  case \n    when pricing_tier in ('free', 'free ats') then 0\n    when pricing_tier = 'legacy' then 1\n    when pricing_tier = 'standard' then 2\n    when pricing_tier = 'premium' then 3\n    when pricing_tier = 'platinum' then 4\n  end as pricing_hierarchy,\n  case when id in (\n    5, -- Premium (L)\n    6, -- Standard (6)   \n    9, -- Annual \n    10, -- Standard (L)\n    13, -- Standard (8)\n    19, -- Standard (5)\n    20, -- Premium (8)\n    21, -- Premium + YY (6)\n    35, -- Standard + YY (3)\n    46, -- Premium + YY (0)\n    55, -- ANZ Free\n    56, -- ANZ Premium (Free)\n    58, -- ANZ Premium (5)\n    60, -- YY Premium (4)\n    61, -- YY Standard (1)\n    68, -- HeroPay standard 3\n    69, -- HeroPay Premium 5\n    70, -- AON Premium (5)\n    71, -- AON Premium (Free)\n    72, -- Reseller Standard\n    73, -- Reseller Premium\n    106, -- Standard (6n)\n    107, -- Premium (9n)\n    140, -- AMP Premium (3)\n    141, -- AON Premium (4)\n    145, -- Premium Trial\n    149, -- Standard (6) min 99\n    150, -- Premium (9) min 99\n    151,  -- Platinum (14) min 199\n    152,  -- Premium 9 min 99\n    158, -- Zuora Platinum\n    159, -- Zuora Premium\n    160, -- Zuora Standard\n    162, -- SEA free\n    164, -- UK Organic Standard\n    166, -- ATS Free\n    167, -- Reseller Platinum\n    168, -- HR Plus\n    170, -- HR Ultimate\n    173 -- HR Free\n  ) then 'organic'\n  when id in (\n    14, -- CSA (8)\n    15, -- Yin Yang\n    18, -- OE\n    22, -- CSA (1.37)\n    23, -- CSA (3)\n    24, -- CSA (5)\n    25, -- CSA (5.5)\n    26, -- CSA (6)\n    27, -- CSA (6.375)\n    28, -- CSA (7)\n    29, -- CSA (7.2)\n    30, -- CSA (7.5)\n    36, -- Implementation Standard\n    37, -- Implementation Premium\n    38, -- CSA Standard (5)\n    39, -- CSA Standard + YY (3)\n    40, -- CSA Premium (8)\n    41, -- CSA Premium + YY (6)\n    44, -- EOFY Premium (5)\n    45, -- EOFY Premium + YY (3)\n    47, -- EOFY Premium + YY (2)\n    48, -- EOFY CSA Standard (4)\n    49, -- CSA Premium (4)\n    50, -- Implementations Standard YY\n    51, -- Implementations Premium YY\n    52, -- Implementations Free\n    63, -- GB Free Standard\n    64, -- GB Free Premium\n    65, -- AMP Standard (Free)\n    66, -- CSA Standard HeroPay 3\n    67, -- CSA Premium HeroPay 5\n    142, -- International Standard\n    143, -- International Premium\n    144, -- International Free\n    146, -- CSA Platinum (14)\n    147, -- CSA Frank (9.11)\n    148, -- ANZ Platinum CSA\n    153, -- OE Platinum CSA\n    154, -- International Platinum\n    163, -- Legacy\n    165 -- UK CSA Standard\n  ) then 'csa'\n  when id in (\n    4, -- Startup Premium\n    7, -- Free (30 days)\n    11, -- Free\n    17, -- Demo\n    53 -- Startup Standard\n  ) then 'demo'\n  when id in (\n    43 -- CHURN (FREE)\n  ) then 'churn'\n  when id in (\n    161 -- SUSPENDED (FREE)\n  ) then 'free'\nend as pricing_type\nfrom \"dev\".\"postgres_public\".\"subscription_plans\"\nwhere not _fivetran_deleted", "relation_name": "\"dev\".\"employment_hero\".\"_v_sub_plan_grouping\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.328384Z", "completed_at": "2024-02-04T15:19:44.340795Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.353683Z", "completed_at": "2024-02-04T15:19:44.353697Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.046285152435302734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_swag_career_blacklist_organisations", "compiled": true, "compiled_code": "\n\n-- objects and group condition\nselect o.id as organisation_id    \nfrom \"dev\".\"postgres_public\".\"organisations\" as o\nleft join(\n        select distinct target_id as uuid\n    from \"dev\".\"feature_flag_public\".\"features\" as f\n    join \"dev\".\"feature_flag_public\".\"features_target_objects\" as fto on f.id = fto.feature_id\n    join \"dev\".\"feature_flag_public\".\"target_objects\" as tob on fto.target_object_id = tob.id\n    where code = 'swag_ats_internal_careers_release'\n        and not f._fivetran_deleted\n        and not fto._fivetran_deleted\n        and not tob._fivetran_deleted        \n  ) as bl on o.uuid = bl.uuid\nleft join (\n    select distinct o.id as organisation_id\nfrom \"dev\".\"feature_flag_public\".\"features\" f\njoin \"dev\".\"feature_flag_public\".\"features_target_groups\" ftg on ftg.feature_id = f.id \njoin \"dev\".\"feature_flag_public\".\"target_groups\" tg on ftg.target_group_id = tg.id \njoin \"dev\".\"postgres_public\".\"organisations\" o on tg.target_type = 'organisation' and tg.conditions like '%:' || o.id || '.%'\nwhere f.code = 'swag_ats_internal_careers_release'\n    and not f._fivetran_deleted\n    and not ftg._fivetran_deleted\n    and not tg._fivetran_deleted\n    and not o._fivetran_deleted    \n) as g on g.organisation_id = o.id \nwhere not o._fivetran_deleted \n    and (bl.uuid is not null or g.organisation_id is not null)", "relation_name": "\"dev\".\"employment_hero\".\"_v_swag_career_blacklist_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.349145Z", "completed_at": "2024-02-04T15:19:44.362357Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.376996Z", "completed_at": "2024-02-04T15:19:44.377011Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.048665523529052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.exports_v_braze_email_unsubscriptions", "compiled": true, "compiled_code": "\n\nwith\nemail_unsubscribed as (\n  select email\n  from (\n    select\n      email,\n      unsubscribed,\n      row_number() over (partition by email order by updated_at desc) as rn\n    from\n      \"dev\".\"marketo\".\"lead\"\n  )\n  where\n    rn = 1\n    and unsubscribed = true\n)\n\nselect\n  u.uuid as external_id,\n  u.email\nfrom \"dev\".\"postgres_public\".\"users\" as u\nleft join email_unsubscribed as eu\n  on u.email = eu.email\nwhere\n  not u._fivetran_deleted\n  and eu.email is not null", "relation_name": "\"dev\".\"exports\".\"exports_v_braze_email_unsubscriptions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.371764Z", "completed_at": "2024-02-04T15:19:44.395244Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.403957Z", "completed_at": "2024-02-04T15:19:44.403972Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.048253536224365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.github_pull_request_jira", "compiled": true, "compiled_code": "\n\nselect\n  p.id as github_issue_id\n  , p.title as github_issue_title\n  , i.id as jira_issue_id\n  , i.key as jira_issue_key\n  , CONVERT_TIMEZONE('Australia/Sydney', getdate()) as _fivetran_transformed\nfrom  \"dev\".\"github\".\"issue\" as p\n    join \"dev\".\"jira\".\"issue\" as i on\n    p.title ilike '%' + i.key + '%'\n    and (CHARINDEX(lower(i.key), lower(p.title))=1 or substring(lower(p.title), CHARINDEX(lower(i.key), lower(p.title))-1,1) !~ '[[:alpha:]]')\n    and (CHARINDEX(lower(i.key), lower(p.title))+len(i.key)=len(p.title)+1 or substring(lower(p.title), CHARINDEX(lower(i.key), lower(p.title))+len(i.key),1) !~ '[[:digit:]]')\nwhere  not i._fivetran_deleted", "relation_name": "\"dev\".\"github\".\"pull_request_jira\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.379373Z", "completed_at": "2024-02-04T15:19:44.400139Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:44.410361Z", "completed_at": "2024-02-04T15:19:44.410375Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05518484115600586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_exports__jobs_swagapp_dotcom_events", "compiled": true, "compiled_code": "\n\nwith renamed as (\n    select\n        u.uuid                            as user_uuid,\n        'candidate_account_created'::text as event_name,\n        uinfo.updated_at                  as event_time,\n        uinfo.created_at                  as date_created\n    from \"dev\".\"postgres_public\".\"user_infos\" as uinfo\n    left join \"dev\".\"postgres_public\".\"users\" as u\n        on uinfo.user_id = u.id\n    where\n        1 = 1\n        and source = 'career_page'\n        and not coalesce(uinfo._fivetran_deleted, TRUE)\n),\n\nrenamed_certifications as (\n    select\n        u2.uuid                               as user_uuid,\n        'candidate_certification_added'::text as event_name,\n        u1.created_at                         as event_time,\n        u1.name                               as certification_name,\n        date(u1.issued_date)                  as certification_issue_date,\n        date(u1.expiry_date)                  as certification_end_date\n    from \"dev\".\"postgres_public\".\"user_certifications\" as u1\n    left join \"dev\".\"postgres_public\".\"users\" as u2\n        on u1.user_id = u2.id\n    \n\n\n    -- this filter will only be applied in dev run\n    \n        where 1=1\n    \n\n        and not u1._fivetran_deleted\n    qualify row_number() over (partition by u1.id order by u1.updated_at desc) = 1\n),\n\nunion_all as (\n    select\n        user_uuid,\n        event_name,\n        event_time,\n        date_created,\n        NULL::text as certification_name,\n        NULL::date as certification_issue_date,\n        NULL::date as certification_end_date\n    from renamed\n    union all\n    select\n        user_uuid,\n        event_name,\n        event_time,\n        NULL::date as date_created,\n        certification_name,\n        certification_issue_date,\n        certification_end_date\n    from renamed_certifications\n)\n\nselect\n    md5(cast(coalesce(cast(user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_time as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as event_id,\n    *\nfrom union_all", "relation_name": "\"dev\".\"exports\".\"int_exports__jobs_swagapp_dotcom_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.411536Z", "completed_at": "2024-02-04T15:19:45.394966Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:45.397239Z", "completed_at": "2024-02-04T15:19:45.397254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.029618740081787, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__accrual_status", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"description\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"accrual_status\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"accrual_status_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.389284Z", "completed_at": "2024-02-04T15:19:45.421457Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:45.423630Z", "completed_at": "2024-02-04T15:19:45.423643Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0931041240692139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__aba_details", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"businessid\",\n  \"extracted_at\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"aba_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"aba_details_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.438429Z", "completed_at": "2024-02-04T15:19:45.485495Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:45.492774Z", "completed_at": "2024-02-04T15:19:45.492790Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1152873039245605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__award_package", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"name\",\n  \"date_created_utc\",\n  \"fair_work_award_id\",\n  \"is_disabled\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"award_package\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"award_package_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:44.447524Z", "completed_at": "2024-02-04T15:19:45.501602Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:45.504104Z", "completed_at": "2024-02-04T15:19:45.504116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1208410263061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__bacs_details", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"businessid\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"bacs_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"bacs_details_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:45.466443Z", "completed_at": "2024-02-04T15:19:46.736837Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:46.740560Z", "completed_at": "2024-02-04T15:19:46.740583Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3166630268096924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__bank_payment_file_details", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"file_format\",\n  \"originating_account_number\",\n  \"originating_account_name\",\n  \"lodgement_reference\",\n  \"merge_multiple_account_payments\",\n  \"payment_additional_content\",\n  \"transaction_reference_number\",\n  \"is_confidential\",\n  \"is_payment_integration\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"bank_payment_file_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"bank_payment_file_details_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:45.435883Z", "completed_at": "2024-02-04T15:19:46.819040Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:46.821701Z", "completed_at": "2024-02-04T15:19:46.821715Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4274086952209473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__bank_account", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"external_reference_id\",\n  \"source\",\n  \"account_type\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"bank_account\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"bank_account_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:45.561278Z", "completed_at": "2024-02-04T15:19:46.941992Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:46.944208Z", "completed_at": "2024-02-04T15:19:46.944224Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4441876411437988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__billing_plan", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"name\",\n  \"function_employee_onboarding\",\n  \"price_per_unit\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"billing_plan\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"billing_plan_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:45.576036Z", "completed_at": "2024-02-04T15:19:46.979059Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:46.981323Z", "completed_at": "2024-02-04T15:19:46.981337Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4767847061157227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__business", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"name\",\n  \"abn\",\n  \"legal_name\",\n  \"date_created\",\n  \"industry_id\",\n  \"industry_name\",\n  \"address_line1\",\n  \"address_line2\",\n  \"suburb_id\",\n  \"billing_plan_id\",\n  \"commence_billing_from\",\n  \"to_be_deleted\",\n  \"white_label_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"electronic_payroll_lodgement_enabled\"\nfrom \"dev\".\"keypay_s3\".\"business\"\nwhere\n    1 = 1\n    \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"business_source\")\n\n    \nqualify row_number()\n    over (partition by id order by _transaction_date desc)\n= 1", "relation_name": "\"dev\".\"keypay_s3\".\"business_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:46.789537Z", "completed_at": "2024-02-04T15:19:47.628965Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:47.631142Z", "completed_at": "2024-02-04T15:19:47.631158Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.8925585746765137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__business_award_package", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"award_package_id\",\n  \"current_version_id\",\n  \"award_package_name\",\n  \"installation_status\",\n  \"installation_status_last_updated_utc\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"business_award_package\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"business_award_package_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:46.881046Z", "completed_at": "2024-02-04T15:19:47.774065Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:47.776296Z", "completed_at": "2024-02-04T15:19:47.776310Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9373950958251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__contribution_info", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"cont_amount\",\n  \"cont_type\",\n  \"super_member_id\",\n  \"employee_id\",\n  \"failed\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"contribution_info\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"keypay_s3\".\"contribution_info_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:46.991381Z", "completed_at": "2024-02-04T15:19:47.856119Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:47.858393Z", "completed_at": "2024-02-04T15:19:47.858408Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9045529365539551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__contribution_info_deduction", "compiled": true, "compiled_code": "\n\nselect\n    \"contribution_info_id\",\n  \"deduction_id\",\n  \"failed\",\n  \"id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"contribution_info_deduction\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"contribution_info_deduction_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:47.056988Z", "completed_at": "2024-02-04T15:19:48.128211Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:48.130653Z", "completed_at": "2024-02-04T15:19:48.130668Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.126145839691162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__csn_details", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"cpf_submission_number\",\n  \"csn_type\",\n  \"is_deleted\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"csn_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"csn_details_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:47.682843Z", "completed_at": "2024-02-04T15:19:48.622180Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:48.624402Z", "completed_at": "2024-02-04T15:19:48.624417Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.984020471572876, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__deduction", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"pay_run_total_id\",\n  \"deduction_category_id\",\n  \"amount\",\n  \"pay_run_id\",\n  \"employee_super_fund_id\",\n  \"contribution_info_id\",\n  \"associated_employee_deduction_category_id\",\n  \"bank_account_id\",\n  \"is_resc\",\n  \"bank_account_bsb\",\n  \"bank_account_number\",\n  \"bank_account_type\",\n  \"is_member_voluntary\",\n  \"associated_employee_pension_contribution_plan_id\",\n  \"is_pension_scheme_salary_sacrifice\",\n  \"additional_data\",\n  \"paid_to_tax_office\",\n  \"payg_adjustment_id\",\n  \"bank_account_swift\",\n  \"bank_account_branch_code\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"deduction\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"keypay_s3\".\"deduction_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:47.819696Z", "completed_at": "2024-02-04T15:19:48.783888Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:48.786119Z", "completed_at": "2024-02-04T15:19:48.786134Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0099029541015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__deduction_category", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"deduction_category_name\",\n  \"business_id\",\n  \"tax_exempt\",\n  \"is_deleted\",\n  \"source\",\n  \"external_reference_id\",\n  \"payment_summary_classification_id\",\n  \"expense_general_ledger_mapping_code\",\n  \"liability_general_ledger_mapping_code\",\n  \"sgc_calculation_impact\",\n  \"minimum_wage_deduction_impact\",\n  \"is_system\",\n  \"deduction_category_ext_sg_id\",\n  \"deduction_category_ext_uk_id\",\n  \"is_resc\",\n  \"is_name_read_only\",\n  \"is_allow_pre_tax_super\",\n  \"is_allow_member_voluntary\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"deduction_category\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"deduction_category_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:47.898303Z", "completed_at": "2024-02-04T15:19:48.908315Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:48.910768Z", "completed_at": "2024-02-04T15:19:48.910783Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0599803924560547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__device_token", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"user_id\",\n  \"platform\",\n  \"endpoint\",\n  \"date_created_utc\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"device_token\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"keypay_s3\".\"device_token_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:48.185014Z", "completed_at": "2024-02-04T15:19:49.381990Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:49.384285Z", "completed_at": "2024-02-04T15:19:49.384302Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.2434768676757812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__earnings_line", "compiled": true, "compiled_code": "\nselect \"id\",\n  \"employee_id\",\n  \"pay_category_id\",\n  \"pay_run_id\",\n  \"units\",\n  \"location_id\",\n  \"pay_run_total_id\",\n  \"rate\",\n  \"earnings_line_status_id\",\n  \"external_reference_id\",\n  \"net_earnings\",\n  \"net_earnings_reporting\",\n  \"earnings_line_ext_au_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"earnings_line\"\n\n\n  -- this filter will only be applied on an incremental run\n  -- (uses > to include records whose timestamp occurred since the last run of this model)\n  where _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"earnings_line_source\")\n\n", "relation_name": "\"dev\".\"keypay_s3\".\"earnings_line_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:48.669308Z", "completed_at": "2024-02-04T15:19:49.726162Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:49.728958Z", "completed_at": "2024-02-04T15:19:49.728975Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1091163158416748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__earnings_line_ext_au", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"earnings_line_id\",\n  \"pay_run_id\",\n  \"average_total_earnings_amount\",\n  \"average_total_earnings_payg_amount\",\n  \"average_additional_payments_amount\",\n  \"full_earnings_payg_amount\",\n  \"calculated_payg_amount\",\n  \"max_payg_amount\",\n  \"gross_earnings_amount\",\n  \"gross_earnings_payg_amount\",\n  \"pre_adjustment_payg_withholding_amount\",\n  \"gross_earnings_stsl_amount\",\n  \"average_total_earnings_stsl_amount\",\n  \"full_earnings_stsl_amount\",\n  \"calculated_stsl_amount\",\n  \"lump_sum_e_financial_year\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"earnings_line_ext_au\" where date_trunc('day', _transaction_date) = '2023-11-08'", "relation_name": "\"dev\".\"keypay_s3\".\"earnings_line_ext_au_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:48.833573Z", "completed_at": "2024-02-04T15:19:49.870985Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:49.873240Z", "completed_at": "2024-02-04T15:19:49.873256Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0885653495788574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"business_id\",\n  \"firstname\",\n  \"surname\",\n  \"date_created\",\n  \"date_of_birth\",\n  \"residential_street_address\",\n  \"residential_suburb_id\",\n  \"start_date\",\n  \"end_date\",\n  \"gender\",\n  \"payrollid\",\n  \"pay_run_default_id\",\n  \"tax_file_declaration_id\",\n  \"email\",\n  \"home_phone\",\n  \"work_phone\",\n  \"mobile_phone\",\n  \"employee_onboarding_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"status\"\nfrom \"dev\".\"keypay_s3\".\"employee\"\nwhere\n    1 = 1\n    \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"employee_source\")\n\n    \nqualify row_number()\n    over (partition by id order by _transaction_date desc)\n= 1", "relation_name": "\"dev\".\"keypay_s3\".\"employee_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:48.960933Z", "completed_at": "2024-02-04T15:19:50.006768Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:50.009094Z", "completed_at": "2024-02-04T15:19:50.009111Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0951282978057861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee_deduction_category", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"deduction_category_id\",\n  \"from_date\",\n  \"to_date\",\n  \"amount\",\n  \"employee_super_fund_id\",\n  \"expiry_date\",\n  \"maximum_amount_paid\",\n  \"is_active\",\n  \"bank_account_id\",\n  \"deleted\",\n  \"notes\",\n  \"external_reference_id\",\n  \"source\",\n  \"deduction_type\",\n  \"preserved_earnings\",\n  \"preserved_earnings_amount\",\n  \"preserved_earnings_amount_not_reached_action\",\n  \"carry_forward_unpaid_deductions\",\n  \"payment_reference\",\n  \"employee_pension_contribution_plan_id\",\n  \"additional_data\",\n  \"priority\",\n  \"student_loan_deduction_option\",\n  \"tiered_deduction_settings_id\",\n  \"paid_to_external_service\",\n  \"employee_deduction_category_ext_sg_id\",\n  \"employee_deduction_category_ext_my_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"paid_to_tax_office\",\n  \"carry_forward_unused_preserved_earnings\"\nfrom \"dev\".\"keypay_s3\".\"employee_deduction_category\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"employee_deduction_category_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:49.430646Z", "completed_at": "2024-02-04T15:19:50.250369Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:50.253255Z", "completed_at": "2024-02-04T15:19:50.253272Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.8730580806732178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee_expense", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"pay_run_id\",\n  \"pay_run_total_id\",\n  \"employee_id\",\n  \"employee_expense_category_id\",\n  \"location_id\",\n  \"business_id\",\n  \"amount\",\n  \"notes\",\n  \"external_id\",\n  \"employee_recurring_expense_id\",\n  \"employee_expense_request_id\",\n  \"tax_code\",\n  \"tax_rate\",\n  \"tax_code_display_name\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"employee_expense\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"employee_expense_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:49.781203Z", "completed_at": "2024-02-04T15:19:50.752255Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:50.754531Z", "completed_at": "2024-02-04T15:19:50.754547Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0188446044921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee_expense_request", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"status\",\n  \"created_by_user_id\",\n  \"date_created_utc\",\n  \"status_updated_by_user_id\",\n  \"date_status_updated_utc\",\n  \"description\",\n  \"status_update_notes\",\n  \"pay_run_total_id\",\n  \"business_id\",\n  \"date_first_approved_utc\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"employee_expense_request\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"employee_expense_request_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:49.924007Z", "completed_at": "2024-02-04T15:19:50.834388Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:50.836780Z", "completed_at": "2024-02-04T15:19:50.836796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9502549171447754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee_history", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"employee_history_action_id\",\n  \"date_created\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"employee_history\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"employee_history_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:50.058952Z", "completed_at": "2024-02-04T15:19:50.916067Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:50.918961Z", "completed_at": "2024-02-04T15:19:50.918976Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9148037433624268, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee_pay_category", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"calculated_rate\",\n  \"employee_id\",\n  \"standard_weekly_hours\",\n  \"is_default\",\n  \"from_date\",\n  \"to_date\",\n  \"user_supplied_rate\",\n  \"standard_daily_hours\",\n  \"pay_category_rate_unit_id\",\n  \"employee_rate_unit_id\",\n  \"expiry_date\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"pay_category_id\"\nfrom \"dev\".\"keypay_s3\".\"employee_pay_category\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"employee_pay_category_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:50.306152Z", "completed_at": "2024-02-04T15:19:51.184497Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:51.186815Z", "completed_at": "2024-02-04T15:19:51.186830Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9308135509490967, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employee_super_fund", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"super_fund_name\",\n  \"member_number\",\n  \"allocated_percentage\",\n  \"fixed_amount\",\n  \"employee_id\",\n  \"deleted\",\n  \"super_fund_product_id\",\n  \"has_non_super_stream_compliant_fund\",\n  \"date_employee_nominated_utc\",\n  \"super_details_default_fund_id\",\n  \"self_managed_super_fund_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"allocate_balance\"\nfrom \"dev\".\"keypay_s3\".\"employee_super_fund\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"employee_super_fund_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:50.803190Z", "completed_at": "2024-02-04T15:19:52.061803Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:52.063993Z", "completed_at": "2024-02-04T15:19:52.064008Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3003029823303223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employment_agreement", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"classification\",\n  \"date_created_utc\",\n  \"external_reference_id\",\n  \"is_deleted\",\n  \"business_award_package_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"employment_agreement\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"employment_agreement_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:50.892256Z", "completed_at": "2024-02-04T15:19:52.103446Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:52.108573Z", "completed_at": "2024-02-04T15:19:52.108588Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.283959150314331, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__employment_type", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"description\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"employment_type\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"employment_type_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:50.976146Z", "completed_at": "2024-02-04T15:19:52.126617Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:52.136912Z", "completed_at": "2024-02-04T15:19:52.136927Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2151670455932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__expense", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"expense_date\",\n  \"business_id\",\n  \"unit_cost\",\n  \"quantity\",\n  \"invoice_id\",\n  \"notes\",\n  \"expense_type\",\n  \"displayed_unit_cost\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"expense\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"expense_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:51.239552Z", "completed_at": "2024-02-04T15:19:52.250446Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:52.253158Z", "completed_at": "2024-02-04T15:19:52.253175Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0671758651733398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__expense_type", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"description\",\n  \"unit_cost\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"expense_type\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"expense_type_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:52.109756Z", "completed_at": "2024-02-04T15:19:53.186044Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:53.188466Z", "completed_at": "2024-02-04T15:19:53.188482Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.125169277191162, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__fair_work_award", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"name\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"fair_work_award\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"fair_work_award_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:52.163846Z", "completed_at": "2024-02-04T15:19:53.268193Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:53.279798Z", "completed_at": "2024-02-04T15:19:53.279815Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1924583911895752, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__fair_work_award_selection", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"fair_work_award_id\",\n  \"business_id\",\n  \"date_time_utc\",\n  \"source\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"fair_work_award_selection\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"fair_work_award_selection_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:52.309247Z", "completed_at": "2024-02-04T15:19:53.281904Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:53.297026Z", "completed_at": "2024-02-04T15:19:53.297043Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.048898458480835, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__invoice", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"date\",\n  \"gst_rate\",\n  \"billing_region_id\",\n  \"invoicee_id\",\n  \"invoicee_type_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"invoice\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"invoice_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:52.195944Z", "completed_at": "2024-02-04T15:19:53.263288Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:53.277106Z", "completed_at": "2024-02-04T15:19:53.277124Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.165663719177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__industry", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"name\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"industry\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"industry_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:53.243435Z", "completed_at": "2024-02-04T15:19:54.169675Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:54.172531Z", "completed_at": "2024-02-04T15:19:54.172552Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9823124408721924, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__invoice_line_item", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"invoice_id\",\n  \"total_including_gst\",\n  \"abn\",\n  \"business_id\",\n  \"quantity\",\n  \"billing_code\",\n  \"billing_plan\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"unit_price_including_gst\"\nfrom \"dev\".\"keypay_s3\".\"invoice_line_item\" where date_trunc('day', _transaction_date) = '2023-11-14'", "relation_name": "\"dev\".\"keypay_s3\".\"invoice_line_item_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:53.370316Z", "completed_at": "2024-02-04T15:19:54.365041Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:54.367304Z", "completed_at": "2024-02-04T15:19:54.367320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0416910648345947, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__journal_default_account", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"account_type\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"journal_default_account\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"journal_default_account_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:53.392143Z", "completed_at": "2024-02-04T15:19:54.432779Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:54.435184Z", "completed_at": "2024-02-04T15:19:54.435202Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1180064678192139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__leave_allowance_template", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"name\",\n  \"external_reference_id\",\n  \"source\",\n  \"business_award_package_id\",\n  \"leave_accrual_start_date_type\",\n  \"leave_year_start\",\n  \"leave_loading_calculated_from_pay_category_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"leave_allowance_template\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"leave_allowance_template_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:53.376819Z", "completed_at": "2024-02-04T15:19:54.449333Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:54.451609Z", "completed_at": "2024-02-04T15:19:54.451623Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1421966552734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__leave_accrual", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"employee_id\",\n  \"accrued_amount\",\n  \"accrual_status_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"leave_accrual\"\nwhere 1 = 1\n\n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"leave_accrual_source\")\n\n    \nqualify row_number() over (partition by id, employee_id order by _transaction_date desc) = 1", "relation_name": "\"dev\".\"keypay_s3\".\"leave_accrual_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:54.220397Z", "completed_at": "2024-02-04T15:19:55.569269Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:55.571528Z", "completed_at": "2024-02-04T15:19:55.571544Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.393718957901001, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__leave_category", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"leave_category_name\",\n  \"business_id\",\n  \"exclude_from_termination_payout\",\n  \"is_deleted\",\n  \"unit_type\",\n  \"source\",\n  \"date_created\",\n  \"deduct_from_primary_pay_category\",\n  \"deduct_from_pay_category_id\",\n  \"transfer_to_pay_category_id\",\n  \"leave_category_type\",\n  \"entitlement_period\",\n  \"contingent_period\",\n  \"automatically_accrues\",\n  \"standard_hours_per_year\",\n  \"units\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"is_balance_untracked\"\nfrom \"dev\".\"keypay_s3\".\"leave_category\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"leave_category_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:54.409591Z", "completed_at": "2024-02-04T15:19:55.706608Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:55.708998Z", "completed_at": "2024-02-04T15:19:55.709014Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3548202514648438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__leave_request", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"from_date\",\n  \"to_date\",\n  \"total_hours\",\n  \"requested_date\",\n  \"status\",\n  \"business_id\",\n  \"leave_category_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"leave_request\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"leave_request_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:54.508273Z", "completed_at": "2024-02-04T15:19:55.755493Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:55.758995Z", "completed_at": "2024-02-04T15:19:55.759009Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3002538681030273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__location", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"name\",\n  \"businessid\",\n  \"is_deleted\",\n  \"parentid\",\n  \"date_created\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"location\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"location_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:54.523226Z", "completed_at": "2024-02-04T15:19:55.791655Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:55.796097Z", "completed_at": "2024-02-04T15:19:55.796112Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3244318962097168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__location_restriction", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"user_id\",\n  \"filter_type\",\n  \"value\",\n  \"permissions\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"location_restriction\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"location_restriction_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:55.616904Z", "completed_at": "2024-02-04T15:19:56.664049Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:56.666325Z", "completed_at": "2024-02-04T15:19:56.666340Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0879278182983398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pay_category", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"pay_category_name\",\n  \"business_id\",\n  \"date_created\",\n  \"rate_unit_id\",\n  \"default_super_rate\",\n  \"is_tax_exempt\",\n  \"linked_pay_category_id\",\n  \"is_deleted\",\n  \"external_reference_id\",\n  \"source\",\n  \"is_payroll_tax_exempt\",\n  \"pay_category_type\",\n  \"business_award_package_id\",\n  \"payment_summary_classification_id\",\n  \"general_ledger_mapping_code\",\n  \"super_liability_mapping_code\",\n  \"super_expense_mapping_code\",\n  \"is_w1_exempt\",\n  \"number_of_decimal_places\",\n  \"is_national_insurance_exempt\",\n  \"minimum_wage_calculation_impact\",\n  \"exclude_from_average_earnings\",\n  \"cpf_classification_id\",\n  \"include_in_gross_rate_of_pay\",\n  \"exclude_from_ordinary_earnings\",\n  \"hide_units_on_pay_slip\",\n  \"pay_category_ext_my_id\",\n  \"rounding_method\",\n  \"pay_category_ext_nz_id\",\n  \"pay_category_ext_uk_id\",\n  \"allowance_description\",\n  \"pay_category_ext_sg_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"accrues_leave\",\n  \"penalty_loading_multiplier\",\n  \"rate_loading_multiplier\"\nfrom \"dev\".\"keypay_s3\".\"pay_category\" where date_trunc('day', _transaction_date) = '2023-12-01'", "relation_name": "\"dev\".\"keypay_s3\".\"pay_category_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:55.767826Z", "completed_at": "2024-02-04T15:19:56.789567Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:56.791750Z", "completed_at": "2024-02-04T15:19:56.791764Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.080437421798706, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pay_cycle", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"pay_cycle_frequencyid\",\n  \"name\",\n  \"last_pay_run\",\n  \"is_deleted\",\n  \"aba_detailsid\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"pay_cycle\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"pay_cycle_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:55.847923Z", "completed_at": "2024-02-04T15:19:56.831963Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:56.834299Z", "completed_at": "2024-02-04T15:19:56.834314Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.03281569480896, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pay_day_filing", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"pay_run_id\",\n  \"status\",\n  \"date_last_modified\",\n  \"date_submitted\",\n  \"version\",\n  \"pay_day_filing_lodgement_data_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"pay_day_filing\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"pay_day_filing_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:55.808198Z", "completed_at": "2024-02-04T15:19:56.911729Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:56.925612Z", "completed_at": "2024-02-04T15:19:56.925629Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1753482818603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pay_cycle_frequency", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"description\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"pay_cycle_frequency\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"pay_cycle_frequency_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:56.707241Z", "completed_at": "2024-02-04T15:19:58.230047Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:58.234694Z", "completed_at": "2024-02-04T15:19:58.234709Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.5783498287200928, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pay_event", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"date_created_utc\",\n  \"status\",\n  \"pay_run_id\",\n  \"date_lodged_utc\",\n  \"date_response_received_utc\",\n  \"pay_run_lodgement_data_id\",\n  \"is_deleted\",\n  \"stp_version\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"pay_event\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"pay_event_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:56.985597Z", "completed_at": "2024-02-04T15:19:58.228854Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:58.233505Z", "completed_at": "2024-02-04T15:19:58.233522Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.316577672958374, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__payrun_default", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"from_date\",\n  \"to_date\",\n  \"job_title\",\n  \"business_id\",\n  \"default_pay_category_id\",\n  \"is_payroll_tax_exempt\",\n  \"employment_agreement_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"default_pay_cycle_id\"\nfrom \"dev\".\"keypay_s3\".\"payrun_default\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"payrun_default_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:56.852729Z", "completed_at": "2024-02-04T15:19:58.256079Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:58.258375Z", "completed_at": "2024-02-04T15:19:58.258388Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4836626052856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pay_run_lodgement_data", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"status\",\n  \"is_test\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"pay_run_lodgement_data\" where date_trunc('day', _transaction_date) = '2024-01-14'", "relation_name": "\"dev\".\"keypay_s3\".\"pay_run_lodgement_data_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:56.883448Z", "completed_at": "2024-02-04T15:19:58.387318Z"}, {"name": "execute", "started_at": "2024-02-04T15:19:58.391413Z", "completed_at": "2024-02-04T15:19:58.391427Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.7235639095306396, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__payrun", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"date_finalised\",\n  \"pay_period_starting\",\n  \"pay_period_ending\",\n  \"date_paid\",\n  \"business_id\",\n  \"invoice_id\",\n  \"date_first_finalised\",\n  \"pay_run_lodgement_data_id\",\n  \"notification_date\",\n  \"finalised_by_id\",\n  \"pay_cycle_id\",\n  \"pay_cycle_frequency_id\",\n  \"date_created_utc\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"payrun\"\nwhere 1 = 1\n\n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"payrun_source\")\n\n    \nqualify row_number() over (partition by id, business_id order by _transaction_date desc) = 1", "relation_name": "\"dev\".\"keypay_s3\".\"payrun_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:58.614892Z", "completed_at": "2024-02-04T15:20:00.018462Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:00.020707Z", "completed_at": "2024-02-04T15:20:00.020722Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.446791648864746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__rate_unit", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"description\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"rate_unit\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"rate_unit_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:58.313532Z", "completed_at": "2024-02-04T15:20:00.093635Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:00.111391Z", "completed_at": "2024-02-04T15:20:00.111409Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.8614306449890137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__payrun_total_history", "compiled": true, "compiled_code": "\nselect \"id\",\n  \"employee_id\",\n  \"payrun_id\",\n  \"total_hours\",\n  \"gross_earnings\",\n  \"net_earnings\",\n  \"is_excluded_from_billing\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"payrun_total_history\"", "relation_name": "\"dev\".\"keypay_s3\".\"payrun_total_history_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:58.288195Z", "completed_at": "2024-02-04T15:20:00.115548Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:00.121950Z", "completed_at": "2024-02-04T15:20:00.121965Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.896223783493042, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__payrun_total", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"payrun_id\",\n  \"total_hours\",\n  \"gross_earnings\",\n  \"net_earnings\",\n  \"is_excluded_from_billing\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"payrun_total\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"payrun_total_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:19:58.342286Z", "completed_at": "2024-02-04T15:20:00.124842Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:00.127357Z", "completed_at": "2024-02-04T15:20:00.127370Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8479437828063965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__pension_scheme_contribution_plan", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_contribution_percentage\",\n  \"employer_contribution_percentage\",\n  \"pension_type\",\n  \"max_earnings_threshold\",\n  \"min_earnings_threshold\",\n  \"contribution_group_name\",\n  \"contribution_group_id\",\n  \"contribution_plan_name\",\n  \"reporting_frequency\",\n  \"calculate_on_qualifying_earnings\",\n  \"pension_scheme_id\",\n  \"contribution_plan_id\",\n  \"collection_source_id\",\n  \"is_deleted\",\n  \"salary_sacrifice_deduction_category_id\",\n  \"salary_sacrifice_pay_category_ids\",\n  \"employee_contribution_pay_category_ids\",\n  \"employer_contribution_pay_category_ids\",\n  \"is_auto_enrolment_scheme\",\n  \"lower_earnings_disregard\",\n  \"lower_default_earnings_disregard_type\",\n  \"upper_earnings_cap\",\n  \"upper_default_earnings_cap_type\",\n  \"use_tax_month_pay_period\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"salary_sacrifice_percentage\",\n  \"nic_saving_rebate_percentage\"\nfrom \"dev\".\"keypay_s3\".\"pension_scheme_contribution_plan\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"pension_scheme_contribution_plan_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:00.063036Z", "completed_at": "2024-02-04T15:20:01.419168Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:01.421459Z", "completed_at": "2024-02-04T15:20:01.421474Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4009859561920166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__region", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"currency\",\n  \"name\",\n  \"culturename\",\n  \"defaultstandardhoursperday\",\n  \"commencebillingfrom\",\n  \"minimumbillableamount\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"region\"\nwhere 1 = 1\n\n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"region_source\")\n\n\nqualify row_number() over (partition by id order by _transaction_date desc) = 1", "relation_name": "\"dev\".\"keypay_s3\".\"region_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:00.170281Z", "completed_at": "2024-02-04T15:20:01.457637Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:01.459995Z", "completed_at": "2024-02-04T15:20:01.460009Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.3430500030517578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__reseller_contact", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"reseller_id\",\n  \"user_id\",\n  \"contact_type\",\n  \"name\",\n  \"email\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"reseller_contact\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"reseller_contact_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:00.204443Z", "completed_at": "2024-02-04T15:20:01.500002Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:01.505227Z", "completed_at": "2024-02-04T15:20:01.505241Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3495228290557861, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__resellers", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"name\",\n  \"billing_name\",\n  \"date_created_utc\",\n  \"commence_billing_from\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"default_region_id\"\nfrom \"dev\".\"keypay_s3\".\"resellers\"\nwhere 1 = 1\n\n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"resellers_source\")\n\n\nqualify row_number() over (partition by id order by _transaction_date desc) = 1", "relation_name": "\"dev\".\"keypay_s3\".\"resellers_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:00.215277Z", "completed_at": "2024-02-04T15:20:01.498779Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:01.504005Z", "completed_at": "2024-02-04T15:20:01.504020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3721370697021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__statutory_settings", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"income_tax_number__encrypted\",\n  \"e_number\",\n  \"epf_number\",\n  \"socso_number\",\n  \"hrdf_status\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"statutory_settings\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"statutory_settings_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:01.467974Z", "completed_at": "2024-02-04T15:20:02.577620Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:02.579829Z", "completed_at": "2024-02-04T15:20:02.579844Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1571993827819824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__suburb", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"name\",\n  \"postcode\",\n  \"state\",\n  \"country\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"suburb\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"suburb_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:01.515676Z", "completed_at": "2024-02-04T15:20:02.616402Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:02.619907Z", "completed_at": "2024-02-04T15:20:02.619921Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1596786975860596, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__super_details", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"business_id\",\n  \"date_registered_utc\",\n  \"enabled\",\n  \"date_beam_terms_accepted_utc\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"super_details\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"super_details_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:01.605931Z", "completed_at": "2024-02-04T15:20:02.661357Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:02.664888Z", "completed_at": "2024-02-04T15:20:02.664901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1039230823516846, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__super_fund_product", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"abn\",\n  \"product_code\",\n  \"product_type\",\n  \"business_name\",\n  \"product_name\",\n  \"source\",\n  \"business_id\",\n  \"super_stream_status\",\n  \"is_managed_by_system\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"super_fund_product\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"super_fund_product_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:01.552704Z", "completed_at": "2024-02-04T15:20:02.657841Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:02.660148Z", "completed_at": "2024-02-04T15:20:02.660162Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1804509162902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__super_details_default_fund", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"super_details_id\",\n  \"usi\",\n  \"abn\",\n  \"name\",\n  \"is_deleted\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"super_details_default_fund\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"super_details_default_fund_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:02.628162Z", "completed_at": "2024-02-04T15:20:03.621482Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:03.623748Z", "completed_at": "2024-02-04T15:20:03.623763Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0362050533294678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__super_payment", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"pay_run_total_id\",\n  \"employee_super_fund_id\",\n  \"amount\",\n  \"pay_run_id\",\n  \"employee_id\",\n  \"contribution_type\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"super_payment\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"super_payment_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:02.742311Z", "completed_at": "2024-02-04T15:20:03.747012Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:03.766003Z", "completed_at": "2024-02-04T15:20:03.766023Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.082273244857788, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__timesheet_line", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"start_time\",\n  \"end_time\",\n  \"units\",\n  \"date_created\",\n  \"submitted_start_time\",\n  \"submitted_end_time\",\n  \"pay_category_id\",\n  \"status\",\n  \"leave_request_id\",\n  \"consolidated_with_timesheet_line_id\",\n  \"pay_run_total_id\",\n  \"business_id\",\n  \"auto_approved_by_roster_shift_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"timesheet_line\" where date_trunc('day', _transaction_date) = '2023-11-08'", "relation_name": "\"dev\".\"keypay_s3\".\"timesheet_line_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:02.726125Z", "completed_at": "2024-02-04T15:20:03.777890Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:03.782900Z", "completed_at": "2024-02-04T15:20:03.782915Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.121187686920166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__tax_file_declaration", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"employee_id\",\n  \"employment_type_id\",\n  \"from_date\",\n  \"to_date\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"tax_file_declaration\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"tax_file_declaration_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:02.678300Z", "completed_at": "2024-02-04T15:20:03.770385Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:03.779263Z", "completed_at": "2024-02-04T15:20:03.779287Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1695692539215088, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__superfund_ato", "compiled": true, "compiled_code": "\n\nselect\n    \"abn\",\n  \"fund_name\",\n  \"usi\",\n  \"product_name\",\n  \"contribution_restrictions\",\n  \"from_date\",\n  \"to_date\",\n  \"_transaction_date\",\n  \"_etl_date\"\nfrom \"dev\".\"keypay_s3\".\"superfund_ato\" where date_trunc('day', _transaction_date) = '2024-02-04'", "relation_name": "\"dev\".\"keypay_s3\".\"superfund_ato_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:03.668841Z", "completed_at": "2024-02-04T15:20:04.585774Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:04.588075Z", "completed_at": "2024-02-04T15:20:04.588091Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9674899578094482, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"first_name\",\n  \"last_name\",\n  \"email\",\n  \"is_active\",\n  \"is_admin\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"user\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"keypay_s3\".\"user_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:03.862215Z", "completed_at": "2024-02-04T15:20:04.852024Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:04.854352Z", "completed_at": "2024-02-04T15:20:04.854365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.040952444076538, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user_employee", "compiled": true, "compiled_code": "\n\nselect\n    \"user_id\",\n  \"employee_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"user_employee\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"keypay_s3\".\"user_employee_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:03.823895Z", "completed_at": "2024-02-04T15:20:04.881492Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:04.883708Z", "completed_at": "2024-02-04T15:20:04.883720Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.113727331161499, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user_business", "compiled": true, "compiled_code": "\n\nselect\n    \"user_id\",\n  \"business_id\",\n  \"is_single_sign_on_enabled\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"user_business\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"user_business_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:03.868859Z", "completed_at": "2024-02-04T15:20:04.840932Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:04.849511Z", "completed_at": "2024-02-04T15:20:04.849530Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0942981243133545, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user_employee_group", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"user_id\",\n  \"employee_group_id\",\n  \"permissions\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"user_employee_group\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"user_employee_group_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:04.638265Z", "completed_at": "2024-02-04T15:20:06.122878Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.125231Z", "completed_at": "2024-02-04T15:20:06.125246Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5270476341247559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user_report_access", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"user_id\",\n  \"business_id\",\n  \"access_type\",\n  \"no_reporting_restriction\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"user_report_access\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"user_report_access_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:04.967540Z", "completed_at": "2024-02-04T15:20:06.482614Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.484980Z", "completed_at": "2024-02-04T15:20:06.484996Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.5723388195037842, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__white_label", "compiled": true, "compiled_code": "\nselect\n    \"id\",\n  \"name\",\n  \"is_deleted\",\n  \"region_id\",\n  \"support_email\",\n  \"primary_champion_id\",\n  \"function_enable_super_choice_marketplace\",\n  \"default_billing_plan_id\",\n  \"reseller_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"white_label\"\nwhere 1 = 1\n\n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay_s3\".\"white_label_source\")\n\n\nqualify row_number() over (partition by id order by _transaction_date desc) = 1", "relation_name": "\"dev\".\"keypay_s3\".\"white_label_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:04.902909Z", "completed_at": "2024-02-04T15:20:06.491310Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.493594Z", "completed_at": "2024-02-04T15:20:06.493607Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6563189029693604, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user_reseller", "compiled": true, "compiled_code": "\n\nselect\n    \"userid\",\n  \"reseller_id\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"user_id\"\nfrom \"dev\".\"keypay_s3\".\"user_reseller\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"user_reseller_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:04.940804Z", "completed_at": "2024-02-04T15:20:06.504730Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.506948Z", "completed_at": "2024-02-04T15:20:06.506960Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6454198360443115, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__user_whitelabel", "compiled": true, "compiled_code": "\n\nselect\n    \"user_id\",\n  \"whitelabel_id\",\n  \"is_default_parent\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\",\n  \"userid\"\nfrom \"dev\".\"keypay_s3\".\"user_whitelabel\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"user_whitelabel_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.568409Z", "completed_at": "2024-02-04T15:20:06.595507Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.603589Z", "completed_at": "2024-02-04T15:20:06.603603Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043374061584472656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_stats_analysis_file", "compiled": true, "compiled_code": "\n\nselect\nfnv_hash(_line, fnv_hash(_modified, fnv_hash(_file))) as ID,\ncolumn_0 as date,\ncolumn_1 as datatype,\ncolumn_2 as project,\ncolumn_3 as folder,\ncolumn_4 as filename,\ncolumn_5 as classname\nfrom \"dev\".\"keypay_stats\".\"analysis_file_headerless\"", "relation_name": "\"dev\".\"keypay_stats\".\"analysis_file\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.598993Z", "completed_at": "2024-02-04T15:20:06.609274Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.617609Z", "completed_at": "2024-02-04T15:20:06.617623Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025110721588134766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_stats_analysis_folder_summary", "compiled": true, "compiled_code": "\n\nselect\nfnv_hash(_line, fnv_hash(_modified, fnv_hash(_file))) as ID,\ncolumn_0 as date,\ncolumn_1 as datatype,\ncolumn_2 as project,\ncolumn_3 as folder,\ncolumn_4 as numberofitems\nfrom \"dev\".\"keypay_stats\".\"analysis_folder_summary_headerless\"", "relation_name": "\"dev\".\"keypay_stats\".\"analysis_folder_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.612899Z", "completed_at": "2024-02-04T15:20:06.621858Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.626680Z", "completed_at": "2024-02-04T15:20:06.626694Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028659820556640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_stats_analysis_project_summary", "compiled": true, "compiled_code": "\n\nselect\nfnv_hash(_line, fnv_hash(_modified, fnv_hash(_file))) as ID,\ncolumn_0 as date,\ncolumn_1 as project,\ncolumn_2 as elapsed_time,\ncolumn_3 as numberofmodels,\ncolumn_4 as numberofcommands,\ncolumn_5 as numberofservices,\ncolumn_6 as numberofjobhandles,\ncolumn_7 as numberoftypescripts\nfrom \"dev\".\"keypay_stats\".\"analysis_project_summary_headerless\"", "relation_name": "\"dev\".\"keypay_stats\".\"analysis_project_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.627848Z", "completed_at": "2024-02-04T15:20:06.640878Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.651367Z", "completed_at": "2024-02-04T15:20:06.651382Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03101515769958496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_onboard_candidate_event", "compiled": true, "compiled_code": "\n\nSELECT\n  e._fivetran_id as message_id\n  , e.time\n  , e.name\n  , split_part(current_url,'candidate_id=',2) as candidate_job_id\n  , u.uuid as user_id \n  , case when json_extract_path_text(properties, 'module') != '' and e.name != 'Visit Company Feed' then json_extract_path_text(properties, 'module')\n  when app_version_string is not null then 'mobile' \n  else 'others' end as module\n  , json_extract_path_text(properties, 'sub_module') as sub_module\n  , regexp_substr(name, '[^#]*$') as mobile_page\n  , (case when json_extract_path_text(properties, 'organisation_id')= '' then null else json_extract_path_text(properties, 'organisation_id') end)::int as organisation_id\n  , m.id as member_id \n  , json_extract_path_text(properties, 'user_type') as user_type\n  , json_extract_path_text(properties, 'platform') as platform   \n  , os\n  , device  \n  , browser\n  , screen_width\n  , screen_height\n  , screen_dpi\n  , app_version_string\nfrom\n  \"dev\".\"mp\".\"event\" e  \n  join \"dev\".\"postgres_public\".\"members\" m on json_extract_path_text(properties, 'member_id') = m.id\n  join \"dev\".\"postgres_public\".\"users\" u on coalesce(e.user_id, json_extract_path_text(properties, 'user_uuid', true)) = u.uuid\nwhere\n    e.name ~ 'Onboard Candidate'\n    and candidate_job_id != ''\n    and (e.user_id is not null or json_extract_path_text(properties, 'user_uuid') != '')\n    and not m._fivetran_deleted\n    and not m.is_shadow_data\n    and not u._fivetran_deleted\n    and not u.is_shadow_data\n    and u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n    and not m.system_manager\n    and not m.system_user\n\n    and e.time > (SELECT MAX(time) FROM \"dev\".\"mp\".\"onboard_candidate_event\" ) \n", "relation_name": "\"dev\".\"mp\".\"onboard_candidate_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.645470Z", "completed_at": "2024-02-04T15:20:06.656675Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.661771Z", "completed_at": "2024-02-04T15:20:06.661785Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025040388107299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_playground_activities", "compiled": true, "compiled_code": "\n\nselect \n  *\nfrom\n  (\n  select\n    event.time\n    -- reason we dont extract member_id, is cause it is attached to the demo org not the organic org\n    -- organic org and its demo (playground) is not linked. the only way to get the link is through user_id\n    , case when json_extract_path_text(properties, 'user_id') = '' then null else json_extract_path_text(properties, 'user_id')::integer end as user_id\n    , name as event_name\n    , case \n        when name = 'Users View Page' then trim('#' from regexp_substr(json_extract_path_text(properties, 'page'), '(.*)#'))\n        else json_extract_path_text(properties, 'module') \n      end as page\t\n    , current_url\n  from \"dev\".\"mp\".\"event\"\n  where    \n    json_extract_path_text(properties,'is_sandbox',true) ~ 'true'\n\n\n    and event.time > (select max(time) from \"dev\".\"mp\".\"playground_activities\" )\n\n  )", "relation_name": "\"dev\".\"mp\".\"playground_activities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.665714Z", "completed_at": "2024-02-04T15:20:06.685328Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.689735Z", "completed_at": "2024-02-04T15:20:06.689750Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.032016754150390625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_super_event", "compiled": true, "compiled_code": "\n\nwith old_super_events as (\n  select  \n    \"time\",\n    name,\n    json_extract_path_text(properties, 'email') as email,\n    json_extract_path_text(properties, 'member_id') as member_id,\n    coalesce(user_id, json_extract_path_text(properties, 'user_uuid', true)) as user_id,\n    json_extract_path_text(properties, 'organisation_id') as organisation_id,\n    case when name ~ 'OnboardingQSuper#SubmitSucceed' then 'superfund' end as survey_type,\n    case when name ~ 'OnboardingQSuper#SubmitSucceed' then 'q-super' end as survey_code    \n  from \"dev\".\"mp\".\"event\"\n  where name ~ '(Onboarding#VisitQSuperDetail|Onboarding#VisitQSuperSurvey|OnboardingQSuper#SubmitSucceed)'\n),\nonboard_super_events as (\n  select  \n    \"time\",\n    name,\n    json_extract_path_text(properties, 'email') as email,\n    json_extract_path_text(properties, 'member_id') as member_id,\n    json_extract_path_text(properties, 'user_id', true) as user_id,\n    json_extract_path_text(properties, 'organisation_id') as organisation_id,\n    json_extract_path_text(properties, 'survey_type') as survey_type,\n    json_extract_path_text(properties, 'survey_code') as survey_code\n  from \"dev\".\"mp\".\"event\" \n  where json_extract_path_text(properties, 'from_onboarding') = 'true'\n   and name ~ '(Visit Super Choice Page|Visit Super Choice Tab|Click View Details)'\n   and json_extract_path_text(properties, 'survey_type') ~ '(^$|superfund)'\n),  \nsuper_events as (\n  select  \n    \"time\",\n    name,\n    json_extract_path_text(properties, 'email') as email,\n    json_extract_path_text(properties, 'member_id') as member_id,\n    json_extract_path_text(properties, 'user_id', true) as user_id,\n    json_extract_path_text(properties, 'organisation_id') as organisation_id,\n    json_extract_path_text(properties, 'survey_type') as survey_type,\n    json_extract_path_text(properties, 'survey_code') as survey_code\n  from \"dev\".\"mp\".\"event\"   \n  where name ~ '(Visit Superfund Vendor Page|Survey Submitted Succeed|Click Apply Now)'\n    and json_extract_path_text(properties, 'survey_type') ~ '(^$|qsuper|superfund)'\n),\nall_super_events as (\n  (select *\n  from old_super_events)\n  union\n  (select * \n  from onboard_super_events)\n  union\n  (select * \n  from super_events)\n)\n\nselect *\nfrom all_super_events \n\n    where \"time\" > (select max(time) from \"dev\".\"mp\".\"super_event\" )\n", "relation_name": "\"dev\".\"mp\".\"super_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.706651Z", "completed_at": "2024-02-04T15:20:06.717629Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.719843Z", "completed_at": "2024-02-04T15:20:06.719856Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024810075759887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.outreach_mails", "compiled": true, "compiled_code": "with\nmax_mail_time as (\n    select\n        relationship_sequence_id,\n        relationship_sequence_step_id,\n        relationship_prospect_id,\n        date(max(updated_at)) as last_action_date\n    from\n        \"dev\".\"outreach_raw\".\"mailing\"\n    where\n        mailing_type = 'sequence'\n        and updated_at is not NULL\n    group by\n        1,\n        2,\n        3\n)\n\nselect distinct\n    m.id,\n    (\n        case\n            when m.error_reason is NULL\n                then NULL\n            when\n                m.error_reason not like '%5.%'\n                and m.error_reason not like '%4.%'\n                then m.error_reason\n            else 'untracked'\n        end\n    )\n    as error_reason,\n    m.state,\n    case\n        when u1.is_active = TRUE\n            then u1.name\n        else 'Inactive'\n    end             as employee_name,\n    case\n        when u2.is_active = TRUE\n            then u2.name\n        else 'Inactive'\n    end             as manager_name,\n    ss.display_name as step_name,\n    ss.step_type,\n    p.name          as prospect_name,\n    --pt.tag_name prospect_tag,\n    s.name          as sequence_name,\n    st.tag_name     as sequence_tag\nfrom\n    \"dev\".\"outreach_raw\".\"mailing\" as m  -- noqa: AL06\nleft join \"dev\".\"salesforce\".\"user\" as u1  -- noqa: AL06\n    on\n        m.mailbox_address = u1.email\n        and u1._fivetran_deleted = FALSE\n-- get manager info\nleft join \"dev\".\"salesforce\".\"user\" as u2  -- noqa: AL06\n    on\n        u1.manager_id = u2.id\n        and u2._fivetran_deleted = FALSE\ninner join max_mail_time as mmax\n    on\n        m.relationship_sequence_id = mmax.relationship_sequence_id\n        and m.relationship_sequence_step_id = mmax.relationship_sequence_step_id\n        and m.relationship_prospect_id = mmax.relationship_prospect_id\ninner join \"dev\".\"outreach_raw\".\"sequence_step\" as ss  -- noqa: AL06\n    on\n        m.relationship_sequence_step_id = ss.id\n        and ss._fivetran_deleted = FALSE\ninner join \"dev\".\"outreach_raw\".\"sequence\" as s  -- noqa: AL06\n    on\n        m.relationship_sequence_id = s.id\n        and s._fivetran_deleted = FALSE\ninner join \"dev\".\"outreach_raw\".\"prospect\" as p  -- noqa: AL06\n    on\n        m.relationship_prospect_id = p.id\n        and p._fivetran_deleted = FALSE\ninner join \"dev\".\"outreach_raw\".\"sequence_tag\" as st  -- noqa: AL06\n    on\n        s.id = st.sequence_id\nwhere\n    m.mailing_type = 'sequence'\n    and m.updated_at is not NULL\n    and m._fivetran_deleted = FALSE", "relation_name": "\"dev\".\"outreach\".\"outreach_mails\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.729345Z", "completed_at": "2024-02-04T15:20:06.734748Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.737020Z", "completed_at": "2024-02-04T15:20:06.737033Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014477968215942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.proserv_csat", "compiled": true, "compiled_code": "\n\nselect distinct\n    r.id,\n    r.created_at                  as response_date,\n    case r.properties_service\n        when 'GuidedHR' then 'Guided HR'\n        when 'GuidedPayroll' then 'Guided Payroll'\n        when 'ManagedHR' then 'Managed HR'\n        when 'ManagedPayroll' then 'Managed Payroll'\n        else r.properties_service\n    end                           as service,\n    case r.properties_phase\n        when 'KickOff' then 'Kick-off'\n        else r.properties_phase\n    end                           as phase,\n    s.id                          as person_id,\n    s.name,\n    s.email,\n    r.score,\n    r.comment,\n    r.permalink                   as survey_link,\n    r.properties_delighted_source as source,\n    r.properties_project_id       as asana_project_id,\n    pj.account_c                  as account_id,\n    pj.imp_proj_id\nfrom\n    \"dev\".\"delighted_proserv_csat\".\"response\" as r\ninner join \"dev\".\"delighted_proserv_csat\".\"person\" as s\n    on\n        r.person_id = s.id\nleft join (\n    select\n        ap.asana_public_asana_project_id_c,\n        imps.account_c,\n        imps.service_offering_c,\n        imps.id as imp_proj_id\n    from\n        \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" as ap\n    inner join \"dev\".\"salesforce\".\"implementation_project_c\" as imps\n        on\n            ap.asana_public_object_id_c = imps.id\n            and not imps.is_deleted and imps.status_c != 'Churned'\n    where not ap.is_deleted\n) as pj\n    on r.properties_project_id = pj.asana_public_asana_project_id_c and ((r.properties_service ilike '%hr%' and pj.service_offering_c not ilike '%payroll%') or (r.properties_service ilike '%payroll%' and pj.service_offering_c not ilike '%hr%'))", "relation_name": "\"dev\".\"proserv\".\"csat\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.743234Z", "completed_at": "2024-02-04T15:20:06.749712Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.751972Z", "completed_at": "2024-02-04T15:20:06.751985Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012484550476074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.proserv_eligibility_milestone", "compiled": true, "compiled_code": "\n\nselect\n    pt.project_id,\n    t2.approval_status\nfrom \"dev\".\"asana\".\"task\" as t\ninner join \"dev\".\"asana\".\"project_task\" as pt on t.id = pt.task_id\ninner join \"dev\".\"workshop_public\".\"asana_tasks\" as t2 on t.id = t2.id\nwhere t.name ~ 'Eligibility Milestone -' and not isnull(t._fivetran_deleted, 'f')", "relation_name": "\"dev\".\"proserv\".\"eligibility_milestone\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.758276Z", "completed_at": "2024-02-04T15:20:06.771926Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.774459Z", "completed_at": "2024-02-04T15:20:06.774472Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020147323608398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_closed_lost_opportunity_reasons", "compiled": true, "compiled_code": "\n\nwith\n  opportunity_lost_reason as (\nselect distinct\n  o.id as opportunity_id\n  , o.lost_sub_reason_c as lost_reason\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and o.lost_sub_reason_c is not null\n  and o.lost_sub_reason_c not in ( 'Duplicate', 'Other', '' )\n  \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = o.lost_sub_reason_c)\n   \nunion\nselect distinct\n  o.id as opportunity_id\n  , split_part(o.opp_Loss_Sub_Reason_c, ';', 1) as opp_lost_sub_reason\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and opp_lost_sub_reason is not null\n  and opp_lost_sub_reason not in ( 'Duplicate', 'Other', '' )\n  \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = opp_lost_sub_reason)\n     \nunion\nselect distinct\n  o.id as opportunity_id\n  , split_part(o.opp_Loss_Sub_Reason_c, ';', 2) col2\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and col2 is not null\n  and col2 not in ( 'Duplicate', 'Other', '' )\n    \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = col2)\n         \nunion\nselect distinct\n  o.id as opportunity_id\n  , split_part(o.opp_Loss_Sub_Reason_c, ';', 3) col3\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and col3 is not null\n  and col3 not in ( 'Duplicate', 'Other', '' )\n  \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = col3)\n     \nunion\nselect distinct\n  o.id as opportunity_id\n  , split_part(o.opp_Loss_Sub_Reason_c, ';', 4) col4\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and col4 is not null\n  and col4 not in ( 'Duplicate', 'Other', '' )\n  \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = col4)\n     \nunion\nselect distinct\n  o.id as opportunity_id\n  , split_part(o.opp_Loss_Sub_Reason_c, ';', 5) col5\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and col5 is not null\n  and col5 not in ( 'Duplicate', 'Other', '' )\n  \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = col5)\n     \nunion\nselect distinct\n  o.id as opportunity_id\n  , split_part(o.opp_Loss_Sub_Reason_c, ';', 6) col6\nfrom\n  \"dev\".\"salesforce\".\"opportunity\" o\nwhere\n  o.stage_name = 'Lost'\n  and not o.is_deleted\n  and o.lost_reason_c ilike 'product%'\n  and col6 is not null\n  and col6 not in ( 'Duplicate', 'Other', '' )\n  \n  and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\" r where r.opportunity_id = o.id and r.lost_reason = col6)\n     \norder by\n  1, 2\n    )\n\nselect\n  r.*\n  , f.workstream\n  , f.product_line\n  , f.product_family\nfrom opportunity_lost_reason r\nleft join \"dev\".\"eh_product\".\"opp_lost_ownership\" as s on\n  lower(r.lost_reason) = lower(s.lost_sub_reason)\nleft join \"dev\".\"eh_product\".\"workstream_ownership\" f on\n  s.workstream = f.workstream", "relation_name": "\"dev\".\"sales\".\"closed_lost_opportunity_reasons\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.781103Z", "completed_at": "2024-02-04T15:20:06.790862Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.793153Z", "completed_at": "2024-02-04T15:20:06.793165Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016042232513427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_csat", "compiled": true, "compiled_code": "\n\nselect\n  r.id\n  , r.created_at as response_date\n  , o.id as opportunity_id\n  , o.account_id\n  , p.name\n  , p.email\n  , r.score\n  , r.permalink as survey_link\n  , ra.free_response as comment\nfrom\n    \"dev\".\"delighted_sales_csat\".\"response\" as r\n  left join \"dev\".\"delighted_sales_csat\".\"person\" as p on\n    r.person_id = p.id\n  left join \"dev\".\"delighted_sales_csat\".\"response_answer\" ra on\n    r.id = ra.response_id\n    and ra.question_id = 'text_HCtg6k'\n  left join \"dev\".\"salesforce\".\"opportunity\" as o on\n    r.properties_opportunity_id = o.id\n    and not o.is_deleted\n\n\n  -- this filter will only be applied on an incremental run    \n    where not exists (select 'x' from \"dev\".\"sales\".\"csat\" c where c.id = r.id)\n\n", "relation_name": "\"dev\".\"sales\".\"csat\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.799224Z", "completed_at": "2024-02-04T15:20:06.805006Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.807130Z", "completed_at": "2024-02-04T15:20:06.807142Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011610031127929688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_lead_master", "compiled": true, "compiled_code": "\n\nselect distinct\n    l.id,\n    l.lead_source_type_c,\n    l.lead_source,\n    l.status,\n    l.country,\n    l.became_mql_date,\n    l.requested_demo_date_time,\n    l.converted_date,\n    l.sal_date,\n    l.lost_reason_c,\n    l.mql_score_c,\n    l.sql_score_c,\n    l.sal_score_c,\n    rt.name    as record_type,\n    u.name     as owner_name,\n    p.name     as owner_profile,\n    u.market_c as owner_market,\n    u.manager_name\nfrom\n    (\n        select distinct\n            id,\n            owner_id,\n            record_type_id,\n            lead_source_type_c,\n            lead_source,\n            (case lower(country)\n                when 'united kingdom' then 'United Kingdom'\n                when 'australia' then 'Australia'\n                when 'singapore' then 'Singapore'\n                when 'malaysia' then 'Malaysia'\n                when 'new zealand' then 'New Zealand'\n                else 'Other'\n            end)                                     as country,\n            cast(became_mql_date_c as date)          as became_mql_date,\n            cast(sal_date_c as date)                 as sal_date,\n            cast(requested_demo_date_time_c as date) as requested_demo_date_time,\n            cast(converted_date as date)             as converted_date,\n            lost_reason_c,\n            status,\n            mql_score_c,\n            sql_score_c,\n            sal_score_c\n        --AND cast (became_mql_date_c as date) became_mql_date >= cast('2023-04-01' AS date)\n        from \"dev\".\"salesforce\".\"lead\"\n        where\n            is_deleted = FALSE\n            and _fivetran_deleted = FALSE\n    ) as l\n--record type\nleft join\n    (select distinct\n        id,\n        name\n    from \"dev\".\"salesforce\".\"record_type\"\n    where _fivetran_deleted = FALSE)\n    as rt on l.record_type_id = rt.id\n-- get owner info\nleft join\n    (\n        select distinct\n            u1.id,\n            u1.profile_id,\n            case when u1.is_active = TRUE then u1.name else 'Inactive' end as name,\n            u1.market_c,\n            case when u2.is_active = TRUE then u2.name else 'Inactive' end as manager_name\n        from\n            \"dev\".\"salesforce\".\"user\" as u1\n        -- get manager info\n        left join\n            \"dev\".\"salesforce\".\"user\" as u2\n            on\n                u1.manager_id = u2.id\n                and u2._fivetran_deleted = FALSE\n        where u1._fivetran_deleted = FALSE\n    ) as u on l.owner_id = u.id\n--get profile info\nleft join\n    (\n        select distinct\n            id,\n            name\n        from\n            \"dev\".\"salesforce\".\"profile\"\n        where _fivetran_deleted = FALSE\n    ) as p on u.profile_id = p.id", "relation_name": "\"dev\".\"sales\".\"lead_master\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.813533Z", "completed_at": "2024-02-04T15:20:06.818836Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.820995Z", "completed_at": "2024-02-04T15:20:06.821008Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011456727981567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_opportunities", "compiled": true, "compiled_code": "\n\nselect\n    opportunity.id,\n    opportunity.name,\n    opportunity.created_date,\n    owner.name as owner,\n    demo_sat_date_c as demo_sat_date,\n    geo_code_c as geo_code,\n    opportunity_originator_market_c as originator_market,\n    stage_name,\n    lost_reason_c as lost_reason,\n    lost_sub_reason_c as lost_sub_reason,\n    originator.name as originator,\n    record_type.name as record_type,\n    opportunity.existing_customer_revenue_type_c as existing_customer_revenue_type\nfrom \"dev\".\"salesforce\".\"opportunity\"\njoin \"dev\".\"salesforce\".\"account\" on opportunity.account_id = account.id\njoin \"dev\".\"salesforce\".\"user\" as owner on opportunity.owner_id = owner.id\njoin\n    \"dev\".\"salesforce\".\"user\" as originator\n    on opportunity.opportunity_originator_c = originator.id\njoin \"dev\".\"salesforce\".\"record_type\" on opportunity.record_type_id = record_type.id\nwhere\n    not opportunity.is_deleted\n    and not opportunity._fivetran_deleted\n    and opportunity.name not ilike '%test%'\n    and not account.is_deleted\n    and not account._fivetran_deleted\n    and account.name not ilike '%test%'", "relation_name": "\"dev\".\"sales\".\"opportunities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.827855Z", "completed_at": "2024-02-04T15:20:06.835156Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.837475Z", "completed_at": "2024-02-04T15:20:06.837488Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013619184494018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_opportunity_master", "compiled": true, "compiled_code": "\n\nSelect distinct\no.*,\nrt.name record_type,\na.country,\np.name opp_owner_profile,\nu.market_c opp_owner_market,\nu.name opp_owner_name,\nu.manager_name opp_manager_name,\nuu.name lead_owner_name,\nuu.manager_name lead_manager_name,\npp.name owner_profile,\nuu.market_c owner_market,\n--ARR computation\n(case\n \twhen rt.name = 'Hero_Referrer' then 0\n \twhen rt.name = 'Organic' then o.amount\n \twhen oli.no_lineitem > 0 then oli.ARR\n \twhen o.quote_arr_c >0 then o.quote_arr_c\n \twhen o.stage_name = 'Won' then oli.ARR\n \twhen a.geo_code_c = 'AU' and rt.name = 'Direct Sales' then 12*13.36*opportunity_employees_c\n \twhen a.geo_code_c = 'AU' and rt.name = 'Upsell' then 12*3.56*opportunity_employees_c\n \twhen a.geo_code_c = 'NZ' and rt.name = 'Direct Sales' then 12*10.64*opportunity_employees_c\n \twhen a.geo_code_c = 'NZ' and rt.name = 'Upsell' then 12*2.65*opportunity_employees_c\n \twhen a.geo_code_c = 'SG' and rt.name = 'Direct Sales' then 12*5.00*opportunity_employees_c\n \twhen a.geo_code_c = 'SG' and rt.name = 'Upsell' then 12*1.25*opportunity_employees_c\n  \twhen a.geo_code_c = 'MY' and rt.name = 'Direct Sales' then 12*9.99*opportunity_employees_c\n \twhen a.geo_code_c = 'MY' and rt.name = 'Upsell' then 12*2.51*opportunity_employees_c\n \twhen a.geo_code_c = 'UK' and rt.name = 'Direct Sales' then 12*6.65*opportunity_employees_c\n \twhen a.geo_code_c = 'UK' and rt.name = 'Upsell' then 12*1.66*opportunity_employees_c\n \telse 0\nend) as ARR\nfrom\n-- obtain a subset from opportunity\n(select distinct\n id,\n owner_id,\n record_type_id,\n account_id,\n lead_source_type_c conversion_source_type,\n existing_customer_revenue_type_c,\n cast(created_date as date) created_date,\n cast(became_mql_date_c as date) became_mql_date,\n cast(Demo_Sat_Date_c as date) demo_sat_date,\n cast(close_date as date) close_date,\n lost_reason_c,\n opportunity_employees_c,\n stage_name,\n probability,\n amount,\n quote_arr_c,\n quote_srr_c,\n opportunity_originator_c,\n originating_lead_id_c,\n admin_opportunity_c,\n industry_c\nfrom \"dev\".\"salesforce\".\"opportunity\"\nwhere is_deleted = 'False'\n --and admin_opportunity_c = 'False' --exclude admin opportunities\n --and cast(became_mql_date_c as date) >= dateadd(year,-2,current_date) -- set dates\n) o\n-- get record types\nleft join\n(select distinct\nid,\nname\nfrom\n\"dev\".\"salesforce\".\"record_type\")\nrt on rt.id = o.record_type_id\n-- get opp owner info\nleft join\n(select distinct\nu1.id,\nu1.name,\nu1.profile_id,\nu1.market_c,\nu2.name manager_name\nfrom\n\"dev\".\"salesforce\".\"user\" u1\n-- get manager info\n left join\n \"dev\".\"salesforce\".\"user\" u2 on u1.manager_id = u2.id\n) u on u.id = o.owner_id\n-- join profile\nleft join\n(select distinct\nid,\nname\nfrom \"dev\".\"salesforce\".\"profile\"\nwhere _fivetran_deleted = false\n)p on p.id = u.profile_id\n\n\n-- get originator/lead owner info\nleft join\n(select distinct\nu1.id,\nu1.profile_id,\nCASE WHEN u1.is_active = TRUE THEN u1.name ELSE 'Inactive' END AS name,\nu1.market_c,\nCASE WHEN u2.is_active = TRUE THEN u2.name ELSE 'Inactive' END AS manager_name\nfrom\n\"dev\".\"salesforce\".\"user\" u1\n-- get manager info\n left join\n \"dev\".\"salesforce\".\"user\"u2 on u1.manager_id = u2.id\n) uu on uu.id = o.opportunity_originator_c\n\nleft join\n(select distinct\nid,\nname\nfrom \"dev\".\"salesforce\".\"profile\"\nwhere _fivetran_deleted = false\n)pp on pp.id = uu.profile_id\n\n-- get account info\nleft join\n(select distinct\nid,\nname,\naccount_number,\n(case geo_code_c\nwhen 'UK' then 'United Kingdom'\nwhen 'AU' then 'Australia'\nwhen 'SG' then 'Singapore'\nwhen 'MY' then 'Malaysia'\nwhen 'NZ' then 'New Zealand'\nend) as country,\ngeo_code_c\nfrom\n\"dev\".\"salesforce\".\"account\"\nwhere is_deleted = 'False') a on a.id = o.account_id\n-- opportunity lineitem for ARR\nleft join\n(select distinct\n opportunity_id,\n count ( distinct id ) no_lineitem,\n sum((case when revenue_type_c = 'Monthly Recurring - Usage' then (list_price - discount_dollars_c) * quantity * 12\n else 0 end )) as ARR\n from \"dev\".\"salesforce\".\"opportunity_line_item\"\n where is_deleted = 'False'\n group by opportunity_id) oli\n on oli.opportunity_id = o.id", "relation_name": "\"dev\".\"sales\".\"opportunity_master\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.844963Z", "completed_at": "2024-02-04T15:20:06.851703Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.853989Z", "completed_at": "2024-02-04T15:20:06.854002Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013594388961791992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__app_store__app", "compiled": true, "compiled_code": "\n\nwith source as (\n\n    select * from \"dev\".\"app_store\".\"app\"\n\n),\n\nrenamed as (\n\n    select\n        id   as app_id,\n        is_enabled,\n        name as app_name\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"app_store\".\"stg__app_store__app\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.860696Z", "completed_at": "2024-02-04T15:20:06.865499Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.867770Z", "completed_at": "2024-02-04T15:20:06.867784Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011220216751098633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__app_store__review", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"app_store\".\"review\"\n\n),\n\nrenamed as (\n\n    select\n        app_id,\n        id,\n        date(last_modified) as date_day,\n        rating,\n        edited,\n        title               as review_title,\n        content             as review_content,\n        total_views,\n        helpful_views,\n        nickname,\n        app_version_string  as app_version,\n        last_modified\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"app_store\".\"stg__app_store__review\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.877768Z", "completed_at": "2024-02-04T15:20:06.887034Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.889434Z", "completed_at": "2024-02-04T15:20:06.889446Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.019047975540161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__aba_details", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"aba_details\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        businessid::bigint      as businessid,\n        extracted_at::varchar   as extracted_at,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"aba_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.676085Z", "completed_at": "2024-02-04T15:20:06.882421Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.884732Z", "completed_at": "2024-02-04T15:20:06.884745Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2307124137878418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.opportunity__formula", "compiled": true, "compiled_code": "\n\n-- Best practice for this model is to be materialized as view. That is why we have set that here.\n\n\n/*\n    The below sets the old_formula_fields variable to the results of the get_column_values results which queries the field column from the fivetran_formula table.\n    The logic here is that the variable will be a list of all current salesforce formula field names. This list is then used within the dbt_utils.star operation to exclude them.\n    This allows users with the Fivetran legacy Salesforce fields to ignore them and be replaced by the new fields.\n*/\n\n\n\n\nSELECT \nmt.specialisation_c,\nmt.number_of_entities_c,\nmt.lost_reason_c,\nmt.allocation_notes_c,\nmt.competitor_selection_required_c,\nmt.discount_dollars_approved_c,\nmt.next_step,\nmt.lid_main_competitors_c,\nmt.exclude_from_payment_report_c,\nmt.lead_original_lost_reason_c,\nmt.referee_s_name_c,\nmt.marketing_plan_actioned_c,\nmt.lid_order_number_c,\nmt.international_opportunity_c,\nmt.last_referenced_date,\nmt.admin_opportunity_c,\nmt.lost_to_a_competitor_c,\nmt.discount_before_submitting_to_approval_c,\nmt.quote_srr_c,\nmt.x_3_rd_party_integrations_c,\nmt.record_type_id,\nmt.considering_competitors_c,\nmt.completed_quote_c,\nmt.call_back_date_change_count_c,\nmt.lead_original_lost_date_c,\nmt.quote_arr_c,\nmt.contract_term_c,\nmt.discovery_completed_c,\nmt.discount_approval_rejected_c,\nmt.original_lead_source_sub_type_c,\nmt.lead_lost_count_c,\nmt.buyc_code_c,\nmt.lead_source_sub_type_c,\nmt.opportunity_is_closed_c,\nmt.opp_lost_to_competitor_c,\nmt.regions_serviced_c,\nmt.time_on_hold_c,\nmt.last_amount_changed_history_id,\nmt.terminated_contract_c,\nmt.fiscal_quarter,\nmt.opportunity_originator_market_c,\nmt.became_sql_date_c,\nmt.lean_data_days_in_stage_c,\nmt.payment_terms_c,\nmt.drill_down_source_c,\nmt.reactivated_c,\nmt.account_id,\nmt.sent_notification_days_on_hold_date_c,\nmt.lead_original_lost_sub_reason_c,\nmt.lean_data_status_info_c,\nmt.drift_requested_contact_c,\nmt.close_date,\nmt.last_modified_date,\nmt.lid_delivery_installation_status_c,\nmt.legacy_org_id_c,\nmt.opportunity_originator_c,\nmt.budget_confirmed_c,\nmt.reactivated_source_drilldown_c,\nmt.lead_score_over_40_no_request_con_c,\nmt.date_when_the_stage_is_changed_c,\nmt.most_recent_sales_contact_c,\nmt.roi_analysis_completed_c,\nmt.on_hold_reason_c,\nmt.days_in_current_stage_for_report_c,\nmt.opp_on_hold_start_date_c,\nmt.existing_customer_revenue_type_c,\nmt.created_from_lead_c,\nmt.zi_campaign_c,\nmt.campaign_id,\nmt.is_closed,\nmt.number_of_locations_c,\nmt.requested_contact_c,\nmt.bizible_2_bizible_opportunity_amount_c,\nmt.purchasing_drivers_c,\nmt.synced_quote_id,\nmt.referee_s_business_name_c,\nmt.became_a_customer_date_c,\nmt.opportunity_originator_manager_c,\nmt.name,\nmt.reactivated_lead_source_sub_type_c,\nmt.lid_linked_in_company_id_c,\nmt.lid_is_influenced_c,\nmt.became_opportunity_date_c,\nmt.internal_eh_referer_c,\nmt.company_website_c,\nmt.delayed_implementation_date_c,\nmt.lean_data_routing_action_c,\nmt.originally_free_email_c,\nmt.description,\nmt.opp_loss_reason_detail_c,\nmt.lead_original_lost_to_competitor_c,\nmt.onboarding_specialist_c,\nmt.lead_original_loss_reason_c,\nmt.last_close_date_changed_history_id,\nmt.pandadoc_tracking_number_c,\nmt.expected_revenue,\nmt.hero_network_referred_c,\nmt.demo_rebook_c,\nmt.became_hot_lead_date_c,\nmt.opp_on_hold_detail_c,\nmt.opp_loss_sub_reason_c,\nmt.free_account_c,\nmt.payment_frequency_c,\nmt.managers_email_c,\nmt.stated_payroll_system_other_c,\nmt.offer_c,\nmt.original_lead_source_type_c,\nmt.discount_approval_product_id_c,\nmt.lead_original_loss_sub_reason_c,\nmt.gclid_c,\nmt.zqu_current_generators_c,\nmt.lean_data_reporting_total_marketing_touches_c,\nmt.stated_hr_system_other_c,\nmt.implementation_training_completed_c,\nmt.owner_id,\nmt.original_point_of_conversion_c,\nmt.zqu_tracking_number_c,\nmt.lead_source,\nmt.products_interested_in_c,\nmt.provisioning_notes_c,\nmt.type,\nmt.referee_s_email_address_c,\nmt.most_recent_point_of_conversion_c,\nmt.fiscal_year,\nmt.lost_sub_reason_c,\nmt.id,\nmt.demo_sat_date_c,\nmt.lead_source_type_c,\nmt.employment_split_c,\nmt.hr_system_c,\nmt.probability,\nmt.contract_generated_c,\nmt.reactivated_lead_source_type_c,\nmt.customer_marketing_executive_manager_c,\nmt.original_loss_reason_detail_c,\nmt.demo_is_booked_c,\nmt.hot_content_download_c,\nmt.test_opportunity_c,\nmt.vip_strategic_client_c,\nmt.no_of_employees_originally_contracted_c,\nmt.commercial_model_finalised_c,\nmt.next_steps_timelines_c,\nmt.forecast_category,\nmt.opp_product_discount_requested_user_name_c,\nmt.demo_rating_c,\nmt.zqu_zuora_config_c,\nmt.lid_my_geolocation_latitude_s,\nmt.number_of_clients_c,\nmt.last_viewed_date,\nmt.loss_reason_c,\nmt.hero_network_referral_partner_c,\nmt.top_pain_points_c,\nmt.has_open_activity,\nmt.lean_data_reporting_opportunity_source_c,\nmt.opp_products_that_needs_discount_c,\nmt.lid_my_geolocation_longitude_s,\nmt.linked_in_company_id_c,\nmt.zqu_delivery_installation_status_c,\nmt.content_downloaded_c,\nmt.lid_tracking_number_c,\nmt.became_workable_lead_date_c,\nmt.opp_loss_reason_c,\nmt.payroll_handover_notes_c,\nmt.no_guided_payroll_zuora_c,\nmt.hot_lead_c,\nmt.referred_by_a_friend_c,\nmt.push_count,\nmt.activity_metric_id,\nmt.payroll_admin_capability_c,\nmt.hubspot_score_40_c,\nmt.contact_c,\nmt.how_did_you_hear_about_employment_hero_c,\nmt.lid_my_date_time_c,\nmt.date_demo_booked_c,\nmt.x_3_rd_party_integrations_other_c,\nmt.opportunity_employees_c,\nmt.most_recently_engaged_contact_c,\nmt.account_referral_partner_c,\nmt.pricebook_2_id,\nmt.demo_rating_feedback_c,\nmt.implementation_training_kickoff_c,\nmt.originally_stated_no_of_employees_c,\nmt.reactivated_lead_date_c,\nmt.last_modified_by_id,\nmt.system_modstamp,\nmt.get_started_submission_c,\nmt.stage_name,\nmt.last_stage_change_date,\nmt.stage_at_loss_point_c,\nmt.number_of_contacts_roles_assigned_c,\nmt.zqu_order_number_c,\nmt.trigger_quote_rollup_c,\nmt.workable_lead_c,\nmt.push_count_c,\nmt.originating_lead_id_c,\nmt.last_activity_date,\nmt.opportunity_closed_date_c,\nmt.lid_current_generators_c,\nmt.is_won,\nmt.payment_method_c,\nmt.most_recent_sent_email_c,\nmt.fiscal,\nmt.partner_for_implementation_c,\nmt.opp_on_hold_end_date_c,\nmt.created_by_id,\nmt.recycled_lead_c,\nmt.is_private,\nmt.zqu_main_competitors_c,\nmt.industry_c,\nmt.has_overdue_task,\nmt.recycled_lead_date_c,\nmt.contact_id,\nmt.activity_metric_rollup_id,\nmt.stated_payroll_system_c,\nmt.is_deleted,\nmt.currency_iso_code,\nmt.handover_notes_c,\nmt.managed_implementations_c,\nmt.competitors_considered_c,\nmt.sent_notification_days_on_hold_c,\nmt.amount,\nmt.opp_call_back_date_c,\nmt.project_manager_c,\nmt.free_account_feature_selection_c,\nmt.csat_sent_date_c,\nmt.opportunity_originator_profile_c,\nmt.secondary_opportunity_owner_c,\nmt.marketing_plan_agreed_c,\nmt.gong_main_competitors_c,\nmt.has_opportunity_line_item,\nmt.no_of_guided_hr_implementations_c,\nmt.forecast_category_name,\nmt.company_linked_in_c,\nmt.created_date,\nmt.became_mql_date_c,\nmt._fivetran_synced,\nmt._fivetran_deleted,\nnull AS total_quantity_c,\nCASE WHEN mt.is_won THEN COALESCE(rs1.rsf5,0) ELSE 0 END AS closed_won_arr_c,\njt4.team_c AS owner_team_c,\nCOALESCE(rs1.rsf4,0) AS no_managed_payroll_products_c,\nCONVERT(VARCHAR, jt1.industry_secondary_c) AS account_industry_secondary_c,\nCASE WHEN ((COALESCE(EXTRACT(YEAR FROM DATE(mt.created_date)),0)=COALESCE(EXTRACT(YEAR FROM mt.close_date),0)) AND (COALESCE(EXTRACT(MONTH FROM DATE(mt.created_date)),0)=COALESCE(EXTRACT(MONTH FROM mt.close_date),0)) AND mt.is_closed) THEN CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Hero_Referrer','')) THEN 0 ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Organic','')) THEN mt.amount ELSE CASE WHEN (COALESCE(COALESCE(rs1.rsf6,0),0)>COALESCE(0,0)) THEN COALESCE(rs1.rsf7,0) ELSE CASE WHEN (COALESCE(mt.quote_arr_c,0)>COALESCE(0,0)) THEN mt.quote_arr_c ELSE CASE WHEN (COALESCE(UPPER(mt.stage_name),'')=COALESCE(UPPER('Won'),'')) THEN COALESCE(rs1.rsf7,0) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('AU'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(13.36,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(3.56,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('NZ'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(10.64,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('SG'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(5.00,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.25,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('MY'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(9.99,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.51,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('UK'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(6.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.66,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE 0 END END END END END END END END END END ELSE 0 END AS created_closed_c,\nCOALESCE(rs1.rsf18,0) AS no_of_eap_product_c,\njt8.name AS creator_profile_c,\njt6.org_id_c AS org_id_c,\n(DATEDIFF(SECOND, mt.date_when_the_stage_is_changed_c, CURRENT_DATE)/(24.0*60*60)) AS days_in_current_stage_c,\n1 AS opportunity_c,\nCOALESCE(rs1.rsf7,0) AS product_arr_c,\nCOALESCE(rs1.rsf11,0) AS product_recurring_srr_c,\nnull AS discount_approval_product_link_c,\nCASE WHEN mt.is_won THEN COALESCE(rs1.rsf8,0) ELSE 0 END AS won_product_rev_roll_up_recurring_c,\nCOALESCE(rs1.rsf2,0) AS no_s_013_product_c,\njt5.name AS owner_profile_c,\nnull AS commission_fee_c,\nCOALESCE(rs1.rsf13,0) AS product_revenue_roll_up_c,\nCOALESCE(rs1.rsf24,0) AS no_line_items_to_review_c,\nnull AS estimated_total_employees_c,\n(COALESCE((COALESCE(CONVERT(VARCHAR, EXTRACT(YEAR FROM DATE(mt.created_date))),'')||COALESCE('-','')),'')||COALESCE(CASE EXTRACT(MONTH FROM DATE(mt.created_date)) WHEN 1 THEN '01' WHEN 2 THEN '02' WHEN 3 THEN '03' WHEN 4 THEN '04' WHEN 5 THEN '05' WHEN 6 THEN '06' WHEN 7 THEN '07' WHEN 8 THEN '08' WHEN 9 THEN '09' WHEN 10 THEN '10' WHEN 11 THEN '11' WHEN 12 THEN '12' ELSE 'None' END,'')) AS created_month_c,\n1 AS gong_gong_count_c,\nmt.id AS record_id_18_d_c,\nCOALESCE(rs1.rsf1,0) AS no_guided_payroll_products_c,\nCASE WHEN CASE WHEN mt.offer_c IS NOT NULL THEN UPPER(mt.offer_c) LIKE '%'||UPPER('May 2020 SME Booster Offer')||'%' ELSE FALSE END THEN 'May 2020 SME Booster Offer' ELSE CASE WHEN (LENGTH(COALESCE(mt.offer_c,''))=0) THEN 'No Offer' ELSE 'Others' END END AS offer_bucket_c,\nCOALESCE(rs1.rsf9,0) AS monthly_price_roll_up_c,\njt1.name AS opp_account_name_c,\njt11.name AS price_book_c,\nnull AS valid_billing_account_c,\nCOALESCE(rs1.rsf17,0) AS qty_opportunity_products_c,\n(NOT (mt.demo_sat_date_c IS NULL)) AS demo_sat_c,\njt8.name AS created_by_profile_c,\nnull AS mkto_si_marketo_analyzer_c,\nCASE WHEN (mt.opp_on_hold_end_date_c IS NULL) THEN (DATEDIFF(SECOND, mt.opp_on_hold_start_date_c, CURRENT_DATE)/(24.0*60*60)) ELSE (DATEDIFF(SECOND, mt.opp_on_hold_start_date_c, mt.opp_on_hold_end_date_c)/(24.0*60*60)) END AS opp_days_on_hold_c,\nCOALESCE(rs1.rsf6,0) AS no_line_items_c,\nCOALESCE(rs1.rsf22,0) AS total_arr_c,\nCOALESCE(rs1.rsf5,0) AS product_arr_roll_up_c,\nCOALESCE(rs1.rsf19,0) AS product_arr_roll_up_temporary_c,\nnull AS number_of_primary_competitors_c,\n(COALESCE(mt.bizible_2_bizible_opportunity_amount_c,0)!=COALESCE(CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Hero_Referrer','')) THEN 0 ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Organic','')) THEN mt.amount ELSE CASE WHEN (COALESCE(COALESCE(rs1.rsf6,0),0)>COALESCE(0,0)) THEN COALESCE(rs1.rsf7,0) ELSE CASE WHEN (COALESCE(mt.quote_arr_c,0)>COALESCE(0,0)) THEN mt.quote_arr_c ELSE CASE WHEN (COALESCE(UPPER(mt.stage_name),'')=COALESCE(UPPER('Won'),'')) THEN COALESCE(rs1.rsf7,0) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('AU'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(13.36,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(3.56,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('NZ'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(10.64,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('SG'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(5.00,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.25,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('MY'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(9.99,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.51,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('UK'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(6.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.66,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE 0 END END END END END END END END END END,0)) AS sync_bizible_field_c,\n(COALESCE((COALESCE(jt10.first_name,'')||COALESCE(' ','')),'')||COALESCE(jt10.last_name,'')) AS managers_name_c,\nCOALESCE(rs1.rsf15,0) AS list_price_2_0_keypay_org_c,\nCASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)=COALESCE(0,0))) THEN 'Managed HR and Guided Payroll' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)>COALESCE(0,0))) THEN 'Guided HR and Managed Payroll' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)>COALESCE(0,0))) THEN 'Managed HR and Managed Payroll' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)=COALESCE(0,0))) THEN 'Managed HR' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)>COALESCE(0,0))) THEN 'Managed Payroll' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)=COALESCE(0,0))) THEN 'Guided HR and Guided Payroll' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)=COALESCE(0,0))) THEN 'Guided HR' ELSE CASE WHEN ((COALESCE(COALESCE(rs1.rsf1,0),0)>COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)=COALESCE(0,0))) THEN 'Guided Payroll' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)>COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)=COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('HRNone',''))) THEN 'Managed HR and Guided Payroll' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)=COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)>COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('NonePayroll',''))) THEN 'Guided HR and Managed Payroll' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)=COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)=COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('HRPayroll',''))) THEN 'Managed HR and Managed Payroll' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)=COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)=COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('HRNone',''))) THEN 'Managed HR' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)=COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)=COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('NonePayroll',''))) THEN 'Managed Payroll' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)>COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)>COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('NoneNone',''))) THEN 'Guided HR and Guided Payroll' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)=COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)>COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('NoneNone',''))) THEN 'Guided HR' ELSE CASE WHEN ((COALESCE(mt.no_guided_payroll_zuora_c,0)>COALESCE(0,0)) AND (COALESCE(mt.no_of_guided_hr_implementations_c,0)=COALESCE(0,0)) AND (COALESCE(mt.managed_implementations_c,'')=COALESCE('NoneNone',''))) THEN 'Guided Payroll' ELSE CASE WHEN (((COALESCE(mt.no_guided_payroll_zuora_c,0)=COALESCE(0,0)) OR (mt.no_guided_payroll_zuora_c IS NULL)) AND ((COALESCE(mt.no_of_guided_hr_implementations_c,0)=COALESCE(0,0)) OR (mt.no_of_guided_hr_implementations_c IS NULL)) AND ((COALESCE(mt.managed_implementations_c,'')=COALESCE('NoneNone','')) OR (LENGTH(COALESCE(mt.managed_implementations_c,''))=0)) AND (COALESCE(COALESCE(rs1.rsf1,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf2,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf3,0),0)=COALESCE(0,0)) AND (COALESCE(COALESCE(rs1.rsf4,0),0)=COALESCE(0,0))) THEN 'No Implementation' ELSE 'See Contract' END END END END END END END END END END END END END END END END END AS implementation_type_c,\n(COALESCE((COALESCE((COALESCE((COALESCE(CASE WHEN (COALESCE(UPPER(mt.type),'')=COALESCE(UPPER(''),'')) THEN 0 ELSE 20 END,0)+COALESCE(CASE WHEN (COALESCE(LENGTH(COALESCE(CONVERT(VARCHAR, EXTRACT(MONTH FROM mt.close_date)),'')),0)=COALESCE(0,0)) THEN 0 ELSE 20 END,0)),0)+COALESCE(CASE WHEN (COALESCE(mt.amount,0)<=COALESCE(0,0)) THEN 0 ELSE 20 END,0)),0)+COALESCE(CASE WHEN (COALESCE(UPPER(mt.lead_source),'')=COALESCE(UPPER(''),'')) THEN 0 ELSE 20 END,0)),0)+COALESCE(CASE WHEN (COALESCE(LENGTH(COALESCE(mt.next_step,'')),0)=COALESCE(0,0)) THEN 0 ELSE 20 END,0)) AS data_quality_score_c,\nCOALESCE(rs1.rsf23,0) AS one_off_product_total_amount_c,\njt2.email AS opp_contact_email_c,\nCASE WHEN ((COALESCE(EXTRACT(YEAR FROM DATE(mt.created_date)),0)=COALESCE(EXTRACT(YEAR FROM mt.close_date),0)) AND (COALESCE(EXTRACT(MONTH FROM DATE(mt.created_date)),0)=COALESCE(EXTRACT(MONTH FROM mt.close_date),0)) AND mt.is_closed) THEN COALESCE(rs1.rsf5,0) ELSE 0 END AS created_closed_within_month_c,\nCONVERT(VARCHAR, jt1.industry_primary_c) AS account_industry_primary_c,\nCOALESCE(rs1.rsf10,0) AS product_one_off_rev_roll_up_c,\nCOALESCE(rs1.rsf8,0) AS product_revenue_roll_up_recurring_rev_c,\nCASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Hero_Referrer','')) THEN 0 ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Organic','')) THEN mt.amount ELSE CASE WHEN (COALESCE(COALESCE(rs1.rsf6,0),0)>COALESCE(0,0)) THEN COALESCE(rs1.rsf7,0) ELSE CASE WHEN (COALESCE(mt.quote_arr_c,0)>COALESCE(0,0)) THEN mt.quote_arr_c ELSE CASE WHEN (COALESCE(UPPER(mt.stage_name),'')=COALESCE(UPPER('Won'),'')) THEN COALESCE(rs1.rsf7,0) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('AU'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(13.36,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(3.56,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('NZ'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(10.64,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('SG'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(5.00,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.25,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('MY'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(9.99,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.51,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('UK'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(6.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.66,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE 0 END END END END END END END END END END AS annual_recurring_revenue_c,\njt1.legal_name_c AS legal_name_c,\njt1.number_of_active_contacts_c AS number_of_contacts_c,\nNULLIF(COALESCE(NULLIF(COALESCE(jt2.first_name,'')||COALESCE(' ',''),''),'')||COALESCE(jt2.last_name,''),'') AS opp_contact_name_c,\nCOALESCE(rs1.rsf14,0) AS discount_in_services_c,\nCOALESCE(rs1.rsf20,0) AS product_arr_rollup_c,\nCASE WHEN (COALESCE((COALESCE((COALESCE((COALESCE((COALESCE(CASE WHEN (COALESCE(UPPER(mt.type),'')=COALESCE(UPPER(''),'')) THEN 0 ELSE 20 END,0)+COALESCE(CASE WHEN (COALESCE(LENGTH(COALESCE(CONVERT(VARCHAR, EXTRACT(MONTH FROM mt.close_date)),'')),0)=COALESCE(0,0)) THEN 0 ELSE 20 END,0)),0)+COALESCE(CASE WHEN (COALESCE(mt.amount,0)<=COALESCE(0,0)) THEN 0 ELSE 20 END,0)),0)+COALESCE(CASE WHEN (COALESCE(UPPER(mt.lead_source),'')=COALESCE(UPPER(''),'')) THEN 0 ELSE 20 END,0)),0)+COALESCE(CASE WHEN (COALESCE(LENGTH(COALESCE(mt.next_step,'')),0)=COALESCE(0,0)) THEN 0 ELSE 20 END,0)),0)=COALESCE(100,0)) THEN 'All Opportunity Details Captured' ELSE (COALESCE((COALESCE((COALESCE((COALESCE((COALESCE((COALESCE((COALESCE((COALESCE((COALESCE('Missing: ','')||COALESCE(CASE WHEN (COALESCE(UPPER(mt.type),'')=COALESCE(UPPER(''),'')) THEN 'Type, ' ELSE '' END,'')),'')||COALESCE('','')),'')||COALESCE(CASE WHEN (COALESCE(LENGTH(COALESCE(CONVERT(VARCHAR, EXTRACT(MONTH FROM mt.close_date)),'')),0)=COALESCE(0,0)) THEN 'Close Date, ' ELSE '' END,'')),'')||COALESCE('','')),'')||COALESCE(CASE WHEN (COALESCE(mt.amount,0)<=COALESCE(0,0)) THEN 'Amount, ' ELSE '' END,'')),'')||COALESCE('','')),'')||COALESCE(CASE WHEN (COALESCE(UPPER(mt.lead_source),'')=COALESCE(UPPER(''),'')) THEN 'Lead Source, ' ELSE '' END,'')),'')||COALESCE('','')),'')||COALESCE(CASE WHEN (COALESCE(LENGTH(COALESCE(mt.next_step,'')),0)=COALESCE(0,0)) THEN 'Next Steps' ELSE '' END,'')) END AS data_quality_description_c,\n(COALESCE(((COALESCE(COALESCE(rs1.rsf9,0),0)*COALESCE(mt.contract_term_c,0))),0)+COALESCE(COALESCE(rs1.rsf10,0),0)) AS total_contract_value_c,\nnull AS sf_base_url_c,\nCOALESCE(rs1.rsf16,0) AS total_opportunity_amount_c,\n1 AS power_of_1_oppt_c,\nCONVERT(VARCHAR, jt1.geo_code_c) AS geo_code_c,\nCASE mt.stage_name WHEN 'Won' THEN COALESCE(rs1.rsf8,0) ELSE CASE WHEN (COALESCE(COALESCE(rs1.rsf8,0),0)>COALESCE(0,0)) THEN COALESCE(rs1.rsf8,0) ELSE CASE WHEN (COALESCE(mt.amount,0)>COALESCE(0,0)) THEN mt.amount ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('AU'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(13.36,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(3.56,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('NZ'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(10.64,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('SG'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(5.00,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.25,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('MY'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(9.99,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.51,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('UK'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(6.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.66,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE 0 END END END END END END END END AS sales_recognised_revenue_c,\nCASE WHEN (COALESCE(COALESCE(rs1.rsf6,0),0)>COALESCE(0,0)) THEN COALESCE(rs1.rsf11,0) ELSE CASE WHEN (COALESCE(mt.quote_srr_c,0)>COALESCE(0,0)) THEN mt.quote_srr_c ELSE CASE WHEN (COALESCE(UPPER(mt.stage_name),'')=COALESCE(UPPER('Won'),'')) THEN COALESCE(rs1.rsf11,0) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('AU'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(13.36,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(3.56,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('NZ'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(10.64,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('SG'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(5.00,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.25,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('MY'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(9.99,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(2.51,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE CASE WHEN (COALESCE(UPPER(CONVERT(VARCHAR, jt1.geo_code_c)),'')=COALESCE(UPPER('UK'),'')) THEN (CASE WHEN ((COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_greater_100','')) OR (COALESCE(jt3.developer_name,'')=COALESCE('Direct_Sales_Employees_Less_100',''))) THEN (COALESCE((COALESCE(12,0)*COALESCE(6.65,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE CASE WHEN (COALESCE(jt3.developer_name,'')=COALESCE('Upsell','')) THEN (COALESCE((COALESCE(12,0)*COALESCE(1.66,0)),0)*COALESCE(mt.opportunity_employees_c,0)) ELSE 0 END END) ELSE 0 END END END END END END END END AS sales_recognised_revenue_2_c,\nCOALESCE(rs1.rsf12,0) AS list_price_2_0_eh_org_c,\njt1.company_abn_c AS company_abn_c,\nmt.account_id AS salesforce_account_id_c,\nCASE WHEN (COALESCE(mt.opportunity_employees_c,0)<COALESCE(151,0)) THEN 'Core' ELSE 'Mid-Market' END AS opportunity_market_c,\njt9.name AS salesforce_campaign_c,\nCOALESCE(rs1.rsf21,0) AS discount_in_monthly_recurring_c,\njt3.name AS record_type_text_c,\nDATEADD(SECONDS, CAST((MOD((DATEDIFF(SECOND, DATE(FLOOR(1900)||'-'||FLOOR(1)||'-'||FLOOR(8)), DATE(mt.created_date))/(24.0*60*60)),7) * 24 * 60 * 60) * -1 AS INTEGER), DATE(mt.created_date)) AS start_date_of_created_week_c,\nnull AS mkto_si_sales_insight_c,\n'<a href=\"' || NULLIF(COALESCE(NULLIF(COALESCE(NULLIF(COALESCE('https://www.payway.com.au/SignUp?ClientNumber=Q24002&Frequency=VARIABLE&AddressRequired=false&CustomerNumber=','')||COALESCE(mt.account_id,''),''),'')||COALESCE('&CustomerName=',''),''),'')||COALESCE(jt1.name,''),'') || '\" target=\"' || '_blank' || '\">' || 'Payway link' || '</a>' AS payway_link_c,\nCOALESCE(rs1.rsf3,0) AS no_managed_hr_implementation_products_c,\nCASE WHEN mt.opportunity_is_closed_c THEN (DATEDIFF(SECOND, DATE(mt.created_date), mt.opportunity_closed_date_c)/(24.0*60*60)) ELSE (DATEDIFF(SECOND, DATE(mt.created_date), CURRENT_DATE)/(24.0*60*60)) END AS opportunity_age_c,\nCASE WHEN ((COALESCE(EXTRACT(YEAR FROM DATE(mt.created_date)),0)=COALESCE(EXTRACT(YEAR FROM mt.close_date),0)) AND (COALESCE(EXTRACT(MONTH FROM DATE(mt.created_date)),0)=COALESCE(EXTRACT(MONTH FROM mt.close_date),0)) AND mt.is_closed AND (NOT (COALESCE(UPPER(mt.existing_customer_revenue_type_c),'')=COALESCE(UPPER('ANZ > Paid'),'')))) THEN (CASE WHEN (COALESCE(COALESCE(rs1.rsf8,0),0)=COALESCE(0,0)) THEN mt.amount ELSE COALESCE(rs1.rsf8,0) END) ELSE 0 END AS created_closed_recurring_rev_c,\nnull AS hero_hub_opportunity_c\n FROM dev.salesforce.opportunity AS mt LEFT JOIN dev.salesforce.account AS jt1 ON mt.account_id=jt1.id LEFT JOIN dev.salesforce.user AS jt4 ON mt.owner_id=jt4.id LEFT JOIN dev.salesforce.user AS jt7 ON mt.created_by_id=jt7.id LEFT JOIN dev.salesforce.campaign AS jt9 ON mt.campaign_id=jt9.id LEFT JOIN dev.salesforce.record_type AS jt3 ON mt.record_type_id=jt3.id LEFT JOIN dev.salesforce.pricebook_2 AS jt11 ON mt.pricebook_2_id=jt11.id LEFT JOIN dev.salesforce.contact AS jt2 ON mt.contact_c=jt2.id LEFT JOIN dev.salesforce.eh_org_c AS jt6 ON jt1.eh_org_c=jt6.id LEFT JOIN dev.salesforce.profile AS jt5 ON jt4.profile_id=jt5.id LEFT JOIN dev.salesforce.user AS jt10 ON jt4.manager_id=jt10.id LEFT JOIN dev.salesforce.profile AS jt8 ON jt7.profile_id=jt8.id LEFT JOIN (SELECT ch1.opportunity_id AS par1,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('Monthly Recurring - Usage')),FALSE)) THEN CASE WHEN (COALESCE(CASE WHEN ch1.quantity<0 THEN FLOOR(ch1.quantity)+1 ELSE FLOOR(ch1.quantity) END,0)=COALESCE(ch1.quantity,0)) THEN (COALESCE(ch1.sales_price_unique_c,0)*COALESCE(ch1.quantity,0)) ELSE ROUND((COALESCE(ch1.sales_price_unique_c,0)*COALESCE(ch1.quantity,0)),0) END ELSE NULL END) AS rsf9,COUNT(ch1.Id) AS rsf6,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('Monthly Recurring - Usage')),FALSE)) THEN CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END ELSE NULL END) AS rsf5,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('Monthly Recurring - Usage')),FALSE)) THEN CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END ELSE NULL END) AS rsf8,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('Monthly Recurring - Usage'),'')) THEN (COALESCE((COALESCE(((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0))),0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) ELSE 0 END) AS rsf7,SUM(CASE WHEN (COALESCE(ch1.product_code_text_c IN ('A005','A006'),FALSE)) THEN 1 ELSE 0 END) AS rsf18,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('Monthly Recurring - Usage')),FALSE)) THEN CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END ELSE NULL END) AS rsf19,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('One-Off')),FALSE)) THEN ch1.discount_dollars_c ELSE NULL END) AS rsf14,SUM(CASE WHEN (ch1.product_code_text_c LIKE '%HP%') THEN ch1.list_price_2_0_c ELSE NULL END) AS rsf15,SUM(ch1.total_price_backup_c) AS rsf16,COUNT(ch1.Id) AS rsf17,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('One-Off')),FALSE)) THEN CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END ELSE NULL END) AS rsf10,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('Monthly Recurring - Usage')),FALSE)) THEN ch1.discount_dollars_c ELSE NULL END) AS rsf21,SUM(CASE WHEN (COALESCE(ch1.product_code_text_c IN ('S013','S015'),FALSE)) THEN 1 ELSE 0 END) AS rsf2,SUM(ch1.opportunity_product_srr_c) AS rsf11,SUM(CASE WHEN (COALESCE(ch1.product_code_text_c IN ('S014','S016','HP003SG','HP003NZ','HP003UK'),FALSE)) THEN 1 ELSE 0 END) AS rsf1,SUM(ch1.arr_annuity_c) AS rsf22,SUM(ch1.list_price_2_0_c) AS rsf12,SUM(CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('One-Off')),FALSE)) THEN ch1.total_price_backup_c ELSE NULL END) AS rsf23,SUM(CASE WHEN (COALESCE(ch1.product_code_text_c IN ('S003'),FALSE)) THEN 1 ELSE 0 END) AS rsf4,SUM(CASE WHEN (COALESCE(CASE WHEN (COALESCE(CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END,0)=COALESCE(ch1.total_price,0)) THEN TRUE ELSE FALSE END IN (False),FALSE)) AND (COALESCE(UPPER(ch1.revenue_type_c) IN (UPPER('Monthly Recurring - Usage')),FALSE)) THEN 1 ELSE 0 END) AS rsf24,SUM(CASE WHEN (COALESCE(ch1.product_code_text_c IN ('S001'),FALSE)) THEN 1 ELSE 0 END) AS rsf3,SUM(CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END) AS rsf13,SUM(CASE WHEN ((ch1.list_price_2_0_c IS NULL) OR (COALESCE(ch1.list_price_2_0_c,0)=COALESCE(0,0))) THEN CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(((COALESCE((COALESCE(ch1.list_price,0)-COALESCE(ch1.discount_dollars_c,0)),0)-COALESCE(ch1.cogs_c,0))),0)*COALESCE(12,0)),0)*COALESCE(ch1.quantity,0)) END ELSE CASE WHEN (COALESCE(UPPER(ch1.revenue_type_c),'')=COALESCE(UPPER('One-Off'),'')) THEN (COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)) ELSE (COALESCE((COALESCE(ch1.list_price_2_0_c,0)*COALESCE(ch1.quantity,0)),0)*COALESCE(12,0)) END END) AS rsf20 FROM dev.salesforce.opportunity_line_item AS ch1 \nWHERE NOT ch1._fivetran_deleted GROUP BY par1) AS rs1 ON rs1.par1=mt.id \nWHERE NOT mt._fivetran_deleted\n\n", "relation_name": "\"dev\".\"salesforce\".\"opportunity__formula\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.896112Z", "completed_at": "2024-02-04T15:20:06.901772Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.905727Z", "completed_at": "2024-02-04T15:20:06.905742Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014796972274780273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__accrual_status", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"accrual_status\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        description::varchar    as description,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"accrual_status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.914847Z", "completed_at": "2024-02-04T15:20:06.924882Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.927070Z", "completed_at": "2024-02-04T15:20:06.927083Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018837451934814453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__award_package", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"award_package\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                  as id,  -- noqa: RF04\n        name::varchar               as name,  -- noqa: RF04\n        date_created_utc::varchar   as date_created_utc,\n        fair_work_award_id::varchar as fair_work_award_id,\n        is_disabled::boolean        as is_disabled,\n        _file::varchar              as _file,\n        _transaction_date::date     as _transaction_date,\n        _etl_date::timestamp        as _etl_date,\n        _modified::timestamp        as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"award_package\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.920543Z", "completed_at": "2024-02-04T15:20:06.930936Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.935915Z", "completed_at": "2024-02-04T15:20:06.935929Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0282590389251709, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__bacs_details", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"bacs_details\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        businessid::bigint      as businessid,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"bacs_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.937104Z", "completed_at": "2024-02-04T15:20:06.947321Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.955670Z", "completed_at": "2024-02-04T15:20:06.955683Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026325464248657227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__bank_account", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"bank_account\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                     as id,  -- noqa: RF04\n        employee_id::varchar           as employee_id,\n        external_reference_id::varchar as external_reference_id,\n        source::varchar                as source,  -- noqa: RF04\n        account_type::varchar          as account_type,\n        _file::varchar                 as _file,\n        _transaction_date::date        as _transaction_date,\n        _etl_date::timestamp           as _etl_date,\n        _modified::timestamp           as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"bank_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.948524Z", "completed_at": "2024-02-04T15:20:06.956992Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.962077Z", "completed_at": "2024-02-04T15:20:06.962090Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020554542541503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__bank_payment_file_details", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"bank_payment_file_details\"\n\n),\n\nrenamed as (\n\n    select\n        id::varchar                              as id,  -- noqa: RF04\n        business_id::varchar                     as business_id,\n        file_format::varchar                     as file_format,\n        originating_account_number::varchar      as originating_account_number,\n        originating_account_name::varchar        as originating_account_name,\n        lodgement_reference::varchar             as lodgement_reference,\n        merge_multiple_account_payments::boolean as merge_multiple_account_payments,\n        payment_additional_content::varchar      as payment_additional_content,\n        transaction_reference_number::varchar    as transaction_reference_number,\n        is_confidential::boolean                 as is_confidential,\n        is_payment_integration::boolean          as is_payment_integration,\n        _file::varchar                           as _file,\n        _transaction_date::date                  as _transaction_date,\n        _etl_date::timestamp                     as _etl_date,\n        _modified::timestamp                     as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"bank_payment_file_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.968781Z", "completed_at": "2024-02-04T15:20:06.980171Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.984567Z", "completed_at": "2024-02-04T15:20:06.984590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023839235305786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__billing_plan", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"billing_plan\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                           as id,  -- noqa: RF04\n        name::varchar                        as name,  -- noqa: RF04\n        function_employee_onboarding::bigint as function_employee_onboarding,\n        price_per_unit::float                as price_per_unit,\n        _file::varchar                       as _file,\n        _transaction_date::date              as _transaction_date,\n        _etl_date::timestamp                 as _etl_date,\n        _modified::timestamp                 as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"billing_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.975695Z", "completed_at": "2024-02-04T15:20:06.983263Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:06.988705Z", "completed_at": "2024-02-04T15:20:06.988718Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018367290496826172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__business_award_package", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"business_award_package\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                    as id,  -- noqa: RF04\n        business_id::bigint                           as business_id,\n        award_package_id::bigint                      as award_package_id,\n        current_version_id::bigint                    as current_version_id,\n        award_package_name::varchar                   as award_package_name,\n        installation_status::bigint                   as installation_status,\n        installation_status_last_updated_utc::varchar as installation_status_last_updated_utc,\n        _file::varchar                                as _file,\n        _transaction_date::date                       as _transaction_date,\n        _etl_date::timestamp                          as _etl_date,\n        _modified::timestamp                          as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"business_award_package\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.998255Z", "completed_at": "2024-02-04T15:20:07.008237Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.010528Z", "completed_at": "2024-02-04T15:20:07.010541Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018974781036376953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__contribution_info", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"contribution_info\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        cont_amount::float      as cont_amount,\n        cont_type::varchar      as cont_type,\n        super_member_id::bigint as super_member_id,\n        employee_id::bigint     as employee_id,\n        failed::boolean         as failed,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"contribution_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.003991Z", "completed_at": "2024-02-04T15:20:07.013217Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.018116Z", "completed_at": "2024-02-04T15:20:07.018130Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023908138275146484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__contribution_info_deduction", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"contribution_info_deduction\"\n\n),\n\nrenamed as (\n\n    select\n        id::varchar                  as id,  -- noqa: RF04\n        contribution_info_id::bigint as contribution_info_id,\n        deduction_id::bigint         as deduction_id,\n        failed::boolean              as failed,\n        _file::varchar               as _file,\n        _transaction_date::date      as _transaction_date,\n        _etl_date::timestamp         as _etl_date,\n        _modified::timestamp         as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"contribution_info_deduction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.022031Z", "completed_at": "2024-02-04T15:20:07.034844Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.039379Z", "completed_at": "2024-02-04T15:20:07.039395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025268077850341797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__csn_details", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"csn_details\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                     as id,  -- noqa: RF04\n        business_id::bigint            as business_id,\n        cpf_submission_number::varchar as cpf_submission_number,\n        csn_type::bigint               as csn_type,\n        is_deleted::boolean            as is_deleted,\n        _file::varchar                 as _file,\n        _transaction_date::date        as _transaction_date,\n        _etl_date::timestamp           as _etl_date,\n        _modified::timestamp           as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"csn_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.030325Z", "completed_at": "2024-02-04T15:20:07.036039Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.040591Z", "completed_at": "2024-02-04T15:20:07.040604Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015785694122314453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__deduction", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"deduction\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                               as id,  -- noqa: RF04\n        employee_id::bigint                                      as employee_id,\n        pay_run_total_id::bigint                                 as pay_run_total_id,\n        deduction_category_id::bigint                            as deduction_category_id,\n        amount::float                                            as amount,\n        pay_run_id::bigint                                       as pay_run_id,\n        employee_super_fund_id::bigint                           as employee_super_fund_id,\n        contribution_info_id::varchar                            as contribution_info_id,\n        associated_employee_deduction_category_id::bigint        as associated_employee_deduction_category_id,\n        bank_account_id::bigint                                  as bank_account_id,\n        is_resc::boolean                                         as is_resc,\n        bank_account_bsb::varchar                                as bank_account_bsb,\n        bank_account_number::varchar                             as bank_account_number,\n        bank_account_type::bigint                                as bank_account_type,\n        is_member_voluntary::boolean                             as is_member_voluntary,\n        associated_employee_pension_contribution_plan_id::bigint as associated_employee_pension_contribution_plan_id,\n        is_pension_scheme_salary_sacrifice::boolean              as is_pension_scheme_salary_sacrifice,\n        additional_data::bigint                                  as additional_data,\n        decode(\n            lower(paid_to_tax_office),\n            'true', TRUE,\n            'false', FALSE\n        )::boolean                                               as paid_to_tax_office,\n        payg_adjustment_id::bigint                               as payg_adjustment_id,\n        bank_account_swift::varchar                              as bank_account_swift,\n        bank_account_branch_code::varchar                        as bank_account_branch_code,\n        _file::varchar                                           as _file,\n        _transaction_date::date                                  as _transaction_date,\n        _etl_date::timestamp                                     as _etl_date,\n        _modified::timestamp                                     as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"deduction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.052266Z", "completed_at": "2024-02-04T15:20:07.063094Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.067637Z", "completed_at": "2024-02-04T15:20:07.067651Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.023038387298583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__deduction_category", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"deduction_category\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                     as id,  -- noqa: RF04\n        deduction_category_name::varchar               as deduction_category_name,\n        business_id::bigint                            as business_id,\n        tax_exempt::boolean                            as tax_exempt,\n        is_deleted::boolean                            as is_deleted,\n        source::bigint                                 as source,  -- noqa: RF04\n        external_reference_id::varchar                 as external_reference_id,\n        payment_summary_classification_id::bigint      as payment_summary_classification_id,\n        expense_general_ledger_mapping_code::varchar   as expense_general_ledger_mapping_code,\n        liability_general_ledger_mapping_code::varchar as liability_general_ledger_mapping_code,\n        sgc_calculation_impact::varchar                as sgc_calculation_impact,\n        minimum_wage_deduction_impact::bigint          as minimum_wage_deduction_impact,\n        is_system::boolean                             as is_system,\n        deduction_category_ext_sg_id::bigint           as deduction_category_ext_sg_id,\n        deduction_category_ext_uk_id::bigint           as deduction_category_ext_uk_id,\n        is_resc::boolean                               as is_resc,\n        is_name_read_only::boolean                     as is_name_read_only,\n        is_allow_pre_tax_super::boolean                as is_allow_pre_tax_super,\n        is_allow_member_voluntary::boolean             as is_allow_member_voluntary,\n        _file::varchar                                 as _file,\n        _transaction_date::date                        as _transaction_date,\n        _etl_date::timestamp                           as _etl_date,\n        _modified::timestamp                           as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"deduction_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.058608Z", "completed_at": "2024-02-04T15:20:07.064260Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.068850Z", "completed_at": "2024-02-04T15:20:07.068863Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.023117542266845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__device_token", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"device_token\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                as id,  -- noqa: RF04\n        user_id::bigint           as user_id,\n        platform::bigint          as platform,\n        endpoint::varchar         as endpoint,\n        date_created_utc::varchar as date_created_utc,\n        _file::varchar            as _file,\n        _transaction_date::date   as _transaction_date,\n        _etl_date::timestamp      as _etl_date,\n        _modified::timestamp      as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"device_token\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.080868Z", "completed_at": "2024-02-04T15:20:07.089754Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.091987Z", "completed_at": "2024-02-04T15:20:07.092001Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018981218338012695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__earnings_line", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"earnings_line\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                      as id,  -- noqa: RF04\n        employee_id::bigint             as employee_id,\n        pay_category_id::bigint         as pay_category_id,\n        pay_run_id::bigint              as pay_run_id,\n        units::float                    as units,\n        location_id::bigint             as location_id,\n        pay_run_total_id::bigint        as pay_run_total_id,\n        rate::float                     as rate,\n        earnings_line_status_id::bigint as earnings_line_status_id,\n        external_reference_id::varchar  as external_reference_id,\n        net_earnings::float             as net_earnings,\n        net_earnings_reporting::float   as net_earnings_reporting,\n        earnings_line_ext_au_id::bigint as earnings_line_ext_au_id,\n        _file::varchar                  as _file,\n        _transaction_date::date         as _transaction_date,\n        _etl_date::timestamp            as _etl_date,\n        _modified::timestamp            as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"earnings_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.085280Z", "completed_at": "2024-02-04T15:20:07.093148Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.098225Z", "completed_at": "2024-02-04T15:20:07.098238Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024096965789794922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__earnings_line_ext_au", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"earnings_line_ext_au\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                    as id,  -- noqa: RF04\n        earnings_line_id::bigint                      as earnings_line_id,\n        pay_run_id::bigint                            as pay_run_id,\n        average_total_earnings_amount::float          as average_total_earnings_amount,\n        average_total_earnings_payg_amount::float     as average_total_earnings_payg_amount,\n        average_additional_payments_amount::float     as average_additional_payments_amount,\n        full_earnings_payg_amount::float              as full_earnings_payg_amount,\n        calculated_payg_amount::float                 as calculated_payg_amount,\n        max_payg_amount::float                        as max_payg_amount,\n        gross_earnings_amount::float                  as gross_earnings_amount,\n        gross_earnings_payg_amount::float             as gross_earnings_payg_amount,\n        pre_adjustment_payg_withholding_amount::float as pre_adjustment_payg_withholding_amount,\n        gross_earnings_stsl_amount::float             as gross_earnings_stsl_amount,\n        average_total_earnings_stsl_amount::float     as average_total_earnings_stsl_amount,\n        full_earnings_stsl_amount::float              as full_earnings_stsl_amount,\n        calculated_stsl_amount::float                 as calculated_stsl_amount,\n        lump_sum_e_financial_year::bigint             as lump_sum_e_financial_year,\n        _file::varchar                                as _file,\n        _transaction_date::date                       as _transaction_date,\n        _etl_date::timestamp                          as _etl_date,\n        _modified::timestamp                          as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"earnings_line_ext_au\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.104962Z", "completed_at": "2024-02-04T15:20:07.113646Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.123226Z", "completed_at": "2024-02-04T15:20:07.123241Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.025310993194580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employee_deduction_category", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee_deduction_category\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                           as id,  -- noqa: RF04\n        employee_id::bigint                                  as employee_id,\n        deduction_category_id::bigint                        as deduction_category_id,\n        from_date::varchar                                   as from_date,\n        to_date::varchar                                     as to_date,\n        amount::float                                        as amount,\n        employee_super_fund_id::bigint                       as employee_super_fund_id,\n        expiry_date::varchar                                 as expiry_date,\n        maximum_amount_paid::double precision                as maximum_amount_paid,\n        is_active::boolean                                   as is_active,\n        bank_account_id::bigint                              as bank_account_id,\n        deleted::boolean                                     as deleted,\n        notes::varchar                                       as notes,\n        external_reference_id::varchar                       as external_reference_id,\n        source::bigint                                       as source,  -- noqa: RF04\n        deduction_type::bigint                               as deduction_type,\n        preserved_earnings::bigint                           as preserved_earnings,\n        preserved_earnings_amount::float                     as preserved_earnings_amount,\n        preserved_earnings_amount_not_reached_action::bigint as preserved_earnings_amount_not_reached_action,\n        carry_forward_unpaid_deductions::boolean             as carry_forward_unpaid_deductions,\n        payment_reference::varchar                           as payment_reference,\n        employee_pension_contribution_plan_id::bigint        as employee_pension_contribution_plan_id,\n        additional_data::bigint                              as additional_data,\n        decode(\n            lower(paid_to_tax_office),\n            'true', TRUE,\n            'false', FALSE\n        )::boolean                                           as paid_to_tax_office,\n        priority::bigint                                     as priority,\n        student_loan_deduction_option::bigint                as student_loan_deduction_option,\n        decode(\n            lower(carry_forward_unused_preserved_earnings),\n            'true', TRUE,\n            'false', FALSE\n        )::boolean                                           as carry_forward_unused_preserved_earnings,\n        tiered_deduction_settings_id::bigint                 as tiered_deduction_settings_id,\n        paid_to_external_service::bigint                     as paid_to_external_service,\n        employee_deduction_category_ext_sg_id::bigint        as employee_deduction_category_ext_sg_id,\n        employee_deduction_category_ext_my_id::bigint        as employee_deduction_category_ext_my_id,\n        _file::varchar                                       as _file,\n        _transaction_date::date                              as _transaction_date,\n        _etl_date::timestamp                                 as _etl_date,\n        _modified::timestamp                                 as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employee_deduction_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.117430Z", "completed_at": "2024-02-04T15:20:07.127349Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.134670Z", "completed_at": "2024-02-04T15:20:07.134684Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028534889221191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employee_expense", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee_expense\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                            as id,  -- noqa: RF04\n        pay_run_id::bigint                    as pay_run_id,\n        pay_run_total_id::bigint              as pay_run_total_id,\n        employee_id::bigint                   as employee_id,\n        employee_expense_category_id::bigint  as employee_expense_category_id,\n        location_id::bigint                   as location_id,\n        business_id::bigint                   as business_id,\n        amount::float                         as amount,\n        notes::varchar                        as notes,\n        external_id::varchar                  as external_id,\n        employee_recurring_expense_id::bigint as employee_recurring_expense_id,\n        employee_expense_request_id::bigint   as employee_expense_request_id,\n        tax_code::varchar                     as tax_code,\n        tax_rate::double precision            as tax_rate,\n        tax_code_display_name::varchar        as tax_code_display_name,\n        _file::varchar                        as _file,\n        _transaction_date::date               as _transaction_date,\n        _etl_date::timestamp                  as _etl_date,\n        _modified::timestamp                  as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employee_expense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.139637Z", "completed_at": "2024-02-04T15:20:07.154548Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.156989Z", "completed_at": "2024-02-04T15:20:07.157002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.026362180709838867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employee_expense_request", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee_expense_request\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                        as id,  -- noqa: RF04\n        employee_id::bigint               as employee_id,\n        status::bigint                    as status,\n        created_by_user_id::bigint        as created_by_user_id,\n        date_created_utc::varchar         as date_created_utc,\n        status_updated_by_user_id::bigint as status_updated_by_user_id,\n        date_status_updated_utc::varchar  as date_status_updated_utc,\n        description::varchar              as description,\n        status_update_notes::varchar      as status_update_notes,\n        pay_run_total_id::bigint          as pay_run_total_id,\n        business_id::bigint               as business_id,\n        date_first_approved_utc::varchar  as date_first_approved_utc,\n        _file::varchar                    as _file,\n        _transaction_date::date           as _transaction_date,\n        _etl_date::timestamp              as _etl_date,\n        _modified::timestamp              as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employee_expense_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.148471Z", "completed_at": "2024-02-04T15:20:07.161056Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.165798Z", "completed_at": "2024-02-04T15:20:07.165812Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025762557983398438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employee_history", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee_history\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                         as id,  -- noqa: RF04\n        employee_id::bigint                as employee_id,\n        employee_history_action_id::bigint as employee_history_action_id,\n        date_created::varchar              as date_created,\n        _file::varchar                     as _file,\n        _transaction_date::date            as _transaction_date,\n        _etl_date::timestamp               as _etl_date,\n        _modified::timestamp               as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employee_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.167572Z", "completed_at": "2024-02-04T15:20:07.126166Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.133469Z", "completed_at": "2024-02-04T15:20:07.133484Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.0147690773010254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__white_label_contact", "compiled": true, "compiled_code": "\n\nselect\n    \"id\",\n  \"white_label_id\",\n  \"user_id\",\n  \"contact_type\",\n  \"name\",\n  \"email\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"white_label_contact\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay_s3\".\"white_label_contact_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.166935Z", "completed_at": "2024-02-04T15:20:07.175715Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.182668Z", "completed_at": "2024-02-04T15:20:07.182684Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02783060073852539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employee_pay_category", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee_pay_category\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                         as id,  -- noqa: RF04\n        calculated_rate::float             as calculated_rate,\n        employee_id::bigint                as employee_id,\n        standard_weekly_hours::float       as standard_weekly_hours,\n        is_default::boolean                as is_default,\n        from_date::varchar                 as from_date,\n        to_date::varchar                   as to_date,\n        user_supplied_rate::float          as user_supplied_rate,\n        standard_daily_hours::varchar      as standard_daily_hours,\n        pay_category_rate_unit_id::varchar as pay_category_rate_unit_id,\n        employee_rate_unit_id::varchar     as employee_rate_unit_id,\n        expiry_date::varchar               as expiry_date,\n        _file::varchar                     as _file,\n        _transaction_date::date            as _transaction_date,\n        _etl_date::timestamp               as _etl_date,\n        _modified::timestamp               as _modified,\n        pay_category_id::varchar           as pay_category_id\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employee_pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.185239Z", "completed_at": "2024-02-04T15:20:07.194013Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.204516Z", "completed_at": "2024-02-04T15:20:07.204531Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03434109687805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employee_super_fund", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee_super_fund\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                   as id,  -- noqa: RF04\n        super_fund_name::varchar                     as super_fund_name,\n        member_number::varchar                       as member_number,\n        allocated_percentage::double precision       as allocated_percentage,\n        fixed_amount::double precision               as fixed_amount,\n        employee_id::varchar                         as employee_id,\n        deleted::boolean                             as deleted,\n        super_fund_product_id::bigint                as super_fund_product_id,\n        has_non_super_stream_compliant_fund::boolean as has_non_super_stream_compliant_fund,\n        date_employee_nominated_utc::varchar         as date_employee_nominated_utc,\n        super_details_default_fund_id::bigint        as super_details_default_fund_id,\n        self_managed_super_fund_id::bigint           as self_managed_super_fund_id,\n        _file::varchar                               as _file,\n        _transaction_date::date                      as _transaction_date,\n        _etl_date::timestamp                         as _etl_date,\n        _modified::timestamp                         as _modified,\n        allocate_balance::varchar                    as allocate_balance\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employee_super_fund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.198881Z", "completed_at": "2024-02-04T15:20:07.209997Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.216344Z", "completed_at": "2024-02-04T15:20:07.216359Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02893352508544922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employment_agreement", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employment_agreement\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                        as id,  -- noqa: RF04\n        business_id::bigint               as business_id,\n        classification::varchar           as classification,\n        date_created_utc::varchar         as date_created_utc,\n        external_reference_id::bigint     as external_reference_id,\n        is_deleted::boolean               as is_deleted,\n        business_award_package_id::bigint as business_award_package_id,\n        _file::varchar                    as _file,\n        _transaction_date::date           as _transaction_date,\n        _etl_date::timestamp              as _etl_date,\n        _modified::timestamp              as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employment_agreement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.205804Z", "completed_at": "2024-02-04T15:20:07.215070Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.222593Z", "completed_at": "2024-02-04T15:20:07.222606Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.033416032791137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__employment_type", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employment_type\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        description::varchar    as description,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"employment_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.225030Z", "completed_at": "2024-02-04T15:20:07.233823Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.247450Z", "completed_at": "2024-02-04T15:20:07.247464Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03744697570800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__expense", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"expense\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                  as id,  -- noqa: RF04\n        expense_date::varchar       as expense_date,\n        business_id::bigint         as business_id,\n        unit_cost::float            as unit_cost,\n        quantity::float             as quantity,\n        invoice_id::bigint          as invoice_id,\n        notes::varchar              as notes,\n        expense_type::bigint        as expense_type,\n        displayed_unit_cost::bigint as displayed_unit_cost,\n        _file::varchar              as _file,\n        _transaction_date::date     as _transaction_date,\n        _etl_date::timestamp        as _etl_date,\n        _modified::timestamp        as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"expense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.238768Z", "completed_at": "2024-02-04T15:20:07.256255Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.265607Z", "completed_at": "2024-02-04T15:20:07.265622Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03871607780456543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__expense_type", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"expense_type\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        description::varchar    as description,\n        unit_cost::float        as unit_cost,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"expense_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.248819Z", "completed_at": "2024-02-04T15:20:07.259880Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.268142Z", "completed_at": "2024-02-04T15:20:07.268156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04062986373901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__fair_work_award", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"fair_work_award\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        name::varchar           as name,  -- noqa: RF04\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"fair_work_award\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.271053Z", "completed_at": "2024-02-04T15:20:07.283471Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.292192Z", "completed_at": "2024-02-04T15:20:07.292206Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03711748123168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__fair_work_award_selection", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"fair_work_award_selection\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                 as id,  -- noqa: RF04\n        fair_work_award_id::bigint as fair_work_award_id,\n        business_id::bigint        as business_id,\n        date_time_utc::varchar     as date_time_utc,\n        source::bigint             as source,  -- noqa: RF04\n        _file::varchar             as _file,\n        _transaction_date::date    as _transaction_date,\n        _etl_date::timestamp       as _etl_date,\n        _modified::timestamp       as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"fair_work_award_selection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.295671Z", "completed_at": "2024-02-04T15:20:07.309649Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.316990Z", "completed_at": "2024-02-04T15:20:07.317003Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03802800178527832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__industry", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"industry\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        name::varchar           as name,  -- noqa: RF04\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.301552Z", "completed_at": "2024-02-04T15:20:07.310881Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.318198Z", "completed_at": "2024-02-04T15:20:07.318211Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03725934028625488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__invoice", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"invoice\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                as id,  -- noqa: RF04\n        date::varchar             as date,  -- noqa: RF04\n        gst_rate::float           as gst_rate,\n        billing_region_id::bigint as billing_region_id,\n        invoicee_id::bigint       as invoicee_id,\n        invoicee_type_id::bigint  as invoicee_type_id,\n        _file::varchar            as _file,\n        _transaction_date::date   as _transaction_date,\n        _etl_date::timestamp      as _etl_date,\n        _modified::timestamp      as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.319364Z", "completed_at": "2024-02-04T15:20:07.329513Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.338078Z", "completed_at": "2024-02-04T15:20:07.338092Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03395390510559082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__invoice_line_item", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"invoice_line_item\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                        as id,  -- noqa: RF04\n        invoice_id::bigint                as invoice_id,\n        total_including_gst::float        as total_including_gst,\n        abn::varchar                      as abn,\n        business_id::bigint               as business_id,\n        quantity::float                   as quantity,\n        billing_code::varchar             as billing_code,\n        billing_plan::varchar             as billing_plan,\n        _file::varchar                    as _file,\n        _transaction_date::date           as _transaction_date,\n        _etl_date::timestamp              as _etl_date,\n        _modified::timestamp              as _modified,\n        unit_price_including_gst::varchar as unit_price_including_gst\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"invoice_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:06.540780Z", "completed_at": "2024-02-04T15:20:07.289921Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.305781Z", "completed_at": "2024-02-04T15:20:07.305797Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.822566032409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_s3_source__zoom_info", "compiled": true, "compiled_code": "\nselect \"record_id\",\n  \"_id\",\n  \"company_name\",\n  \"abn\",\n  \"country\",\n  \"match_status\",\n  \"zoom_info_company_id\",\n  \"website\",\n  \"founded_year\",\n  \"company_hq_phone\",\n  \"revenue_in_000_s_usd_\",\n  \"revenue_range_in_usd_\",\n  \"est_hr_department_budget_in_000_s_usd_\",\n  \"employees\",\n  \"employee_range\",\n  \"past_1_year_employee_growth_rate\",\n  \"past_2_year_employee_growth_rate\",\n  \"sic_code_1\",\n  \"sic_code_2\",\n  \"sic_codes\",\n  \"naics_code_1\",\n  \"naics_code_2\",\n  \"naics_codes\",\n  \"primary_industry\",\n  \"primary_sub_industry\",\n  \"all_industries\",\n  \"all_sub_industries\",\n  \"industry_hierarchical_category\",\n  \"secondary_industry_hierarchical_category\",\n  \"alexa_rank\",\n  \"zoom_info_company_profile_url\",\n  \"linked_in_company_profile_url\",\n  \"facebook_company_profile_url\",\n  \"twitter_company_profile_url\",\n  \"ownership_type\",\n  \"business_model\",\n  \"certified_active_company\",\n  \"certification_date\",\n  \"defunct_company\",\n  \"total_funding_amount_in_000_s_usd_\",\n  \"recent_funding_amount_in_000_s_usd_\",\n  \"recent_funding_round\",\n  \"recent_funding_date\",\n  \"recent_investors\",\n  \"all_investors\",\n  \"company_street_address\",\n  \"company_city\",\n  \"company_state\",\n  \"company_zip_code\",\n  \"company_country\",\n  \"full_address\",\n  \"number_of_locations\",\n  \"company_is_acquired\",\n  \"company_id_ultimate_parent_\",\n  \"entity_name_ultimate_parent_\",\n  \"company_id_immediate_parent_\",\n  \"entity_name_immediate_parent_\",\n  \"relationship_immediate_parent_\",\n  \"_file\",\n  \"_transaction_date\",\n  \"_etl_date\",\n  \"_modified\"\nfrom \"dev\".\"keypay_s3\".\"zoom_info\"", "relation_name": "\"dev\".\"keypay_s3\".\"zoom_info_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.341386Z", "completed_at": "2024-02-04T15:20:07.354629Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.365913Z", "completed_at": "2024-02-04T15:20:07.365928Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.043029069900512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__journal_default_account", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"journal_default_account\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        business_id::bigint     as business_id,\n        account_type::bigint    as account_type,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"journal_default_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.347312Z", "completed_at": "2024-02-04T15:20:07.362237Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.376468Z", "completed_at": "2024-02-04T15:20:07.376483Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0452725887298584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__leave_accrual", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"leave_accrual\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                as id,  -- noqa: RF04\n        employee_id::bigint       as employee_id,\n        accrued_amount::float     as accrued_amount,\n        accrual_status_id::bigint as accrual_status_id,\n        _file::varchar            as _file,\n        _transaction_date::date   as _transaction_date,\n        _etl_date::timestamp      as _etl_date,\n        _modified::timestamp      as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"leave_accrual\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.368907Z", "completed_at": "2024-02-04T15:20:07.382141Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.395865Z", "completed_at": "2024-02-04T15:20:07.395882Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04590487480163574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__leave_allowance_template", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"leave_allowance_template\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                            as id,  -- noqa: RF04\n        business_id::bigint                                   as business_id,\n        name::varchar                                         as name,  -- noqa: RF04\n        external_reference_id::bigint                         as external_reference_id,\n        source::bigint                                        as source,  -- noqa: RF04\n        business_award_package_id::bigint                     as business_award_package_id,\n        leave_accrual_start_date_type::bigint                 as leave_accrual_start_date_type,\n        leave_year_start::varchar                             as leave_year_start,\n        leave_loading_calculated_from_pay_category_id::bigint as leave_loading_calculated_from_pay_category_id,\n        _file::varchar                                        as _file,\n        _transaction_date::date                               as _transaction_date,\n        _etl_date::timestamp                                  as _etl_date,\n        _modified::timestamp                                  as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"leave_allowance_template\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.383509Z", "completed_at": "2024-02-04T15:20:07.393417Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.405240Z", "completed_at": "2024-02-04T15:20:07.405253Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.040215492248535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__leave_category", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"leave_category\"\n\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                               as id,  -- noqa: RF04\n        leave_category_name::varchar             as leave_category_name,\n        business_id::bigint                      as business_id,\n        exclude_from_termination_payout::boolean as exclude_from_termination_payout,\n        is_deleted::boolean                      as is_deleted,\n        unit_type::bigint                        as unit_type,\n        source::bigint                           as source,  -- noqa: RF04\n        date_created::varchar                    as date_created,\n        deduct_from_primary_pay_category::bigint as deduct_from_primary_pay_category,\n        deduct_from_pay_category_id::bigint      as deduct_from_pay_category_id,\n        transfer_to_pay_category_id::bigint      as transfer_to_pay_category_id,\n        leave_category_type::bigint              as leave_category_type,\n        entitlement_period::float                as entitlement_period,\n        contingent_period::float                 as contingent_period,\n        automatically_accrues::boolean           as automatically_accrues,\n        standard_hours_per_year::float           as standard_hours_per_year,\n        units::float                             as units,\n        is_balance_untracked::boolean            as is_balance_untracked,\n        _transaction_date::date                  as _transaction_date,\n        _etl_date::timestamp                     as _etl_date,\n        _modified::timestamp                     as _modified,\n        _file::varchar                           as _file\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"leave_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.397084Z", "completed_at": "2024-02-04T15:20:07.410735Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.419814Z", "completed_at": "2024-02-04T15:20:07.419829Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0368647575378418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__leave_request", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"leave_request\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                as id,  -- noqa: RF04\n        employee_id::bigint       as employee_id,\n        from_date::varchar        as from_date,\n        to_date::varchar          as to_date,\n        total_hours::float        as total_hours,\n        requested_date::varchar   as requested_date,\n        status::varchar           as status,\n        business_id::bigint       as business_id,\n        leave_category_id::bigint as leave_category_id,\n        _file::varchar            as _file,\n        _transaction_date::date   as _transaction_date,\n        _etl_date::timestamp      as _etl_date,\n        _modified::timestamp      as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"leave_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.406404Z", "completed_at": "2024-02-04T15:20:07.416093Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.426286Z", "completed_at": "2024-02-04T15:20:07.426301Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04339408874511719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__location", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"location\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        name::varchar           as name,  -- noqa: RF04\n        businessid::bigint      as businessid,\n        is_deleted::boolean     as is_deleted,\n        parentid::bigint        as parentid,\n        date_created::varchar   as date_created,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.427572Z", "completed_at": "2024-02-04T15:20:07.447977Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.462615Z", "completed_at": "2024-02-04T15:20:07.462630Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05355119705200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__location_restriction", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"location_restriction\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        business_id::bigint     as business_id,\n        user_id::bigint         as user_id,\n        filter_type::bigint     as filter_type,\n        value::varchar          as value,  -- noqa: RF04\n        \"permissions\"::bigint   as \"permissions\",\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"location_restriction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.439252Z", "completed_at": "2024-02-04T15:20:07.450256Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.465066Z", "completed_at": "2024-02-04T15:20:07.465079Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05024123191833496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pay_category", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pay_category\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                as id,  -- noqa: RF04\n        pay_category_name::varchar                as pay_category_name,\n        business_id::bigint                       as business_id,\n        date_created::varchar                     as date_created,\n        rate_unit_id::bigint                      as rate_unit_id,\n        default_super_rate::double precision      as default_super_rate,\n        is_tax_exempt::boolean                    as is_tax_exempt,\n        linked_pay_category_id::bigint            as linked_pay_category_id,\n        is_deleted::boolean                       as is_deleted,\n        external_reference_id::varchar            as external_reference_id,\n        source::bigint                            as source,  -- noqa: RF04\n        is_payroll_tax_exempt::boolean            as is_payroll_tax_exempt,\n        pay_category_type::bigint                 as pay_category_type,\n        business_award_package_id::bigint         as business_award_package_id,\n        payment_summary_classification_id::bigint as payment_summary_classification_id,\n        general_ledger_mapping_code::varchar      as general_ledger_mapping_code,\n        super_liability_mapping_code::varchar     as super_liability_mapping_code,\n        super_expense_mapping_code::varchar       as super_expense_mapping_code,\n        is_w1_exempt::boolean                     as is_w1_exempt,\n        number_of_decimal_places::bigint          as number_of_decimal_places,\n        is_national_insurance_exempt::boolean     as is_national_insurance_exempt,\n        minimum_wage_calculation_impact::bigint   as minimum_wage_calculation_impact,\n        decode(\n            lower(exclude_from_average_earnings),\n            'true', TRUE,\n            'false', FALSE\n        )::boolean                                as exclude_from_average_earnings,\n        cpf_classification_id::bigint             as cpf_classification_id,\n        include_in_gross_rate_of_pay::boolean     as include_in_gross_rate_of_pay,\n        exclude_from_ordinary_earnings::boolean   as exclude_from_ordinary_earnings,\n        hide_units_on_pay_slip::boolean           as hide_units_on_pay_slip,\n        pay_category_ext_my_id::bigint            as pay_category_ext_my_id,\n        rounding_method::bigint                   as rounding_method,\n        pay_category_ext_nz_id::bigint            as pay_category_ext_nz_id,\n        pay_category_ext_uk_id::bigint            as pay_category_ext_uk_id,\n        allowance_description::varchar            as allowance_description,\n        pay_category_ext_sg_id::bigint            as pay_category_ext_sg_id,\n        accrues_leave::varchar                    as accrues_leave,\n        penalty_loading_multiplier::varchar       as penalty_loading_multiplier,\n        rate_loading_multiplier::varchar          as rate_loading_multiplier,\n        _file::varchar                            as _file,\n        _transaction_date::date                   as _transaction_date,\n        _etl_date::timestamp                      as _etl_date,\n        _modified::timestamp                      as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.453041Z", "completed_at": "2024-02-04T15:20:07.463870Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.477554Z", "completed_at": "2024-02-04T15:20:07.477573Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03900003433227539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pay_cycle", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pay_cycle\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                    as id,  -- noqa: RF04\n        business_id::bigint           as business_id,\n        pay_cycle_frequencyid::bigint as pay_cycle_frequencyid,\n        name::varchar                 as name,  -- noqa: RF04\n        last_pay_run::varchar         as last_pay_run,\n        is_deleted::boolean           as is_deleted,\n        aba_detailsid::bigint         as aba_detailsid,\n        _file::varchar                as _file,\n        _transaction_date::date       as _transaction_date,\n        _etl_date::timestamp          as _etl_date,\n        _modified::timestamp          as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pay_cycle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.466274Z", "completed_at": "2024-02-04T15:20:07.476195Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.486656Z", "completed_at": "2024-02-04T15:20:07.486668Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043477535247802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pay_cycle_frequency", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pay_cycle_frequency\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        description::varchar    as description,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pay_cycle_frequency\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.490299Z", "completed_at": "2024-02-04T15:20:07.505836Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.521411Z", "completed_at": "2024-02-04T15:20:07.521425Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.046885013580322266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pay_day_filing", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pay_day_filing\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                               as id,  -- noqa: RF04\n        business_id::bigint                      as business_id,\n        pay_run_id::bigint                       as pay_run_id,\n        status::bigint                           as status,\n        date_last_modified::varchar              as date_last_modified,\n        date_submitted::varchar                  as date_submitted,\n        version::bigint                          as version,  -- noqa: RF04\n        pay_day_filing_lodgement_data_id::bigint as pay_day_filing_lodgement_data_id,\n        _file::varchar                           as _file,\n        _transaction_date::date                  as _transaction_date,\n        _etl_date::timestamp                     as _etl_date,\n        _modified::timestamp                     as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pay_day_filing\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.497505Z", "completed_at": "2024-02-04T15:20:07.506991Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.522912Z", "completed_at": "2024-02-04T15:20:07.522925Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.044477224349975586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pay_event", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pay_event\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                          as id,  -- noqa: RF04\n        business_id::bigint                 as business_id,\n        date_created_utc::varchar           as date_created_utc,\n        status::bigint                      as status,\n        pay_run_id::bigint                  as pay_run_id,\n        date_lodged_utc::varchar            as date_lodged_utc,\n        date_response_received_utc::varchar as date_response_received_utc,\n        pay_run_lodgement_data_id::bigint   as pay_run_lodgement_data_id,\n        is_deleted::boolean                 as is_deleted,\n        stp_version::bigint                 as stp_version,\n        _file::varchar                      as _file,\n        _transaction_date::date             as _transaction_date,\n        _etl_date::timestamp                as _etl_date,\n        _modified::timestamp                as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pay_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.508198Z", "completed_at": "2024-02-04T15:20:07.520214Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.531007Z", "completed_at": "2024-02-04T15:20:07.531020Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04117083549499512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pay_run_lodgement_data", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pay_run_lodgement_data\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        status::bigint          as status,\n        is_test::boolean        as is_test,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pay_run_lodgement_data\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.515899Z", "completed_at": "2024-02-04T15:20:07.525333Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.538677Z", "completed_at": "2024-02-04T15:20:07.538692Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0408320426940918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__payrun", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"payrun\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                        as id,  -- noqa: RF04\n        date_finalised::varchar           as date_finalised,\n        pay_period_starting::varchar      as pay_period_starting,\n        pay_period_ending::varchar        as pay_period_ending,\n        date_paid::varchar                as date_paid,\n        business_id::bigint               as business_id,\n        invoice_id::bigint                as invoice_id,\n        date_first_finalised::date        as date_first_finalised,\n        pay_run_lodgement_data_id::bigint as pay_run_lodgement_data_id,\n        notification_date::varchar        as notification_date,\n        finalised_by_id::bigint           as finalised_by_id,\n        pay_cycle_id::bigint              as pay_cycle_id,\n        pay_cycle_frequency_id::bigint    as pay_cycle_frequency_id,\n        date_created_utc::varchar         as date_created_utc,\n        _file::varchar                    as _file,\n        _transaction_date::date           as _transaction_date,\n        _etl_date::timestamp              as _etl_date,\n        _modified::timestamp              as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"payrun\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.552478Z", "completed_at": "2024-02-04T15:20:07.573511Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.584911Z", "completed_at": "2024-02-04T15:20:07.584927Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04891061782836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__payrun_default", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"payrun_default\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                       as id,  -- noqa: RF04\n        employee_id::bigint              as employee_id,\n        from_date::varchar               as from_date,\n        to_date::varchar                 as to_date,\n        job_title::varchar               as job_title,\n        business_id::varchar             as business_id,\n        default_pay_category_id::bigint  as default_pay_category_id,\n        is_payroll_tax_exempt::boolean   as is_payroll_tax_exempt,\n        employment_agreement_id::varchar as employment_agreement_id,\n        _file::varchar                   as _file,\n        _transaction_date::date          as _transaction_date,\n        _etl_date::timestamp             as _etl_date,\n        _modified::timestamp             as _modified,\n        default_pay_cycle_id::varchar    as default_pay_cycle_id\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"payrun_default\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.560326Z", "completed_at": "2024-02-04T15:20:07.574712Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.587218Z", "completed_at": "2024-02-04T15:20:07.587231Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.050459861755371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__payrun_total", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"payrun_total\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                       as id,  -- noqa: RF04\n        employee_id::bigint              as employee_id,\n        payrun_id::bigint                as payrun_id,\n        total_hours::float               as total_hours,\n        gross_earnings::float            as gross_earnings,\n        net_earnings::float              as net_earnings,\n        is_excluded_from_billing::bigint as is_excluded_from_billing,\n        _file::varchar                   as _file,\n        _transaction_date::date          as _transaction_date,\n        _etl_date::timestamp             as _etl_date,\n        _modified::timestamp             as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"payrun_total\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.569137Z", "completed_at": "2024-02-04T15:20:07.578270Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.591256Z", "completed_at": "2024-02-04T15:20:07.591270Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04710555076599121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__payrun_total_history", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"payrun_total_history\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                       as id,  -- noqa: RF04\n        employee_id::bigint              as employee_id,\n        payrun_id::bigint                as payrun_id,\n        total_hours::float               as total_hours,\n        gross_earnings::float            as gross_earnings,\n        net_earnings::float              as net_earnings,\n        is_excluded_from_billing::bigint as is_excluded_from_billing,\n        _file::varchar                   as _file,\n        _transaction_date::date          as _transaction_date,\n        _etl_date::timestamp             as _etl_date,\n        _modified::timestamp             as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"payrun_total_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.580556Z", "completed_at": "2024-02-04T15:20:07.590091Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.600866Z", "completed_at": "2024-02-04T15:20:07.600880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03871417045593262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__pension_scheme_contribution_plan", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"pension_scheme_contribution_plan\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                         as id,  -- noqa: RF04\n        employee_contribution_percentage::double precision as employee_contribution_percentage,\n        employer_contribution_percentage::double precision as employer_contribution_percentage,\n        pension_type::bigint                               as pension_type,\n        max_earnings_threshold::double precision           as max_earnings_threshold,\n        min_earnings_threshold::double precision           as min_earnings_threshold,\n        contribution_group_name::varchar                   as contribution_group_name,\n        contribution_group_id::varchar                     as contribution_group_id,\n        contribution_plan_name::varchar                    as contribution_plan_name,\n        reporting_frequency::bigint                        as reporting_frequency,\n        calculate_on_qualifying_earnings::boolean          as calculate_on_qualifying_earnings,\n        pension_scheme_id::bigint                          as pension_scheme_id,\n        contribution_plan_id::bigint                       as contribution_plan_id,\n        collection_source_id::varchar                      as collection_source_id,\n        is_deleted::boolean                                as is_deleted,\n        salary_sacrifice_deduction_category_id::bigint     as salary_sacrifice_deduction_category_id,\n        salary_sacrifice_pay_category_ids                  as salary_sacrifice_pay_category_ids,\n        employee_contribution_pay_category_ids             as employee_contribution_pay_category_ids,\n        employer_contribution_pay_category_ids             as employer_contribution_pay_category_ids,\n        decode(\n            lower(is_auto_enrolment_scheme),\n            'true', TRUE,\n            'false', FALSE\n        )::boolean                                         as is_auto_enrolment_scheme,\n        lower_earnings_disregard::double precision         as lower_earnings_disregard,\n        lower_default_earnings_disregard_type::bigint      as lower_default_earnings_disregard_type,\n        upper_earnings_cap::double precision               as upper_earnings_cap,\n        upper_default_earnings_cap_type::bigint            as upper_default_earnings_cap_type,\n        use_tax_month_pay_period::boolean                  as use_tax_month_pay_period,\n        salary_sacrifice_percentage::double precision      as salary_sacrifice_percentage,\n        nic_saving_rebate_percentage::varchar              as nic_saving_rebate_percentage,\n        _file::varchar                                     as _file,\n        _transaction_date::date                            as _transaction_date,\n        _etl_date::timestamp                               as _etl_date,\n        _modified::timestamp                               as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"pension_scheme_contribution_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.610034Z", "completed_at": "2024-02-04T15:20:07.626990Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.639280Z", "completed_at": "2024-02-04T15:20:07.639302Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04500222206115723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__rate_unit", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"rate_unit\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        description::varchar    as description,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"rate_unit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.616937Z", "completed_at": "2024-02-04T15:20:07.632597Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.647956Z", "completed_at": "2024-02-04T15:20:07.647968Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.050698041915893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__region", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"region\"\n\n),\n\nrenamed as (\n\n    select\n        id::varchar                       as id,  -- noqa: RF04\n        currency::varchar                 as currency,\n        name::varchar                     as name,  -- noqa: RF04\n        culturename::varchar              as culture_name,\n        defaultstandardhoursperday::float as default_standard_hours_per_day,\n        commencebillingfrom::varchar      as commence_billing_from,\n        minimumbillableamount::float      as minimum_bill_able_amount,\n        _file::varchar                    as _file,\n        _transaction_date::date           as _transaction_date,\n        _etl_date::timestamp              as _etl_date,\n        _modified::timestamp              as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"region\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.622663Z", "completed_at": "2024-02-04T15:20:07.633825Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.649156Z", "completed_at": "2024-02-04T15:20:07.649170Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.048172950744628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__reseller_contact", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"reseller_contact\"\n\n),\n\nrenamed as (\n\n    select\n        id::varchar             as id,  -- noqa: RF04\n        reseller_id::varchar    as reseller_id,\n        user_id::varchar        as user_id,\n        contact_type::varchar   as contact_type,\n        name::varchar           as name,  -- noqa: RF04\n        email::varchar          as email,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"reseller_contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.635036Z", "completed_at": "2024-02-04T15:20:07.646840Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.659302Z", "completed_at": "2024-02-04T15:20:07.659318Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0435333251953125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__resellers", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"resellers\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                     as id,  -- noqa: RF04\n        name::varchar                  as name,  -- noqa: RF04\n        billing_name::varchar          as billing_name,\n        date_created_utc::varchar      as date_created_utc,\n        commence_billing_from::varchar as commence_billing_from,\n        _file::varchar                 as _file,\n        _transaction_date::date        as _transaction_date,\n        _etl_date::timestamp           as _etl_date,\n        _modified::timestamp           as _modified,\n        default_region_id::varchar     as default_region_id\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"resellers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.669867Z", "completed_at": "2024-02-04T15:20:07.687598Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.702750Z", "completed_at": "2024-02-04T15:20:07.702767Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.051708221435546875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__statutory_settings", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"statutory_settings\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                            as id,  -- noqa: RF04\n        business_id::bigint                   as business_id,\n        income_tax_number__encrypted::varchar as income_tax_number_encrypted,\n        e_number::varchar                     as e_number,\n        epf_number::varchar                   as epf_number,\n        socso_number::varchar                 as socso_number,\n        hrdf_status::varchar                  as hrdf_status,\n        _file::varchar                        as _file,\n        _transaction_date::date               as _transaction_date,\n        _etl_date::timestamp                  as _etl_date,\n        _modified::timestamp                  as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"statutory_settings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.683266Z", "completed_at": "2024-02-04T15:20:07.695356Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.710714Z", "completed_at": "2024-02-04T15:20:07.710731Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05060076713562012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__super_details", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"super_details\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                            as id,  -- noqa: RF04\n        business_id::bigint                   as business_id,\n        date_registered_utc::varchar          as date_registered_utc,\n        enabled::boolean                      as enabled,\n        date_beam_terms_accepted_utc::varchar as date_beam_terms_accepted_utc,\n        _file::varchar                        as _file,\n        _transaction_date::date               as _transaction_date,\n        _etl_date::timestamp                  as _etl_date,\n        _modified::timestamp                  as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"super_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.688833Z", "completed_at": "2024-02-04T15:20:07.701068Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.712886Z", "completed_at": "2024-02-04T15:20:07.712901Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.051003217697143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__super_details_default_fund", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"super_details_default_fund\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint               as id,  -- noqa: RF04\n        super_details_id::bigint as super_details_id,\n        usi::varchar             as usi,\n        abn::varchar             as abn,\n        name::varchar            as name,  -- noqa: RF04\n        is_deleted::boolean      as is_deleted,\n        _file::varchar           as _file,\n        _transaction_date::date  as _transaction_date,\n        _etl_date::timestamp     as _etl_date,\n        _modified::timestamp     as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"super_details_default_fund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.696668Z", "completed_at": "2024-02-04T15:20:07.707182Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.719921Z", "completed_at": "2024-02-04T15:20:07.719935Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04361128807067871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__super_fund_product", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"super_fund_product\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                    as id,  -- noqa: RF04\n        abn::varchar                  as abn,\n        product_code::varchar         as product_code,\n        product_type::varchar         as product_type,\n        business_name::varchar        as business_name,\n        product_name::varchar         as product_name,\n        source::bigint                as source,  -- noqa: RF04\n        business_id::bigint           as business_id,\n        super_stream_status::bigint   as super_stream_status,\n        is_managed_by_system::boolean as is_managed_by_system,\n        _file::varchar                as _file,\n        _transaction_date::date       as _transaction_date,\n        _etl_date::timestamp          as _etl_date,\n        _modified::timestamp          as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"super_fund_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.732100Z", "completed_at": "2024-02-04T15:20:07.745337Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.760177Z", "completed_at": "2024-02-04T15:20:07.760192Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04298090934753418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__super_payment", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"super_payment\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                     as id,  -- noqa: RF04\n        pay_run_total_id::bigint       as pay_run_total_id,\n        employee_super_fund_id::bigint as employee_super_fund_id,\n        amount::float                  as amount,\n        pay_run_id::bigint             as pay_run_id,\n        employee_id::bigint            as employee_id,\n        contribution_type::bigint      as contribution_type,\n        _file::varchar                 as _file,\n        _transaction_date::date        as _transaction_date,\n        _etl_date::timestamp           as _etl_date,\n        _modified::timestamp           as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"super_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.740884Z", "completed_at": "2024-02-04T15:20:07.753220Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.767867Z", "completed_at": "2024-02-04T15:20:07.767885Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.045102596282958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__superfund_ato", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"superfund_ato\"\n\n),\n\nrenamed as (\n\n    select\n        regexp_replace(abn, '([^ \\\\t])[ \\\\t]+$', '\\\\1')::varchar                       as abn,\n        regexp_replace(fund_name, '([^ \\\\t])[ \\\\t]+$', '\\\\1')::varchar                 as fund_name,\n        regexp_replace(usi, '([^ \\\\t])[ \\\\t]+$', '\\\\1')::varchar                       as usi,\n        regexp_replace(product_name, '([^ \\\\t])[ \\\\t]+$', '\\\\1')::varchar              as product_name,\n        regexp_replace(contribution_restrictions, '([^ \\\\t])[ \\\\t]+$', '\\\\1')::varchar as contribution_restrictions,\n        from_date::varchar                                                             as from_date,\n        to_date::varchar                                                               as to_date,\n        _transaction_date::timestamp                                                   as _transaction_date,\n        _etl_date::timestamp                                                           as _etl_date\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"superfund_ato\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.746513Z", "completed_at": "2024-02-04T15:20:07.761389Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.771527Z", "completed_at": "2024-02-04T15:20:07.771540Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04792332649230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__system_event", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"system_event\"\n\n),\n\nrenamed as (\n\n    select\n        date::varchar              as date,  -- noqa: RF04\n        admin_user_id::varchar     as admin_user_id,\n        logged_in_user_id::varchar as logged_in_user_id,\n        affected_user_id::varchar  as affected_user_id,\n        business_id::varchar       as business_id,\n        employee_id::varchar       as employee_id,\n        white_label_id::varchar    as white_label_id,\n        shard_id::varchar          as shard_id,\n        _file::varchar             as _file,\n        _transaction_date::date    as _transaction_date,\n        _etl_date::timestamp       as _etl_date,\n        _modified::timestamp       as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"system_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.754420Z", "completed_at": "2024-02-04T15:20:07.765472Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.775822Z", "completed_at": "2024-02-04T15:20:07.775835Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042093515396118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__tax_file_declaration", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"tax_file_declaration\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                  as id,  -- noqa: RF04\n        employee_id::varchar        as employee_id,\n        employment_type_id::varchar as employment_type_id,\n        from_date::varchar          as from_date,\n        to_date::varchar            as to_date,\n        _file::varchar              as _file,\n        _transaction_date::date     as _transaction_date,\n        _etl_date::timestamp        as _etl_date,\n        _modified::timestamp        as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"tax_file_declaration\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.785384Z", "completed_at": "2024-02-04T15:20:07.796643Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.814191Z", "completed_at": "2024-02-04T15:20:07.814204Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04374885559082031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__timesheet_line", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"timesheet_line\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                  as id,  -- noqa: RF04\n        employee_id::bigint                         as employee_id,\n        start_time::varchar                         as start_time,\n        end_time::varchar                           as end_time,\n        units::float                                as units,\n        date_created::varchar                       as date_created,\n        submitted_start_time::varchar               as submitted_start_time,\n        submitted_end_time::varchar                 as submitted_end_time,\n        pay_category_id::bigint                     as pay_category_id,\n        status::bigint                              as status,\n        leave_request_id::bigint                    as leave_request_id,\n        consolidated_with_timesheet_line_id::bigint as consolidated_with_timesheet_line_id,\n        pay_run_total_id::bigint                    as pay_run_total_id,\n        business_id::bigint                         as business_id,\n        auto_approved_by_roster_shift_id::bigint    as auto_approved_by_roster_shift_id,\n        _file::varchar                              as _file,\n        _transaction_date::date                     as _transaction_date,\n        _etl_date::timestamp                        as _etl_date,\n        _modified::timestamp                        as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"timesheet_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.797827Z", "completed_at": "2024-02-04T15:20:07.812965Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.821670Z", "completed_at": "2024-02-04T15:20:07.821684Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04276895523071289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        first_name::varchar     as first_name,\n        last_name::varchar      as last_name,\n        email::varchar          as email,\n        is_active::boolean      as is_active,\n        is_admin::boolean       as is_admin,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.803222Z", "completed_at": "2024-02-04T15:20:07.815442Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.825235Z", "completed_at": "2024-02-04T15:20:07.825248Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03941774368286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user_business", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user_business\"\n\n),\n\nrenamed as (\n\n    select\n        user_id::bigint                    as user_id,\n        business_id::bigint                as business_id,\n        is_single_sign_on_enabled::varchar as is_single_sign_on_enabled,\n        _file::varchar                     as _file,\n        _transaction_date::date            as _transaction_date,\n        _etl_date::timestamp               as _etl_date,\n        _modified::timestamp               as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.808799Z", "completed_at": "2024-02-04T15:20:07.819389Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.829319Z", "completed_at": "2024-02-04T15:20:07.829333Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.040863037109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user_employee", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user_employee\"\n\n),\n\nrenamed as (\n\n    select\n        user_id::bigint         as user_id,\n        employee_id::bigint     as employee_id,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user_employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.838993Z", "completed_at": "2024-02-04T15:20:07.848871Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.869820Z", "completed_at": "2024-02-04T15:20:07.869835Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04713249206542969, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user_employee_group", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user_employee_group\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                as id,  -- noqa: RF04\n        user_id::bigint           as user_id,\n        employee_group_id::bigint as employee_group_id,\n        \"permissions\"::bigint     as \"permissions\",\n        _file::varchar            as _file,\n        _transaction_date::date   as _transaction_date,\n        _etl_date::timestamp      as _etl_date,\n        _modified::timestamp      as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user_employee_group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.851104Z", "completed_at": "2024-02-04T15:20:07.868654Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.876379Z", "completed_at": "2024-02-04T15:20:07.876392Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0439603328704834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user_report_access", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user_report_access\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                       as id,  -- noqa: RF04\n        user_id::bigint                  as user_id,\n        business_id::bigint              as business_id,\n        access_type::bigint              as access_type,\n        no_reporting_restriction::bigint as no_reporting_restriction,\n        _file::varchar                   as _file,\n        _transaction_date::date          as _transaction_date,\n        _etl_date::timestamp             as _etl_date,\n        _modified::timestamp             as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user_report_access\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.858156Z", "completed_at": "2024-02-04T15:20:07.872322Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.882831Z", "completed_at": "2024-02-04T15:20:07.882845Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04310035705566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user_reseller", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user_reseller\"\n\n),\n\nrenamed as (\n\n    select\n        userid::bigint          as userid,\n        reseller_id::bigint     as reseller_id,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified,\n        user_id::varchar        as user_id\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user_reseller\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.864237Z", "completed_at": "2024-02-04T15:20:07.873593Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.883992Z", "completed_at": "2024-02-04T15:20:07.884006Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.042249202728271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__user_whitelabel", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"user_whitelabel\"\n\n),\n\nrenamed as (\n\n    select\n        user_id::bigint            as user_id,\n        whitelabel_id::bigint      as whitelabel_id,\n        is_default_parent::varchar as is_default_parent,\n        _file::varchar             as _file,\n        _transaction_date::date    as _transaction_date,\n        _etl_date::timestamp       as _etl_date,\n        _modified::timestamp       as _modified,\n        userid::varchar            as userid\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"user_whitelabel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.896109Z", "completed_at": "2024-02-04T15:20:07.909123Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.923919Z", "completed_at": "2024-02-04T15:20:07.923934Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04406571388244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__white_label", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"white_label\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                        as id,  -- noqa: RF04\n        name::varchar                                     as name,  -- noqa: RF04\n        is_deleted::boolean                               as is_deleted,\n        region_id::bigint                                 as region_id,\n        support_email::varchar                            as support_email,\n        primary_champion_id::bigint                       as primary_champion_id,\n        function_enable_super_choice_marketplace::boolean as function_enable_super_choice_marketplace,\n        default_billing_plan_id::bigint                   as default_billing_plan_id,\n        reseller_id::bigint                               as reseller_id,\n        _file::varchar                                    as _file,\n        _transaction_date::date                           as _transaction_date,\n        _etl_date::timestamp                              as _etl_date,\n        _modified::timestamp                              as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"white_label\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.904737Z", "completed_at": "2024-02-04T15:20:07.918305Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.931543Z", "completed_at": "2024-02-04T15:20:07.931559Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0440678596496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__white_label_contact", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"white_label_contact\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id, -- noqa: RF04\n        white_label_id::bigint  as white_label_id,\n        user_id::bigint         as user_id,\n        contact_type::bigint    as contact_type,\n        name::varchar           as name, -- noqa: RF04\n        email::varchar          as email,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"white_label_contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.913732Z", "completed_at": "2024-02-04T15:20:07.926687Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.938711Z", "completed_at": "2024-02-04T15:20:07.938726Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0420536994934082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay__zoom_info", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"zoom_info\"\n\n),\n\nrenamed as (\n\n    select\n        record_id::bigint                                 as record_id,\n        _id::bigint                                       as _id,\n        company_name::varchar                             as company_name,\n        abn::bigint                                       as abn,\n        country::varchar                                  as country,\n        match_status::varchar                             as match_status,\n        zoom_info_company_id::bigint                      as zoom_info_company_id,\n        website::varchar                                  as website,\n        founded_year::bigint                              as founded_year,\n        company_hq_phone::varchar                         as company_hq_phone,\n        revenue_in_000_s_usd_::bigint                     as revenue_in_000_s_usd_,\n        revenue_range_in_usd_::varchar                    as revenue_range_in_usd_,\n        est_hr_department_budget_in_000_s_usd_::bigint    as est_hr_department_budget_in_000_s_usd_,\n        employees::bigint                                 as employees,\n        employee_range::varchar                           as employee_range,\n        past_1_year_employee_growth_rate::numeric         as past_1_year_employee_growth_rate,\n        past_2_year_employee_growth_rate::numeric         as past_2_year_employee_growth_rate,\n        sic_code_1::bigint                                as sic_code_1,\n        sic_code_2::bigint                                as sic_code_2,\n        sic_codes::varchar                                as sic_codes,\n        naics_code_1::bigint                              as naics_code_1,\n        naics_code_2::bigint                              as naics_code_2,\n        naics_codes::varchar                              as naics_codes,\n        primary_industry::varchar                         as primary_industry,\n        primary_sub_industry::varchar                     as primary_sub_industry,\n        all_industries::varchar                           as all_industries,\n        all_sub_industries::varchar                       as all_sub_industries,\n        industry_hierarchical_category::varchar           as industry_hierarchical_category,\n        secondary_industry_hierarchical_category::varchar as secondary_industry_hierarchical_category,\n        alexa_rank::bigint                                as alexa_rank,\n        zoom_info_company_profile_url::varchar            as zoom_info_company_profile_url,\n        linked_in_company_profile_url::varchar            as linked_in_company_profile_url,\n        facebook_company_profile_url::varchar             as facebook_company_profile_url,\n        twitter_company_profile_url::varchar              as twitter_company_profile_url,\n        ownership_type::varchar                           as ownership_type,\n        business_model::varchar                           as business_model,\n        certified_active_company::varchar                 as certified_active_company,\n        certification_date::varchar                       as certification_date,\n        defunct_company::varchar                          as defunct_company,\n        total_funding_amount_in_000_s_usd_::bigint        as total_funding_amount_in_000_s_usd_,\n        recent_funding_amount_in_000_s_usd_::bigint       as recent_funding_amount_in_000_s_usd_,\n        recent_funding_round::varchar                     as recent_funding_round,\n        recent_funding_date::date                         as recent_funding_date,\n        recent_investors::varchar                         as recent_investors,\n        all_investors::varchar                            as all_investors,\n        company_street_address::varchar                   as company_street_address,\n        company_city::varchar                             as company_city,\n        company_state::varchar                            as company_state,\n        company_zip_code::varchar                         as company_zip_code,\n        company_country::varchar                          as company_country,\n        full_address::varchar                             as full_address,\n        number_of_locations::bigint                       as number_of_locations,\n        company_is_acquired::varchar                      as company_is_acquired,\n        company_id_ultimate_parent_::bigint               as company_id_ultimate_parent_,\n        entity_name_ultimate_parent_::varchar             as entity_name_ultimate_parent_,\n        company_id_immediate_parent_::bigint              as company_id_immediate_parent_,\n        entity_name_immediate_parent_::varchar            as entity_name_immediate_parent_,\n        relationship_immediate_parent_::varchar           as relationship_immediate_parent_,\n        _file::varchar                                    as _file,\n        _transaction_date::date                           as _transaction_date,\n        _etl_date::timestamp                              as _etl_date,\n        _modified::timestamp                              as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay\".\"zoom_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.919523Z", "completed_at": "2024-02-04T15:20:07.937479Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.947765Z", "completed_at": "2024-02-04T15:20:07.947779Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05483698844909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay_dwh__business", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"business\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                                                      as id,  -- noqa: RF04\n        name::varchar                                                   as name,  -- noqa: RF04\n        abn::varchar                                                    as abn,\n        legal_name::varchar                                             as legal_name,\n        to_timestamp(date_created, 'MM/DD/YYYY hh/mi/ss tt')::timestamp as date_created,\n        industry_id::bigint                                             as industry_id,\n        industry_name::varchar                                          as industry_name,\n        address_line1::varchar                                          as address_line1,\n        address_line2::varchar                                          as address_line2,\n        suburb_id::bigint                                               as suburb_id,\n        billing_plan_id::bigint                                         as billing_plan_id,\n        commence_billing_from::varchar                                  as commence_billing_from,\n        decode(\n            to_be_deleted,\n            'false', 0,\n            'true', 1,\n            'False', 0,\n            'True', 1\n        )                                                               as to_be_deleted,\n\n        white_label_id::bigint                                          as white_label_id,\n        electronic_payroll_lodgement_enabled::boolean                   as electronic_payroll_lodgement_enabled,\n        _file::varchar                                                  as _file,\n        _transaction_date::date                                         as _transaction_date,\n        _etl_date::timestamp                                            as _etl_date,\n        _modified::timestamp                                            as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay_dwh\".\"business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.950134Z", "completed_at": "2024-02-04T15:20:07.965327Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.976838Z", "completed_at": "2024-02-04T15:20:07.976854Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04067635536193848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay_dwh__employee", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"employee\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint                          as id,  -- noqa: RF04\n        business_id::bigint                 as business_id,\n        firstname::varchar                  as firstname,\n        surname::varchar                    as surname,\n        date_created::date                  as date_created,\n        date_of_birth::date                 as date_of_birth,\n        residential_street_address::varchar as residential_street_address,\n        residential_suburb_id::varchar      as residential_suburb_id,\n        start_date::date                    as start_date,\n        end_date::date                      as end_date,\n        gender::varchar                     as gender,\n        payrollid::varchar                  as payrollid,\n        pay_run_default_id::varchar         as pay_run_default_id,\n        tax_file_declaration_id::varchar    as tax_file_declaration_id,\n        email::varchar                      as email,\n        home_phone::varchar                 as home_phone,\n        work_phone::varchar                 as work_phone,\n        mobile_phone::varchar               as mobile_phone,\n        employee_onboarding_id::bigint      as employee_onboarding_id,\n        status::varchar                     as status,\n        _file::varchar                      as _file,\n        _transaction_date::date             as _transaction_date,\n        _etl_date::timestamp                as _etl_date,\n        _modified::timestamp                as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay_dwh\".\"employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.960899Z", "completed_at": "2024-02-04T15:20:07.970098Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.981866Z", "completed_at": "2024-02-04T15:20:07.981880Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04337716102600098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg__keypay_dwh__suburb", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"keypay_s3\".\"suburb\"\n\n),\n\nrenamed as (\n\n    select\n        id::bigint              as id,  -- noqa: RF04\n        name::varchar           as name,  -- noqa: RF04\n        postcode::varchar       as postcode,\n        state::varchar          as state,  -- noqa: RF04\n        country::varchar        as country,\n        _file::varchar          as _file,\n        _transaction_date::date as _transaction_date,\n        _etl_date::timestamp    as _etl_date,\n        _modified::timestamp    as _modified\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"dev\".\"stg__keypay_dwh\".\"suburb\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.972799Z", "completed_at": "2024-02-04T15:20:07.983057Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:07.995074Z", "completed_at": "2024-02-04T15:20:07.995089Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040924072265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_checkly__all_checks", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"stg_checkly\".\"all_checks\"\n),\n\ntransformed as (\n    select\n        id::varchar                        as id, -- noqa: RF04\n        check_type::varchar                as check_type,\n        name::varchar                      as name, -- noqa: RF04\n        frequency::int                     as frequency,\n        frequency_offset::int              as frequency_offset,\n        activated::boolean                 as activated,\n        muted::boolean                     as muted,\n        should_fail::boolean               as should_fail,\n        locations::varchar                 as locations,\n        script::varchar                    as script,\n        created_at::timestamp              as created_at,\n        updated_at::timestamp              as updated_at,\n        double_check::boolean              as double_check,\n        ssl_check_domain::varchar          as ssl_check_domain,\n        tear_down_snippet_id::int          as tear_down_snippet_id,\n        local_setup_script::varchar        as local_setup_script,\n        local_tear_down_script::varchar    as local_tear_down_script,\n        use_global_alert_settings::boolean as use_global_alert_settings,\n        degraded_response_time::int        as degraded_response_time,\n        max_response_time::int             as max_response_time,\n        group_id::int                      as group_id,\n        group_order::int                   as group_order,\n        runtime_id::boolean                as runtime_id,\n        script_path::boolean               as script_path,\n        _transaction_date::timestamp       as transaction_date,\n        _etl_date::timestamp               as etl_date,\n        setup_snippet_id::int              as setup_snippet_id,\n        run_parallel::boolean              as run_parallel\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_checkly__all_checks\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:07.984148Z", "completed_at": "2024-02-04T15:20:07.996272Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.010940Z", "completed_at": "2024-02-04T15:20:08.010954Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05008101463317871, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_checkly__all_checks_results", "compiled": true, "compiled_code": "with source as (\n    select *\n    from \"dev\".\"stg_checkly\".\"all_checks_results\"\n),\n\ntransformed as (\n    select\n        id::varchar                     as id, -- noqa: RF04\n        has_errors::boolean             as has_errors,\n        has_failures::boolean           as has_failures,\n        run_location::varchar           as run_location,\n        started_at::timestamp           as started_at,\n        stopped_at::timestamp           as stopped_at,\n        response_time::bigint           as response_time,\n        check_id::varchar               as check_id,\n        created_at::timestamp           as created_at,\n        name::varchar                   as name, -- noqa: RF04\n        check_run_id::bigint            as check_run_id,\n        attempts::int                   as attempts,\n        is_degraded::boolean            as is_degraded,\n        over_max_response_time::boolean as over_max_response_time,\n        result_type::varchar            as result_type,\n        _transaction_date::timestamp    as transaction_date,\n        _etl_date::timestamp            as etl_date\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_checkly__all_checks_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.013509Z", "completed_at": "2024-02-04T15:20:08.028053Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.042663Z", "completed_at": "2024-02-04T15:20:08.042680Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06206941604614258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__bill_created", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"bill_created\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                                  as id, --noqa: RF04\n        detail_type::varchar                                                                                                                         as detail_type,\n        source::varchar                                                                                                                              as source, --noqa: RF04\n        time::timestamp                                                                                                                              as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as bill_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionId')= '' then null else json_extract_path_text(detail, 'subscriptionId') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'type')= '' then null else json_extract_path_text(detail, 'type') end as type\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerTransactionId')= '' then null else json_extract_path_text(detail, 'providerTransactionId') end as provider_transaction_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'transactionDate')= '' then null else json_extract_path_text(detail, 'transactionDate') end as transaction_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'currency')= '' then null else json_extract_path_text(detail, 'currency') end as currency\n    \n    ,\n\n    case when json_extract_path_text(detail, 'amount')= '' then null else json_extract_path_text(detail, 'amount') end as bill_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'paidAmount')= '' then null else json_extract_path_text(detail, 'paidAmount') end as paid_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'totalSaved')= '' then null else json_extract_path_text(detail, 'totalSaved') end as total_saved\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dateFrom')= '' then null else json_extract_path_text(detail, 'dateFrom') end as date_from\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dateTo')= '' then null else json_extract_path_text(detail, 'dateTo') end as date_to\n    \n    ,\n\n    case when json_extract_path_text(detail, 'issueDate')= '' then null else json_extract_path_text(detail, 'issueDate') end as issue_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dueDate')= '' then null else json_extract_path_text(detail, 'dueDate') end as due_date\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__bill_created\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.029348Z", "completed_at": "2024-02-04T15:20:08.041234Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.067788Z", "completed_at": "2024-02-04T15:20:08.067802Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05256080627441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__bill_paid", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"bill_paid\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                                  as id, --noqa: RF04\n        detail_type::varchar                                                                                                                         as detail_type,\n        source::varchar                                                                                                                              as source, --noqa: RF04\n        time::timestamp                                                                                                                              as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as bill_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionId')= '' then null else json_extract_path_text(detail, 'subscriptionId') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'type')= '' then null else json_extract_path_text(detail, 'type') end as type\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerTransactionId')= '' then null else json_extract_path_text(detail, 'providerTransactionId') end as provider_transaction_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'transactionDate')= '' then null else json_extract_path_text(detail, 'transactionDate') end as transaction_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'currency')= '' then null else json_extract_path_text(detail, 'currency') end as currency\n    \n    ,\n\n    case when json_extract_path_text(detail, 'amount')= '' then null else json_extract_path_text(detail, 'amount') end as bill_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'paidAmount')= '' then null else json_extract_path_text(detail, 'paidAmount') end as paid_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'totalSaved')= '' then null else json_extract_path_text(detail, 'totalSaved') end as total_saved\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dateFrom')= '' then null else json_extract_path_text(detail, 'dateFrom') end as date_from\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dateTo')= '' then null else json_extract_path_text(detail, 'dateTo') end as date_to\n    \n    ,\n\n    case when json_extract_path_text(detail, 'issueDate')= '' then null else json_extract_path_text(detail, 'issueDate') end as issue_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dueDate')= '' then null else json_extract_path_text(detail, 'dueDate') end as due_date\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__bill_paid\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.044298Z", "completed_at": "2024-02-04T15:20:08.070411Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.078827Z", "completed_at": "2024-02-04T15:20:08.078841Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05065107345581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__bill_updated", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"bill_updated\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                                  as id, --noqa: RF04\n        detail_type::varchar                                                                                                                         as detail_type,\n        source::varchar                                                                                                                              as source, --noqa: RF04\n        time::timestamp                                                                                                                              as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as bill_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionId')= '' then null else json_extract_path_text(detail, 'subscriptionId') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'type')= '' then null else json_extract_path_text(detail, 'type') end as type\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerTransactionId')= '' then null else json_extract_path_text(detail, 'providerTransactionId') end as provider_transaction_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'transactionDate')= '' then null else json_extract_path_text(detail, 'transactionDate') end as transaction_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'currency')= '' then null else json_extract_path_text(detail, 'currency') end as currency\n    \n    ,\n\n    case when json_extract_path_text(detail, 'amount')= '' then null else json_extract_path_text(detail, 'amount') end as bill_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'paidAmount')= '' then null else json_extract_path_text(detail, 'paidAmount') end as paid_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'totalSaved')= '' then null else json_extract_path_text(detail, 'totalSaved') end as total_saved\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dateFrom')= '' then null else json_extract_path_text(detail, 'dateFrom') end as date_from\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dateTo')= '' then null else json_extract_path_text(detail, 'dateTo') end as date_to\n    \n    ,\n\n    case when json_extract_path_text(detail, 'issueDate')= '' then null else json_extract_path_text(detail, 'issueDate') end as issue_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'dueDate')= '' then null else json_extract_path_text(detail, 'dueDate') end as due_date\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__bill_updated\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.081545Z", "completed_at": "2024-02-04T15:20:08.094454Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.101010Z", "completed_at": "2024-02-04T15:20:08.101027Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.034441232681274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__cashback_transactions_eh", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"eh_cashback_network_txs\"\n),\n\ntransformed as (\n    select\n        _file::varchar              as file_name,\n        _line::int                  as line_number,\n        transaction_date::timestamp as transaction_timestamp,\n        processed_date::timestamp   as processed_timestamp,\n        campaign_name::varchar      as merchant_name,\n        user_email::varchar         as user_email,\n        original_amount::float      as transaction_amount,\n        fee::float                  as revenue_amount,\n        cashback::float             as cashback_amount,\n        _fivetran_synced::timestamp as fivetran_synced_timestamp\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__cashback_transactions_eh\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.090392Z", "completed_at": "2024-02-04T15:20:08.098344Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.109359Z", "completed_at": "2024-02-04T15:20:08.109372Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0344998836517334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__cashback_transactions_pokitpal", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"pokitpal_cashback_network_txs\"\n),\n\ntransformed as (\n    select\n        _file::varchar              as file_name,\n        _line::int                  as line_number,\n        transaction_date::timestamp as transaction_timestamp,\n        processed_date::timestamp   as processed_timestamp,\n        campaign_name::varchar      as merchant_name,\n        user_email::varchar         as user_email,\n        original_amount::float      as transaction_amount,\n        fee::float                  as revenue_amount,\n        cashback::float             as cashback_amount,\n        _fivetran_synced::timestamp as fivetran_synced_timestamp\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__cashback_transactions_pokitpal\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.103368Z", "completed_at": "2024-02-04T15:20:08.113128Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.123375Z", "completed_at": "2024-02-04T15:20:08.123390Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03860902786254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__hd_redeem_success_transactions", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"hd_redeem_success_transactions\"\n\n    where\n        source = 'HdRedeem'\n        and _file like '%type=Redeem.Success%'\n),\n\ntransformed as (\n    select\n        (\n            case\n                when json_extract_path_text(detail, 'id') = '' then NULL\n                else json_extract_path_text(detail, 'id')\n            end\n        )::varchar      as id, -- noqa: RF04\n        (\n            case\n                when json_extract_path_text(detail, 'transactionHayId') = '' then NULL\n                else json_extract_path_text(detail, 'transactionHayId')\n            end\n        )::varchar      as hay_transaction_id,\n        (\n            case\n                when json_extract_path_text(detail, 'redeemedAmount', 'amount') = ''\n                    then\n                        case\n                            when json_extract_path_text(detail, 'currencyAmount', 'amount') = '' then NULL\n                            else json_extract_path_text(detail, 'currencyAmount', 'amount')\n                        end\n                else json_extract_path_text(detail, 'redeemedAmount', 'amount')\n            end\n        )::float        as redeemed_amount,\n        (\n            case\n                when json_extract_path_text(detail, 'feePercentage') = '' then NULL\n                else json_extract_path_text(detail, 'feePercentage')\n            end\n        )::float        as fee_rate,\n        (\n            case\n                when json_extract_path_text(detail, 'creditSpendAccountId') = '' then NULL\n                else json_extract_path_text(detail, 'creditSpendAccountId')\n            end\n        )::varchar      as credit_spend_account_id,\n        time::timestamp as transaction_time\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__hd_redeem_success_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.126642Z", "completed_at": "2024-02-04T15:20:08.149161Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.159004Z", "completed_at": "2024-02-04T15:20:08.159028Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05149555206298828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__payment_created", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"payment_created\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                                  as id, --noqa: RF04\n        detail_type::varchar                                                                                                                         as detail_type,\n        source::varchar                                                                                                                              as source, --noqa: RF04\n        time::timestamp                                                                                                                              as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as bill_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionId')= '' then null else json_extract_path_text(detail, 'subscriptionId') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'type')= '' then null else json_extract_path_text(detail, 'type') end as type\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerTransactionId')= '' then null else json_extract_path_text(detail, 'providerTransactionId') end as provider_transaction_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'transactionDate')= '' then null else json_extract_path_text(detail, 'transactionDate') end as transaction_date\n    \n    ,\n\n    case when json_extract_path_text(detail, 'currency')= '' then null else json_extract_path_text(detail, 'currency') end as currency\n    \n    ,\n\n    case when json_extract_path_text(detail, 'amount')= '' then null else json_extract_path_text(detail, 'amount') end as paid_amount\n    \n    ,\n\n    case when json_extract_path_text(detail, 'totalSaved')= '' then null else json_extract_path_text(detail, 'totalSaved') end as total_saved\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__payment_created\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.139118Z", "completed_at": "2024-02-04T15:20:08.157550Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.169894Z", "completed_at": "2024-02-04T15:20:08.169908Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.050599098205566406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__subscription_active", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"subscription_active\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                        as id, --noqa: RF04\n        detail_type::varchar                                                                                                               as detail_type,\n        source::varchar                                                                                                                    as source, --noqa: RF04\n        time::timestamp                                                                                                                    as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'userId')= '' then null else json_extract_path_text(detail, 'userId') end as ebenefits_user_uuid\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'externalId')= '' then null else json_extract_path_text(detail, 'externalId') end as external_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'externalUserId')= '' then null else json_extract_path_text(detail, 'externalUserId') end as external_user_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionType')= '' then null else json_extract_path_text(detail, 'subscriptionType') end as subscription_type\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__subscription_active\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.160413Z", "completed_at": "2024-02-04T15:20:08.171105Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.181500Z", "completed_at": "2024-02-04T15:20:08.181513Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03623843193054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__subscription_cancelled", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"subscription_cancelled\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                        as id, --noqa: RF04\n        detail_type::varchar                                                                                                               as detail_type,\n        source::varchar                                                                                                                    as source, --noqa: RF04\n        time::timestamp                                                                                                                    as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'userId')= '' then null else json_extract_path_text(detail, 'userId') end as ebenefits_user_uuid\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'externalId')= '' then null else json_extract_path_text(detail, 'externalId') end as external_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'externalUserId')= '' then null else json_extract_path_text(detail, 'externalUserId') end as external_user_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionType')= '' then null else json_extract_path_text(detail, 'subscriptionType') end as subscription_type\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__subscription_cancelled\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.002787Z", "completed_at": "2024-02-04T15:20:08.167023Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.177703Z", "completed_at": "2024-02-04T15:20:08.177716Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.21578073501586914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_dates__date_spine", "compiled": true, "compiled_code": "\n\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n     + \n    \n    p13.generated_number * power(2, 13)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n     cross join \n    \n    p as p13\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 13148\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2015-01-01' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2050-12-31' as date)\n\n)\n\nselect * from filtered\n\n", "relation_name": "\"dev\".\"staging\".\"stg_dates__date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.187924Z", "completed_at": "2024-02-04T15:20:08.205152Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.217159Z", "completed_at": "2024-02-04T15:20:08.217174Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04241633415222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__subscription_submitted", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"subscription_submitted\"\n\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                        as id, --noqa: RF04\n        detail_type::varchar                                                                                                               as detail_type,\n        source::varchar                                                                                                                    as source, --noqa: RF04\n        time::timestamp                                                                                                                    as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'id')= '' then null else json_extract_path_text(detail, 'id') end as subscription_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'userId')= '' then null else json_extract_path_text(detail, 'userId') end as ebenefits_user_uuid\n    \n    ,\n\n    case when json_extract_path_text(detail, 'providerId')= '' then null else json_extract_path_text(detail, 'providerId') end as provider_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'subscriptionType')= '' then null else json_extract_path_text(detail, 'subscriptionType') end as subscription_type\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__subscription_submitted\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.197580Z", "completed_at": "2024-02-04T15:20:08.210473Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.222570Z", "completed_at": "2024-02-04T15:20:08.222583Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04319310188293457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_ebenefits__user_created", "compiled": true, "compiled_code": "\n\nwith source as (\n    select *\n\n    from \"dev\".\"ebenefits\".\"user_created\"\n),\n\ntransformed as (\n    select\n        id::varchar                                                                                                                as id, --noqa: RF04\n        detail_type::varchar                                                                                                       as detail_type,\n        source::varchar                                                                                                            as source, --noqa: RF04\n        time::timestamp                                                                                                            as created_at,\n        \n\n\n\n    case when json_extract_path_text(detail, 'ehUUId')= '' then null else json_extract_path_text(detail, 'ehUUId') end as eh_user_uuid\n    \n    ,\n\n    case when json_extract_path_text(detail, 'kpId')= '' then null else json_extract_path_text(detail, 'kpId') end as keypay_user_id\n    \n    ,\n\n    case when json_extract_path_text(detail, 'eBenUUId')= '' then null else json_extract_path_text(detail, 'eBenUUId') end as ebenefits_user_uuid\n    \n    ,\n\n    case when json_extract_path_text(detail, 'emailAddress')= '' then null else json_extract_path_text(detail, 'emailAddress') end as email\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_ebenefits__user_created\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.211770Z", "completed_at": "2024-02-04T15:20:08.223766Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.237972Z", "completed_at": "2024-02-04T15:20:08.237986Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04004073143005371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_eh_engineering__service_ownership", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"eh_engineering\".\"service_ownership\"\n),\n\ntransformed as (\n    select\n        _row::bigint                as row, -- noqa: RF04\n        nonapplicable::boolean      as nonapplicable,\n        squad::varchar              as squad,\n        service::varchar            as service,\n        platform::varchar           as platform,\n        _fivetran_synced::timestamp as fivetran_synced\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_eh_engineering__service_ownership\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.230916Z", "completed_at": "2024-02-04T15:20:08.240661Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.253377Z", "completed_at": "2024-02-04T15:20:08.253393Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04279518127441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_eh_engineering__squad_members", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"eh_engineering\".\"squad_members\"\n),\n\ntransformed as (\n    select\n        _row::bigint                                as row, -- noqa: RF04\n        member_id::int                              as member_id,\n        squad::varchar                              as squad,\n        workstream::varchar                         as workstream,\n        to_date(termination_date, 'YYYYMMDD')::date as termination_date,\n        first_name::varchar                         as first_name,\n        middle_name::varchar                        as middle_name,\n        last_name::varchar                          as last_name,\n        to_date(squad_added_date, 'YYYYMMDD')::date as squad_added_date,\n        to_date(start_date, 'YYYYMMDD')::date       as start_date,\n        archived::boolean                           as archived,\n        _fivetran_synced::timestamp                 as fivetran_synced\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_eh_engineering__squad_members\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.245178Z", "completed_at": "2024-02-04T15:20:08.254615Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.267432Z", "completed_at": "2024-02-04T15:20:08.267446Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04165005683898926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_eh_infra_stat_service_raw__daily_report_sentry_issues", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"eh_infra_stat_service_raw\".\"daily_report_sentry_issues\"\n),\n\ntransformed as (\n    select\n        id::varchar                           as id, -- noqa: RF04\n        squad_owner::varchar                  as squad_owner,\n        environment::varchar                  as environment,\n        to_date(date_index, 'YYYYMMDD')::date as date_index,\n        platform::varchar                     as platform,\n        first_seen::datetime                  as first_seen,\n        last_seen::datetime                   as last_seen,\n        first_seen_to_last_seen::int          as first_seen_to_last_seen,\n        user_count::int                       as user_count,\n        num_comments::int                     as num_comments,\n        title::varchar                        as title,\n        culprit::varchar                      as culprit,\n        assigned_to_email::varchar            as assigned_to_email,\n        assigned_to_id::varchar               as assigned_to_id,\n        assigned_to_type::varchar             as assigned_to_type,\n        status::varchar                       as status, -- noqa: RF04\n        source_type::varchar                  as source_type,\n        has_seen::boolean                     as has_seen,\n        is_public::boolean                    as is_public,\n        short_id::varchar                     as short_id,\n        event_count::int                      as event_count,\n        permalink::varchar                    as permalink,\n        level::varchar                        as level, -- noqa: RF04\n        is_subscribed::boolean                as is_subscribed,\n        is_bookmarked::boolean                as is_bookmarked,\n        project_id::int                       as project_id,\n        project_name::varchar                 as project_name,\n        project_slug::varchar                 as project_slug,\n        source_created_at::timestamp          as source_created_at,\n        source_updated_at::timestamp          as source_updated_at,\n        issues_id::bigint                     as issues_id,\n        created_at::timestamp                 as created_at,\n        updated_at::timestamp                 as updated_at,\n        _fivetran_synced::timestamp           as fivetran_synced\n    from source\n    where not _fivetran_deleted\n\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_eh_infra_stat_service_raw__daily_report_sentry_issues\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.256512Z", "completed_at": "2024-02-04T15:20:08.268746Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.283017Z", "completed_at": "2024-02-04T15:20:08.283030Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04936790466308594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_eh_product__squad_board_ownership", "compiled": true, "compiled_code": "with source as (\n\n    select *\n    from \"dev\".\"eh_product\".\"squad_board_ownership\"\n\n),\n\ntransformed as (\n\n    select\n        _row::bigint                          as row, -- noqa: RF04\n        board_name::varchar                   as board_name,\n        comments::varchar                     as comments, -- noqa: RF04\n        include_in_product_reporting::varchar as include_in_product_reporting,\n        kev_sian_reviewed::varchar            as kev_sian_reviewed,\n        board_key::varchar                    as board_key,\n        squad::varchar                        as squad,\n        archived::varchar                     as archived,\n        workstream::varchar                   as workstream,\n        squad_owner::varchar                  as squad_owner,\n        _fivetran_synced::timestamp           as fivetran_synced\n    from source\n\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_eh_product__squad_board_ownership\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.269882Z", "completed_at": "2024-02-04T15:20:08.281743Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.293842Z", "completed_at": "2024-02-04T15:20:08.293858Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04131650924682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_eh_product__workstream_ownership", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"eh_product\".\"workstream_ownership\"\n),\n\ntransformed as (\n    select\n        _row::int                   as row, -- noqa: RF04\n        product_owner::varchar      as product_owner,\n        product_escalation::varchar as product_escalation,\n        product_family::varchar     as product_family,\n        product_line::varchar       as product_line,\n        workstream::varchar         as workstream,\n        _fivetran_synced::timestamp as fivetran_synced\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_eh_product__workstream_ownership\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.284320Z", "completed_at": "2024-02-04T15:20:08.296292Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.309458Z", "completed_at": "2024-02-04T15:20:08.309472Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.042623281478881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_github__repository", "compiled": true, "compiled_code": "with source as (\n\n    select *\n    from \"dev\".\"github\".\"repository\"\n\n),\n\ntransformed as (\n    select\n        id::bigint                  as id, -- noqa: RF04\n        name::varchar               as name, -- noqa: RF04\n        full_name::varchar          as full_name,\n        description::varchar        as description,\n        fork::boolean               as fork,\n        archived::boolean           as archived,\n        homepage::varchar           as homepage,\n        language::varchar           as language, -- noqa: RF04\n        default_branch::varchar     as default_branch,\n        created_at::timestamp       as created_at,\n        owner_id::bigint            as owner_id,\n        private::boolean            as private, -- noqa: RF04\n        _fivetran_synced::timestamp as fivetran_synced,\n        stargazers_count::int       as stargazers_count\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_github__repository\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.297641Z", "completed_at": "2024-02-04T15:20:08.307121Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.320493Z", "completed_at": "2024-02-04T15:20:08.320507Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04103350639343262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_github__team", "compiled": true, "compiled_code": "with source as (\n\n    select *\n    from \"dev\".\"github\".\"team\"\n\n),\n\ntransformed as (\n\n    select\n        id::bigint                  as id, -- noqa: RF04\n        name::varchar               as name, -- noqa: RF04\n        slug::varchar               as slug,\n        description::varchar        as description,\n        privacy::varchar            as privacy,\n        org_id::bigint              as org_id,\n        parent_id::bigint           as parent_id,\n        _fivetran_synced::timestamp as fivetran_synced\n\n    from source\n\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_github__team\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.313371Z", "completed_at": "2024-02-04T15:20:08.327839Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.338731Z", "completed_at": "2024-02-04T15:20:08.338748Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04562807083129883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_herodollar_purchases_service_public__transactions", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"herodollar_purchase_service_public\".\"transactions\"\n),\n\ntransformed as (\n    select\n        id::varchar                               as id, -- noqa: RF04\n        transaction_id::int                       as transaction_id,\n        payee_id::varchar                         as payee_id,\n        payer_id::varchar                         as payer_id,\n        payment_processor_transaction_id::varchar as payment_processor_transaction_id,\n        payment_processor::int                    as payment_processor_key,\n        payee_type::varchar                       as payee_type,\n        ip_addresses::varchar                     as ip_addressess,\n        status::varchar                           as status,\n        purchase_method::varchar                  as purchase_method,\n        amount::float                             as transaction_amount,\n        points::float                             as heropoints_amount,\n        rate::float                               as rate,\n        net_amount::float                         as net_transaction_amount,\n        _fivetran_deleted::boolean                as fivetran_deleted,\n        created_at::timestamp                     as created_at,\n        updated_at::timestamp                     as updated_at\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_herodollar_purchases_service_public__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.323279Z", "completed_at": "2024-02-04T15:20:08.337307Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.352382Z", "completed_at": "2024-02-04T15:20:08.352398Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05083823204040527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_herodollar_service_public__herodollar_transactions", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"herodollar_service_public\".\"hero_dollar_transactions\"\n),\n\ntransformed as (\n    select\n        id::varchar                 as id, -- noqa: RF04\n        transactable_id::varchar    as transaction_initiator_id,\n        ref_id::varchar             as ref_id,\n        parent_id::varchar          as parent_id,\n        transactable_type::varchar  as transaction_initiator_type,\n        transaction_type::int       as transaction_type_key,\n        client_type::varchar        as transaction_source,\n        \"identity\"::varchar         as transaction_initiator_identity,\n        currency_code::varchar      as currency_code,\n        hero_points::boolean        as is_hero_points_transaction,\n        amount::float               as hero_dollar_amount,\n        points::float               as hero_points_amount,\n        base_conversion_rate::float as hero_points_conversion_rate,\n        margin_percentage::float    as transaction_margin_rate,\n        _fivetran_deleted::boolean  as fivetran_deleted,\n        created_at::timestamp       as created_at,\n        updated_at::timestamp       as updated_at\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.342896Z", "completed_at": "2024-02-04T15:20:08.354960Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.369431Z", "completed_at": "2024-02-04T15:20:08.369446Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04881882667541504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_herodollar_service_public__tracking_infos", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"herodollar_service_public\".\"tracking_infos\"\n),\n\ntransformed as (\n    select\n        id::varchar                         as id, -- noqa: RF04\n        hero_dollar_transaction_id::varchar as hero_dollar_transaction_id,\n        ip_addresses::varchar               as ip_addressess,\n        author_id::varchar                  as author_id,\n        author_email::varchar               as author_email,\n        reason_type::int                    as reason_type_key,\n        reason_detail::varchar              as reason_detail,\n        _fivetran_deleted::boolean          as fivetran_deleted,\n        created_at::timestamp               as created_at,\n        updated_at::timestamp               as updated_at\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_herodollar_service_public__tracking_infos\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.356146Z", "completed_at": "2024-02-04T15:20:08.368171Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.383325Z", "completed_at": "2024-02-04T15:20:08.383341Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05196261405944824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heropay_db__heropay_transactions", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heropay_db_public\".\"heropay_transactions\"\n),\n\ntransformed as (\n    select\n        id::varchar                      as id, -- noqa: RF04\n        heropay_balance_id::varchar      as heropay_balance_id,\n        member_id::varchar               as employee_uuid,\n        historical::boolean              as historical,\n        status::int                      as transaction_status_key,\n        amount::float                    as transaction_amount,\n        admin_fee::float                 as fee_charged,\n        fee_type::int                    as fee_tier_key,\n        aba_description::varchar         as aba_file_description,\n        aba_lodgement_reference::varchar as aba_file_lodgement_reference,\n        aba_sent::boolean                as aba_sent,\n        aba_status::varchar              as aba_status,\n        aba_name::varchar                as aba_file_name,\n        aba_url::varchar                 as aba_file_url,\n        ip_addresses::varchar            as ip_address,\n        comment::varchar                 as comment, -- noqa: RF04\n        ref_id::int                      as ref_id,\n        referred_from::int               as referred_from_key,\n        referred_id::varchar             as referred_id,\n        created_at::timestamp            as created_at,\n        updated_at::timestamp            as updated_at,\n        deleted_at::timestamp            as deleted_at,\n        aba_sent_at::timestamp           as aba_sent_at,\n        _fivetran_deleted::boolean       as fivetran_deleted\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.371952Z", "completed_at": "2024-02-04T15:20:08.386055Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.399950Z", "completed_at": "2024-02-04T15:20:08.399964Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04521298408508301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__order_details", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"order_details\"\n),\n\ntransformed as (\n    select\n        id::varchar                 as id, -- noqa: RF04\n        order_id::varchar           as order_id,\n        discount::float             as discount,\n        quantity::int               as quantity,\n        subtotal::float             as subtotal,\n        billable_amount::float      as billable_amount,\n        price::float                as price,\n        created_at::timestamp       as created_at,\n        updated_at::timestamp       as updated_at,\n        product_variant_id::varchar as product_variant_id,\n        _fivetran_synced::timestamp as fivetran_synced,\n        _fivetran_deleted::boolean  as fivetran_deleted,\n        transaction_fee::float      as transaction_fee,\n        tracking_url::varchar       as tracking_url,\n        serial_number::varchar      as serial_number,\n        supplier_price::float       as supplier_price,\n        freight_cost::float         as freight_cost,\n        status::varchar             as status,\n        local_id::int               as local_id\n\n    from source\n\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__order_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.387442Z", "completed_at": "2024-02-04T15:20:08.398781Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.410702Z", "completed_at": "2024-02-04T15:20:08.410715Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04858660697937012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__orders", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"orders\"\n),\n\ntransformed as (\n    select\n        id::varchar                 as id, -- noqa: RF04\n        member_id::varchar          as member_id,\n        billable_amount::float      as billable_amount,\n        status::varchar             as status,\n        created_at::timestamp       as created_at,\n        updated_at::timestamp       as updated_at,\n        ip_address::varchar         as ip_address,\n        transaction_fee::float      as transaction_fee,\n        _fivetran_synced::timestamp as fivetran_synced,\n        _fivetran_deleted::boolean  as fivetran_deleted,\n        local_id::int               as local_id,\n        freight_cost::float         as freight_cost,\n        ip_addresses::varchar       as ip_addresses,\n        promo_total::float          as promo_total,\n        payment_params::varchar     as payment_params,\n        service_fee::float          as service_fee,\n        platform::varchar           as platform\n\n    from source\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.402495Z", "completed_at": "2024-02-04T15:20:08.411945Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.424332Z", "completed_at": "2024-02-04T15:20:08.424359Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03709053993225098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__product_categories", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"product_categories\"\n),\n\ntransformed as (\n    select\n        id::varchar                 as id, -- noqa: RF04\n        country::varchar            as country,\n        code::varchar               as code,\n        logo_url::varchar           as logo_url,\n        image_url::varchar          as image_url,\n        description::varchar        as description,\n        created_at::timestamp       as created_at,\n        title::varchar              as title,\n        display_on_ui::boolean      as display_on_ui,\n        updated_at::timestamp       as updated_at,\n        name::varchar               as name, -- noqa: RF04\n        disabled::boolean           as disabled,\n        _fivetran_synced::timestamp as fivetran_synced,\n        _fivetran_deleted::boolean  as fivetran_deleted\n    from source\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__product_categories\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.414356Z", "completed_at": "2024-02-04T15:20:08.426328Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.440982Z", "completed_at": "2024-02-04T15:20:08.440998Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04742836952209473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__product_variants", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"product_variants\"\n),\n\ntransformed as (\n    select\n        id::varchar                       as id, -- noqa: RF04\n        product_id::varchar               as product_id,\n        variant_code::varchar             as variant_code,\n        price::float                      as price,\n        created_at::timestamp             as created_at,\n        updated_at::timestamp             as updated_at,\n        name::varchar                     as name, -- noqa: RF04\n        image_url::varchar                as image_url,\n        disabled::boolean                 as disabled,\n        discounted_price::float           as discounted_price,\n        _fivetran_synced::timestamp       as fivetran_synced,\n        _fivetran_deleted::boolean        as fivetran_deleted,\n        rrp::float                        as rrp,\n        supplier_price::float             as supplier_price,\n        freight_price::float              as freight_price,\n        status::int                       as status,\n        label::varchar                    as label, -- noqa: RF04\n        supplier_product_id::varchar      as supplier_product_id,\n        local_id::int                     as local_id,\n        card_id::varchar                  as card_id,\n        image::varchar                    as image,\n        position::int                     as position, -- noqa: RF04\n        stock_status::int                 as stock_status,\n        giftaway_denomination_id::varchar as giftaway_denomination_id,\n        uber_sku::varchar                 as uber_sku\n\n    from source\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.433874Z", "completed_at": "2024-02-04T15:20:08.449885Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.463204Z", "completed_at": "2024-02-04T15:20:08.463220Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04749345779418945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__products", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"products\"\n),\n\ntransformed as (\n    select\n        id::varchar                   as id, -- noqa: RF04\n        supplier_id::varchar          as supplier_id,\n        product_code::varchar         as product_code,\n        name::varchar                 as name, -- noqa: RF04\n        title::varchar                as title,\n        image_url::varchar            as image_url,\n        email::varchar                as email,\n        created_at::timestamp         as created_at,\n        updated_at::timestamp         as updated_at,\n        logo_url::varchar             as logo_url,\n        usage::varchar                as usage, -- noqa: RF04\n        participant::varchar          as participant,\n        product_type::int             as product_type,\n        disabled::boolean             as disabled,\n        saving_category_id::varchar   as saving_category_id,\n        product_category_id::varchar  as product_category_id,\n        transaction_fee::float        as transaction_fee,\n        _fivetran_synced::timestamp   as fivetran_synced,\n        _fivetran_deleted::boolean    as fivetran_deleted,\n        reviewed::boolean             as reviewed,\n        handle::varchar               as handle,\n        slug::varchar                 as slug,\n        instapay_fee::float           as instapay_fee,\n        local_id::int                 as local_id,\n        storefront_image_url::varchar as storefront_image_url,\n        image::varchar                as image,\n        storefront_image::varchar     as storefront_image,\n        logo::varchar                 as logo,\n        how_it_works::varchar         as how_it_works,\n        giftpay_balance::float        as giftpay_balance,\n        terms_and_conditions::varchar as terms_and_conditions,\n        description::varchar          as description,\n        is_special::boolean           as is_special,\n        country::varchar              as country\n\n    from source\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__products\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.442492Z", "completed_at": "2024-02-04T15:20:08.453832Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.465621Z", "completed_at": "2024-02-04T15:20:08.465635Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05010795593261719, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__suppliers", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"suppliers\"\n),\n\ntransformed as (\n    select\n        id::varchar                as id, -- noqa: RF04\n        name::varchar              as name, -- noqa: RF04\n        _fivetran_deleted::boolean as fivetran_deleted\n\n    from source\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__suppliers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.456598Z", "completed_at": "2024-02-04T15:20:08.470269Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.485622Z", "completed_at": "2024-02-04T15:20:08.485636Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04392814636230469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_heroshop_db_public__transactions", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"heroshop_db_public\".\"transactions\"\n),\n\ntransformed as (\n    select\n        id::varchar                  as id, -- noqa: RF04\n        order_id::varchar            as order_id,\n        customer_id::varchar         as customer_id,\n        transaction_id::varchar      as transaction_id,\n        status::varchar              as status,\n        currency::varchar            as currency_code,\n        amount::float                as transaction_amount,\n        points::float                as hero_points_amount,\n        transaction_fee::float       as transaction_fee,\n        fee_percent::float           as fee_rate,\n        payment_method::int          as payment_method_key,\n        error_code::varchar          as error_code,\n        error_message::varchar       as error_message,\n        three_d_secure_info::varchar as three_d_secure_info,\n        _fivetran_deleted::boolean   as fivetran_deleted,\n        created_at::timestamp        as created_at,\n        updated_at::timestamp        as updated_at\n\n    from source\n)\n\nselect * from transformed\nwhere not fivetran_deleted", "relation_name": "\"dev\".\"staging\".\"stg_heroshop_db_public__transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.471478Z", "completed_at": "2024-02-04T15:20:08.486750Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.499505Z", "completed_at": "2024-02-04T15:20:08.499520Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04586625099182129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_mp__event", "compiled": true, "compiled_code": "\n\n\n\nwith source as (\n    select *\n\n    from \"dev\".\"mp\".\"event\" as mp_event\n\n    where\n        mp_event.name not like '%$%'\n        -- For non prod environments, only pull the last 2 days of data.\n        \n),\n\ntransformed as (\n    select\n        _fivetran_id                                                                                                                             as event_id,\n        time                                                                                                                                     as event_timestamp,\n        name,\n        os,\n        device,\n        browser,\n        screen_width,\n        screen_height,\n        screen_dpi,\n        app_version_string,\n        \n\n\n\n    case when json_extract_path_text(properties, 'module')= '' then null else json_extract_path_text(properties, 'module') end as module\n    \n    ,\n\n    case when json_extract_path_text(properties, 'sub_module')= '' then null else json_extract_path_text(properties, 'sub_module') end as sub_module\n    \n    ,\n\n    case when json_extract_path_text(properties, 'user_id')= '' then null else json_extract_path_text(properties, 'user_id') end as user_id\n    \n    ,\n\n    case when json_extract_path_text(properties, 'user_uuid')= '' then null else json_extract_path_text(properties, 'user_uuid') end as user_uuid\n    \n    ,\n\n    case when json_extract_path_text(properties, 'eh_user_type')= '' then null else json_extract_path_text(properties, 'eh_user_type') end as eh_user_type\n    \n    ,\n\n    case when json_extract_path_text(properties, 'login_provider')= '' then null else json_extract_path_text(properties, 'login_provider') end as login_provider\n    \n    ,\n\n    case when json_extract_path_text(properties, 'email')= '' then null else json_extract_path_text(properties, 'email') end as email\n    \n    ,\n\n    case when json_extract_path_text(properties, 'member_id')= '' then null else json_extract_path_text(properties, 'member_id') end as eh_employee_id\n    \n    ,\n\n    case when json_extract_path_text(properties, 'member_uuid')= '' then null else json_extract_path_text(properties, 'member_uuid') end as eh_employee_uuid\n    \n    ,\n\n    case when json_extract_path_text(properties, 'organisation_id')= '' then null else json_extract_path_text(properties, 'organisation_id') end as eh_organisation_id\n    \n    ,\n\n    case when json_extract_path_text(properties, 'user_type')= '' then null else json_extract_path_text(properties, 'user_type') end as user_type\n    \n    ,\n\n    case when json_extract_path_text(properties, 'user_email')= '' then null else json_extract_path_text(properties, 'user_email') end as user_email\n    \n    ,\n\n    case when json_extract_path_text(properties, 'kp_employee_id')= '' then null else json_extract_path_text(properties, 'kp_employee_id') end as kp_employee_id\n    \n    ,\n\n    case when json_extract_path_text(properties, 'kp_business_id')= '' then null else json_extract_path_text(properties, 'kp_business_id') end as kp_business_id\n    \n    ,\n\n    case when json_extract_path_text(properties, 'platform')= '' then null else json_extract_path_text(properties, 'platform') end as platform\n    \n    ,\n\n    case when json_extract_path_text(properties, 'offerType')= '' then null else json_extract_path_text(properties, 'offerType') end as shopnow_offer_type\n    \n    ,\n\n    case when json_extract_path_text(properties, 'category')= '' then null else json_extract_path_text(properties, 'category') end as shopnow_offer_category\n    \n    ,\n\n    case when json_extract_path_text(properties, 'utm_source')= '' then null else json_extract_path_text(properties, 'utm_source') end as utm_source\n    \n    ,\n\n    case when json_extract_path_text(properties, 'utm_medium')= '' then null else json_extract_path_text(properties, 'utm_medium') end as utm_medium\n    \n    ,\n\n    case when json_extract_path_text(properties, 'utm_campaign')= '' then null else json_extract_path_text(properties, 'utm_campaign') end as utm_campaign\n    \n    ,\n\n    case when json_extract_path_text(properties, 'utm_content')= '' then null else json_extract_path_text(properties, 'utm_content') end as utm_content\n    \n    ,\n\n    case when json_extract_path_text(properties, 'utm_term')= '' then null else json_extract_path_text(properties, 'utm_term') end as utm_term\n    \n    \n\n\n\n    from source\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_mp__event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.494137Z", "completed_at": "2024-02-04T15:20:08.507932Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.520709Z", "completed_at": "2024-02-04T15:20:08.520724Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04052448272705078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_postgres_public__members", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"postgres_public\".\"members\"\n),\n\ntransformed as (\n    select\n        id::int                        as id,  --noqa: RF04\n        uuid::varchar                  as uuid,\n        external_id::int               as external_payroll_employee_id,\n        first_name::varchar            as first_name,\n        middle_name::varchar           as middle_name,\n        last_name::varchar             as last_name,\n        organisation_id::int           as organisation_id,\n        accepted::boolean              as has_accepted_invitation,\n        gender::varchar                as gender,\n        date_part(year, date_of_birth) as birth_year,\n        start_date::varchar            as start_date,\n        termination_date::varchar      as termination_date,\n        active::boolean                as is_active,\n        work_country,\n        user_id,\n        role_id,\n        created_at::timestamp          as created_at,\n        _fivetran_synced::timestamp    as fivetran_synced\n\n\n    from source\n\n    where\n        not _fivetran_deleted\n        and not is_shadow_data\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_postgres_public__members\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.500907Z", "completed_at": "2024-02-04T15:20:08.511484Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.523107Z", "completed_at": "2024-02-04T15:20:08.523120Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04456281661987305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_postgres_public__user_infos", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"postgres_public\".\"user_infos\"\n),\n\ntransformed as (\n    select\n        id::varchar                       as id, --noqa: RF04\n        user_id::varchar                  as user_id,\n        first_name::varchar               as first_name,\n        last_name::varchar                as last_name,\n        user_verified_at::timestamp       as verified_at,\n        activated_at::timestamp           as activated_at,\n        marketing_consented_at::timestamp as marketing_consented_at,\n        completed_profile::boolean        as is_profile_completed,\n        public_profile::boolean           as is_public_profile,\n        created_at::timestamp             as created_at,\n        _fivetran_synced::timestamp       as fivetran_synced\n\n    from source\n\n    where not _fivetran_deleted\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_postgres_public__user_infos\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.513991Z", "completed_at": "2024-02-04T15:20:08.526656Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.540484Z", "completed_at": "2024-02-04T15:20:08.540499Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04089069366455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_postgres_public__users", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"postgres_public\".\"users\"\n),\n\ntransformed as (\n    select\n        id::int                     as id,  --noqa: RF04\n        uuid::varchar               as uuid,\n        email::varchar              as email,\n        acknowledged_tnc::boolean   as has_acknowledged_eh_tnc,\n        twofa_enabled::boolean      as is_twofa_enabled,\n        created_at::timestamp       as created_at,\n        _fivetran_synced::timestamp as fivetran_synced\n\n\n    from source\n\n    where\n        not _fivetran_deleted\n        and not is_shadow_data\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_postgres_public__users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.527905Z", "completed_at": "2024-02-04T15:20:08.541835Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.555194Z", "completed_at": "2024-02-04T15:20:08.555210Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.047823190689086914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_workshop_public__pingdom_check_stats", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"workshop_public\".\"pingdom_check_stats\"\n),\n\ntransformed as (\n    select\n        id::varchar               as id, -- noqa: RF04\n        up_time::int              as up_time,\n        down_time::int            as down_time,\n        unknown_time::int         as unknown_time,\n        avg_response::int         as avg_response_time,\n        date::date                as date, -- noqa: RF04\n        pingdom_check_id::varchar as pingdom_check_id,\n        created_at::timestamp     as created_at,\n        updated_at::timestamp     as updated_at\n\n    from source\n    where not _fivetran_deleted\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_workshop_public__pingdom_check_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.549604Z", "completed_at": "2024-02-04T15:20:08.564457Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.576567Z", "completed_at": "2024-02-04T15:20:08.576582Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04185748100280762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_workshop_public__pingdom_checks", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"workshop_public\".\"pingdom_checks\"\n),\n\ntransformed as (\n    select\n        id::varchar           as id, -- noqa: RF04\n        name::varchar         as name, -- noqa: RF04\n        created_at::timestamp as created_at,\n        updated_at::timestamp as updated_at\n\n    from source\n    where not _fivetran_deleted\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_workshop_public__pingdom_checks\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.556584Z", "completed_at": "2024-02-04T15:20:08.569773Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.583162Z", "completed_at": "2024-02-04T15:20:08.583177Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04510831832885742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_workshop_public__prometheus_service_stats", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"workshop_public\".\"prometheus_service_stats\"\n),\n\ntransformed as (\n    select\n        id::varchar                   as id, -- noqa: RF04\n        p50::int                      as p50,\n        p90::int                      as p90,\n        date::date                    as date, -- noqa: RF04\n        prometheus_service_id::bigint as prometheus_service_id,\n        created_at::timestamp         as created_at,\n        updated_at::timestamp         as updated_at\n\n    from source\n    where not _fivetran_deleted\n\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_workshop_public__prometheus_service_stats\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.572263Z", "completed_at": "2024-02-04T15:20:08.581973Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.594991Z", "completed_at": "2024-02-04T15:20:08.595006Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03606534004211426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_workshop_public__prometheus_services", "compiled": true, "compiled_code": "with source as (\n    select *\n\n    from \"dev\".\"workshop_public\".\"prometheus_services\"\n),\n\ntransformed as (\n    select\n        id::varchar           as id, -- noqa: RF04\n        name::varchar         as name, -- noqa: RF04\n        created_at::timestamp as created_at,\n        updated_at::timestamp as updated_at\n\n    from source\n    where not _fivetran_deleted\n\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_workshop_public__prometheus_services\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.589510Z", "completed_at": "2024-02-04T15:20:08.600401Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.614081Z", "completed_at": "2024-02-04T15:20:08.614097Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.044080495834350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.stg_workshop_public__source_usages", "compiled": true, "compiled_code": "with source_usages as (\n    select *\n    from \"dev\".\"workshop_public\".\"source_usages\"\n),\n\ntransformed as (\n    select\n        id::varchar                     as id, -- noqa: RF04\n        to_date(date, 'YYYYMMDD')::date as date, -- noqa: RF04\n        source::varchar                 as source, -- noqa: RF04\n        count::int                      as source_usage_count,\n        squad::varchar                  as squad,\n        created_at::timestamp           as created_at,\n        updated_at::timestamp           as updated_at\n\n    from source_usages\n    where not _fivetran_deleted\n\n)\n\nselect * from transformed", "relation_name": "\"dev\".\"staging\".\"stg_workshop_public__source_usages\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.602938Z", "completed_at": "2024-02-04T15:20:08.621493Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.632699Z", "completed_at": "2024-02-04T15:20:08.632713Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04452991485595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.swag_jobs_events", "compiled": true, "compiled_code": "\n\n\nselect\n    e.time,\n    app_release,\n    app_version,\n    brand,\n    browser,\n    current_url,\n    device,\n    initial_referrer,\n    os,\n    os_version,\n    u.email as user_email,\n    user_id\nfrom \"dev\".\"mp\".\"event\" e\nleft join \"dev\".\"postgres_public\".\"users\" u on e.user_id = u.uuid\nwhere\n    e.time >= '2022-01-01'  -- hard limit on events (lighten query)\n    and (current_url like '%jobs.employmenthero%' or current_url like '%jobs.swagapp%')\n    and current_url not like '%secure.employmenthero%'  -- from platform\n    and (e.name not like '%\\\\%' or e.name not like '%onload%')  -- filter out test events \n    and (\n        user_email\n        !~* '.*(employmenthero|keypay|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n        or user_email is null\n    )\n    -- and e.name in ('Job Application Page - Visit',\n    -- 'ATS EH Job Board Filter - Country',\n    -- 'ATS EH Job Board Filter - Industry',\n    -- 'ATS EH Job Board Filter - Work type',\n    -- 'ATS EH Job Board Visits')\n    \n\n    -- this filter will only be applied on an incremental run        \n    and e.time > (select max(time) from \"dev\".\"swag\".\"jobs_events\")\n\n    ", "relation_name": "\"dev\".\"swag\".\"jobs_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.615291Z", "completed_at": "2024-02-04T15:20:08.629700Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.641008Z", "completed_at": "2024-02-04T15:20:08.641030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04609417915344238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_eh_members_managers", "compiled": true, "compiled_code": "with recursive\n    eh_members as (\n        select distinct\n            uuid,\n            id,\n            first_name,\n            last_name,\n            active,\n            work_country,\n            gender,\n            cast(start_date as date) start_date,\n            cast(termination_date as date) termination_date,\n            (\n                case\n                    when active = true\n                    then 'N/A'\n                    when\n                        termination_info like '%termination_type\":\"Transfer\"%'\n                        or termination_info like '%termination_code\":\"T\"%'\n                    then 'Transfer'\n                    when\n                        lower(termination_info) like '%volun%'\n                        or termination_info like '%code\":\"V\"%'\n                        or lower(termination_info) like '%resign%'\n                        or lower(termination_info) like '%regret%'\n                    then 'Voluntary'\n                    else 'Involuntary'\n                end\n            ) as termination_type,\n            termination_info,\n            (\n                case\n                    when\n                        dateadd('month', cast(probation_length as integer), cast(start_date as date))\n                        <= cast(termination_date as date)\n                    then false\n                    else true\n                end\n            ) as if_pass_probation\n        from \"dev\".\"postgres_public\".\"members\"\n        where organisation_id = 8701 and _fivetran_deleted = 'f' and is_shadow_data = false and system_user = false\n    ),\n    direct_manager as (\n        select\n            (m.first_name || ' ' || m.last_name) as employee_name,\n            m.id member_id,\n            mm.manager_id,\n            (m2.first_name || ' ' || m2.last_name) as manager_name,\n            mm.updated_at\n        from \"dev\".\"postgres_public\".\"members\" m\n        left join\n            \"dev\".\"postgres_public\".\"member_managers\" mm\n            on mm.member_id = m.id\n            and mm.level = 1\n            and mm.order = 0\n            and mm._fivetran_deleted = false\n        left join\n            \"dev\".\"postgres_public\".\"members\" m2\n            on mm.manager_id = m2.id\n            and m2.organisation_id = 8701\n            and m2._fivetran_deleted = false\n            and m2.system_user = false\n        where m.organisation_id = 8701 and m._fivetran_deleted = false and m.system_user = false\n    ),\n    -- recursive here\n    manager(employee_name, member_id, manager_id, manager_name, path) as (\n        select employee_name, member_id, manager_id, manager_name, employee_name as path\n        from direct_manager\n        where manager_id is null and employee_name = 'Benjamin Thompson'\n        union all\n        select dm.employee_name, dm.member_id, dm.manager_id, dm.manager_name, (m.path || '-' || dm.manager_name)\n        from direct_manager dm, manager m\n        where dm.manager_id = m.member_id\n    )\n\n-- join back to the members table\nselect distinct\n    m.id member_id,\n    m.uuid member_uuid,\n    (m.first_name || ' ' || m.last_name) as employee_name,\n    m.active if_active_employee,\n    (\n        case\n            when m.active = true\n            then datediff('day', m.start_date, current_date)\n            else datediff('day', m.start_date, m.termination_date)\n        end\n    ) as tenure,\n    m.start_date,\n    m.termination_date,\n    m.gender,\n    m.work_country,\n    m.if_pass_probation,\n    m.termination_info,\n    m.termination_type,\n    m2.manager_name,\n    substring(m2.path, 19, len(m2.path) - 17) as path\nfrom\n    -- clean up from members table\n    (\n        select distinct\n            id,\n            uuid,\n            first_name,\n            last_name,\n            active,\n            work_country,\n            gender,\n            start_date,\n            termination_date,\n            termination_type,\n            termination_info,\n            if_pass_probation\n        from eh_members\n    )\n    m\nleft join manager m2 on m2.member_id = m.id", "relation_name": "\"dev\".\"tableau\".\"tableau_companydash_eh_members_managers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.624324Z", "completed_at": "2024-02-04T15:20:08.633844Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.645424Z", "completed_at": "2024-02-04T15:20:08.645445Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.041586875915527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_monthly_ats_jobs_posted_industry", "compiled": true, "compiled_code": "\n\nselect\n    industry,\n    date_trunc('month', posted_at) as month_posted,\n    country,\n    case when is_test_job then 'True' else 'False' end as is_test_job,\n    case when is_remote_job then 'True' else 'False' end as is_remote_job,\n    count(*)\nfrom ats.jobs_posted\nwhere industry is not null and country is not null\ngroup by 1, 2, 3, 4, 5\norder by industry, month_posted", "relation_name": "\"dev\".\"tableau\".\"monthly_ats_jobs_posted_industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.649077Z", "completed_at": "2024-02-04T15:20:08.659557Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.674725Z", "completed_at": "2024-02-04T15:20:08.674739Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05922245979309082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.v_generate_user_grant_revoke_ddl", "compiled": true, "compiled_code": "/*************************************************************************************************************************\nPurpose:    View to generate grant or revoke ddl for users and groups. This is useful for \n                  recreating users or group privileges or for revoking privileges before dropping \n                  a user or group. \n            \nCurrent Version:        1.09\nColumns -\nobjowner:   Object owner \nschemaname: Object schema if applicable\nobjname:    Name of the object the privilege is granted on\ngrantor:    User that granted the privilege\ngrantee:    User/Group the privilege is granted to\nobjtype:    Type of object user has privilege on. Object types are Function, Schema, \n            Table or View, Database, Language or Default ACL\nddltype:    Type of ddl generated i.e grant or revoke\ngrantseq:   Sequence number to order the DDLs by hierarchy\nobjseq:           Sequence number to order the objects by hierarchy\nddl:        DDL text\ncolname:    Name of the column the privilege is granted on\nNotes:         This version will NOT work with a cluster that has patch 1.0.12916 and below. Cluster must be on patch 1.0.13059 and above.\n                \nHistory:\nVersion 1.01\n      2017-03-01  adedotua created\n      2018-03-04  adedotua completely refactored the view to minimize nested loop joins. View is now significantly faster on clusters \n                        with a large number of users and privileges\n      2018-03-04  adedotua added column grantseq to help return the DDLs in the order they need to be granted or revoked\n      2018-03-04  adedotua renamed column sequence to objseq and username to grantee\nVersion 1.02\n      2018-03-09  adedotua added logic to handle function name generation when there are non-alphabets in the function schemaname\nVersion 1.03\n      2018-04-26  adedotua added missing filter for handling empty default acls\n      2018-04-26  adedotua fixed one more edge case where default privilege is granted on schema to user other than schema owner\nVersion 1.04\n      2018-05-02  adedotua added support for privileges granted on pg_catalog tables and other system owned objects\nVersion 1.05\n      2018-06-22  adedotua fixed issue with generation of default privileges grants.\nVersion 1.06\n      2018-11-12  adedotua fixed issue with generation of default privileges revokes for user who granted the privileges (defacluser).    \nVersion 1.07\n      2019-10-10  adedotua added handling for privileges granted on procedures. Increased ddl column to varchar(4000) to incorporate \n                  CrisFavero #460 pull request. Fixed handling for empty default aclitem\nVersion 1.08\n      2020-02-22  adedotua added support for generating grants for column privileges (requires patch 1.0.13059 and above). added schemanames to catalog tables to allow \n                  creating this view as a late binding view\nVersion 1.09\n      2021-07-27  adedotua added support for generating 'DROP' grants and revokes for tables/views.\nVersion 1.10\n      2023-02-08  Fix for issue #660\n\nSteps to revoking grants before dropping a user:\n1. Find all grants by granted by user to drop and regrant them as another user (superuser preferably).\nselect regexp_replace(ddl,grantor,'<superuser>') from v_generate_user_grant_revoke_ddl where grantor='<username>' and ddltype='grant' and objtype <>'default acl' order by objseq,grantseq;\n2. Find all grants granted to user to drop and revoke them.\nselect ddl from v_generate_user_grant_revoke_ddl where ddltype='revoke' and (grantee='<username>' or grantor='<username>') order by objseq, grantseq desc;              \n************************************************************************************************************************/\n\n-- DROP view admin.v_generate_user_grant_revoke_ddl;\n\nWITH objprivs AS ( \nSELECT objowner, \n      schemaname, \n      objname, \n      objtype,\n      CASE WHEN split_part(aclstring,'=',1)='' THEN 'PUBLIC'::text ELSE translate(trim(split_part(aclstring,'=',1)::text),'\"','')::text END::text AS grantee,\n      translate(trim(split_part(aclstring,'/',2)::text),'\"','')::text AS grantor, \n      trim(split_part(split_part(aclstring,'=',2),'/',1))::text AS privilege, \n      CASE WHEN objtype = 'default acl' THEN QUOTE_IDENT(objname) \n            WHEN objtype in ('procedure','function') AND regexp_instr(objname, schemaname) > 0 THEN QUOTE_IDENT(objname)\n            WHEN objtype in ('procedure','function','column') THEN QUOTE_IDENT(schemaname)||'.'||QUOTE_IDENT(objname) \n            ELSE nvl(QUOTE_IDENT(schemaname)||'.'||QUOTE_IDENT(objname),QUOTE_IDENT(objname)) END::varchar(5000) as fullobjname,\n      CASE WHEN split_part(aclstring,'=',1)='' THEN 'PUBLIC' \n      ELSE trim(split_part(aclstring,'=',1)) \n      END::text as splitgrantee,\n      grantseq,\n      colname \n      FROM (\n            -- TABLE AND VIEW privileges\n            SELECT pg_get_userbyid(b.relowner)::text AS objowner, \n            trim(c.nspname)::text AS schemaname,  \n            b.relname::varchar(5000) AS objname,\n            CASE WHEN relkind='r' THEN 'table' ELSE 'view' END::text AS objtype, \n            TRIM(SPLIT_PART(array_to_string(b.relacl,','), ',', NS.n))::varchar(500) AS aclstring, \n            NS.n as grantseq,\n            null::text as colname\n            FROM \n            (SELECT oid,generate_series(1,array_upper(relacl,1))  AS n FROM pg_catalog.pg_class) NS\n            INNER JOIN pg_catalog.pg_class B ON b.oid = ns.oid AND  NS.n <= array_upper(b.relacl,1)\n            INNER JOIN pg_catalog.pg_namespace c on b.relnamespace = c.oid\n            where relkind in ('r','v')\n            UNION ALL\n            -- TABLE AND VIEW column privileges\n            SELECT pg_get_userbyid(c.relowner)::text AS objowner, \n            trim(d.nspname)::text AS schemaname,  \n            c.relname::varchar(5000) AS objname,\n            'column'::text AS objtype, \n            TRIM(SPLIT_PART(array_to_string(b.attacl,','), ',', NS.n))::varchar(500) AS aclstring, \n            NS.n as grantseq,\n            b.attname::text as colname\n            FROM \n            (SELECT attrelid,generate_series(1,array_upper(attacl,1))  AS n FROM pg_catalog.pg_attribute_info) NS\n            INNER JOIN pg_catalog.pg_attribute_info B ON b.attrelid = ns.attrelid AND  NS.n <= array_upper(b.attacl,1)\n            INNER JOIN pg_catalog.pg_class c on b.attrelid = c.oid\n            INNER JOIN pg_catalog.pg_namespace d on c.relnamespace = d.oid\n            where relkind in ('r','v')\n            UNION ALL\n            -- SCHEMA privileges\n            SELECT pg_get_userbyid(b.nspowner)::text AS objowner,\n            null::text AS schemaname,\n            b.nspname::varchar(5000) AS objname,\n            'schema'::text AS objtype,\n            TRIM(SPLIT_PART(array_to_string(b.nspacl,','), ',', NS.n))::varchar(500) AS aclstring,\n            NS.n as grantseq,\n            null::text as colname\n            FROM \n            (SELECT oid,generate_series(1,array_upper(nspacl,1)) AS n FROM pg_catalog.pg_namespace) NS\n            INNER JOIN pg_catalog.pg_namespace B ON b.oid = ns.oid AND NS.n <= array_upper(b.nspacl,1)\n            UNION ALL\n            -- DATABASE privileges\n            SELECT pg_get_userbyid(b.datdba)::text AS objowner,\n            null::text AS schemaname,\n            b.datname::varchar(5000) AS objname,\n            'database'::text AS objtype,\n            TRIM(SPLIT_PART(array_to_string(b.datacl,','), ',', NS.n))::varchar(500) AS aclstring,\n            NS.n as grantseq,\n            null::text as colname\n            FROM \n            (SELECT oid,generate_series(1,array_upper(datacl,1)) AS n FROM pg_catalog.pg_database) NS\n            INNER JOIN pg_catalog.pg_database B ON b.oid = ns.oid AND NS.n <= array_upper(b.datacl,1) \n            UNION ALL\n            -- FUNCTION privileges \n            SELECT pg_get_userbyid(b.proowner)::text AS objowner,\n            trim(c.nspname)::text AS schemaname, \n            textin(regprocedureout(b.oid::regprocedure))::varchar(5000) AS objname,\n            decode(prorettype,0,'procedure','function')::text AS objtype,\n            TRIM(SPLIT_PART(array_to_string(b.proacl,','), ',', NS.n))::varchar(500) AS aclstring,\n            NS.n as grantseq,\n            null::text as colname  \n            FROM \n            (SELECT oid,generate_series(1,array_upper(proacl,1)) AS n FROM pg_catalog.pg_proc) NS\n            INNER JOIN pg_catalog.pg_proc B ON b.oid = ns.oid and NS.n <= array_upper(b.proacl,1)\n            INNER JOIN pg_catalog.pg_namespace c on b.pronamespace=c.oid \n            UNION ALL\n            -- LANGUAGE privileges\n            SELECT null::text AS objowner,\n            null::text AS schemaname,\n            lanname::varchar(5000) AS objname,\n            'language'::text AS objtype,\n            TRIM(SPLIT_PART(array_to_string(b.lanacl,','), ',', NS.n))::varchar(500) AS aclstring,\n            NS.n as grantseq, \n            null::text as colname\n            FROM \n            (SELECT oid,generate_series(1,array_upper(lanacl,1)) AS n FROM pg_catalog.pg_language) NS\n            INNER JOIN pg_catalog.pg_language B ON b.oid = ns.oid and NS.n <= array_upper(b.lanacl,1)\n            UNION ALL\n            -- DEFAULT ACL privileges\n            SELECT pg_get_userbyid(b.defacluser)::text AS objowner,\n            trim(c.nspname)::text AS schemaname,\n            decode(b.defaclobjtype,'r','tables','f','functions','p','procedures')::varchar(5000) AS objname,\n            'default acl'::text AS objtype,\n            TRIM(SPLIT_PART(array_to_string(b.defaclacl,','), ',', NS.n))::varchar(500) AS aclstring,\n            NS.n as grantseq, \n            null::text as colname\n            FROM \n            (SELECT oid,generate_series(1,array_upper(defaclacl,1)) AS n FROM pg_catalog.pg_default_acl) NS\n            INNER JOIN pg_catalog.pg_default_acl b ON b.oid = ns.oid and NS.n <= array_upper(b.defaclacl,1) \n            LEFT JOIN  pg_catalog.pg_namespace c on b.defaclnamespace=c.oid\n      ) \n      where  ( ((split_part(aclstring,'=',1) = split_part(aclstring,'/',2) AND privilege in ('arwdRxtD','a*r*w*d*R*x*t*D*')) OR split_part(aclstring,'=',1) <> split_part(aclstring,'/',2))\n      -- split_part(aclstring,'=',1) <> split_part(aclstring,'/',2)\n      AND split_part(aclstring,'=',1) <> 'rdsdb'\n      AND NOT (split_part(aclstring,'=',1)='' AND split_part(aclstring,'/',2) = 'rdsdb')) \n)\n-- Extract object GRANTS\nSELECT objowner::text, schemaname::text, objname::varchar(5000), objtype::text, grantor::text, grantee::text, 'grant'::text AS ddltype, grantseq,\ndecode(objtype,'database',0,'schema',1,'language',1,'table',2,'view',2,'column',2,'function',2,'procedure',2,'default acl',3) AS objseq,\nCASE WHEN (grantor <> current_user AND grantor <> 'rdsdb' AND objtype <> 'default acl') \nTHEN 'SET SESSION AUTHORIZATION '||QUOTE_IDENT(grantor)||';' ELSE '' END::varchar(5000)||\n(CASE WHEN privilege = 'arwdRxtD' OR privilege = 'a*r*w*d*R*x*t*D*' THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT ALL on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN privilege = 'a*r*w*d*R*x*t*D*' THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) \nwhen privilege = 'UC' OR privilege = 'U*C*' THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT ALL on '||objtype||' '||fullobjname||' to '||splitgrantee||\n(CASE WHEN privilege = 'U*C*' THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) \nwhen privilege = 'CT' OR privilege = 'U*C*' THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT ALL on '||objtype||' '||fullobjname||' to '||splitgrantee||\n(CASE WHEN privilege = 'C*T*' THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000))\nELSE  \n(\nCASE WHEN charindex('a',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT INSERT on '||fullobjname||' to '||splitgrantee|| \n(CASE WHEN charindex('a*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('r',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT SELECT '||CASE WHEN objtype='column' then '('||colname||')' else '' END::text||' on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('r*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('w',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT UPDATE '||CASE WHEN objtype='column' then '('||colname||')' else '' END::text||' on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('w*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('d',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT DELETE on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('d*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\n\nCASE WHEN charindex('D',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN '-- ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT DROP on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('d*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\n\n\nCASE WHEN charindex('R',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT RULE on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('R*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('x',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT REFERENCES on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('x*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('t',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT TRIGGER on '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('t*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('U',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT USAGE on '||objtype||' '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('U*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('C',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT CREATE on '||objtype||' '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('C*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('T',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT TEMP on '||objtype||' '||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('T*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)||\nCASE WHEN charindex('X',privilege) > 0 THEN (CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\nELSE '' END::varchar(5000))||'GRANT EXECUTE on '||\n(CASE WHEN objtype = 'default acl' THEN '' ELSE objtype||' ' END::varchar(5000))||fullobjname||' to '||splitgrantee||\n(CASE WHEN charindex('X*',privilege) > 0 THEN ' WITH GRANT OPTION;' ELSE ';' END::varchar(5000)) ELSE '' END::varchar(5000)\n) END::varchar(5000))|| \nCASE WHEN (grantor <> current_user AND grantor <> 'rdsdb' AND objtype <> 'default acl') THEN 'RESET SESSION AUTHORIZATION;' ELSE '' END::varchar(5000) AS ddl, colname\nFROM objprivs\nUNION ALL\n-- Extract object REVOKES\nSELECT objowner::text, schemaname::text, objname::varchar(5000), objtype::text, grantor::text, grantee::text, 'revoke'::text AS ddltype, grantseq,\ndecode(objtype,'default acl',0,'function',0,'procedure',1,'table',1,'view',1,'column',1,'schema',2,'language',2,'database',3) AS objseq,\nCASE WHEN (grantor <> current_user AND grantor <> 'rdsdb' AND objtype <> 'default acl' AND grantor <> objowner) THEN 'SET SESSION AUTHORIZATION '||QUOTE_IDENT(grantor)||';' ELSE '' END::varchar(5000)||\n(CASE WHEN objtype = 'default acl' THEN 'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(grantor)||nvl(' in schema '||QUOTE_IDENT(schemaname)||' ',' ')\n||'REVOKE ALL on '||fullobjname||' FROM '||splitgrantee||';'\nELSE 'REVOKE ALL on '||(CASE WHEN objtype in ('table', 'view', 'column') THEN '' ELSE objtype||' ' END::varchar(5000))||fullobjname||' FROM '||splitgrantee||';' END::varchar(5000))||\nCASE WHEN (grantor <> current_user AND grantor <> 'rdsdb' AND objtype <> 'default acl' AND grantor <> objowner) THEN 'RESET SESSION AUTHORIZATION;' ELSE '' END::varchar(5000) AS ddl, colname\nFROM objprivs\nWHERE NOT (objtype = 'default acl' AND grantee = 'PUBLIC' and objname in ('functions'))\nUNION ALL\n-- Eliminate empty default ACLs\nSELECT null::text AS objowner, null::text AS schemaname, decode(b.defaclobjtype,'r','tables','f','functions','p','procedures')::varchar(5000) AS objname,\n            'default acl'::text AS objtype,  pg_get_userbyid(b.defacluser)::text AS grantor, null::text AS grantee, 'revoke'::text AS ddltype, 5 as grantseq, 5 AS objseq,\n  'ALTER DEFAULT PRIVILEGES for user '||QUOTE_IDENT(pg_get_userbyid(b.defacluser))||' GRANT ALL on '||decode(b.defaclobjtype,'r','tables','f','functions','p','procedures')||' TO '||QUOTE_IDENT(pg_get_userbyid(b.defacluser))||\nCASE WHEN b.defaclobjtype = 'f' THEN ', PUBLIC;' ELSE ';' END::varchar(5000) AS ddl, null::text as colname FROM pg_catalog.pg_default_acl b where b.defaclacl = '{}'::aclitem[] or (defaclnamespace=0 and defaclobjtype='f')", "relation_name": "\"dev\".\"admin\".\"v_generate_user_grant_revoke_ddl\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.662267Z", "completed_at": "2024-02-04T15:20:08.673562Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.698102Z", "completed_at": "2024-02-04T15:20:08.698115Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04951739311218262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.v_sensitive_columns", "compiled": true, "compiled_code": "-- Define the list as a constant variable\n\n\n-- List sensitive column base on a list\nwith base as (\n    select\n        table_catalog as database_name,\n        table_schema as schema_name,\n        table_name,\n        column_name,\n        data_type,\n        character_maximum_length,\n        is_nullable\n    from pg_catalog.svv_columns\n    where\n        table_schema not like 'staging_%'\n        and table_name not like '_v_%'\n        and data_type = 'character varying'\n)\nselect *\nfrom base\nwhere\n    column_name like '%phone%'\nor column_name like '%email%'\nor column_name like '%address%'\nor column_name like '%passport%'\nor column_name like '%credit%'\nor column_name like '%card%'\nor column_name like '%first_name%'\nor column_name like '%last_name%'\nor column_name like '%middle_name%'\nor column_name like '%surname%'\norder by schema_name, table_name, column_name", "relation_name": "\"dev\".\"admin\".\"v_sensitive_columns\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.688948Z", "completed_at": "2024-02-04T15:20:08.703362Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.713196Z", "completed_at": "2024-02-04T15:20:08.713210Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06127429008483887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__account_tmp", "compiled": true, "compiled_code": "select *\nfrom \"dev\".\"salesforce\".\"account\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__account_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.714355Z", "completed_at": "2024-02-04T15:20:08.738572Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.747674Z", "completed_at": "2024-02-04T15:20:08.747690Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05212116241455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__contact_tmp", "compiled": true, "compiled_code": "select * \nfrom \"dev\".\"salesforce\".\"contact\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__contact_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.731465Z", "completed_at": "2024-02-04T15:20:08.742386Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.754932Z", "completed_at": "2024-02-04T15:20:08.754946Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046706438064575195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__event_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom \"dev\".\"salesforce\".\"event\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__event_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.749090Z", "completed_at": "2024-02-04T15:20:08.762303Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.770071Z", "completed_at": "2024-02-04T15:20:08.770085Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0430150032043457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__lead_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom \"dev\".\"salesforce\".\"lead\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__lead_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.771231Z", "completed_at": "2024-02-04T15:20:08.785373Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.792817Z", "completed_at": "2024-02-04T15:20:08.792830Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.032987117767333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__opportunity_line_item_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom \"dev\".\"salesforce\".\"opportunity_line_item\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__opportunity_line_item_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.778477Z", "completed_at": "2024-02-04T15:20:08.787727Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.795057Z", "completed_at": "2024-02-04T15:20:08.795069Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038604736328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__opportunity_tmp", "compiled": true, "compiled_code": "select *\nfrom \"dev\".\"salesforce\".\"opportunity\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__opportunity_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.797903Z", "completed_at": "2024-02-04T15:20:08.809008Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.820561Z", "completed_at": "2024-02-04T15:20:08.820575Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03744387626647949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__order_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect *\nfrom \"dev\".\"salesforce\".\"order\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__order_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.814930Z", "completed_at": "2024-02-04T15:20:08.829064Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.836754Z", "completed_at": "2024-02-04T15:20:08.836775Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03299760818481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__product_2_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom \"dev\".\"salesforce\".\"product_2\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__product_2_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.821751Z", "completed_at": "2024-02-04T15:20:08.834724Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.847682Z", "completed_at": "2024-02-04T15:20:08.847697Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040480613708496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__task_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect * \nfrom \"dev\".\"salesforce\".\"task\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__task_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.842007Z", "completed_at": "2024-02-04T15:20:08.853463Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:08.865500Z", "completed_at": "2024-02-04T15:20:08.865515Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0347437858581543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__user_role_tmp", "compiled": true, "compiled_code": "--To disable this model, set the below variable within your dbt_project.yml file to False.\n\n\nselect *\nfrom \"dev\".\"salesforce\".\"user_role\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__user_role_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.859899Z", "completed_at": "2024-02-04T15:20:08.869474Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:09.066236Z", "completed_at": "2024-02-04T15:20:09.066255Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.21892714500427246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__user_tmp", "compiled": true, "compiled_code": "select *\nfrom \"dev\".\"salesforce\".\"user\"\n", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.675920Z", "completed_at": "2024-02-04T15:20:09.281975Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:09.284150Z", "completed_at": "2024-02-04T15:20:09.284165Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6304149627685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.int_salesforce__date_spine", "compiled": true, "compiled_code": "with spine as (\n\n    \n    \n    \n    \n        \n            \n\n        \n\n    \n\n    \n    \n\n    \n\n     \n    \n        \n    \n        \n\n    \n    \n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2938\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2016-01-20'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    dateadd(\n        day,\n        1,\n        '2024-02-04'\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n)\n\nselect \n\ndistinct(date_day)\n\nfrom spine", "relation_name": "\"dev\".\"salesforce\".\"int_salesforce__date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:08.870590Z", "completed_at": "2024-02-04T15:20:09.465902Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:09.468059Z", "completed_at": "2024-02-04T15:20:09.468074Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6166739463806152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__calendar_spine", "compiled": true, "compiled_code": "-- depends_on: \"dev\".\"zendesk\".\"ticket\"\n\nwith spine as (\n\n    \n    \n    \n\n    \n    \n        \n            \n\n        \n\n    \n\n\n\n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3820\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        '2013-08-27'\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= \n\n    dateadd(\n        week,\n        1,\n        current_date\n        )\n\n\n\n)\n\nselect * from filtered\n\n\n\n), recast as (\n\n    select cast(date_day as date) as date_day\n    from spine\n\n)\n\nselect *\nfrom recast", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:09.073900Z", "completed_at": "2024-02-04T15:20:10.072024Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:10.074310Z", "completed_at": "2024-02-04T15:20:10.074325Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0502684116363525, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__brand_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"url\",\n  \"name\",\n  \"brand_url\",\n  \"active\",\n  \"subdomain\",\n  \"_fivetran_deleted\",\n  \"default\",\n  \"_fivetran_synced\",\n  \"has_help_center\",\n  \"logo_mapped_content_url\",\n  \"logo_id\",\n  \"logo_url\",\n  \"logo_file_name\",\n  \"logo_size\",\n  \"logo_content_type\",\n  \"help_center_state\",\n  \"logo_content_url\",\n  \"logo_inline\",\n  \"logo_deleted\",\n  \"logo_height\",\n  \"logo_width\"  \nfrom \"dev\".\"zendesk\".\"brand\" as brand_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__brand_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:09.109171Z", "completed_at": "2024-02-04T15:20:10.083301Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:10.085515Z", "completed_at": "2024-02-04T15:20:10.085529Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0503458976745605, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__daylight_time_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"year\",\n  \"time_zone\",\n  \"daylight_start_utc\",\n  \"daylight_end_utc\",\n  \"daylight_offset\",\n  \"_fivetran_synced\"\nfrom \"dev\".\"zendesk\".\"daylight_time\" as daylight_time_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__daylight_time_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:09.295972Z", "completed_at": "2024-02-04T15:20:10.187026Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:10.195307Z", "completed_at": "2024-02-04T15:20:10.195331Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9630918502807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__domain_name_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nselect \"organization_id\",\n  \"index\",\n  \"domain_name\",\n  \"_fivetran_synced\" \nfrom \"dev\".\"zendesk\".\"domain_name\" as domain_name_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__domain_name_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:09.480213Z", "completed_at": "2024-02-04T15:20:10.328480Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:10.332750Z", "completed_at": "2024-02-04T15:20:10.332774Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9017009735107422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__group_tmp", "compiled": true, "compiled_code": "select \"deleted\",\n  \"id\",\n  \"name\",\n  \"created_at\",\n  \"updated_at\",\n  \"url\",\n  \"_fivetran_synced\",\n  \"_fivetran_deleted\"  \nfrom \"dev\".\"zendesk\".\"group\" as group_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__group_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:10.170674Z", "completed_at": "2024-02-04T15:20:11.204981Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:11.207191Z", "completed_at": "2024-02-04T15:20:11.207206Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.0820412635803223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"external_id\",\n  \"url\",\n  \"name\",\n  \"created_at\",\n  \"updated_at\",\n  \"details\",\n  \"notes\",\n  \"group_id\",\n  \"shared_tickets\",\n  \"shared_comments\",\n  \"_fivetran_synced\",\n  \"custom_organisation_id\",\n  \"custom_hr_advisorary\",\n  \"custom_technical_phone_support\",\n  \"custom_payroll_advisoary\",\n  \"custom_hr_advisory\",\n  \"custom_payroll_advisory\",\n  \"custom_reseller\",\n  \"custom_white_label\",\n  \"custom_payroll_connection\",\n  \"custom_payroll_admins\",\n  \"custom_sub_plan\",\n  \"custom_benefits_access\",\n  \"custom_instapay_access\",\n  \"custom_lms_status\",\n  \"custom_project_complete_live\",\n  \"custom_guided_hr_project_status\",\n  \"custom_guided_hr_complete_date\",\n  \"custom_managed_hr_project_status\",\n  \"custom_guided_payroll_project_status\",\n  \"custom_guided_payroll_complete_date\",\n  \"custom_managed_payroll_project_status\",\n  \"custom_managed_hr_complete_date\",\n  \"custom_managed_payroll_complete_date\",\n  \"custom_implementation_managed_by_3_rd_party_status\",\n  \"custom_implementation_managed_by_3_rd_party_complete_date\"\nfrom \"dev\".\"zendesk\".\"organization\" as organization_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__organization_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:10.120108Z", "completed_at": "2024-02-04T15:20:11.254137Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:11.269657Z", "completed_at": "2024-02-04T15:20:11.269679Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.196861982345581, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tag_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n\n\nselect \"tag\",\n  \"organization_id\",\n  \"_fivetran_synced\"  \nfrom \"dev\".\"zendesk\".\"organization_tag\" as organization_tag_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__organization_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:10.261989Z", "completed_at": "2024-02-04T15:20:11.299384Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:11.304841Z", "completed_at": "2024-02-04T15:20:11.304858Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.103222370147705, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule_holiday_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"schedule_id\",\n  \"id\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\"\nfrom \"dev\".\"zendesk\".\"schedule_holiday\" as schedule_holiday_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__schedule_holiday_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:10.384591Z", "completed_at": "2024-02-04T15:20:11.306093Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:11.309843Z", "completed_at": "2024-02-04T15:20:11.309855Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9876894950866699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"id\",\n  \"name\",\n  \"time_zone\",\n  \"start_time\",\n  \"end_time\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\",\n  \"end_time_utc\",\n  \"start_time_utc\",\n  \"created_at\"\nfrom \"dev\".\"zendesk\".\"schedule\" as schedule_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__schedule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:11.249062Z", "completed_at": "2024-02-04T15:20:12.290713Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:12.292976Z", "completed_at": "2024-02-04T15:20:12.292990Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.078486680984497, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"body\",\n  \"ticket_id\",\n  \"user_id\",\n  \"facebook_comment\",\n  \"voice_comment\",\n  \"tweet\",\n  \"created\",\n  \"public\",\n  \"_fivetran_synced\",\n  \"transcription_status\",\n  \"voice_comment_transcription_visible\",\n  \"recording_url\",\n  \"trusted\",\n  \"started_at\",\n  \"location\",\n  \"from\",\n  \"to\",\n  \"call_duration\",\n  \"call_id\",\n  \"transcription_text\"\nfrom \"dev\".\"zendesk\".\"ticket_comment\" as ticket_comment_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_comment_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:11.319524Z", "completed_at": "2024-02-04T15:20:12.385590Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:12.387739Z", "completed_at": "2024-02-04T15:20:12.387753Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1145930290222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history_tmp", "compiled": true, "compiled_code": "select \"ticket_id\",\n  \"user_id\",\n  \"updated\",\n  \"field_name\",\n  \"_fivetran_synced\",\n  \"value\"\nfrom \"dev\".\"zendesk\".\"ticket_field_history\" as ticket_field_history_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_field_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:11.396061Z", "completed_at": "2024-02-04T15:20:12.460884Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:12.477511Z", "completed_at": "2024-02-04T15:20:12.477529Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1554429531097412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_schedule_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\n\n\nselect \"created_at\",\n  \"ticket_id\",\n  \"schedule_id\",\n  \"_fivetran_synced\"\nfrom \"dev\".\"zendesk\".\"ticket_schedule\" as ticket_schedule_table\n\n", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_schedule_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:11.378022Z", "completed_at": "2024-02-04T15:20:12.490919Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:12.493208Z", "completed_at": "2024-02-04T15:20:12.493222Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.1860547065734863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nselect \"id\",\n  \"updated_at\",\n  \"created_at\",\n  \"name\",\n  \"display_name\",\n  \"end_user_visible\",\n  \"active\",\n  \"_fivetran_deleted\",\n  \"_fivetran_synced\"\nfrom \"dev\".\"zendesk\".\"ticket_form_history\" as ticket_form_history_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_form_history_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:12.329933Z", "completed_at": "2024-02-04T15:20:13.578145Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:13.580353Z", "completed_at": "2024-02-04T15:20:13.580369Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.2907195091247559, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag_tmp", "compiled": true, "compiled_code": "select \"tag\",\n  \"ticket_id\",\n  \"_fivetran_synced\"\nfrom \"dev\".\"zendesk\".\"ticket_tag\" as ticket_tag_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:12.570446Z", "completed_at": "2024-02-04T15:20:13.869524Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:13.871748Z", "completed_at": "2024-02-04T15:20:13.871762Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3405251502990723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tag_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n\n\nselect \"tag\",\n  \"user_id\",\n  \"_fivetran_synced\"  \nfrom \"dev\".\"zendesk\".\"user_tag\" as user_tag_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__user_tag_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:12.537303Z", "completed_at": "2024-02-04T15:20:13.958181Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:13.960515Z", "completed_at": "2024-02-04T15:20:13.960529Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.4610228538513184, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__time_zone_tmp", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nselect \"time_zone\",\n  \"standard_offset\",\n  \"_fivetran_synced\" \nfrom \"dev\".\"zendesk\".\"time_zone\" as time_zone_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__time_zone_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:12.436588Z", "completed_at": "2024-02-04T15:20:14.038727Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:14.041136Z", "completed_at": "2024-02-04T15:20:14.041150Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.6486375331878662, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tmp", "compiled": true, "compiled_code": "select \"url\",\n  \"id\",\n  \"external_id\",\n  \"via_channel\",\n  \"via_source_from_id\",\n  \"via_source_from_title\",\n  \"via_source_rel\",\n  \"created_at\",\n  \"updated_at\",\n  \"type\",\n  \"description\",\n  \"priority\",\n  \"status\",\n  \"recipient\",\n  \"requester_id\",\n  \"submitter_id\",\n  \"assignee_id\",\n  \"organization_id\",\n  \"group_id\",\n  \"forum_topic_id\",\n  \"problem_id\",\n  \"has_incidents\",\n  \"is_public\",\n  \"due_at\",\n  \"ticket_form_id\",\n  \"brand_id\",\n  \"allow_channelback\",\n  \"custom_recruitment_platform\",\n  \"custom_quickbooks_online\",\n  \"custom_key_pay\",\n  \"custom_employer_end_user_\",\n  \"custom_time_spent_last_update_sec_\",\n  \"custom_organisation\",\n  \"custom_job_adder\",\n  \"custom_total_time_spent_sec_\",\n  \"custom_diy_payroll\",\n  \"custom_developer_task\",\n  \"custom_myob\",\n  \"custom_xero\",\n  \"custom_escalate_to_developer\",\n  \"custom_escalate_to_payroll_specialist\",\n  \"custom_hr_platform\",\n  \"_fivetran_synced\",\n  \"custom_requester_name\",\n  \"custom_affecting_ability_to_work_48_hr_urgent\",\n  \"custom_affecting_ability_to_pay_48_hr_urgent\",\n  \"custom_employee_pay_\",\n  \"custom_help_me_with\",\n  \"custom_affected_user\",\n  \"custom_affecting_ability_to_work_24_hr_urgent\",\n  \"custom_affecting_ability_to_pay_24_hr_urgent\",\n  \"custom_bill_or_churn_\",\n  \"custom_phone_number\",\n  \"via_source_to_name\",\n  \"via_source_to_address\",\n  \"custom_order_already_complete\",\n  \"custom_associated_product_service\",\n  \"custom_linked_ticket_data_field\",\n  \"custom_need_help_with_hs_orders_\",\n  \"subject\",\n  \"custom_invoice_number_billing_period\",\n  \"custom_partner_enquiry_type\",\n  \"custom_business_portal_or_client_issue\",\n  \"custom_enquiry_type\",\n  \"custom_type_of_partner_request\",\n  \"custom_where_training_\",\n  \"custom_escalate_ticket_to_technical_support\",\n  \"custom_redirect_ticket_to_partner_partner_org_level_1_support_req_\",\n  \"custom_platform\",\n  \"custom_invoice_date\",\n  \"custom_feature_subcategory_for_integrations\",\n  \"custom_feature_subcategory_for_employee_self_service\",\n  \"custom_feature_subcategory_for_payroll\",\n  \"custom_feature_subcategory_for_employee_management\",\n  \"custom_product_categories\",\n  \"custom_feature_subcategory_for_employee_engagement\",\n  \"custom_feature_subcategory_for_work_life_or_equivalent_\",\n  \"custom_feature_subcategory_for_compliance\",\n  \"custom_feature_subcategory_for_system_configuration\",\n  \"custom_feature_subcategory_for_time_and_attendance\",\n  \"custom_hr_platform_product_categories\",\n  \"custom_product\",\n  \"custom_admin_t_f\",\n  \"custom_feature_subcategory_for_reporting\",\n  \"custom_related_to_integration_t_f\",\n  \"custom_feature_subcategory_for_performance_management\",\n  \"custom_feature_subcategory_for_content_management\",\n  \"custom_request_type\",\n  \"custom_feature_subcategory_for_workflow_management\",\n  \"custom_internal_tools\",\n  \"custom_escalation_path\",\n  \"custom_feature_subcategory_for_recruitment\",\n  \"custom_hero_pay_platform_product_categories\",\n  \"custom_related_to_integration_true_if_checked_\",\n  \"custom_is_this_person_a_admin_true_if_checked_\",\n  \"custom_support_task\",\n  \"custom_feature_subcategory_for_beta_feature\",\n  \"system_location\",\n  \"system_raw_email_identifier\",\n  \"system_json_email_identifier\",\n  \"system_ip_address\",\n  \"system_latitude\",\n  \"system_longitude\",\n  \"system_message_id\",\n  \"system_machine_generated\",\n  \"custom_linked_data\",\n  \"custom_crm_request_type\",\n  \"custom_crm_weekly_time_saving_hours_\",\n  \"custom_segment\",\n  \"custom_employees\",\n  \"custom_industry\",\n  \"custom_state\",\n  \"custom_hr_subplan\",\n  \"custom_email\",\n  \"custom_org_creation_date\",\n  \"custom_error_analysis\",\n  \"merged_ticket_ids\",\n  \"system_ccs\",\n  \"custom_covid_19_\",\n  \"custom_lifecycle_stage\",\n  \"custom_escalation_type\",\n  \"custom_nps_type\",\n  \"system_client\",\n  \"custom_escalation_source\",\n  \"custom_escalation_category\",\n  \"custom_escalation_reason\",\n  \"custom_client_i_e_cemh_9999_ei_group_\",\n  \"custom_lost_to_competitor_name_if_applicable_\",\n  \"custom_client_saved_y_n_\",\n  \"custom_does_this_client_have_employment_hero_payroll_\",\n  \"custom_churn_reason\",\n  \"custom_client_lifecycle_stage\",\n  \"custom_billing_enquiry_reason\",\n  \"custom_subplan\",\n  \"custom_competitor\",\n  \"custom_latest_invoice_arr\",\n  \"custom_how_did_you_save_this_customer_\",\n  \"custom_churn_category\",\n  \"custom_describe_reason_other_\",\n  \"custom_request_category\",\n  \"custom_expectation_subcategories\",\n  \"custom_experience_subcategories\",\n  \"custom_describe_source_other_\",\n  \"custom_explain_other_\",\n  \"custom_financial_subcategories\",\n  \"custom_employees_active_pending_\",\n  \"custom_last_invoice_arr\",\n  \"custom_flag_for_removal_\",\n  \"custom_provided_product_feedback_\",\n  \"custom_starting_score\",\n  \"custom_closing_score\",\n  \"custom_any_other_types_of_feedback_\",\n  \"custom_reason_for_other_classification\",\n  \"custom_project_phase_details\",\n  \"custom_why_should_we_remove_\",\n  \"custom_service_offering\",\n  \"custom_customer_start_date\",\n  \"custom_support_response_time_complaint_\",\n  \"custom_support_quality_complaint_\",\n  \"custom_specific_service_offering\",\n  \"custom_customer_journey_phase\",\n  \"custom_arr_churned\",\n  \"custom_end_user_type\",\n  \"custom_employee_request_sent_to_admin\",\n  \"custom_project_manager\",\n  \"custom_number_of_employees\",\n  \"custom_bdm\",\n  \"custom_arr_\",\n  \"custom_escalation_accountability_status\",\n  \"custom_close_reason\",\n  \"custom_payroll_specialist_if_payroll_\",\n  \"custom_escalation_reason_imps\",\n  \"custom_review_status\",\n  \"custom_template_manager_sub_category\",\n  \"custom_slack_channel_id\",\n  \"via_source_from_address\",\n  \"custom_what_question_was_asked_\",\n  \"custom_provided_feedback_\",\n  \"custom_asked_a_question_\",\n  \"custom_hero_academy_workshop\",\n  \"custom_please_summarise_feedback\",\n  \"custom_feature_request_raised_\",\n  \"followup_ids\",\n  \"via_followup_source_id\",\n  \"custom_partial_churn\",\n  \"custom_full_churn\",\n  \"custom_churned_add_on_\",\n  \"custom_churned_payroll_\",\n  \"custom_churned_hr_\",\n  \"custom_hr_churn_\",\n  \"custom_outcome\",\n  \"custom_payroll_churn_\",\n  \"custom_add_on_churn_\",\n  \"custom_provided_hero_academy_service_delivery_feedback_\",\n  \"custom_provided_support_feedback_\",\n  \"custom_provided_pro_serv_feedback_\",\n  \"custom_unresponsive_to_csm_follow_up\",\n  \"custom_has_phone_support_\",\n  \"custom_provided_other_feedback_\",\n  \"custom_provided_other_customer_feedback_\",\n  \"custom_employment_hero_payroll_platform_product_categories\",\n  \"custom_hr_category_place_holder_tim_\",\n  \"custom_employee_can_be_handled_by_admin\",\n  \"custom_churn_date\",\n  \"custom_churn_notice_date\",\n  \"custom_hr_platform_enquiry_location\",\n  \"custom_enquiry_type_\",\n  \"custom_project_contact_name\",\n  \"custom_link_to_saleforce_account\",\n  \"custom_link_to_asana_project\",\n  \"custom_specific_service_offering_hr_\",\n  \"custom_specific_service_offering_payroll_\",\n  \"custom_nps_topic\",\n  \"custom_user_involved_in_setup_\",\n  \"custom_enter_the_something_else_comment\",\n  \"custom_improve_training_and_support_topic\",\n  \"custom_responsive_to_csm_follow_up_\",\n  \"custom_feature_request_enhancement_raised_\",\n  \"custom_what_change_does_the_client_want_\",\n  \"custom_mentioned_proserv_feedback_\",\n  \"custom_nps_score\",\n  \"custom_functionality_mentioned\",\n  \"custom_parent_ticket_number\",\n  \"custom_user_involved_in_setup_sale_or_implementation_\",\n  \"custom_what_change_does_the_client_want_nps_comment_\",\n  \"custom_churn_risk_\",\n  \"custom_why_is_follow_up_not_required_\",\n  \"custom_hr_platform_creation_date\",\n  \"custom_hr_go_live_date\",\n  \"custom_red_flag_requires_another_check_in_\",\n  \"custom_feedback_summary\",\n  \"custom_responsive_to_check_in_\",\n  \"custom_has_an_employee_acknowledged_policy_\",\n  \"custom_how_many_support_tickets_sent_since_go_live_\",\n  \"custom_has_an_employee_submitted_a_leave_request_\",\n  \"custom_has_an_employee_completed_a_certification_\",\n  \"custom_has_an_employee_signed_a_contract_\",\n  \"custom_check_in_summary\",\n  \"custom_account_management_task_summary\",\n  \"custom_product_accounts_\",\n  \"custom_enquiry_type_accounts_\",\n  \"custom_credit_request_accounts\",\n  \"custom_implementation_start_date\",\n  \"custom_why_is_the_client_a_red_flag_\",\n  \"custom_additional_professional_service\",\n  \"custom_why_does_the_customer_wish_to_merge_orgs_\",\n  \"custom_is_this_customer_integrated_with_payroll_\",\n  \"custom_award_name\",\n  \"custom_how_many_orgs_does_the_customer_wish_to_split_into_\",\n  \"custom_does_the_customer_have_phone_support_\",\n  \"custom_is_the_ticket_5_days_old_\",\n  \"custom_urgency_reason\",\n  \"custom_why_does_the_customer_wish_to_split_orgs_\",\n  \"custom_requesting_customer_s_phone_number\",\n  \"custom_requesting_customer_s_email\",\n  \"custom_requesting_customer_s_name\",\n  \"custom_experience_reasons_select_all_that_apply_\",\n  \"custom_hr_subplan_to_churn_\",\n  \"custom_churn_request_related_to_financial_reasons_\",\n  \"custom_please_copy_paste_the_customer_s_request_here_in_their_own_words_\",\n  \"custom_please_provide_detail_of_any_product_reasons_related_to_churn_request_type_n_a_if_none_\",\n  \"custom_requester_s_name_organisation_and_contact_details_not_required_for_zendesk_agents_\",\n  \"custom_payroll_to_churn_\",\n  \"custom_csat_sent_to_customer\",\n  \"custom_contract_terms_request_type\",\n  \"custom_cs_ticket_outcome_summary\",\n  \"custom_security_enquiry\",\n  \"custom_related_to_upsell_\",\n  \"custom_why_is_the_customer_requesting_training_\",\n  \"custom_how_many_orgs_does_the_client_wish_to_merge_\",\n  \"custom_is_the_ticket_3_days_old_\",\n  \"custom_summarise_something_else_\",\n  \"custom_admin_training_ticket_topic\",\n  \"custom_customer_live_\",\n  \"custom_opportunity_link\",\n  \"custom_have_you_attached_a_screenshot_of_the_filters_applied_\",\n  \"custom_have_you_attached_screenshots_of_the_issue_\",\n  \"custom_leave_requests\",\n  \"custom_to\",\n  \"custom_do_you_have_access_to_your_recovery_code_\",\n  \"custom_pay_finalisation\",\n  \"custom_employment_hero_payroll\",\n  \"custom_time_sheet_request_details\",\n  \"custom_ato_reporting\",\n  \"custom_manage_jobs\",\n  \"custom_discounts\",\n  \"custom_independent_contractor\",\n  \"custom_templates\",\n  \"custom_pay_runs\",\n  \"custom_order_number_indicated\",\n  \"custom_payrun_issue\",\n  \"custom_pay_finalisation_timeline\",\n  \"custom_order_history\",\n  \"custom_which_payrun_do_they_relate_to_\",\n  \"custom_which_employee_\",\n  \"custom_manage_hiring_process\",\n  \"custom_employee_name\",\n  \"custom_which_timesheet_url_or_dates_\",\n  \"custom_platform_import\",\n  \"custom_rostering\",\n  \"custom_payrun_link\",\n  \"custom_leave_payroll\",\n  \"custom_custom_survey\",\n  \"custom_which_review_\",\n  \"custom_which_pay_schedule_\",\n  \"custom_organisation_id\",\n  \"custom_from\",\n  \"custom_is_this_for_import_export_of_current_employees_\",\n  \"custom_platform_of_enquiry\",\n  \"custom_pay_run_settings\",\n  \"custom_business\",\n  \"custom_which_location_\",\n  \"custom_what_is_the_error_\",\n  \"custom_purpose_of_ticket\",\n  \"custom_manage_job_board\",\n  \"custom_locations_public_holidays\",\n  \"custom_link_to_the_report_you_are_running\",\n  \"custom_email_used\",\n  \"custom_account_management\",\n  \"custom_employment_hero_hr\",\n  \"custom_organisation_chart\",\n  \"custom_which_payrun_\",\n  \"custom_payrun_today_\",\n  \"custom_which_batch_batch_id_\",\n  \"custom_has_the_user_followed_the_recommended_action_to_address_the_sync_error_\",\n  \"custom_manage_candidates\",\n  \"custom_payroll_report_pack\",\n  \"custom_do_you_use_employment_hero_hr_\",\n  \"custom_which_expenses_\",\n  \"custom_payroll\",\n  \"custom_post_to_job_board\",\n  \"custom_company_settings\",\n  \"custom_payroll_tasks\",\n  \"custom_company_feed\",\n  \"custom_link_to_the_pay_event\",\n  \"custom_payroll_reports\",\n  \"custom_insta_pay\",\n  \"custom_clock_me_in\",\n  \"custom_superannuation_super_payments\",\n  \"custom_payroll_integration_issues_dashboard\",\n  \"custom_reviews\",\n  \"custom_timesheets\",\n  \"custom_is_this_the_beta_version_or_the_original_\",\n  \"custom_general_settings\",\n  \"custom_employee_employer\",\n  \"custom_on_behalf_of\",\n  \"custom_workzone\",\n  \"custom_public_holiday\",\n  \"custom_self_service_account_management\",\n  \"custom_error_presenting\",\n  \"custom_asset_register\",\n  \"custom_time_and_attendance\",\n  \"custom_assigned_to\",\n  \"custom_asset_code\",\n  \"custom_is_this_related_to_a_live_job\",\n  \"custom_actions\",\n  \"custom_which_safety_incident_\",\n  \"custom_business_management\",\n  \"custom_which_goal_\",\n  \"custom_name\",\n  \"custom_which_asset\",\n  \"custom_notifications\",\n  \"custom_expenses\",\n  \"custom_report_packs\",\n  \"custom_menu\",\n  \"custom_which_shift_s_\",\n  \"custom_dashboard\",\n  \"custom_team\",\n  \"custom_add_ons\",\n  \"custom_benefits\",\n  \"custom_status\",\n  \"custom_job_title\",\n  \"custom_goals\",\n  \"custom_payroll_settings\",\n  \"custom_workflow_settings\",\n  \"custom_categories\",\n  \"custom_reports\",\n  \"custom_employee_reports\",\n  \"custom_workflows\",\n  \"custom_existing_documents\",\n  \"custom_stage_of_hiring_process\",\n  \"custom_related_to_a_candidate_\",\n  \"custom_date_created\",\n  \"custom_what_issue_are_you_facing_\",\n  \"custom_customisation\",\n  \"custom_safety\",\n  \"custom_hr_timesheets\",\n  \"custom_learning\",\n  \"custom_personnel\",\n  \"custom_sample_document\",\n  \"custom_asset_name_\",\n  \"custom_contractor_name\",\n  \"custom_document_name\",\n  \"custom_employee_onboarding_wizard\",\n  \"custom_compliance_reports\",\n  \"custom_leave\",\n  \"custom_i_have_an_order\",\n  \"custom_new_or_existing\",\n  \"custom_employee\",\n  \"custom_which_template\",\n  \"custom_checklist_settings\",\n  \"custom_files\",\n  \"custom_leave_report\",\n  \"custom_coaching\",\n  \"custom_tasks\",\n  \"custom_date_range\",\n  \"custom_pay_conditions\",\n  \"custom_leave_category\",\n  \"custom_payroll_integration_issues\",\n  \"custom_which_job_board_\",\n  \"custom_employee_engagement\",\n  \"custom_recognition\",\n  \"custom_which_security_group\",\n  \"custom_warning_or_error\",\n  \"custom_are_you_able_to_submit_\",\n  \"custom_was_the_batch_submitted_today_\",\n  \"custom_business_settings\",\n  \"custom_advanced\",\n  \"custom_business_name\",\n  \"custom_order_number\",\n  \"custom_policy_name\",\n  \"custom_award\",\n  \"custom_is_this_related_to_being_unable_to_export_your_journal_\",\n  \"custom_headcount_reports\",\n  \"custom_which_rule_\",\n  \"custom_date_range_of_happiness_survey\",\n  \"custom_which_custom_survey_\",\n  \"custom_is_this_custom_or_under_the_award_\",\n  \"custom_document_type\",\n  \"custom_csm_follow_up_notes\",\n  \"custom_which_pay_category_\",\n  \"custom_leave_allowance_template\",\n  \"custom_which_public_holiday_calendar_\",\n  \"custom_use_in_employee_file_\",\n  \"custom_use_in_onboarding_process_\",\n  \"custom_feature_subcategory_for_expenses\",\n  \"custom_payroll_integrations_\",\n  \"custom_ticket_reason_summary_what_is_the_purpose_of_this_ticket_\",\n  \"custom_employee_file_name\",\n  \"custom_is_this_related_to_being_unable_to_submit_a_payment_\",\n  \"custom_comment\",\n  \"custom_file_uploads\",\n  \"custom_which_policy\",\n  \"custom_which_area_is_this_related_to_\",\n  \"custom_figures_current_and_correct\",\n  \"custom_employment_agreement\",\n  \"custom_published_\",\n  \"custom_rule_set\",\n  \"custom_lodgment_enabled\",\n  \"custom_payment_method\",\n  \"custom_content_management\",\n  \"custom_integrations\",\n  \"custom_performance_management\",\n  \"custom_system_configuration\",\n  \"custom_work_life_or_equivalent_\",\n  \"custom_rate_template\",\n  \"custom_reporting\",\n  \"custom_recruitment\",\n  \"custom_employee_self_service\",\n  \"custom_employee_management\",\n  \"custom_location_of_payslip_issue\",\n  \"custom_workflow_management\",\n  \"custom_compliance\",\n  \"custom_batch_processed\",\n  \"custom_business_organisation_id\",\n  \"custom_beta_feature\",\n  \"custom_induction_content_name\",\n  \"custom_other_superannuation_reason_for_other\",\n  \"custom_expenses_options\",\n  \"custom_other_payroll_provide_details_\",\n  \"custom_other_hr_provide_details_\",\n  \"custom_work_type\",\n  \"custom_related_org_id_s_\",\n  \"custom_which_expense_category_\",\n  \"custom_requester_s_name_organisation_and_contact_details\",\n  \"custom_feedback\",\n  \"custom_which_kiosk_\",\n  \"custom_goals_reports\",\n  \"custom_which_deduction_category_\",\n  \"custom_hr_guide_name\",\n  \"custom_service_offering_\",\n  \"custom_salesforce_account_link\",\n  \"custom_project_type\",\n  \"custom_call_availability\",\n  \"custom_account_name\",\n  \"custom_current_time_and_attendance_solution\",\n  \"custom_opportunity_arr\",\n  \"custom_solution_consultant_escalation_reason\",\n  \"custom_employee_number\",\n  \"custom_current_payroll_solution\",\n  \"custom_investigation_required_to_solve_ticket\",\n  \"custom_escalation_valid_\",\n  \"custom_which_employer_liability_category_\",\n  \"custom_what_event_has_lead_this_request_from_the_customer_\",\n  \"custom_date_assigned\",\n  \"custom_ticket_id_not_required_for_agents_\",\n  \"custom_product_swag_\",\n  \"custom_purpose_of_ticket_swag_\",\n  \"custom_pillar\",\n  \"custom_user_swag_\",\n  \"custom_employment_hero_app\",\n  \"custom_customer_success_contact_reason\",\n  \"custom_status_id\",\n  \"custom_country\",\n  \"custom_my_documents\",\n  \"custom_select_a_product\",\n  \"custom_please_add_details_of_the_qualifications\"\nfrom \"dev\".\"zendesk\".\"ticket\" as ticket_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:13.622968Z", "completed_at": "2024-02-04T15:20:14.361184Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:14.363443Z", "completed_at": "2024-02-04T15:20:14.363459Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.7728977203369141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tmp", "compiled": true, "compiled_code": "select \"id\",\n  \"url\",\n  \"email\",\n  \"created_at\",\n  \"updated_at\",\n  \"time_zone\",\n  \"phone\",\n  \"locale_id\",\n  \"locale\",\n  \"organization_id\",\n  \"role\",\n  \"verified\",\n  \"authenticity_token\",\n  \"external_id\",\n  \"alias\",\n  \"active\",\n  \"shared\",\n  \"shared_agent\",\n  \"last_login_at\",\n  \"two_factor_auth_enabled\",\n  \"signature\",\n  \"details\",\n  \"notes\",\n  \"custom_role_id\",\n  \"moderator\",\n  \"ticket_restriction\",\n  \"only_private_comments\",\n  \"restricted_agent\",\n  \"suspended\",\n  \"chat_only\",\n  \"remote_photo_url\",\n  \"custom_premium_support\",\n  \"custom_txt_embeddable_zendesk_user_fields_system_embeddable_last_seen_title\",\n  \"custom_txt_nps_internal_api_client_system_nps_comment\",\n  \"custom_txt_nps_internal_api_client_system_nps_rating\",\n  \"custom_is_managed_payroll_client_\",\n  \"custom_txt_nps_internal_api_client_system_last_nps_survey_date\",\n  \"_fivetran_synced\",\n  \"custom_custom_organisation_id\",\n  \"custom_id\",\n  \"custom_organisation_id\",\n  \"name\",\n  \"custom_employee_status\",\n  \"custom_hero_dollar_balance\",\n  \"custom_2_fa_enabled\",\n  \"custom_last_login_at\",\n  \"custom_out_of_office_agent_out_\",\n  \"iana_time_zone\",\n  \"report_csv\",\n  \"default_group_id\",\n  \"custom_employee_type\"   \nfrom \"dev\".\"zendesk\".\"user\" as user_table", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__user_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:14.000782Z", "completed_at": "2024-02-04T15:20:19.184767Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:19.196277Z", "completed_at": "2024-02-04T15:20:19.196294Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.210683345794678, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-1", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:14.398261Z", "completed_at": "2024-02-04T15:20:19.190008Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:19.199070Z", "completed_at": "2024-02-04T15:20:19.199085Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 4.8149495124816895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-3", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:13.911618Z", "completed_at": "2024-02-04T15:20:19.192803Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:19.202548Z", "completed_at": "2024-02-04T15:20:19.202562Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.303440809249878, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-0", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:14.087962Z", "completed_at": "2024-02-04T15:20:19.195086Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:19.204829Z", "completed_at": "2024-02-04T15:20:19.204843Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 5.12870454788208, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-2", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:19.232212Z", "completed_at": "2024-02-04T15:20:25.150143Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.152545Z", "completed_at": "2024-02-04T15:20:25.152560Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 5.942520380020142, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-4", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:19.237127Z", "completed_at": "2024-02-04T15:20:25.157307Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.168155Z", "completed_at": "2024-02-04T15:20:25.168171Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 5.9609763622283936, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-5", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:19.241359Z", "completed_at": "2024-02-04T15:20:25.166931Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.176490Z", "completed_at": "2024-02-04T15:20:25.176502Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 5.970621109008789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-6", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:19.245397Z", "completed_at": "2024-02-04T15:20:25.170766Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.183984Z", "completed_at": "2024-02-04T15:20:25.183998Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 5.9731221199035645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-7", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.227047Z", "completed_at": "2024-02-04T15:20:25.242323Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.253088Z", "completed_at": "2024-02-04T15:20:25.253103Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0473635196685791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-start-0", "compiled": true, "compiled_code": "\n\n\ncreate schema if not exists ci;\n\ncreate or replace function ci.format_phone_number_e164 (phone_number_str text, country_code text) returns text immutable as $$ \n\timport phonenumbers\n \t\n \ttry:\n \t    phone_number = phonenumbers.parse(phone_number_str, country_code)\n \t    if phonenumbers.is_valid_number(phone_number):\n \t    \treturn str(phonenumbers.format_number(phone_number, phonenumbers.PhoneNumberFormat.E164))\n \texcept:\n \t\tpass\n \treturn None\n$$ LANGUAGE plpythonu;\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.233550Z", "completed_at": "2024-02-04T15:20:25.251678Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.257851Z", "completed_at": "2024-02-04T15:20:25.257865Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.048310041427612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.zendesk.zendesk-on-run-start-0", "compiled": true, "compiled_code": "\n\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.269328Z", "completed_at": "2024-02-04T15:20:25.271459Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.278595Z", "completed_at": "2024-02-04T15:20:25.278610Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017771005630493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.accounts_test", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.275232Z", "completed_at": "2024-02-04T15:20:25.277322Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.282670Z", "completed_at": "2024-02-04T15:20:25.282683Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.017548561096191406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.calling_codes", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.292026Z", "completed_at": "2024-02-04T15:20:25.294075Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.300776Z", "completed_at": "2024-02-04T15:20:25.300790Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017812728881835938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.eh_pay_category_mapping", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.297734Z", "completed_at": "2024-02-04T15:20:25.299532Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.305808Z", "completed_at": "2024-02-04T15:20:25.305821Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06777501106262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.journal_default_account_type", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.480085Z", "completed_at": "2024-02-04T15:20:25.482241Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.581715Z", "completed_at": "2024-02-04T15:20:25.581734Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2495591640472412, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.kp_2022_2023_pay_category_mapping_part1", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.551209Z", "completed_at": "2024-02-04T15:20:25.553498Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.640686Z", "completed_at": "2024-02-04T15:20:25.640710Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2284705638885498, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.kp_2022_2023_pay_category_mapping_part2", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.820496Z", "completed_at": "2024-02-04T15:20:25.823225Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.922318Z", "completed_at": "2024-02-04T15:20:25.922339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2551722526550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.matched_job_titles", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.891760Z", "completed_at": "2024-02-04T15:20:25.895282Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:25.989913Z", "completed_at": "2024-02-04T15:20:25.989930Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.28691601753234863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.organisations_test", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:26.249663Z", "completed_at": "2024-02-04T15:20:26.252042Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:26.336138Z", "completed_at": "2024-02-04T15:20:26.336157Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2753584384918213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.dbt_project.reference_job_titles", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:26.315789Z", "completed_at": "2024-02-04T15:20:26.319889Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:26.412475Z", "completed_at": "2024-02-04T15:20:26.412498Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.23118233680725098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.sign_in_info_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect id, user_id, last_sign_in_at, last_sign_in_ip from \"dev\".\"auth_service_public\".\"sign_in_info\"\n", "relation_name": "\"dev\".\"auth_service\".\"sign_in_info_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:26.595284Z", "completed_at": "2024-02-04T15:20:26.689175Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:26.727350Z", "completed_at": "2024-02-04T15:20:26.727376Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.29286932945251465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_candidate_experiences_id.2af1d1dee8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ats\".\"candidate_experiences\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:26.678301Z", "completed_at": "2024-02-04T15:20:26.726119Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:26.793436Z", "completed_at": "2024-02-04T15:20:26.793466Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.28530406951904297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_candidate_profiles_id.067e754440", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ats\".\"candidate_profiles\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:27.029235Z", "completed_at": "2024-02-04T15:20:27.137654Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:27.181028Z", "completed_at": "2024-02-04T15:20:27.181046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3264641761779785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_candidate_experiences_id.ed8e9d5d2d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"candidate_experiences\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:27.116439Z", "completed_at": "2024-02-04T15:20:27.182263Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:27.273928Z", "completed_at": "2024-02-04T15:20:27.273952Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.35190892219543457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_candidate_profiles_id.d027256eb2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"candidate_profiles\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:27.406334Z", "completed_at": "2024-02-04T15:20:27.521618Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:27.544479Z", "completed_at": "2024-02-04T15:20:27.544496Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.256929874420166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_previewed_org_uuid.cbfeca4211", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect org_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_previewed\"\nwhere org_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:27.505592Z", "completed_at": "2024-02-04T15:20:27.557631Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:27.639111Z", "completed_at": "2024-02-04T15:20:27.639132Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2471146583557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_previewed_time.e078aab964", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time\nfrom \"dev\".\"ats\".\"smart_match_candidates_previewed\"\nwhere time is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:27.715415Z", "completed_at": "2024-02-04T15:20:27.794608Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:27.919188Z", "completed_at": "2024-02-04T15:20:27.919209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.38238048553466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_previewed_user_uuid.65a722fd57", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_previewed\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.177782Z", "completed_at": "2024-02-04T15:20:27.909031Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:28.016086Z", "completed_at": "2024-02-04T15:20:28.016106Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 3.020158052444458, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-8", "compiled": true, "compiled_code": "\n\n  \n  \n  \n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:27.896553Z", "completed_at": "2024-02-04T15:20:27.971494Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:28.122996Z", "completed_at": "2024-02-04T15:20:28.123017Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.41715359687805176, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_saved_actioned_org_uuid.7b919f153f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect org_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_saved_actioned\"\nwhere org_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:28.308151Z", "completed_at": "2024-02-04T15:20:28.408467Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:28.536346Z", "completed_at": "2024-02-04T15:20:28.536367Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.42911601066589355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_saved_actioned_time.033b23f93a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time\nfrom \"dev\".\"ats\".\"smart_match_candidates_saved_actioned\"\nwhere time is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:28.449205Z", "completed_at": "2024-02-04T15:20:28.537760Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:28.699351Z", "completed_at": "2024-02-04T15:20:28.699373Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4372751712799072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_saved_actioned_user_uuid.d8ef7b9c85", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_saved_actioned\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:28.494969Z", "completed_at": "2024-02-04T15:20:28.597547Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:28.750177Z", "completed_at": "2024-02-04T15:20:28.750195Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.46271181106567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_shown_org_uuid.174c0f386f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect org_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_shown\"\nwhere org_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:28.887548Z", "completed_at": "2024-02-04T15:20:28.976868Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.075801Z", "completed_at": "2024-02-04T15:20:29.075818Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4022819995880127, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_shown_time.17ce99539c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time\nfrom \"dev\".\"ats\".\"smart_match_candidates_shown\"\nwhere time is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:28.998485Z", "completed_at": "2024-02-04T15:20:29.091028Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.225549Z", "completed_at": "2024-02-04T15:20:29.225578Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3687758445739746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_shown_user_uuid.99cf23019e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_shown\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.040051Z", "completed_at": "2024-02-04T15:20:29.139118Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.266241Z", "completed_at": "2024-02-04T15:20:29.266257Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3686492443084717, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_shortlisted_actioned_org_uuid.5694735aa2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect org_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_shortlisted_actioned\"\nwhere org_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.378138Z", "completed_at": "2024-02-04T15:20:29.492869Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.627859Z", "completed_at": "2024-02-04T15:20:29.627881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.41948604583740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_shortlisted_actioned_time.fc9409355d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time\nfrom \"dev\".\"ats\".\"smart_match_candidates_shortlisted_actioned\"\nwhere time is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.534799Z", "completed_at": "2024-02-04T15:20:29.643164Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.720300Z", "completed_at": "2024-02-04T15:20:29.720320Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.3630704879760742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_candidates_shortlisted_actioned_user_uuid.5faf2a483a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"ats\".\"smart_match_candidates_shortlisted_actioned\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.586728Z", "completed_at": "2024-02-04T15:20:29.698614Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.799097Z", "completed_at": "2024-02-04T15:20:29.799113Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.33101367950439453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customer_support_project_status_daily__date_service_offering_country_.c98011d686", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || service_offering || country)\nfrom \"dev\".\"customer_support\".\"customer_support_project_status_daily\"\nwhere (date || service_offering || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.807208Z", "completed_at": "2024-02-04T15:20:29.819798Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.834274Z", "completed_at": "2024-02-04T15:20:29.834288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06463170051574707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customer_support_project_status_daily__date_service_offering_country_.a7ba8ffcb4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || service_offering || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customer_support\".\"customer_support_project_status_daily\"\nwhere (date || service_offering || country) is not null\ngroup by (date || service_offering || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.821043Z", "completed_at": "2024-02-04T15:20:29.837377Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.844871Z", "completed_at": "2024-02-04T15:20:29.844886Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035556793212890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customer_support_project_key_metrics__date_data_type_country_sub_type_sub_value_.f0fc6a135c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || data_type || country || sub_type || sub_value)\nfrom \"dev\".\"customer_support\".\"customer_support_project_key_metrics\"\nwhere (date || data_type || country || sub_type || sub_value) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.829118Z", "completed_at": "2024-02-04T15:20:29.840028Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.847131Z", "completed_at": "2024-02-04T15:20:29.847145Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03841352462768555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customer_support_project_key_metrics__date_data_type_country_sub_type_sub_value_.6be4f48355", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || data_type || country || sub_type || sub_value) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customer_support\".\"customer_support_project_key_metrics\"\nwhere (date || data_type || country || sub_type || sub_value) is not null\ngroup by (date || data_type || country || sub_type || sub_value)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.849897Z", "completed_at": "2024-02-04T15:20:29.862213Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.873350Z", "completed_at": "2024-02-04T15:20:29.873365Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03794384002685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customer_support_ticket_id.ab7c9bb539", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"customer_support\".\"ticket\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.868008Z", "completed_at": "2024-02-04T15:20:29.881720Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.889103Z", "completed_at": "2024-02-04T15:20:29.889117Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03204464912414551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customer_support_ticket_id.b020977a1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customer_support\".\"ticket\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.874527Z", "completed_at": "2024-02-04T15:20:29.884263Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.891352Z", "completed_at": "2024-02-04T15:20:29.891365Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03670620918273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customer_support_ticket_key_metrics__date_group_name_country_.e694f8da3c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || group_name || country)\nfrom \"dev\".\"customer_support\".\"customer_support_ticket_key_metrics\"\nwhere (date || group_name || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.894303Z", "completed_at": "2024-02-04T15:20:29.905438Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.916727Z", "completed_at": "2024-02-04T15:20:29.916740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0368962287902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customer_support_ticket_key_metrics__date_group_name_country_.798a3fdf05", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || group_name || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customer_support\".\"customer_support_ticket_key_metrics\"\nwhere (date || group_name || country) is not null\ngroup by (date || group_name || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.911271Z", "completed_at": "2024-02-04T15:20:29.924885Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.932584Z", "completed_at": "2024-02-04T15:20:29.932604Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.032894134521484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customer_support_ticket_status_daily__date_group_name_country_.f2275b254d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || group_name || country)\nfrom \"dev\".\"customer_support\".\"customer_support_ticket_status_daily\"\nwhere (date || group_name || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.917853Z", "completed_at": "2024-02-04T15:20:29.927415Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.935441Z", "completed_at": "2024-02-04T15:20:29.935455Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0382838249206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customer_support_ticket_status_daily__date_group_name_country_.bee1c8ab8c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || group_name || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customer_support\".\"customer_support_ticket_status_daily\"\nwhere (date || group_name || country) is not null\ngroup by (date || group_name || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.938290Z", "completed_at": "2024-02-04T15:20:29.948871Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.955940Z", "completed_at": "2024-02-04T15:20:29.955953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04088282585144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daily_members", "compiled": true, "compiled_code": "\n\nselect *\nfrom\n(\n  select\n\tdistinct date_trunc('day',e.timestamp) date\n    , case\n        when trim(user_id) ~ '^[0-9]+$' then trim(user_id)\n        else null\n    end::int as user_id\n    , case\n        when trim(member_id) ~ '^[0-9]+$' then trim(member_id)\n        else null\n    end::int as member_id\nfrom \"dev\".\"customers\".\"int_events\" e\n    where e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"int_events\")\n    \n\n    and date_trunc('day', e.timestamp) > (select max(date) from \"dev\".\"mp\".\"daily_members\" )\n\n\n)\nwhere user_id is not null", "relation_name": "\"dev\".\"mp\".\"daily_members\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.957121Z", "completed_at": "2024-02-04T15:20:29.974963Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.986904Z", "completed_at": "2024-02-04T15:20:29.986919Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.039762020111083984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customers_zuora_account_product_zuora_account_id.9f7998c7ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect zuora_account_id\nfrom \"dev\".\"customers\".\"zuora_account_product\"\nwhere zuora_account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.965405Z", "completed_at": "2024-02-04T15:20:29.976257Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.988097Z", "completed_at": "2024-02-04T15:20:29.988110Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04004979133605957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customers_zuora_account_product_zuora_account_id.5f78edac57", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    zuora_account_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customers\".\"zuora_account_product\"\nwhere zuora_account_id is not null\ngroup by zuora_account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:29.981287Z", "completed_at": "2024-02-04T15:20:29.992608Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:29.999991Z", "completed_at": "2024-02-04T15:20:30.000003Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03019571304321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_benefits_pillar_blacklist_users", "compiled": true, "compiled_code": "\n\n-- The blacklist is currently stored in ONE target group condition field: tg.conditions \nwith blacklisted_org_users as (\n    select user_id\n    -- any employing orgs not on the blacklist: not blacklisted\n    , case when sum(1) = 0 then false -- not employed\n        when sum(case when not m._fivetran_deleted and m.active and (bo.organisation_id is null) then 1 else 0 end) > 0 then false --employed by at least 1 org not on blacklist\n        else true end as is_blacklisted \n    from \"dev\".\"postgres_public\".\"members\" m \n    join \"dev\".\"postgres_public\".\"users\" u on m.user_id = u.id \n    left join \"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_organisations\" bo on bo.organisation_id = m.organisation_id\n    where not m._fivetran_deleted\n        and not u._fivetran_deleted\n        and m.active\n    group  by 1\n)\n\nselect coalesce(d.user_id, bou.user_id) as user_id    \nfrom (\n        select distinct u.id as user_id\n        from \"dev\".\"feature_flag_public\".\"features\" f\n        join \"dev\".\"feature_flag_public\".\"features_target_groups\" ftg on ftg.feature_id = f.id \n        join \"dev\".\"feature_flag_public\".\"target_groups\" tg on ftg.target_group_id = tg.id \n        join \"dev\".\"postgres_public\".\"users\" u on tg.target_type = 'member' and tg.conditions like '%\"' || u.email || '\"%'\n        where f.code = 'eben_benefits_pillar_black_list'\n            and not f._fivetran_deleted\n            and not ftg._fivetran_deleted\n            and not tg._fivetran_deleted\n            and not u._fivetran_deleted        \n    )d    \n    full outer join blacklisted_org_users bou on bou.user_id = d.user_id\n    where bou.is_blacklisted is null or bou.is_blacklisted", "relation_name": "\"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.005103Z", "completed_at": "2024-02-04T15:20:30.019010Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.030054Z", "completed_at": "2024-02-04T15:20:30.030068Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035565853118896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_benefits_pillar_blacklist_organisations_organisation_id.b8d1213db1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.010592Z", "completed_at": "2024-02-04T15:20:30.020150Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.031229Z", "completed_at": "2024-02-04T15:20:30.031244Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03699946403503418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_benefits_pillar_blacklist_organisations_organisation_id.f17f2a55cc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.024680Z", "completed_at": "2024-02-04T15:20:30.034176Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.041843Z", "completed_at": "2024-02-04T15:20:30.041858Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028183698654174805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_heroshop_transactions_order_details_order_details_id.e42f395419", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_details_id\nfrom \"dev\".\"ebenefits\".\"_v_heroshop_transactions_order_details\"\nwhere order_details_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.048115Z", "completed_at": "2024-02-04T15:20:30.064950Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.075141Z", "completed_at": "2024-02-04T15:20:30.075154Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038471221923828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_heroshop_transactions_order_details_order_id.909a18115b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"ebenefits\".\"_v_heroshop_transactions_order_details\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.056751Z", "completed_at": "2024-02-04T15:20:30.071617Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.077521Z", "completed_at": "2024-02-04T15:20:30.077534Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03863644599914551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_heroshop_transactions_order_details_transactions_id.9391938d25", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transactions_id\nfrom \"dev\".\"ebenefits\".\"_v_heroshop_transactions_order_details\"\nwhere transactions_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.066155Z", "completed_at": "2024-02-04T15:20:30.076251Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.084097Z", "completed_at": "2024-02-04T15:20:30.084111Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02577066421508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_instapay_blacklist_organisations_organisation_uuid.f517522357", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_uuid\nfrom \"dev\".\"ebenefits\".\"_v_instapay_blacklist_organisations\"\nwhere organisation_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.094362Z", "completed_at": "2024-02-04T15:20:30.108141Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.118334Z", "completed_at": "2024-02-04T15:20:30.118349Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03564453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_instapay_blacklist_organisations_organisation_uuid.2ae54833b6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_instapay_blacklist_organisations\"\nwhere organisation_uuid is not null\ngroup by organisation_uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.101413Z", "completed_at": "2024-02-04T15:20:30.114754Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.120705Z", "completed_at": "2024-02-04T15:20:30.120718Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03539156913757324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_international_benefits_refused_organisations_organisation_uuid.66ab03c4f8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_uuid\nfrom \"dev\".\"ebenefits\".\"_v_international_benefits_refused_organisations\"\nwhere organisation_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.109396Z", "completed_at": "2024-02-04T15:20:30.119446Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.127442Z", "completed_at": "2024-02-04T15:20:30.127457Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03152799606323242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_international_benefits_refused_organisations_organisation_uuid.0f904625a9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_international_benefits_refused_organisations\"\nwhere organisation_uuid is not null\ngroup by organisation_uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.138121Z", "completed_at": "2024-02-04T15:20:30.153916Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.162866Z", "completed_at": "2024-02-04T15:20:30.162879Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03686118125915527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_money_pillar_blacklist_users", "compiled": true, "compiled_code": "\n\n-- The blacklisted orgs are currently stored in ONE target group condition field: tg.conditions \nwith blacklisted_org_users as (\n    select user_id          \n    -- any employing orgs not on the blacklist: not blacklisted        \n    , case when sum(1) = 0 then false -- not employed\n        when sum(case when bo.organisation_id is null then 1 else 0 end) > 0 then false --employed by at least 1 org not on blacklist\n        else true end as is_blacklisted \n    from \"dev\".\"postgres_public\".\"members\" m \n    join \"dev\".\"postgres_public\".\"users\" u on m.user_id = u.id \n    left join \"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_organisations\" bo on bo.organisation_id = m.organisation_id\n    where not m._fivetran_deleted\n        and not u._fivetran_deleted\n        and m.active\n    group  by 1\n)\n\nselect coalesce(u.id, bou.user_id) as user_id\n-- user in blacklist or employed by blacklisted orgs\nfrom (\n        select distinct u.email as user_email\n        from \"dev\".\"feature_flag_public\".\"features\" f\n        join \"dev\".\"feature_flag_public\".\"features_target_groups\" ftg on ftg.feature_id = f.id \n        join \"dev\".\"feature_flag_public\".\"target_groups\" tg on ftg.target_group_id = tg.id \n        join \"dev\".\"postgres_public\".\"users\" u on tg.target_type = 'member' and tg.conditions like '%\"' || u.email || '\"%'\n        where f.code = 'eben_money_pillar_black_list'\n            and not f._fivetran_deleted\n            and not ftg._fivetran_deleted\n            and not tg._fivetran_deleted\n            and not u._fivetran_deleted        \n    )d \n    join \"dev\".\"postgres_public\".\"users\" u on d.user_email = u.email \n    full outer join blacklisted_org_users bou on bou.user_id = u.id\n    where bou.is_blacklisted is null or bou.is_blacklisted", "relation_name": "\"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.145528Z", "completed_at": "2024-02-04T15:20:30.161620Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.167992Z", "completed_at": "2024-02-04T15:20:30.168004Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03896474838256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_money_pillar_blacklist_organisations_organisation_id.0c0302c3fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.155173Z", "completed_at": "2024-02-04T15:20:30.165173Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.173333Z", "completed_at": "2024-02-04T15:20:30.173346Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03317379951477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_money_pillar_blacklist_organisations_organisation_id.bdc72f3fab", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.182248Z", "completed_at": "2024-02-04T15:20:30.197679Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.207253Z", "completed_at": "2024-02-04T15:20:30.207266Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.036580562591552734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_exports__swag_cashback_transactions", "compiled": true, "compiled_code": "with eh_cashback_network_txs as (\n    select\n        md5(cast(coalesce(cast(transaction_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(user_email as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transaction_id,\n        transaction_date,\n        campaign_name,\n        user_email,\n        original_amount,\n        fee,\n        cashback,\n        'eh'                                                                                                                                                                         as source,\n        split_part(user_email, '_', 1)                                                                                                                                               as eben_uuid\n    from \"dev\".\"ebenefits\".\"eh_cashback_network_txs\" as t1\n    where t1._modified = (\n        select max(_modified)\n        from \"dev\".\"ebenefits\".\"eh_cashback_network_txs\"\n        where _file = t1._file\n    )\n),\n\ncashback_transactions as (\n    select\n        md5(cast(coalesce(cast(transaction_date as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(user_email as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as transaction_id,\n        transaction_date,\n        campaign_name,\n        user_email,\n        original_amount,\n        fee,\n        cashback,\n        'pokitpal'                                                                                                                                                                   as source,\n        split_part(user_email, '_', 1)                                                                                                                                               as eben_uuid\n    from \"dev\".\"ebenefits\".\"pokitpal_cashback_network_txs\" as t1\n    where t1._modified = (\n        select max(_modified)\n        from \"dev\".\"ebenefits\".\"pokitpal_cashback_network_txs\"\n        where _file = t1._file\n    )\n),\n\nenrich_uuid as (\n    select\n        tx.*,\n        eben_user.eh_user_uuid as user_uuid\n    from (\n        select * from eh_cashback_network_txs\n        union all\n        select * from cashback_transactions\n    ) as tx\n    left join \"dev\".\"ebenefits\".\"_v_user_mapping\" as eben_user\n        on tx.eben_uuid = eben_user.eben_uuid\n    where eben_user.eh_user_uuid is not null\n),\n\nfinal as (\n    select\n        transaction_id                  as event_id,\n        user_uuid,\n        cast('user_transacted' as text) as event_name,\n        transaction_date                as event_time,\n        campaign_name                   as retailer,\n        'Cashback'                      as type_of_offer,\n        cashback                        as cashback_received\n    from enrich_uuid\n    where 1 = 1\n    qualify row_number() over (partition by transaction_id order by event_time desc) = 1\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"exports\".\"int_exports__swag_cashback_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.192336Z", "completed_at": "2024-02-04T15:20:30.206095Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.212307Z", "completed_at": "2024-02-04T15:20:30.212320Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03633999824523926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_user_mapping_eben_uuid.180e31a5f7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eben_uuid\nfrom \"dev\".\"ebenefits\".\"_v_user_mapping\"\nwhere eben_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.201142Z", "completed_at": "2024-02-04T15:20:30.209612Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.217319Z", "completed_at": "2024-02-04T15:20:30.217332Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030391454696655273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_user_mapping_eben_uuid.b128eef103", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    eben_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_user_mapping\"\nwhere eben_uuid is not null\ngroup by eben_uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.226343Z", "completed_at": "2024-02-04T15:20:30.243731Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.254909Z", "completed_at": "2024-02-04T15:20:30.254924Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03912353515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_swag_store_on_off_users", "compiled": true, "compiled_code": "\n\nwith eh_org_users as (\n    select user_id            \n        -- employed by at least one organisation that's not refused         \n        , case when sum(case when bo.organisation_uuid is null then 1 else 0 end) > 0 then true else false end as is_active_member        \n    from \"dev\".\"postgres_public\".\"members\" m\n    join \"dev\".\"postgres_public\".\"users\" u on m.user_id = u.id \n    join \"dev\".\"postgres_public\".\"organisations\" o on m.organisation_id = o.id \n    left join \"dev\".\"ebenefits\".\"_v_worklife_refused_organisations\" bo on bo.organisation_uuid = m.organisation_id\n    -- includes independent contractors \n        where not m._fivetran_deleted\n        and not u._fivetran_deleted\n        and not o._fivetran_deleted    \n        and m.active\n    group by 1\n)\n\n-- only checking user_infos, not member country  \n, au_users as (\n    select u.id as user_id                 \n        , case when sum(case when upper(ui.country_code) in ('AU', 'AUS') then 1 else 0 end) > 0 then true else false end as is_au        \n    from \"dev\".\"postgres_public\".\"users\" u    \n    join \"dev\".\"postgres_public\".\"user_infos\" ui on u.id = ui.user_id\n        where not ui._fivetran_deleted\n        and not u._fivetran_deleted\n    group by 1\n)\n\nselect u.id as user_id    \n    , case when au.is_au is null then null                                                          -- not selected country picker        \n        when not au.is_au then false                                                                -- not selected AU \n        when eu.is_active_member is null or not eu.is_active_member then false                      -- not active employee of non-refused org       \n        when au.is_au and eu.is_active_member then true                                             -- country picker: AU, employed by non-refused org\n        end as store_enabled\nfrom \"dev\".\"postgres_public\".\"users\" u\nleft join eh_org_users eu on u.id = eu.user_id\nleft join au_users au on u.id = au.user_id\nwhere not u._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_swag_store_on_off_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.236529Z", "completed_at": "2024-02-04T15:20:30.248296Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.258977Z", "completed_at": "2024-02-04T15:20:30.258992Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.039218902587890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_worklife_refused_organisations_organisation_uuid.97e00a94fc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_uuid\nfrom \"dev\".\"ebenefits\".\"_v_worklife_refused_organisations\"\nwhere organisation_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.249527Z", "completed_at": "2024-02-04T15:20:30.260152Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.268461Z", "completed_at": "2024-02-04T15:20:30.268474Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03850150108337402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_worklife_refused_organisations_organisation_uuid.0db390b23c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_worklife_refused_organisations\"\nwhere organisation_uuid is not null\ngroup by organisation_uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.273771Z", "completed_at": "2024-02-04T15:20:30.287574Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.293679Z", "completed_at": "2024-02-04T15:20:30.293695Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0358586311340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_wallet_customers_id.6233257f35", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ebenefits\".\"wallet_customers\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.281761Z", "completed_at": "2024-02-04T15:20:30.291423Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.302773Z", "completed_at": "2024-02-04T15:20:30.302787Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0348055362701416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_wallet_customers_id.e7aee8f4ad", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"wallet_customers\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.295949Z", "completed_at": "2024-02-04T15:20:30.306867Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.314499Z", "completed_at": "2024-02-04T15:20:30.314514Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03350257873535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_eh_internal_engineering_salary_range_id.b0488ba0bc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"salary_guide\".\"eh_internal_engineering_salary_range\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.315722Z", "completed_at": "2024-02-04T15:20:30.330908Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.337542Z", "completed_at": "2024-02-04T15:20:30.337555Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0334017276763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_eh_internal_engineering_salary_range_id.6285ac5a74", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"eh_internal_engineering_salary_range\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.323714Z", "completed_at": "2024-02-04T15:20:30.336340Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.348847Z", "completed_at": "2024-02-04T15:20:30.348862Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.038672447204589844, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_eh_internal_non_engineering_salary_range_id.94b6c306eb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"salary_guide\".\"eh_internal_non_engineering_salary_range\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.342886Z", "completed_at": "2024-02-04T15:20:30.354905Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.367913Z", "completed_at": "2024-02-04T15:20:30.367928Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03664803504943848, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_eh_internal_non_engineering_salary_range_id.bc9f8b8f51", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"eh_internal_non_engineering_salary_range\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.361237Z", "completed_at": "2024-02-04T15:20:30.379004Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.386557Z", "completed_at": "2024-02-04T15:20:30.386571Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03773760795593262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_v_active_employees_by_organisations_organisation_id.ed7c5a2de9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"employment_hero\".\"_v_active_employees_by_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.373393Z", "completed_at": "2024-02-04T15:20:30.385186Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.398218Z", "completed_at": "2024-02-04T15:20:30.398232Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04214596748352051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_v_active_employees_by_organisations_organisation_id.5a68416525", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"_v_active_employees_by_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.392488Z", "completed_at": "2024-02-04T15:20:30.405157Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.418239Z", "completed_at": "2024-02-04T15:20:30.418254Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037844181060791016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_guides_organisation_guides_id.3a9b7944a9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_guides_id\nfrom \"dev\".\"employment_hero\".\"guides\"\nwhere organisation_guides_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.412508Z", "completed_at": "2024-02-04T15:20:30.428312Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.438865Z", "completed_at": "2024-02-04T15:20:30.438880Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03988456726074219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_guides_organisation_guides_id.1343139cc5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_guides_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"guides\"\nwhere organisation_guides_id is not null\ngroup by organisation_guides_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.423038Z", "completed_at": "2024-02-04T15:20:30.440129Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.452221Z", "completed_at": "2024-02-04T15:20:30.452234Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04712796211242676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customers_users", "compiled": true, "compiled_code": "\n\nwith\n  eh_hr_accounts as (\n    -- this view gets all accounts that were or are being billed for EH HR Software\n    select \n      distinct(sa.id) as external_id\n      , sa.name\n    from\n      \"dev\".\"zuora\".\"account\" za\n      inner join \"dev\".\"salesforce\".\"account\" sa on\n        za.crm_id = sa.id\n      inner join \"dev\".\"zuora\".\"subscription\" zs on\n        zs.account_id = za.id\n      left join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on\n        zs.id = zrpc.subscription_id\n      left join \"dev\".\"zuora\".\"product_rate_plan\" zprp on\n        zrpc.product_rate_plan_id = zprp.id\n      left join \"dev\".\"zuora\".\"product\" zp on\n        zprp.product_id = zp.id\n    where\n      -- test accounts must be hard coded out of this view \n      -- hardcode is the best way to do this so accounts with 'test' within the name is not accidentally removed, ie. contest\n      za.batch != 'Batch50'\n      and not za._fivetran_deleted\n      and not sa.is_deleted\n      and not zs._fivetran_deleted\n      and not zp._fivetran_deleted\n      and not zprp._fivetran_deleted\n      and not zrpc._fivetran_deleted      \n      -- limit to test accounts\n      --and sa.id in (select external_id from customers.accounts)\n  )\n, user_details as(\n    select distinct\n      eha.external_id as account_list\n      , eha.name as account_name\n      , u.uuid as user_uuid\n      , u.email as account_email\n      , m.company_email\n      , nvl(case when m.company_email is null or m.company_email = '' then u.email else lower(m.company_email) end, u.email) as email\n      , u.created_at\n      , m.id as member_id\n      , m.created_at member_created_at\n      , initcap(m.first_name || ' ' || m.last_name) as member_name\n      , m.organisation_id\n      , role\n      , active\n      , accepted\n      , his.title job_title\n      , m.independent_contractor\n      , m.termination_date\n      , u._fivetran_deleted as user_fivetran_deleted\n      , m._fivetran_deleted as member_fivetran_deleted\n      , listagg(distinct trim(epa.type, 'Auth'), ', ') payroll_type\n    from\n      eh_hr_accounts eha\n      inner join \"dev\".\"zuora\".\"account\" za on\n        za.crm_id = eha.external_id\n      join \"dev\".\"postgres_public\".\"organisations\" o on\n        za.id = o.zuora_account_id\n      join \"dev\".\"postgres_public\".\"members\" m on\n        o.id = m.organisation_id\n      join \"dev\".\"postgres_public\".\"users\" u on\n        m.user_id = u.id\n      left join (\n        select member_id, title\n          from \"dev\".\"postgres_public\".\"employment_histories\"\n          where id in (\n            select\n              FIRST_VALUE(id) over (\n                partition by member_id order by created_at desc \n                  rows between unbounded preceding and current row\n               )\n            from\n              \"dev\".\"postgres_public\".\"employment_histories\"\n            where not _fivetran_deleted\n          )\n      ) as his on\n        m.id = his.member_id\n      left join \"dev\".\"employment_hero\".\"_v_connected_payrolls\" epa on\n        m.organisation_id = epa.organisation_id\n    where\n      not o._fivetran_deleted\n      and ( not u._fivetran_deleted\n           or (u._fivetran_deleted\n               and u._fivetran_synced > 2022) )\n -- deleted users before 2022 are not imported to Vitally, no need to update status                \n      and not za._fivetran_deleted\n      -- and not m._fivetran_deleted\n      and email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n      and not m.system_manager\n      and not m.system_user \n    group by \n      1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n    order by\n      member_created_at desc, role desc\n)\n , user_name as (\n   select\n   \tuser_uuid\n   \t, member_name\n   from \n   \t(\n      select\n      \tuser_uuid\n      \t, member_name\n      \t, row_number() over (partition by user_uuid order by member_created_at) as rn\n      from user_details\n      where not member_fivetran_deleted and not user_fivetran_deleted and active and accepted\n    )\n   where rn = 1\n )\n , account_primary_billing_contact as (\n    select\n      account_id as external_id\n      , id as sf_contact_id\n      , primary_contact_c\n      , billing_contact_c\n      , email as sf_email\n      , row_number() over(partition by account_id order by created_date) as rn\n    from\n     \"dev\".\"salesforce\".\"contact\"\n    where\n      not is_deleted\n      and ( billing_contact_c or primary_contact_c )\n      and not no_longer_with_company_c\n    )\n\n, user_status as (\n    select\n      ud.user_uuid\n      --, ud.account_list  \n      --, ud.account_name \n      --'[' ||  listagg(distinct case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then '\"' || ud.account_name || '\"' end, ', ' ) within group(order by member_created_at) || ']' as account_name \n      , case\n          when sum(case when not user_fivetran_deleted then 1 else 0 end) = 0 then 'Deleted'\n          when sum(case when not user_fivetran_deleted and not member_fivetran_deleted then 1 else 0 end) = 0 then 'Terminated'\n          when sum(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then 1 else 0 end ) > 0 then 'Active'\n          when sum(case when not member_fivetran_deleted and not user_fivetran_deleted and active and not accepted then 1 else 0 end) >0 then 'Pending'\n          else 'Terminated'\n        end as status\n    , min(case when not user_fivetran_deleted and not member_fivetran_deleted then member_created_at end) as member_created_at\n        , '[' || listagg(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then '\"' || ud.member_id || '\"' end, ', ' ) within group(order by member_created_at) || ']' as member_id  \n    , '[' ||  listagg(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then '\"' || ud.organisation_id || '\"' end, ', ' ) within group(order by member_created_at) || ']' as organisation_id\n    , '[' ||  listagg(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then '\"' || ud.role || '\"' end, ', ' ) within group(order by member_created_at) || ']' as role\n    , '[' ||  listagg(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then '\"' || ud.job_title || '\"' end, ', ' ) within group(order by member_created_at) || ']' as job_title  \n    , listagg(distinct case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then ud.account_email end, ', ' ) within group(order by member_created_at) as account_email  -- unique\n    , listagg(distinct case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then ud.company_email end, ', ' ) within group(order by member_created_at) as company_email  \n    --, listagg(distinct case when not member_fivetran_deleted and not user_fivetran_deleted then ud.email end, ', ' ) within group(order by member_created_at) as email  \n  , bool_or(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then ud.independent_contractor end) as is_contractor\n  , max(case when not member_fivetran_deleted and not user_fivetran_deleted then ud.termination_date end) as termination_date\n  , bool_or(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then coalesce(pbc.primary_contact_c, false) end) as sf_primary_contact\n  , bool_or(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted then coalesce(pbc.billing_contact_c, false) end) as sf_billing_contact\n  , min(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted and ud.role != 'employee' then ud.member_created_at else null::date end) as admin_created_at\n  , bool_or(case when not member_fivetran_deleted and not user_fivetran_deleted and active and accepted and ud.active and ud.accepted and ud.role != 'employee' then true else false end) as current_admin \n    from user_details ud\n    left join account_primary_billing_contact pbc on\n    ud.account_list = pbc.external_id\n    and ud.email = pbc.sf_email\n    and pbc.rn = 1    \n    group by user_uuid, user_fivetran_deleted\n  )\n\n  select\n  us.user_uuid\n  , case when us.company_email ilike '%@%' then split_part(us.company_email, ',', 1) else us.account_email end as email -- only picking the first created member company email  \n  , us.account_email\n  , d.account_list \n  , d.account_name\n  , us.member_created_at\n  , us.member_id   \n  , un.member_name\n  , us.organisation_id\n  , us.role\n  , us.job_title\n  , us.status    \n  , us.is_contractor\n  , us.termination_date\n  , us.sf_primary_contact\n  , us.sf_billing_contact\n  , us.admin_created_at\n  , us.current_admin  \n  , getdate() as _fivetran_transformed\nfrom\n  user_status as us \n  left join user_name as un on\n  \tus.user_uuid = un.user_uuid\n  left join (select distinct user_uuid, account_list, account_name\n             from user_details ) d on \n    d.user_uuid = us.user_uuid", "relation_name": "\"dev\".\"customers\".\"users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.445857Z", "completed_at": "2024-02-04T15:20:30.456103Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.467990Z", "completed_at": "2024-02-04T15:20:30.468004Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03495025634765625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_ei_organisations", "compiled": true, "compiled_code": "\n\nwith ei_bap as (\n  select o.id as organisation_id  \n  from \"dev\".\"postgres_public\".\"business_accounts\" as ba \n  join \"dev\".\"postgres_public\".\"organisations\" as o on ba.id = o.business_account_id  \n  where not ba._fivetran_deleted\n    and not o._fivetran_deleted\n    and ba.name ilike '%employment innovations%'\n)\n\n, ei_whitelabel as (\n  select distinct o.id as organisation_id  \n  from \"dev\".\"postgres_public\".\"organisations\" as o\n  join \"dev\".\"employment_hero\".\"_v_connected_payrolls\" epa on o.id = epa.organisation_id\n  where business_account_id is null\n  and json_extract_path_text(epa.data, 'kp_white_label') like '%Employment Innovations%'\n  and not o._fivetran_deleted\n)\n\nselect * from ei_bap\nunion\nselect * from ei_whitelabel", "relation_name": "\"dev\".\"employment_hero\".\"_v_ei_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.463811Z", "completed_at": "2024-02-04T15:20:30.473327Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.486313Z", "completed_at": "2024-02-04T15:20:30.486327Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03577136993408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_gt_active_organisations", "compiled": true, "compiled_code": "\n\nselect distinct host_organisation_id\nfrom \"dev\".\"employment_hero\".\"_v_gt_employees\"\nwhere active", "relation_name": "\"dev\".\"employment_hero\".\"_v_gt_active_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.479331Z", "completed_at": "2024-02-04T15:20:30.491236Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.505354Z", "completed_at": "2024-02-04T15:20:30.505367Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.040239810943603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_v_gt_employees_host_member_id.fd78724c13", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect host_member_id\nfrom \"dev\".\"employment_hero\".\"_v_gt_employees\"\nwhere host_member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.492613Z", "completed_at": "2024-02-04T15:20:30.503962Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.520146Z", "completed_at": "2024-02-04T15:20:30.520159Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03890538215637207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_v_gt_employees_host_member_id.a29a83047d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    host_member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"_v_gt_employees\"\nwhere host_member_id is not null\ngroup by host_member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.511088Z", "completed_at": "2024-02-04T15:20:30.529173Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.543861Z", "completed_at": "2024-02-04T15:20:30.543883Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05220985412597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ces_responses", "compiled": true, "compiled_code": "\n\nwith\nmembers_integration as (\n    select\n        m.id,\n        m.uuid,\n        replace(p.type, 'Auth', '') as integration\n    from\n        \"dev\".\"postgres_public\".\"members\" as m\n    left join \"dev\".\"employment_hero\".\"_v_last_connected_payroll\" as p on m.organisation_id = p.organisation_id\n    where\n        not m.is_shadow_data\n)\n\nselect distinct\n    c.id,\n    case\n        when date_part(hour, c.created_at) > 13 then dateadd(day, 1, c.created_at)::date\n        else c.created_at::date\n    end                                                                                                                                                                                                                            as response_date,\n    m.id                                                                                                                                                                                                                           as member_id,\n    m.integration                                                                                                                                                                                                                  as payroll_integration,\n    initcap(c.properties_feature)                                                                                                                                                                                                  as feature,\n    c.properties_delighted_country                                                                                                                                                                                                 as country,\n    case when c.properties_app_version is not NULL then 'mobile' else 'web' end                                                                                                                                                    as app_type,\n    f.product,\n    f.workstream,\n    f.event_module                                                                                                                                                                                                                 as module,\n    pf.product_family,\n    c.score,\n    (c.score::float / 5 * 7)::decimal(2, 0)                                                                                                                                                                                        as q1_score,\n    r2.scale                                                                                                                                                                                                                       as q2_score,\n    r3.scale                                                                                                                                                                                                                       as q3_score,\n    r4.scale                                                                                                                                                                                                                       as q4_score,\n    r5.scale                                                                                                                                                                                                                       as q5_score,\n    r6.scale                                                                                                                                                                                                                       as q6_score,\n    ((q1_score + coalesce(q2_score, 0) + coalesce(q3_score, 0) + coalesce(q4_score, 0) + coalesce(q5_score, 0) + coalesce(q6_score, 0))::float / nullif(count(rx.scale) over (partition by rx.response_id) + 1, 0))::decimal(2, 1) as average_score\nfrom\n    \"dev\".\"delighted_ces\".\"response\" as c\nleft join \"dev\".\"delighted_ces\".\"person\" as p\n    on\n        c.person_id = p.id\nleft join members_integration as m\n    on\n        lower(c.properties_member_uuid) = lower(m.uuid)\nleft join eh_product.feature_ownership as f\n    on\n        lower(c.properties_feature) = lower(f.feature)\nleft join \"dev\".\"eh_product\".\"product_families\" as pf\n    on\n        lower(f.workstream) = lower(pf.workstream)\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as r1\n    on\n        c.id = r1.response_id\n        and r1.question_id = 'text_Uo2SVL'\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as r2\n    on\n        c.id = r2.response_id\n        and r2.question_id = 'integer_TbGJrg'\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as r3\n    on\n        c.id = r3.response_id\n        and r3.question_id = 'integer_EmIYKP'\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as r4\n    on\n        c.id = r4.response_id\n        and r4.question_id = 'integer_Wny12L'\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as r5\n    on\n        c.id = r5.response_id\n        and r5.question_id = 'integer_V9RguN'\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as r6\n    on\n        c.id = r6.response_id\n        and r6.question_id = 'integer_IticGz'\nleft join \"dev\".\"delighted_ces\".\"response_answer\" as rx\n    on\n        c.id = rx.response_id\nwhere\n    \n    p.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n", "relation_name": "\"dev\".\"ces\".\"responses\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.536588Z", "completed_at": "2024-02-04T15:20:30.552735Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.563044Z", "completed_at": "2024-02-04T15:20:30.563059Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04145526885986328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_international_benefits_on_off_organisations", "compiled": true, "compiled_code": "\n\nwith current_sub_plan as (\n    select c.organisation_id     \n    , s.name as sub_name\n    from \n    (\n        select *\n        from \"dev\".\"postgres_public\".\"agreements\"\n        where id in (\n            select\n                FIRST_VALUE(id) over (partition by organisation_id order by created_at desc rows between unbounded preceding and unbounded following)\n            from\n                \"dev\".\"postgres_public\".\"agreements\"\n            where\n                not _fivetran_deleted \n                and not cancelled\n        )\n    ) as c \n    left join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s\n        on c.subscription_plan_id = s.id\n)\n\n select o.id as organisation_id\n , case when o.country != 'AU' and s.sub_name not ilike '%free%' and (b.organisation_uuid is null) then true \n   else false end as international_benefits_enabled\n from \"dev\".\"postgres_public\".\"organisations\" o \n left join current_sub_plan s on s.organisation_id = o.id \n left join \"dev\".\"ebenefits\".\"_v_international_benefits_refused_organisations\" b on b.organisation_uuid = o.uuid\n where not o._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_international_benefits_on_off_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.546534Z", "completed_at": "2024-02-04T15:20:30.559043Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.568940Z", "completed_at": "2024-02-04T15:20:30.568953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04054665565490723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_v_swag_career_blacklist_organisations_organisation_id.3552bff33a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"employment_hero\".\"_v_swag_career_blacklist_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.575562Z", "completed_at": "2024-02-04T15:20:30.586448Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.598610Z", "completed_at": "2024-02-04T15:20:30.598633Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04394888877868652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_v_swag_career_blacklist_organisations_organisation_id.47b05c2495", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"_v_swag_career_blacklist_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.589331Z", "completed_at": "2024-02-04T15:20:30.600792Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.618370Z", "completed_at": "2024-02-04T15:20:30.618385Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04260754585266113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_v_braze_email_unsubscriptions_email.27f7e01caa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email\nfrom \"dev\".\"exports\".\"exports_v_braze_email_unsubscriptions\"\nwhere email is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.602353Z", "completed_at": "2024-02-04T15:20:30.616838Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.628439Z", "completed_at": "2024-02-04T15:20:30.628455Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05236673355102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_v_braze_email_unsubscriptions_external_id.9286cc8cdd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect external_id\nfrom \"dev\".\"exports\".\"exports_v_braze_email_unsubscriptions\"\nwhere external_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.631551Z", "completed_at": "2024-02-04T15:20:30.653730Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.673007Z", "completed_at": "2024-02-04T15:20:30.673025Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06109333038330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_exports_v_braze_email_unsubscriptions_email.dc4492b7b2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    email as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"exports\".\"exports_v_braze_email_unsubscriptions\"\nwhere email is not null\ngroup by email\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.662383Z", "completed_at": "2024-02-04T15:20:30.682256Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.690511Z", "completed_at": "2024-02-04T15:20:30.690526Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.052268266677856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_github_pull_request_jira_github_issue_id.1a9ad34638", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect github_issue_id\nfrom \"dev\".\"github\".\"pull_request_jira\"\nwhere github_issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.674622Z", "completed_at": "2024-02-04T15:20:30.685473Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.692753Z", "completed_at": "2024-02-04T15:20:30.692767Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04336810111999512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_github_pull_request_jira_jira_issue_id.bb0a81f709", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect jira_issue_id\nfrom \"dev\".\"github\".\"pull_request_jira\"\nwhere jira_issue_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.695511Z", "completed_at": "2024-02-04T15:20:30.710621Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.728112Z", "completed_at": "2024-02-04T15:20:30.728126Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04388022422790527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_keypay_stats_analysis_file_id.082d4de7a2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"keypay_stats\".\"analysis_file\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.715285Z", "completed_at": "2024-02-04T15:20:30.729608Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.738689Z", "completed_at": "2024-02-04T15:20:30.738703Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.037355661392211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_keypay_stats_analysis_file_id.7a4d825e5a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"keypay_stats\".\"analysis_file\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.721915Z", "completed_at": "2024-02-04T15:20:30.733487Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.742007Z", "completed_at": "2024-02-04T15:20:30.742020Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03902769088745117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_keypay_stats_analysis_folder_summary_id.674b58272b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"keypay_stats\".\"analysis_folder_summary\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.749793Z", "completed_at": "2024-02-04T15:20:30.761102Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.778487Z", "completed_at": "2024-02-04T15:20:30.778502Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04083371162414551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_keypay_stats_analysis_folder_summary_id.be71ea4a2c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"keypay_stats\".\"analysis_folder_summary\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.764297Z", "completed_at": "2024-02-04T15:20:30.782411Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.795695Z", "completed_at": "2024-02-04T15:20:30.795719Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044970035552978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_keypay_stats_analysis_project_summary_id.dc6ebbf173", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"keypay_stats\".\"analysis_project_summary\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.771864Z", "completed_at": "2024-02-04T15:20:30.784043Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.797783Z", "completed_at": "2024-02-04T15:20:30.797801Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04504227638244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_keypay_stats_analysis_project_summary_id.293d1a0600", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"keypay_stats\".\"analysis_project_summary\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.806015Z", "completed_at": "2024-02-04T15:20:30.821314Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.855899Z", "completed_at": "2024-02-04T15:20:30.855919Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06825828552246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_outreach_mails__id_state_prospect_name_step_name_sequence_name_.628862811b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (id || state || prospect_name || step_name || sequence_name)\nfrom \"dev\".\"outreach\".\"outreach_mails\"\nwhere (id || state || prospect_name || step_name || sequence_name) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.828222Z", "completed_at": "2024-02-04T15:20:30.858310Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.865780Z", "completed_at": "2024-02-04T15:20:30.865794Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05290389060974121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.proserv_projects", "compiled": true, "compiled_code": "\n\nwith incomplete_projects as (\n    select\n        pt.project_id,\n        t.name\n    from\n        \"dev\".\"asana\".\"project_task\" as pt  -- noqa: AL06\n    inner join \"dev\".\"asana\".\"task\" as t  -- noqa: AL06\n        on\n            pt.task_id = t.id\n    where\n        t.name ~ '(Project Complete|Complete project|Close project)'\n        and not isnull(t._fivetran_deleted, 'f')\n        and t.completed_at is NULL\n),\n\nproject_start_date as (\n    select\n        pt.project_id,\n        case\n            when length(t.custom_completed_date) = 8 and regexp_instr(t.custom_completed_date, '/', 1, 1) = 3 then to_date(t.custom_completed_date, 'dd/mm/yy')\n            when length(t.custom_completed_date) = 8 and regexp_instr(t.custom_completed_date, '/', 1, 1) = 2 then to_date(t.custom_completed_date, 'd/m/yyyy')\n            when length(t.custom_completed_date) = 10 then to_date(t.custom_completed_date, 'dd/mm/yyyy')\n            else t.due_on\n        end                                               as custom_start_date,\n        coalesce(custom_start_date, t.completed_at, NULL) as start_date\n    from\n        \"dev\".\"asana\".\"project_task\" as pt  -- noqa: AL06\n    inner join \"dev\".\"asana\".\"task\" as t  -- noqa: AL06\n        on\n            pt.task_id = t.id\n    where\n        t.name ~ 'Project Initiation'\n        and not isnull(t._fivetran_deleted, 'f')\n),\n\nasana_project_statuses_normalize as (\n    select *\n    from \"dev\".\"workshop_public\".\"asana_project_statuses\"\n    where id in (\n        select\n            first_value(id) over (\n                partition by asana_project_id order by created_at desc rows between unbounded preceding and current row\n            )\n        from\n            \"dev\".\"workshop_public\".\"asana_project_statuses\"\n        where not _fivetran_deleted\n    )\n)\n\nselect distinct\n    imps.id,\n    imps.name,\n    coalesce(imps.project_started_date_c, imps.start_date_c, sd_task.start_date, NULL)       as start_date,\n    coalesce(imps.project_completion_date_c, imps.go_live_date_c, NULL)                      as completed_date,\n    a.id                                                                                     as account_id,\n    a.name                                                                                   as account_name,\n    a.geo_code_c                                                                             as geo_code,\n    cg.name                                                                                  as country,\n    su.name                                                                                  as proserv_project_owner,\n    case\n        when imps.service_offering_c ~ 'Guided HR' then 'HR'\n        when imps.service_offering_c ~ 'Managed HR' then 'Managed HR'\n        when imps.service_offering_c ~ 'Guided Payroll' then 'Payroll'\n        when imps.service_offering_c ~ 'Managed Payroll' then 'Managed Payroll'\n        else imps.service_offering_c\n    end                                                                                      as service_offering,\n    coalesce(p.name like '%(GP+)%', FALSE)                                                   as plus_implementation,\n    case when imps.service_offering_c ~ 'UK' then 'UK' else 'APAC' end                       as region,  -- noqa: RF04\n    imps.stage_c                                                                             as stage,  -- noqa: RF04\n    imps.status_c                                                                            as status,\n    case\n        when (imps.status_c ~ '(Live|Completed)' or imps.stage_c ~ '(Live|Completed)') and e.approval_status = 'rejected' then 'Ineligible'\n        when (imps.status_c ~ '(Live|Completed)' or imps.stage_c ~ '(Live|Completed)') and e.approval_status = 'approved' then 'Eligible'\n        else 'Ineligible'\n    end                                                                                      as eligibility,\n    p.id                                                                                     as asana_project_id,\n    p.name                                                                                   as asana_project_name,\n    case\n        when s.color = 'green' then 'On track'\n        when s.color = 'yellow' then 'At risk'\n        when s.color = 'red' then 'Off track'\n        when s.color = 'blue' then 'On hold'\n        when s.color is NULL then 'Status not provided'\n        else initcap(s.color)\n    end                                                                                      as asana_project_status,\n    t.name                                                                                   as asana_team,\n    u.name                                                                                   as asana_project_owner,\n    r.role,\n    initcap(ltrim(rtrim(p.custom_overdue_theme)))                                            as overdue_theme,\n    extract(day from coalesce(completed_date::timestamp, getdate()) - start_date::timestamp) as project_duration_in_day,\n    case\n        when project_duration_in_day <= 56 then '<= 8 weeks'\n        when project_duration_in_day between 57 and 84 then '8-12 weeks'\n        when project_duration_in_day between 85 and 140 then '12-20 weeks'\n        when project_duration_in_day > 140 then '>20 weeks'\n    end                                                                                      as age_group,\n    case\n        when imps.service_offering_c ~ 'Guided' and plus_implementation and project_duration_in_day > 56 then 'Overdue'\n        when imps.service_offering_c ~ 'Guided' and not plus_implementation and project_duration_in_day > 45 then 'Overdue'\n        else 'On Track'\n    end                                                                                      as project_management,\n\n    coalesce(ip.project_id is NULL, FALSE)                                                   as project_complete,\n    p.created_at                                                                             as created_at,\n    p.due_date                                                                               as due_date,\n    p.current_status                                                                         as status_update,\n    p.custom_ext_stakeholder                                                                 as ext_stakeholder,\n    p.custom_payroll_specialist                                                              as asana_payroll_specialist,\n    u.email                                                                                  as asana_project_owner_email,\n    imps.opportunity_c                                                                       as opportunity_id\nfrom\n    \"dev\".\"salesforce\".\"implementation_project_c\" as imps\nleft join \"dev\".\"salesforce\".\"user\" as su  -- noqa: AL06\n    on\n        imps.project_owner_c = su.id\n        and not su._fivetran_deleted\nleft join \"dev\".\"salesforce\".\"account\" as a  -- noqa: AL06\n    on\n        imps.account_c = a.id\n        and not a.is_deleted\nleft join \"dev\".\"csv\".\"country_geo_location\" as cg  -- noqa: AL06\n    on\n        case when a.geo_code_c = 'UK' then 'GB' else a.geo_code_c end = cg.country\nleft join \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" as ap  -- noqa: AL06\n    on\n        imps.id = ap.asana_public_object_id_c\n        and not ap.is_deleted\n        and not ap.asana_public_is_deleted_c\nleft join \"dev\".\"asana\".\"project\" as p  -- noqa: AL06\n    on\n        ap.asana_public_asana_project_id_c = p.id\n        and not p._fivetran_deleted\nleft join \"dev\".\"asana\".\"team\" as t  -- noqa: AL06\n    on\n        p.team_id = t.id\n        and not t._fivetran_deleted\nleft join \"dev\".\"asana\".\"user\" as u  -- noqa: AL06\n    on\n        p.owner_id = u.id\n        and not u._fivetran_deleted\nleft join \"dev\".\"proserv\".\"roles\" as r  -- noqa: AL06\n    on\n        lower(u.email) = lower(r.email)\nleft join asana_project_statuses_normalize as s  -- noqa: AL06\n    on\n        p.id = s.asana_project_id\nleft join incomplete_projects as ip  -- noqa: AL06\n    on\n        p.id = ip.project_id\nleft join project_start_date as sd_task\n    on\n        p.id = sd_task.project_id\nleft join \"dev\".\"proserv\".\"eligibility_milestone\" as e  -- noqa: AL06\n    on\n        p.id = e.project_id\nwhere\n    not imps.is_deleted\n    and imps.service_offering_c is not NULL\n    and a.name !~* 'test'", "relation_name": "\"dev\".\"proserv\".\"projects\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.840884Z", "completed_at": "2024-02-04T15:20:30.862563Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.871998Z", "completed_at": "2024-02-04T15:20:30.872012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.057355642318725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_closed_lost_opportunities", "compiled": true, "compiled_code": "\nwith lost_opportunity as (\n    select\n        opportunity_id,\n        count(lost_reason) as no_of_lost_features\n    from \"dev\".\"sales\".\"closed_lost_opportunity_reasons\"\n    group by opportunity_id\n),\n\nzqu_quote_c_normalize as (\n    select *\n    from \"dev\".\"salesforce\".\"zqu_quote_c\"\n    where id in (select\n        first_value(id)\n            over (\n                partition by zqu_opportunity_c order by zqu_valid_until_c desc, zqu_number_c desc\n                rows between unbounded preceding and current row\n            )\n    from \"dev\".\"salesforce\".\"zqu_quote_c\"\n    where not is_deleted)\n)\n\nselect distinct\n    a.id                                                                                                                                                                         as account_id,\n    a.name                                                                                                                                                                       as account_name,\n    o.id                                                                                                                                                                         as opportunity_id,\n    o.name                                                                                                                                                                       as opportunity_name,\n    case o.record_type_id\n        when '0120o0000017euhAAA' then 'Global Teams'\n        when '0120o000001JYSxAAO' then 'Direct Sales'\n        when '0120o000001JYSyAAO' then 'Hero Referrer'\n        when '0120o000001JYT1AAO' then 'Upsell'\n    end                                                                                                                                                                          as opportunity_type,\n    o.close_date                                                                                                                                                                 as lost_at,\n    a.geo_code_c                                                                                                                                                                 as country,\n    a.industry_primary_c                                                                                                                                                         as industry,\n    l.no_of_lost_features,\n    c.iso_code                                                                                                                                                                   as currency,\n    sum(coalesce(\n        hr_mrr.zqu_total_c * 12,                                                     -- quote MRR\n        ol.arr_annuity_c,                                                          -- product ARR\n        o.bizible_2_bizible_opportunity_amount_c,                                  -- opportunity amount\n        case\n            when country = 'AU' then o.opportunity_employees_c * 12 * 13.36         -- salesforce backend calculation for AU from CommOps (check Tom Pyle & Maddy)\n            when country = 'UK' then o.opportunity_employees_c * 12 * 6.65          -- salesforce backend calculation for UK from CommOps (check Tom Pyle & Maddy)\n            when country = 'SG' then o.opportunity_employees_c * 12 * 5             -- salesforce backend calculation for SG from CommOps (check Tom Pyle & Maddy)\n            when country = 'NZ' then o.opportunity_employees_c * 12 * 10.64         -- salesforce backend calculation for NZ from CommOps (check Tom Pyle & Maddy)\n        end,\n        0\n    )) over (partition by o.id, q.id)::decimal(10, 2)                                                                                                                            as arr,\n    not coalesce((hr.zqu_quote_product_name_c is NULL or hr.zqu_quote_product_name_c !~* 'eh hr software') and (p.name is NULL or p.name !~* 'employment hero software'), FALSE) as quoted,\n    o.opp_loss_reason_detail_c                                                                                                                                                   as lost_reason_detail\nfrom\n    \"dev\".\"salesforce\".\"opportunity\" as o  -- noqa: AL06\ninner join \"dev\".\"salesforce\".\"account\" as a  -- noqa: AL06\n    on\n        o.account_id = a.id\ninner join lost_opportunity as l  -- noqa: AL06\n    on\n        o.id = l.opportunity_id\nleft join \"dev\".\"salesforce\".\"opportunity_line_item\" as ol  -- noqa: AL06\n    on\n        o.id = ol.opportunity_id\n        and not ol.is_deleted\nleft join \"dev\".\"salesforce\".\"product_2\" as p  -- noqa: AL06\n    on\n        ol.product_2_id = p.id\n        and not p.is_deleted\nleft join zqu_quote_c_normalize as q  -- noqa: AL06\n    on\n        o.id = q.zqu_opportunity_c\nleft join \"dev\".\"salesforce\".\"zqu_quote_rate_plan_c\" as hr  -- noqa: AL06\n    on\n        q.id = hr.zqu_quote_c\n        and not hr.is_deleted\nleft join \"dev\".\"salesforce\".\"zqu_quote_rate_plan_charge_c\" as hr_mrr\n    on\n        hr.id = hr_mrr.zqu_quote_rate_plan_c\n        and not hr_mrr.is_deleted\nleft join \"dev\".\"salesforce\".\"currency_type\" as c  -- noqa: AL06\n    on\n        coalesce(q.zqu_currency_c, o.currency_iso_code) = c.iso_code\n        and c.is_active = 't'\n        and not c._fivetran_deleted\nwhere\n    not o.is_deleted\n    and lower(o.stage_name) = 'lost'\n    and o.lost_reason_c ilike 'product%'\n    and (p.name is NULL or p.name ~* 'employment hero software')\n    and (hr.zqu_quote_product_name_c is NULL or hr.zqu_quote_product_name_c ~* 'eh hr software')\n    and (hr_mrr.name is NULL or lower(hr_mrr.name) = 'contracted users')\n\n\n    and not exists (select 'x' from \"dev\".\"sales\".\"closed_lost_opportunities\" as lo where lo.opportunity_id = o.id)  -- noqa: AL06\n\norder by\n    a.geo_code_c asc,\n    opportunity_type asc,\n    o.close_date desc", "relation_name": "\"dev\".\"sales\".\"closed_lost_opportunities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.878971Z", "completed_at": "2024-02-04T15:20:30.892950Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.905950Z", "completed_at": "2024-02-04T15:20:30.905965Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046787261962890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_csat_id.eea378d67f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"sales\".\"csat\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.895841Z", "completed_at": "2024-02-04T15:20:30.907819Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.921012Z", "completed_at": "2024-02-04T15:20:30.921026Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03861188888549805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_sales_csat_id.3b21672424", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"sales\".\"csat\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.909314Z", "completed_at": "2024-02-04T15:20:30.922120Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.931511Z", "completed_at": "2024-02-04T15:20:30.931526Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04665398597717285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_lead_master_id.fc4617dfa5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"sales\".\"lead_master\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.933330Z", "completed_at": "2024-02-04T15:20:30.944920Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.955484Z", "completed_at": "2024-02-04T15:20:30.955501Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03731036186218262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_sales_lead_master_id.14ebea2b3e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"sales\".\"lead_master\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.947573Z", "completed_at": "2024-02-04T15:20:30.959283Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.971365Z", "completed_at": "2024-02-04T15:20:30.971378Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.037431955337524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_sales_assisted_opportunities", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dev\".\"sales\".\"opportunities\"\nwhere\n    record_type in ('Direct Sales', 'Upsell')\n    and demo_sat_date is not null\n    and (lost_reason != 'Demo did not sit' or lost_reason is null)", "relation_name": "\"dev\".\"sales\".\"sales_assisted_opportunities\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.962293Z", "completed_at": "2024-02-04T15:20:30.974512Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:30.989131Z", "completed_at": "2024-02-04T15:20:30.989145Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03996109962463379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_opportunities_id.9ab7292dd7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"sales\".\"opportunities\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.982279Z", "completed_at": "2024-02-04T15:20:30.996412Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.008172Z", "completed_at": "2024-02-04T15:20:31.008186Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03988027572631836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_sales_opportunities_id.b85035e7af", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"sales\".\"opportunities\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:30.999125Z", "completed_at": "2024-02-04T15:20:31.010096Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.022642Z", "completed_at": "2024-02-04T15:20:31.022655Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03620553016662598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_opportunity_master_id.3f76157f7c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"sales\".\"opportunity_master\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.015685Z", "completed_at": "2024-02-04T15:20:31.030317Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.041611Z", "completed_at": "2024-02-04T15:20:31.041631Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.041017770767211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_sales_opportunity_master_id.f69685e00f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"sales\".\"opportunity_master\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.033665Z", "completed_at": "2024-02-04T15:20:31.045246Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.059980Z", "completed_at": "2024-02-04T15:20:31.059995Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03913426399230957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.app_store__app_version_review_daily", "compiled": true, "compiled_code": "with base as (\n\n  select *\n  from \"dev\".\"app_store\".\"stg__app_store__review\"\n),\n\naggregated as (\n\n  select\n    date_day,\n    app_id,\n    app_version,\n    sum(rating) as total_rating,\n    count(*)    as total_reviews\n  from base\n  group by 1,2,3\n)\n\nselect\n  date_day,\n  app_id,\n  app_version,\n  round(total_rating * 1.0 / nullif(total_reviews, 0), 4) as avg_rating\nfrom aggregated", "relation_name": "\"dev\".\"tableau\".\"app_store__app_version_review_daily\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.069055Z", "completed_at": "2024-02-04T15:20:31.175115Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.183235Z", "completed_at": "2024-02-04T15:20:31.183252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13817381858825684, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__accrual_status", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"accrual_status\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"accrual_status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.089545Z", "completed_at": "2024-02-04T15:20:31.178473Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.185840Z", "completed_at": "2024-02-04T15:20:31.185853Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13095545768737793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__award_package", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"award_package\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"award_package\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.049109Z", "completed_at": "2024-02-04T15:20:31.184441Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.192035Z", "completed_at": "2024-02-04T15:20:31.192047Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1720428466796875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__aba_details", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"aba_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"aba_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.214543Z", "completed_at": "2024-02-04T15:20:31.504128Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.506410Z", "completed_at": "2024-02-04T15:20:31.506426Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.3162410259246826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__bacs_details", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"bacs_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"bacs_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.238955Z", "completed_at": "2024-02-04T15:20:31.515799Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.518052Z", "completed_at": "2024-02-04T15:20:31.518064Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.31588101387023926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__bank_payment_file_details", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"bank_payment_file_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"bank_payment_file_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.231367Z", "completed_at": "2024-02-04T15:20:31.538389Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.547215Z", "completed_at": "2024-02-04T15:20:31.547228Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.34979724884033203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__bank_account", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"bank_account\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"bank_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.531272Z", "completed_at": "2024-02-04T15:20:31.633167Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.635694Z", "completed_at": "2024-02-04T15:20:31.635710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1256246566772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__billing_plan", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"billing_plan\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"billing_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.561792Z", "completed_at": "2024-02-04T15:20:31.657760Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.669113Z", "completed_at": "2024-02-04T15:20:31.669128Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1406404972076416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__business_award_package", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"business_award_package\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"business_award_package\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.579555Z", "completed_at": "2024-02-04T15:20:31.670233Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.675844Z", "completed_at": "2024-02-04T15:20:31.675859Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.11932229995727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__contribution_info", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"contribution_info\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"int__keypay\".\"contribution_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.663213Z", "completed_at": "2024-02-04T15:20:31.784105Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.786516Z", "completed_at": "2024-02-04T15:20:31.786532Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14384102821350098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__contribution_info_deduction", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"contribution_info_deduction\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"contribution_info_deduction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.702477Z", "completed_at": "2024-02-04T15:20:31.830493Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.832784Z", "completed_at": "2024-02-04T15:20:31.832798Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.14660048484802246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__csn_details", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"csn_details\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"csn_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.713056Z", "completed_at": "2024-02-04T15:20:31.835094Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.837870Z", "completed_at": "2024-02-04T15:20:31.837883Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.15883803367614746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__deduction", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"deduction\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"int__keypay\".\"deduction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.876931Z", "completed_at": "2024-02-04T15:20:31.884643Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.886913Z", "completed_at": "2024-02-04T15:20:31.886926Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019020557403564453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__earnings_line", "compiled": true, "compiled_code": "\nselect\n    *\nfrom \"dev\".\"stg__keypay\".\"earnings_line\"\n\n\n  -- this filter will only be applied on an incremental run\n  -- (uses > to include records whose timestamp occurred since the last run of this model)\n  where _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay\".\"earnings_line\")\n\n", "relation_name": "\"dev\".\"int__keypay\".\"earnings_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.805345Z", "completed_at": "2024-02-04T15:20:31.917618Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.922496Z", "completed_at": "2024-02-04T15:20:31.922510Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13003969192504883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__deduction_category", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"deduction_category\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"deduction_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.848925Z", "completed_at": "2024-02-04T15:20:31.959535Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:31.964596Z", "completed_at": "2024-02-04T15:20:31.964611Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12853765487670898, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__device_token", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"device_token\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"int__keypay\".\"device_token\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.893820Z", "completed_at": "2024-02-04T15:20:32.001969Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.007263Z", "completed_at": "2024-02-04T15:20:32.007280Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1265397071838379, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__earnings_line_ext_au", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"earnings_line_ext_au\" where date_trunc('day', _transaction_date) = '2023-11-08'", "relation_name": "\"dev\".\"int__keypay\".\"earnings_line_ext_au\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.937887Z", "completed_at": "2024-02-04T15:20:32.051352Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.055677Z", "completed_at": "2024-02-04T15:20:32.055700Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1358509063720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employee_deduction_category", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employee_deduction_category\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"employee_deduction_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:31.980107Z", "completed_at": "2024-02-04T15:20:32.075446Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.085002Z", "completed_at": "2024-02-04T15:20:32.085017Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12713360786437988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employee_expense", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employee_expense\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"employee_expense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.022639Z", "completed_at": "2024-02-04T15:20:32.123138Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.134395Z", "completed_at": "2024-02-04T15:20:32.134413Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12565040588378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employee_expense_request", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employee_expense_request\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"employee_expense_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.079041Z", "completed_at": "2024-02-04T15:20:32.175963Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.181050Z", "completed_at": "2024-02-04T15:20:32.181066Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.11813235282897949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employee_history", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employee_history\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"employee_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.113695Z", "completed_at": "2024-02-04T15:20:32.216716Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.223762Z", "completed_at": "2024-02-04T15:20:32.223779Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.126800537109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employee_pay_category", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employee_pay_category\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"employee_pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.151283Z", "completed_at": "2024-02-04T15:20:32.257421Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.266593Z", "completed_at": "2024-02-04T15:20:32.266609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12982916831970215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employee_super_fund", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employee_super_fund\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"employee_super_fund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.198467Z", "completed_at": "2024-02-04T15:20:32.301743Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.310651Z", "completed_at": "2024-02-04T15:20:32.310666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13114333152770996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employment_agreement", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employment_agreement\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"employment_agreement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.239459Z", "completed_at": "2024-02-04T15:20:32.322028Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.324365Z", "completed_at": "2024-02-04T15:20:32.324379Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10572600364685059, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__employment_type", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"employment_type\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"employment_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.283524Z", "completed_at": "2024-02-04T15:20:32.383155Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.386311Z", "completed_at": "2024-02-04T15:20:32.386331Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.11534786224365234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__expense", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"expense\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"expense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.332760Z", "completed_at": "2024-02-04T15:20:32.454063Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.456481Z", "completed_at": "2024-02-04T15:20:32.456496Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14037179946899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__expense_type", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"expense_type\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"expense_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.354037Z", "completed_at": "2024-02-04T15:20:32.460052Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.466218Z", "completed_at": "2024-02-04T15:20:32.466234Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13711857795715332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__fair_work_award", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"fair_work_award\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"fair_work_award\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.401407Z", "completed_at": "2024-02-04T15:20:32.505401Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.513372Z", "completed_at": "2024-02-04T15:20:32.513387Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13193917274475098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__fair_work_award_selection", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"fair_work_award_selection\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"fair_work_award_selection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.475803Z", "completed_at": "2024-02-04T15:20:32.587444Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.589949Z", "completed_at": "2024-02-04T15:20:32.589964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1290876865386963, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__industry", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"industry\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.536100Z", "completed_at": "2024-02-04T15:20:32.605304Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.611330Z", "completed_at": "2024-02-04T15:20:32.611346Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.10682940483093262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__invoice_line_item", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"invoice_line_item\" where date_trunc('day', _transaction_date) = '2023-11-14'", "relation_name": "\"dev\".\"int__keypay\".\"invoice_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.506547Z", "completed_at": "2024-02-04T15:20:32.622825Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.627402Z", "completed_at": "2024-02-04T15:20:32.627416Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1486830711364746, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__invoice", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"invoice\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.650537Z", "completed_at": "2024-02-04T15:20:32.665052Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.671136Z", "completed_at": "2024-02-04T15:20:32.671151Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02879047393798828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__leave_accrual", "compiled": true, "compiled_code": "\nselect\nid, employee_id, accrued_amount, accrual_status_id, \"_transaction_date\",\n                                      \"_etl_date\", \"_modified\", \"_file\"\nfrom\n    (\n        select\nid, employee_id, accrued_amount, accrual_status_id, \"_transaction_date\",\n                                      \"_etl_date\", \"_modified\", \"_file\",\n            row_number() over (partition by id, employee_id order by _transaction_date desc) as seqnum\n        from \"dev\".\"stg__keypay\".\"leave_accrual\" t\n    ) t\nwhere\n    seqnum = 1\n    \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay\".\"leave_accrual\")\n\n    ", "relation_name": "\"dev\".\"int__keypay\".\"leave_accrual\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.614498Z", "completed_at": "2024-02-04T15:20:32.719606Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.721839Z", "completed_at": "2024-02-04T15:20:32.721852Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12416458129882812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__journal_default_account", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"journal_default_account\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"journal_default_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.659925Z", "completed_at": "2024-02-04T15:20:32.766527Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.769016Z", "completed_at": "2024-02-04T15:20:32.769031Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1238706111907959, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__leave_allowance_template", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"leave_allowance_template\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"leave_allowance_template\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.682197Z", "completed_at": "2024-02-04T15:20:32.793318Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.799009Z", "completed_at": "2024-02-04T15:20:32.799023Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13926267623901367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_leave_category", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"leave_category\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"keypay\".\"leave_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.741776Z", "completed_at": "2024-02-04T15:20:32.841811Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.846348Z", "completed_at": "2024-02-04T15:20:32.846362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12460207939147949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__leave_request", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"leave_request\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"leave_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.786515Z", "completed_at": "2024-02-04T15:20:32.886844Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.891518Z", "completed_at": "2024-02-04T15:20:32.891532Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12011098861694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__location", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"location\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.822975Z", "completed_at": "2024-02-04T15:20:32.937160Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.939552Z", "completed_at": "2024-02-04T15:20:32.939567Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12927722930908203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__location_restriction", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"location_restriction\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"location_restriction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.864930Z", "completed_at": "2024-02-04T15:20:32.971059Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:32.983581Z", "completed_at": "2024-02-04T15:20:32.983596Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13195466995239258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pay_category", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pay_category\" where date_trunc('day', _transaction_date) = '2023-12-01'", "relation_name": "\"dev\".\"int__keypay\".\"pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.908949Z", "completed_at": "2024-02-04T15:20:33.014876Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.023131Z", "completed_at": "2024-02-04T15:20:33.023148Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12976980209350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pay_cycle", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pay_cycle\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"pay_cycle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.954649Z", "completed_at": "2024-02-04T15:20:33.058972Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.066936Z", "completed_at": "2024-02-04T15:20:33.066954Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1265571117401123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pay_cycle_frequency", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pay_cycle_frequency\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"pay_cycle_frequency\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:32.999365Z", "completed_at": "2024-02-04T15:20:33.108814Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.111223Z", "completed_at": "2024-02-04T15:20:33.111237Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12361383438110352, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pay_day_filing", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pay_day_filing\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"pay_day_filing\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.125383Z", "completed_at": "2024-02-04T15:20:33.145562Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.153373Z", "completed_at": "2024-02-04T15:20:33.153394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03348422050476074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__payrun", "compiled": true, "compiled_code": "\nselect\nid, date_finalised, pay_period_starting, pay_period_ending, date_paid, business_id,\n                               invoice_id, date_first_finalised, pay_run_lodgement_data_id, notification_date,\n                               finalised_by_id, pay_cycle_id, pay_cycle_frequency_id, date_created_utc,\n                               \"_transaction_date\", \"_etl_date\", \"_modified\", \"_file\"\nfrom\n    (\n        select\nid, date_finalised, pay_period_starting, pay_period_ending, date_paid, business_id,\n                               invoice_id, date_first_finalised, pay_run_lodgement_data_id, notification_date,\n                               finalised_by_id, pay_cycle_id, pay_cycle_frequency_id, date_created_utc,\n                               \"_transaction_date\", \"_etl_date\", \"_modified\", \"_file\",\n            row_number() over (partition by id, business_id order by _transaction_date desc) as seqnum\n        from \"dev\".\"stg__keypay\".\"payrun\" t\n    ) t\nwhere\n    seqnum = 1\n    \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay\".\"payrun\")\n\n    ", "relation_name": "\"dev\".\"int__keypay\".\"payrun\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.041656Z", "completed_at": "2024-02-04T15:20:33.139491Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.141880Z", "completed_at": "2024-02-04T15:20:33.141894Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.11990213394165039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pay_event", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pay_event\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"pay_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.083839Z", "completed_at": "2024-02-04T15:20:33.198484Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.209259Z", "completed_at": "2024-02-04T15:20:33.209277Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.15042805671691895, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pay_run_lodgement_data", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pay_run_lodgement_data\" where date_trunc('day', _transaction_date) = '2024-01-14'", "relation_name": "\"dev\".\"int__keypay\".\"pay_run_lodgement_data\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.238821Z", "completed_at": "2024-02-04T15:20:33.244790Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.247319Z", "completed_at": "2024-02-04T15:20:33.247343Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013690948486328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__payrun_total_history", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"stg__keypay\".\"payrun_total_history\"\n\n),\n\nrenamed as (\n\nselect\n            id,\n            employee_id,\n            payrun_id,\n            total_hours,\n            gross_earnings,\n            net_earnings,\n            is_excluded_from_billing,\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"int__keypay\".\"payrun_total_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.182106Z", "completed_at": "2024-02-04T15:20:33.295101Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.297706Z", "completed_at": "2024-02-04T15:20:33.297727Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.148057222366333, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__payrun_total", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"payrun_total\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"payrun_total\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.171173Z", "completed_at": "2024-02-04T15:20:33.299038Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.302810Z", "completed_at": "2024-02-04T15:20:33.302825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.15167927742004395, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__payrun_default", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"payrun_default\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"payrun_default\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.332254Z", "completed_at": "2024-02-04T15:20:33.343909Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.360446Z", "completed_at": "2024-02-04T15:20:33.360468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03982830047607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__region", "compiled": true, "compiled_code": "\nselect id,\n       currency,\n       name,\n       culture_name,\n       default_standard_hours_per_day,\n       commence_billing_from,\n       minimum_bill_able_amount,\n       \"_file\",\n       \"_transaction_date\",\n       \"_etl_date\",\n       \"_modified\"\nfrom (select id,\n             currency,\n             name,\n             culture_name,\n             default_standard_hours_per_day,\n             commence_billing_from,\n             minimum_bill_able_amount,\n             \"_file\",\n             \"_transaction_date\",\n             \"_etl_date\",\n             \"_modified\",\n             row_number() over (partition by id order by _transaction_date desc) as seqnum\n      from \"dev\".\"stg__keypay\".\"region\" t) t\nwhere seqnum = 1 \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay\".\"region\")\n\n", "relation_name": "\"dev\".\"int__keypay\".\"region\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.255341Z", "completed_at": "2024-02-04T15:20:33.372801Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.376859Z", "completed_at": "2024-02-04T15:20:33.376874Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.1411445140838623, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__pension_scheme_contribution_plan", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"pension_scheme_contribution_plan\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"pension_scheme_contribution_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.399019Z", "completed_at": "2024-02-04T15:20:33.409075Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.411447Z", "completed_at": "2024-02-04T15:20:33.411461Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.016538381576538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__resellers", "compiled": true, "compiled_code": "\nselect id,\n       name,\n       billing_name,\n       date_created_utc,\n       commence_billing_from,\n       \"_file\",\n       \"_transaction_date\",\n       \"_etl_date\",\n       \"_modified\"\nfrom (select id,\n             name,\n             billing_name,\n             date_created_utc,\n             commence_billing_from,\n             \"_file\",\n             \"_transaction_date\",\n             \"_etl_date\",\n             \"_modified\",\n             row_number() over (partition by id order by _transaction_date desc) as seqnum\n      from \"dev\".\"stg__keypay\".\"resellers\" t) t\nwhere seqnum = 1 \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay\".\"resellers\")\n\n", "relation_name": "\"dev\".\"int__keypay\".\"resellers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.326325Z", "completed_at": "2024-02-04T15:20:33.441440Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.446155Z", "completed_at": "2024-02-04T15:20:33.446170Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.1340045928955078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__rate_unit", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"rate_unit\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"rate_unit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.367711Z", "completed_at": "2024-02-04T15:20:33.479644Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.486732Z", "completed_at": "2024-02-04T15:20:33.486747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1331636905670166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__reseller_contact", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"reseller_contact\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"reseller_contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.417767Z", "completed_at": "2024-02-04T15:20:33.528799Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.531446Z", "completed_at": "2024-02-04T15:20:33.531465Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12469983100891113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__statutory_settings", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"statutory_settings\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"statutory_settings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.460604Z", "completed_at": "2024-02-04T15:20:33.549077Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.556598Z", "completed_at": "2024-02-04T15:20:33.556612Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12366843223571777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__super_details", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"super_details\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"super_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.503402Z", "completed_at": "2024-02-04T15:20:33.603680Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.612561Z", "completed_at": "2024-02-04T15:20:33.612577Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12116146087646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__super_details_default_fund", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"super_details_default_fund\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"super_details_default_fund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.550361Z", "completed_at": "2024-02-04T15:20:33.664108Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.666765Z", "completed_at": "2024-02-04T15:20:33.666779Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.13172626495361328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__super_fund_product", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"super_fund_product\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"super_fund_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.589674Z", "completed_at": "2024-02-04T15:20:33.669327Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.672191Z", "completed_at": "2024-02-04T15:20:33.672204Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.10378170013427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__super_payment", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"super_payment\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"super_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.684082Z", "completed_at": "2024-02-04T15:20:33.693747Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.698541Z", "completed_at": "2024-02-04T15:20:33.698555Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02539348602294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_system_event", "compiled": true, "compiled_code": "\nselect *\nfrom \"dev\".\"stg__keypay\".\"system_event\"\n\n\n  -- this filter will only be applied on an incremental run\n  -- (uses > to include records whose timestamp occurred since the last run of this model)\n  where _transaction_date > (select max(_transaction_date) from \"dev\".\"keypay\".\"system_event\")\n\n", "relation_name": "\"dev\".\"keypay\".\"system_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.628979Z", "completed_at": "2024-02-04T15:20:33.753372Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.755761Z", "completed_at": "2024-02-04T15:20:33.755774Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14102816581726074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__superfund_ato", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"superfund_ato\" where date_trunc('day', _transaction_date) = '2024-02-04'", "relation_name": "\"dev\".\"int__keypay\".\"superfund_ato\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.719041Z", "completed_at": "2024-02-04T15:20:33.813258Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.815683Z", "completed_at": "2024-02-04T15:20:33.815698Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12056493759155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__timesheet_line", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"timesheet_line\" where date_trunc('day', _transaction_date) = '2023-11-08'", "relation_name": "\"dev\".\"int__keypay\".\"timesheet_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.699673Z", "completed_at": "2024-02-04T15:20:33.821487Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.825146Z", "completed_at": "2024-02-04T15:20:33.825159Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.15525293350219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__tax_file_declaration", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"tax_file_declaration\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"tax_file_declaration\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.770432Z", "completed_at": "2024-02-04T15:20:33.872867Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.877112Z", "completed_at": "2024-02-04T15:20:33.877128Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.12866640090942383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user\" where date_trunc('day', _transaction_date) = '2024-01-29'", "relation_name": "\"dev\".\"int__keypay\".\"user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.838444Z", "completed_at": "2024-02-04T15:20:33.932966Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.936302Z", "completed_at": "2024-02-04T15:20:33.936336Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.11092805862426758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user_business", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user_business\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"user_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.867726Z", "completed_at": "2024-02-04T15:20:33.962261Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:33.966783Z", "completed_at": "2024-02-04T15:20:33.966797Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.12650322914123535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user_employee", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user_employee\" where date_trunc('day', _transaction_date) = '2024-02-02'", "relation_name": "\"dev\".\"int__keypay\".\"user_employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.904272Z", "completed_at": "2024-02-04T15:20:34.017663Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.020017Z", "completed_at": "2024-02-04T15:20:34.020032Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.13070201873779297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user_employee_group", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user_employee_group\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"user_employee_group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.955309Z", "completed_at": "2024-02-04T15:20:34.051639Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.057594Z", "completed_at": "2024-02-04T15:20:34.057610Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.12433576583862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user_report_access", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user_report_access\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"user_report_access\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.080122Z", "completed_at": "2024-02-04T15:20:34.089978Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.093436Z", "completed_at": "2024-02-04T15:20:34.093451Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.018444538116455078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__white_label", "compiled": true, "compiled_code": "\nselect\n    id,\n    name,\n    is_deleted,\n    region_id,\n    support_email,\n    primary_champion_id,\n    function_enable_super_choice_marketplace,\n    default_billing_plan_id,\n    reseller_id,\n    _file,\n    _transaction_date,\n    _etl_date,\n    _modified\nfrom \"dev\".\"stg__keypay\".\"white_label\"\nwhere\n    1 = 1 \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay\".\"white_label\")\n\n\nqualify row_number()\n    over (partition by id order by _transaction_date desc)\n= 1", "relation_name": "\"dev\".\"int__keypay\".\"white_label\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:33.992439Z", "completed_at": "2024-02-04T15:20:34.092201Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.097334Z", "completed_at": "2024-02-04T15:20:34.097347Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.13860487937927246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user_reseller", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user_reseller\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"user_reseller\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.135010Z", "completed_at": "2024-02-04T15:20:34.140452Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.143509Z", "completed_at": "2024-02-04T15:20:34.143525Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012994527816772461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__zoom_info", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"stg__keypay\".\"zoom_info\"\n\n),\n\nrenamed as (\n\nselect\n        record_id,\n        _id,\n        company_name,\n        abn,\n        country,\n        match_status,\n        zoom_info_company_id,\n        website,\n        founded_year,\n        company_hq_phone,\n        revenue_in_000_s_usd_,\n        revenue_range_in_usd_,\n        est_hr_department_budget_in_000_s_usd_,\n        employees,\n        employee_range,\n        past_1_year_employee_growth_rate,\n        past_2_year_employee_growth_rate,\n        sic_code_1,\n        sic_code_2,\n        sic_codes,\n        naics_code_1,\n        naics_code_2,\n        naics_codes,\n        primary_industry,\n        primary_sub_industry,\n        all_industries,\n        all_sub_industries,\n        industry_hierarchical_category,\n        secondary_industry_hierarchical_category,\n        alexa_rank,\n        zoom_info_company_profile_url,\n        linked_in_company_profile_url,\n        facebook_company_profile_url,\n        twitter_company_profile_url,\n        ownership_type,\n        business_model,\n        certified_active_company,\n        certification_date,\n        defunct_company,\n        total_funding_amount_in_000_s_usd_,\n        recent_funding_amount_in_000_s_usd_,\n        recent_funding_round,\n        recent_funding_date,\n        recent_investors,\n        all_investors,\n        company_street_address,\n        company_city,\n        company_state,\n        company_zip_code,\n        company_country,\n        full_address,\n        number_of_locations,\n        company_is_acquired,\n        company_id_ultimate_parent_,\n        entity_name_ultimate_parent_,\n        company_id_immediate_parent_,\n        entity_name_immediate_parent_,\n        relationship_immediate_parent_,\n        _file,\n        _transaction_date,\n        _etl_date,\n        _modified\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"int__keypay\".\"zoom_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.153855Z", "completed_at": "2024-02-04T15:20:34.164602Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.167160Z", "completed_at": "2024-02-04T15:20:34.167176Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.021099567413330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay_dwh__business", "compiled": true, "compiled_code": "\nselect\n    id,\n    name,\n    abn,\n    legal_name,\n    date_created,\n    industry_id,\n    industry_name,\n    address_line1,\n    address_line2,\n    suburb_id,\n    billing_plan_id,\n    commence_billing_from,\n    to_be_deleted,\n    white_label_id,\n    electronic_payroll_lodgement_enabled,\n    _transaction_date,\n    _etl_date,\n    _modified,\n    _file\nfrom \"dev\".\"stg__keypay_dwh\".\"business\"\nwhere\n    1 = 1\n    \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay_dwh\".\"business\")\n\n    \nqualify row_number()\n    over (partition by id order by _transaction_date desc)\n= 1", "relation_name": "\"dev\".\"int__keypay_dwh\".\"business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.036594Z", "completed_at": "2024-02-04T15:20:34.159818Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.162142Z", "completed_at": "2024-02-04T15:20:34.162156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.14838647842407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__user_whitelabel", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"user_whitelabel\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"user_whitelabel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.176154Z", "completed_at": "2024-02-04T15:20:34.188684Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.199393Z", "completed_at": "2024-02-04T15:20:34.199408Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0308835506439209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay_dwh__employee", "compiled": true, "compiled_code": "\nselect\n    id,\n    business_id,\n    firstname,\n    surname,\n    date_created,\n    date_of_birth,\n    residential_street_address,\n    residential_suburb_id,\n    start_date,\n    end_date,\n    gender,\n    payrollid,\n    pay_run_default_id,\n    tax_file_declaration_id,\n    email,\n    home_phone,\n    work_phone,\n    mobile_phone,\n    employee_onboarding_id,\n    status,\n    _transaction_date,\n    _etl_date,\n    _modified,\n    _file\nfrom \"dev\".\"stg__keypay_dwh\".\"employee\"\nwhere\n    1 = 1\n    \n\n        -- this filter will only be applied on an incremental run\n        -- (uses > to include records whose timestamp occurred since the last run of this model)\n        and _transaction_date > (select max(_transaction_date) from \"dev\".\"int__keypay_dwh\".\"employee\")\n\n    \nqualify row_number()\n    over (partition by id order by _transaction_date desc)\n= 1", "relation_name": "\"dev\".\"int__keypay_dwh\".\"employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.221808Z", "completed_at": "2024-02-04T15:20:34.233851Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.240657Z", "completed_at": "2024-02-04T15:20:34.240679Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03444552421569824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_checkly__all_checks_id.68609dbeba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_checkly__all_checks\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.103854Z", "completed_at": "2024-02-04T15:20:34.229686Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.232438Z", "completed_at": "2024-02-04T15:20:34.232453Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.15852570533752441, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay__white_label_contact", "compiled": true, "compiled_code": "\n\nselect * from \"dev\".\"stg__keypay\".\"white_label_contact\" where date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay\".\"white_label_contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.249649Z", "completed_at": "2024-02-04T15:20:34.258043Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.263485Z", "completed_at": "2024-02-04T15:20:34.263498Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020070314407348633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_checkly__all_checks_name.e281b4a95b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dev\".\"staging\".\"stg_checkly__all_checks\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.270441Z", "completed_at": "2024-02-04T15:20:34.283422Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.289124Z", "completed_at": "2024-02-04T15:20:34.289138Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.027880191802978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_checkly__all_checks_id.87263a5b9d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_checkly__all_checks\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.278922Z", "completed_at": "2024-02-04T15:20:34.286840Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.294073Z", "completed_at": "2024-02-04T15:20:34.294085Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.020755529403686523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_checkly_results", "compiled": true, "compiled_code": "select\n    results.id,\n    checks.check_type,\n    results.started_at as current_check_started_at,\n    results.stopped_at as current_check_stopped_at,\n    checks.name, -- for some dates and checks, the name in all_checks differs from all_checks_results for the same check_id in which case the name in all_checks is more informative and is thus preferred\n    results.has_failures,\n    results.has_errors,\n    results.is_degraded,\n    results.over_max_response_time,\n    lead(current_check_started_at) over (\n        partition by results.check_id\n        order by\n            current_check_started_at\n    )                  as next_check_started_at\nfrom\n    \"dev\".\"staging\".\"stg_checkly__all_checks_results\" as results\ninner join \"dev\".\"staging\".\"stg_checkly__all_checks\" as checks on results.check_id = checks.id\nwhere\n    checks.activated\n    and results.started_at::date >= '2023-10-18'\n    and checks.name !~* 'copy'\n    and (checks.group_id not in (626035, 687601) or checks.group_id is NULL)", "relation_name": "\"dev\".\"intermediate\".\"int_checkly_results\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.303334Z", "completed_at": "2024-02-04T15:20:34.318875Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.326496Z", "completed_at": "2024-02-04T15:20:34.326509Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03297543525695801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_checkly__all_checks_results_check_id.b5157d85cb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect check_id\nfrom \"dev\".\"staging\".\"stg_checkly__all_checks_results\"\nwhere check_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.310461Z", "completed_at": "2024-02-04T15:20:34.322234Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.328998Z", "completed_at": "2024-02-04T15:20:34.329017Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03222227096557617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_checkly__all_checks_results_id.ef897061e5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_checkly__all_checks_results\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.347728Z", "completed_at": "2024-02-04T15:20:34.358376Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.360797Z", "completed_at": "2024-02-04T15:20:34.360810Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.021195650100708008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_checkly__all_checks_results_id.3261c9b53d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_checkly__all_checks_results\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.192059Z", "completed_at": "2024-02-04T15:20:34.327682Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.337643Z", "completed_at": "2024-02-04T15:20:34.337658Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.182783842086792, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int__keypay_dwh__suburb", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dev\".\"stg__keypay_dwh\".\"suburb\"\nwhere date_trunc('day', _transaction_date) = '2024-02-01'", "relation_name": "\"dev\".\"int__keypay_dwh\".\"suburb\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.352869Z", "completed_at": "2024-02-04T15:20:34.365879Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.372468Z", "completed_at": "2024-02-04T15:20:34.372482Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03656482696533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_bill_management_transactions", "compiled": true, "compiled_code": "with staging as (\n    select *\n\n    from \"dev\".\"staging\".\"stg_ebenefits__bill_paid\"\n)\n\nselect\n    bill_id                                                                                  as dim_bill_id,\n    subscription_id                                                                          as dim_bill_management_subscription_id,\n    md5(cast(coalesce(cast(provider_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as dim_bill_management_provider_sk,\n    \n\n  to_number(to_char(transaction_date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    transaction_date,\n    currency,\n    bill_amount,\n    paid_amount,\n    total_saved,\n    paid_amount * 0.01                                                                       as revenue_amount\n\nfrom staging", "relation_name": "\"dev\".\"mart\".\"fct_bill_management_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.374929Z", "completed_at": "2024-02-04T15:20:34.385510Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.394736Z", "completed_at": "2024-02-04T15:20:34.394751Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0354924201965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_cashback_transactions", "compiled": true, "compiled_code": "select\n    transaction_timestamp,\n    processed_timestamp,\n    \n\n  to_number(to_char(transaction_timestamp::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    'employment_hero'                                                               as cashback_network,\n    merchant_name,\n    regexp_substr(user_email, '[0-9A-fa-f]{8}(-[0-9A-fa-f]{4}){3}-[0-9A-fa-f]{12}') as dim_user_ebenefits_user_uuid,\n    transaction_amount,\n    revenue_amount,\n    cashback_amount\n\nfrom \"dev\".\"staging\".\"stg_ebenefits__cashback_transactions_eh\"\n\nunion distinct\n\nselect\n    transaction_timestamp,\n    processed_timestamp,\n    \n\n  to_number(to_char(transaction_timestamp::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    'pokitpal'                                                                      as cashback_network,\n    merchant_name,\n    regexp_substr(user_email, '[0-9A-fa-f]{8}(-[0-9A-fa-f]{4}){3}-[0-9A-fa-f]{12}') as dim_user_ebenefits_user_uuid,\n    transaction_amount,\n    revenue_amount,\n    cashback_amount\n\nfrom \"dev\".\"staging\".\"stg_ebenefits__cashback_transactions_pokitpal\"", "relation_name": "\"dev\".\"mart\".\"fct_cashback_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.388060Z", "completed_at": "2024-02-04T15:20:34.395973Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.406382Z", "completed_at": "2024-02-04T15:20:34.406396Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029080867767333984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_enrich_date_spine", "compiled": true, "compiled_code": "with dates as (\n    select date_day::date as report_date\n\n    from \"dev\".\"staging\".\"stg_dates__date_spine\"\n)\n\nselect\n    report_date,\n    extract(year from report_date)                                                         as calendar_year,\n    case when extract(month from report_date) > 6 then 2 else 1 end                        as calendar_year_half,\n    extract(quarter from report_date)                                                      as calendar_quarter,\n    extract(month from report_date)                                                        as calendar_month,\n    extract(week from report_date)                                                         as calendar_week,\n    extract(day from report_date)                                                          as calendar_day,\n    to_char(report_date, 'Mon')                                                            as month_name,\n    to_char(report_date, 'Dy')                                                             as day_name,\n    case when calendar_year_half = 2 then calendar_year + 1 else calendar_year end         as financial_year,\n    case when calendar_year_half = 2 then 1 else 2 end                                     as financial_year_half,\n    case when calendar_year_half = 2 then calendar_quarter - 2 else calendar_month + 2 end as financial_quarter,\n    case when calendar_year_half = 2 then calendar_month - 6 else calendar_month + 6 end   as financial_month\n\nfrom dates", "relation_name": "\"dev\".\"intermediate\".\"int_enrich_date_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.397196Z", "completed_at": "2024-02-04T15:20:34.409013Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.420965Z", "completed_at": "2024-02-04T15:20:34.420979Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03723621368408203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_union_bill_management_subscription", "compiled": true, "compiled_code": "with submitted as (\n    select\n        submitted.*,\n        'submitted' as subscription_status\n\n    from \"dev\".\"staging\".\"stg_ebenefits__subscription_submitted\" as submitted\n\n    qualify row_number() over (partition by subscription_id order by created_at) = 1 -- take the earliest to get \"created_at\" timestamp of the final dim table\n),\n\nactive as (\n    select\n        active.*,\n        'active' as subscription_status\n\n    from \"dev\".\"staging\".\"stg_ebenefits__subscription_active\" as active\n\n    qualify row_number() over (partition by subscription_id order by created_at) = 1 -- take the earliest to get \"updated_at\" timestamp of the final dim table; the event bucket seems to be duplicated for the same sub ID\n),\n\ncancelled as (\n    select\n        cancelled.*,\n        'cancelled' as subscription_status\n\n    from \"dev\".\"staging\".\"stg_ebenefits__subscription_cancelled\" as cancelled\n\n    qualify row_number() over (partition by subscription_id order by created_at) = 1 -- take the earliest to get \"updated_at\" timestamp of the final dim table; the event bucket seems to be duplicated for the same sub ID\n),\n\nunioned as (\n    select\n        subscription_id,\n        ebenefits_user_uuid,\n        provider_id,\n        NULL       as external_id,\n        NULL       as external_user_id,\n        subscription_type,\n        subscription_status,\n        created_at as submitted_at,\n        NULL       as activated_at,\n        NULL       as cancelled_at,\n        created_at,\n        created_at as updated_at\n\n    from submitted\n\n    union distinct\n\n    select\n        subscription_id,\n        ebenefits_user_uuid,\n        provider_id,\n        external_id,\n        external_user_id,\n        subscription_type,\n        subscription_status,\n        NULL       as submitted_at,\n        created_at as activated_at,\n        NULL       as cancelled_at,\n        NULL       as created_at,\n        created_at as updated_at\n\n    from active\n\n    union distinct\n\n    select\n        subscription_id,\n        ebenefits_user_uuid,\n        provider_id,\n        external_id,\n        external_user_id,\n        subscription_type,\n        subscription_status,\n        NULL       as submitted_at,\n        NULL       as activated_at,\n        created_at as cancelled_at,\n        NULL       as created_at,\n        created_at as updated_at\n\n    from cancelled\n),\n\ndeduped as (\n    select\n        last_value(subscription_id ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)     as subscription_id,\n        last_value(ebenefits_user_uuid ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following) as ebenefits_user_uuid,\n        last_value(provider_id ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)         as provider_id,\n        last_value(external_id ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)         as external_id,\n        last_value(external_user_id ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)    as external_user_id,\n        last_value(subscription_type ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)   as subscription_type,\n        last_value(subscription_status ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following) as subscription_status,\n        last_value(submitted_at ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)        as submitted_at,\n        last_value(activated_at ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)        as activated_at,\n        last_value(cancelled_at ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)        as cancelled_at,\n        last_value(created_at ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)          as created_at,\n        last_value(updated_at ignore nulls) over (partition by subscription_id order by created_at rows between unbounded preceding and unbounded following)          as updated_at\n\n    from unioned\n)\n\nselect *\n\nfrom deduped\n\ngroup by 1,2,3,4,5,6,7,8,9,10,11,12", "relation_name": "\"dev\".\"intermediate\".\"int_union_bill_management_subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.415282Z", "completed_at": "2024-02-04T15:20:34.425405Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.440967Z", "completed_at": "2024-02-04T15:20:34.440984Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03642892837524414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_eh_engineering__service_ownership_row.addc566320", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect row\nfrom \"dev\".\"staging\".\"stg_eh_engineering__service_ownership\"\nwhere row is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.430149Z", "completed_at": "2024-02-04T15:20:34.445486Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.456985Z", "completed_at": "2024-02-04T15:20:34.456998Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.038460731506347656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_eh_engineering__service_ownership_service.ddc6df0513", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect service\nfrom \"dev\".\"staging\".\"stg_eh_engineering__service_ownership\"\nwhere service is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.446654Z", "completed_at": "2024-02-04T15:20:34.455794Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.467022Z", "completed_at": "2024-02-04T15:20:34.467036Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03075861930847168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_eh_engineering__service_ownership_row.e1f3c35fc7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    row as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_eh_engineering__service_ownership\"\nwhere row is not null\ngroup by row\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.461960Z", "completed_at": "2024-02-04T15:20:34.472715Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.484094Z", "completed_at": "2024-02-04T15:20:34.484108Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03238391876220703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_eh_engineering__squad_members_row.2b69f2fa09", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect row\nfrom \"dev\".\"staging\".\"stg_eh_engineering__squad_members\"\nwhere row is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.478840Z", "completed_at": "2024-02-04T15:20:34.488105Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.499492Z", "completed_at": "2024-02-04T15:20:34.499506Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.032002925872802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_eh_engineering__squad_members_squad.82e66b665f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect squad\nfrom \"dev\".\"staging\".\"stg_eh_engineering__squad_members\"\nwhere squad is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.489356Z", "completed_at": "2024-02-04T15:20:34.498333Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.508759Z", "completed_at": "2024-02-04T15:20:34.508774Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03408932685852051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_eh_engineering__squad_members_row.103a4dfc53", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    row as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_eh_engineering__squad_members\"\nwhere row is not null\ngroup by row\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.504389Z", "completed_at": "2024-02-04T15:20:34.514148Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.527646Z", "completed_at": "2024-02-04T15:20:34.527662Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03404498100280762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_cleansed_squad_names", "compiled": true, "compiled_code": "with squads_raw as (\n    select\n        squad_owner,\n        case\n            when squad_owner like 'squad%'\n                then split_part(squad_owner, 'squad-', 2)\n            else squad_owner\n        end as squad\n    from \"dev\".\"staging\".\"stg_eh_infra_stat_service_raw__daily_report_sentry_issues\"\n    where squad_owner is not NULL\n),\n\ncleansed_squad_names as (\n    select\n        squad_owner,\n        case\n            when squad like 'autobot'\n                then 'autobots'\n            when squad like 'night%'\n                then 'night''s watch'\n            else squad\n        end as squad\n    from (\n        select\n            squad_owner,\n            replace(squad, '-', ' ') as squad\n        from squads_raw\n    )\n)\n\nselect distinct\n    squad_owner,\n    case\n        when squad like '%''%' then replace(initcap(replace(squad, '''', 'asdf')), 'asdf', '''') --this is to accommodate quotes in squad_owner field, the quotes are first replaced with a random string which is unlikely to show up in an actual squad name and replaced back after applying the initcap function\n        else initcap(squad)\n    end as squad\nfrom cleansed_squad_names", "relation_name": "\"dev\".\"intermediate\".\"int_cleansed_squad_names\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.520101Z", "completed_at": "2024-02-04T15:20:34.540589Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.549037Z", "completed_at": "2024-02-04T15:20:34.549052Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04004955291748047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_eh_infra_stat_service_raw__daily_report_sentry_issues_id.7dd3d9f2dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_eh_infra_stat_service_raw__daily_report_sentry_issues\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.532775Z", "completed_at": "2024-02-04T15:20:34.543507Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.551356Z", "completed_at": "2024-02-04T15:20:34.551371Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04149341583251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_eh_infra_stat_service_raw__daily_report_sentry_issues_issues_id.5cae264d3a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect issues_id\nfrom \"dev\".\"staging\".\"stg_eh_infra_stat_service_raw__daily_report_sentry_issues\"\nwhere issues_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.554210Z", "completed_at": "2024-02-04T15:20:34.566945Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.580716Z", "completed_at": "2024-02-04T15:20:34.580733Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04133200645446777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_eh_infra_stat_service_raw__daily_report_sentry_issues_id.ec1ae3e23a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_eh_infra_stat_service_raw__daily_report_sentry_issues\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.582065Z", "completed_at": "2024-02-04T15:20:34.593046Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.605717Z", "completed_at": "2024-02-04T15:20:34.605731Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04012107849121094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_github__repository_full_name.e00814a853", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect full_name\nfrom \"dev\".\"staging\".\"stg_github__repository\"\nwhere full_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.574288Z", "completed_at": "2024-02-04T15:20:34.594465Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.606885Z", "completed_at": "2024-02-04T15:20:34.606900Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04519343376159668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_github__repository_created_at.9a42549bbb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect created_at\nfrom \"dev\".\"staging\".\"stg_github__repository\"\nwhere created_at is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.599952Z", "completed_at": "2024-02-04T15:20:34.611438Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.619971Z", "completed_at": "2024-02-04T15:20:34.619988Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0332026481628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_github__repository_id.e0fdf6ecbf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_github__repository\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.632790Z", "completed_at": "2024-02-04T15:20:34.646711Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.658160Z", "completed_at": "2024-02-04T15:20:34.658176Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043999433517456055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_github__repository_id.148786c5e8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_github__repository\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.626183Z", "completed_at": "2024-02-04T15:20:34.653427Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.659336Z", "completed_at": "2024-02-04T15:20:34.659350Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0471189022064209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_github__repository_name.f448e85173", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dev\".\"staging\".\"stg_github__repository\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.648024Z", "completed_at": "2024-02-04T15:20:34.657022Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.664848Z", "completed_at": "2024-02-04T15:20:34.664861Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025490999221801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_github__team_id.a702fd1c75", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_github__team\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.677900Z", "completed_at": "2024-02-04T15:20:34.691759Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.707149Z", "completed_at": "2024-02-04T15:20:34.707166Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0410616397857666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_github__team_name.3775254abd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dev\".\"staging\".\"stg_github__team\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.683335Z", "completed_at": "2024-02-04T15:20:34.697822Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.708385Z", "completed_at": "2024-02-04T15:20:34.708400Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04141998291015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_github__team_id.80f5c5e66d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_github__team\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.693001Z", "completed_at": "2024-02-04T15:20:34.705723Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.714261Z", "completed_at": "2024-02-04T15:20:34.714276Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04183530807495117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_herodollar_purchase_payment_processors", "compiled": true, "compiled_code": "select distinct\n    payment_processor_key,\n    case\n        when payment_processor_key = 0 then 'braintree'\n        when payment_processor_key = 1 then 'stripe'\n        else 'unknown'\n    end as payment_processor\n\nfrom \"dev\".\"staging\".\"stg_herodollar_purchases_service_public__transactions\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_herodollar_purchase_payment_processors\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.735048Z", "completed_at": "2024-02-04T15:20:34.750489Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.757825Z", "completed_at": "2024-02-04T15:20:34.757842Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.041541337966918945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_herodollar_service_public__herodollar_transactions_id.8a7f192cb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.728878Z", "completed_at": "2024-02-04T15:20:34.752480Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.759024Z", "completed_at": "2024-02-04T15:20:34.759038Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04455399513244629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_herodollar_transaction_type", "compiled": true, "compiled_code": "select distinct\n    transaction_type_key,\n    case\n        when transaction_type_key = 0 then 'topup'\n        when transaction_type_key = 1 then 'withdrawal'\n        when transaction_type_key = 2 then 'topup_reversion'\n        when transaction_type_key = 3 then 'withdrawal_reversion'\n        when transaction_type_key = 4 then 'deduction'\n        when transaction_type_key = 5 then 'deduction_reversion'\n        else 'unknown'\n    end as transaction_type\n\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_herodollar_transaction_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.745240Z", "completed_at": "2024-02-04T15:20:34.756057Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.765547Z", "completed_at": "2024-02-04T15:20:34.765561Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04236483573913574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_herodollar_service_public__herodollar_transactions_transaction_initiator_id.8e91416853", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_initiator_id\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\"\nwhere transaction_initiator_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.778278Z", "completed_at": "2024-02-04T15:20:34.794860Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.800775Z", "completed_at": "2024-02-04T15:20:34.800788Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03364682197570801, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_herodollar_service_public__herodollar_transactions_transaction_type_key.9d5cfa7469", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_type_key\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\"\nwhere transaction_type_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.784143Z", "completed_at": "2024-02-04T15:20:34.796017Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.801930Z", "completed_at": "2024-02-04T15:20:34.801943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03389120101928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_herodollar_service_public__herodollar_transactions_id.a62f08ecb2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.791031Z", "completed_at": "2024-02-04T15:20:34.799569Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.807280Z", "completed_at": "2024-02-04T15:20:34.807293Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.034279823303222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_herodollar_reason_type_key", "compiled": true, "compiled_code": "select distinct\n    reason_type_key,\n    case\n        when reason_type_key = 0 then 'default'\n        when reason_type_key = 1 then 'other'\n        when reason_type_key = 2 then 'marketing'\n        when reason_type_key = 3 then 'assisted_implementation'\n        when reason_type_key = 4 then 'staff_rewards'\n        when reason_type_key = 5 then 'commission'\n        when reason_type_key = 6 then 'instapay_dev'\n        when reason_type_key = 7 then 'refund'\n        when reason_type_key = 8 then 'organisation_issuance'\n        when reason_type_key = 9 then 'transaction_fee'\n        when reason_type_key = 10 then 'points_compensation'\n        else 'unknown'\n    end as reason_type\n\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__tracking_infos\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_herodollar_reason_type_key\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.820394Z", "completed_at": "2024-02-04T15:20:34.834213Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.850266Z", "completed_at": "2024-02-04T15:20:34.850280Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04176783561706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_herodollar_service_public__tracking_infos_hero_dollar_transaction_id.e2a79e7b80", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect hero_dollar_transaction_id\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__tracking_infos\"\nwhere hero_dollar_transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.826072Z", "completed_at": "2024-02-04T15:20:34.845783Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.851535Z", "completed_at": "2024-02-04T15:20:34.851547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04195857048034668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_herodollar_service_public__tracking_infos_id.d4594b6dd3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__tracking_infos\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.835580Z", "completed_at": "2024-02-04T15:20:34.852800Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.860827Z", "completed_at": "2024-02-04T15:20:34.860841Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04600930213928223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_herodollar_service_public__tracking_infos_id.53b84eeb0d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_herodollar_service_public__tracking_infos\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.873977Z", "completed_at": "2024-02-04T15:20:34.884543Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.891550Z", "completed_at": "2024-02-04T15:20:34.891564Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0319826602935791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_instapay_referrer_source", "compiled": true, "compiled_code": "select distinct\n    referred_from_key,\n    case\n        when referred_from_key = 0 then 'client'\n        when referred_from_key = 1 then 'marketplace'\n        when referred_from_key = 2 then 'swag'\n        else 'unknown'\n    end as referrer_source\n\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_instapay_referrer_source\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.869747Z", "completed_at": "2024-02-04T15:20:34.885779Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.892740Z", "completed_at": "2024-02-04T15:20:34.892753Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03492331504821777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_instapay_fee_tier", "compiled": true, "compiled_code": "select distinct\n    fee_tier_key,\n    case\n        when fee_tier_key = 0 then 'default'\n        when fee_tier_key = 1 then 'free_trial'\n        when fee_tier_key = 2 then 'custom_fee'\n        else 'unknown'\n    end as fee_tier\n\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_instapay_fee_tier\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.880534Z", "completed_at": "2024-02-04T15:20:34.887039Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.893922Z", "completed_at": "2024-02-04T15:20:34.893935Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020586729049682617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_instapay_transaction_status", "compiled": true, "compiled_code": "select distinct\n    transaction_status_key,\n    case\n        when transaction_status_key = 0 then 'pending'\n        when transaction_status_key = 1 then 'payment_processed'\n        when transaction_status_key = 2 then 'complete'\n        when transaction_status_key = 3 then 'error'\n        when transaction_status_key = 4 then 'draft'\n        when transaction_status_key = 5 then 'revert'\n        when transaction_status_key = 100 then 'shaype_processing'\n        when transaction_status_key = 101 then 'shaype_accepted'\n        when transaction_status_key = 102 then 'shaype_refused'\n        else 'unknown'\n    end as transaction_status\n\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_instapay_transaction_status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.911244Z", "completed_at": "2024-02-04T15:20:34.930244Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.938686Z", "completed_at": "2024-02-04T15:20:34.938710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03992915153503418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heropay_db__heropay_transactions_employee_uuid.4ef35745d1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_uuid\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"\nwhere employee_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.922043Z", "completed_at": "2024-02-04T15:20:34.931768Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.940252Z", "completed_at": "2024-02-04T15:20:34.940267Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03907942771911621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heropay_db__heropay_transactions_transaction_amount.a6d39db32a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_amount\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"\nwhere transaction_amount is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.916794Z", "completed_at": "2024-02-04T15:20:34.933231Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.941828Z", "completed_at": "2024-02-04T15:20:34.941842Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04213976860046387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heropay_db__heropay_transactions_heropay_balance_id.810ec028dc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect heropay_balance_id\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"\nwhere heropay_balance_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.965903Z", "completed_at": "2024-02-04T15:20:34.976591Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.982491Z", "completed_at": "2024-02-04T15:20:34.982508Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0324251651763916, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heropay_db__heropay_transactions_id.09311fcf5e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.959942Z", "completed_at": "2024-02-04T15:20:34.977829Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.984829Z", "completed_at": "2024-02-04T15:20:34.984842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03664398193359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heropay_db__heropay_transactions_transaction_status_key.9b30b7044f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_status_key\nfrom \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\"\nwhere transaction_status_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:34.971103Z", "completed_at": "2024-02-04T15:20:34.980105Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:34.987594Z", "completed_at": "2024-02-04T15:20:34.987607Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.036681413650512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__order_details_billable_amount.26b8855c34", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billable_amount\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere billable_amount is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.001979Z", "completed_at": "2024-02-04T15:20:35.021354Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.023748Z", "completed_at": "2024-02-04T15:20:35.023761Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03231382369995117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__order_details_id.9bf202ac5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.008729Z", "completed_at": "2024-02-04T15:20:35.025099Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.033579Z", "completed_at": "2024-02-04T15:20:35.033594Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04229450225830078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__order_details_order_id.65b26b6a6a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.014158Z", "completed_at": "2024-02-04T15:20:35.029800Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.040845Z", "completed_at": "2024-02-04T15:20:35.040866Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04688882827758789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__order_details_price.8da32dcd09", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere price is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.048900Z", "completed_at": "2024-02-04T15:20:35.064824Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.075018Z", "completed_at": "2024-02-04T15:20:35.075034Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04168534278869629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__order_details_quantity.9eedd95ffd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect quantity\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere quantity is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.059730Z", "completed_at": "2024-02-04T15:20:35.073888Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.081368Z", "completed_at": "2024-02-04T15:20:35.081381Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030834197998046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__order_details_subtotal.12dd4c197c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subtotal\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere subtotal is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.068714Z", "completed_at": "2024-02-04T15:20:35.076295Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.083728Z", "completed_at": "2024-02-04T15:20:35.083742Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029959917068481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__order_details_id.3490ff5b57", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.094425Z", "completed_at": "2024-02-04T15:20:35.106653Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.114376Z", "completed_at": "2024-02-04T15:20:35.114389Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029241323471069336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_heroshop_orders", "compiled": true, "compiled_code": "with enriched_heroshop_orders as (\n    select\n        orders.id,\n        orders.created_at::date                                     as order_date,\n        \n\n  to_number(to_char(orders.created_at::DATE,'YYYYMMDD'),'99999999')\n\n                                                                                                                          as dim_date_sk,\n        orders.member_id                                            as dim_employee_eh_employee_id,\n        orders.service_fee,\n        orders.billable_amount,\n        orders.transaction_fee,\n        orders.freight_cost,\n        orders.promo_total\n    from \"dev\".\"staging\".\"stg_heroshop_db_public__orders\" as orders\n)\n\nselect\n    orders.id,\n    orders.order_date,\n    orders.dim_date_sk,\n    orders.dim_employee_eh_employee_id,\n    orders.service_fee,\n    orders.billable_amount,\n    orders.transaction_fee,\n    orders.freight_cost,\n    orders.promo_total\nfrom enriched_heroshop_orders as orders", "relation_name": "\"dev\".\"mart\".\"fct_heroshop_orders\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.102656Z", "completed_at": "2024-02-04T15:20:35.117208Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.123484Z", "completed_at": "2024-02-04T15:20:35.123497Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03548264503479004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_heroshop_orders_payment_params", "compiled": true, "compiled_code": "select\n    id                                              as heroshop_order_id,\n    json_extract_path_text(payment_params, 'nonce') as nonce,\n    json_extract_path_text(\n        replace(\n            json_extract_path_text(payment_params, 'device_data'), '\\\\', ''\n        ),\n        'device_session_id',\n        TRUE\n    )                                               as device_session_id,\n    json_extract_path_text(\n        replace(\n            json_extract_path_text(payment_params, 'device_data'), '\\\\', ''\n        ),\n        'fraud_merchant_id',\n        TRUE\n    )                                               as fraud_merchant_id,\n    json_extract_path_text(\n        replace(\n            json_extract_path_text(payment_params, 'device_data'), '\\\\', ''\n        ),\n        'correlation_id',\n        TRUE\n    )                                               as correlation_id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_heroshop_orders_payment_params\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.107822Z", "completed_at": "2024-02-04T15:20:35.120926Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.131046Z", "completed_at": "2024-02-04T15:20:35.131061Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0426332950592041, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__orders_billable_amount.3bfc815091", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billable_amount\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere billable_amount is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.132238Z", "completed_at": "2024-02-04T15:20:35.144989Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.156306Z", "completed_at": "2024-02-04T15:20:35.156321Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03689861297607422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__orders_freight_cost.bdf33a7bbf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect freight_cost\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere freight_cost is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.151212Z", "completed_at": "2024-02-04T15:20:35.160303Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.170475Z", "completed_at": "2024-02-04T15:20:35.170488Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030927658081054688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__orders_id.5aa11d487d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.161506Z", "completed_at": "2024-02-04T15:20:35.171604Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.183053Z", "completed_at": "2024-02-04T15:20:35.183067Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03731989860534668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__orders_member_id.5b6dc025ca", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.176547Z", "completed_at": "2024-02-04T15:20:35.185667Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.196995Z", "completed_at": "2024-02-04T15:20:35.197009Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030779600143432617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__orders_service_fee.0d709c75cf", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect service_fee\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere service_fee is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.191883Z", "completed_at": "2024-02-04T15:20:35.201235Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.212312Z", "completed_at": "2024-02-04T15:20:35.212338Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030744314193725586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__orders_transaction_fee.c629cc90cc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_fee\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere transaction_fee is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.205792Z", "completed_at": "2024-02-04T15:20:35.221863Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.228740Z", "completed_at": "2024-02-04T15:20:35.228759Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03503251075744629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__orders_id.4b418ec923", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__orders\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.216360Z", "completed_at": "2024-02-04T15:20:35.225674Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.234620Z", "completed_at": "2024-02-04T15:20:35.234638Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0323328971862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_heroshop_product_category", "compiled": true, "compiled_code": "select\n    id                                                                       as dim_heroshop_product_category_id,\n    name                                                                     as product_category,\n    coalesce(name similar to 'Giftcard%|%Groceries%', FALSE)                 as is_evoucher,\n    coalesce(name ~ 'Movie tickets', FALSE)                                  as is_movie_tickets,\n    coalesce(name not similar to 'Movie tickets|Giftcard%|Groceries', FALSE) as is_dropship_products,\n    case\n        when name similar to 'Giftcard%|%Groceries%' then 'evoucher'\n        when name ~ 'Movie tickets' then 'movie_tickets'\n        when name not similar to 'Movie tickets|Giftcard%|Groceries' then 'dropship_products' else 'unknown'\n    end                                                                      as product_type\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_categories\"", "relation_name": "\"dev\".\"mart\".\"dim_heroshop_product_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.235860Z", "completed_at": "2024-02-04T15:20:35.247480Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.258524Z", "completed_at": "2024-02-04T15:20:35.258538Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03778195381164551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__product_categories_id.06fd9c1c61", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_categories\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.252245Z", "completed_at": "2024-02-04T15:20:35.263654Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.269981Z", "completed_at": "2024-02-04T15:20:35.269993Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02911543846130371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__product_categories_id.e365aa4782", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_categories\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.259770Z", "completed_at": "2024-02-04T15:20:35.268742Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.276285Z", "completed_at": "2024-02-04T15:20:35.276298Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.033271074295043945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_heroshop_product_variant", "compiled": true, "compiled_code": "select\n    id as dim_heroshop_product_variant_id,\n    variant_code,\n    price,\n    discounted_price,\n    rrp,\n    supplier_price,\n    freight_price\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\"", "relation_name": "\"dev\".\"mart\".\"dim_heroshop_product_variant\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.278728Z", "completed_at": "2024-02-04T15:20:35.288337Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.298584Z", "completed_at": "2024-02-04T15:20:35.298597Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0353398323059082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_heroshop_supplier_cost", "compiled": true, "compiled_code": "select\n    id  as product_variant_id,\n    case\n        when supplier_price is not NULL then supplier_price\n        when variant_code ~* '-50' then 47.37\n        when variant_code !~* 'EMOVIE|ESAVER' then 94.74\n        when variant_code = 'ESAVER_CHILD' then 10.5\n        when variant_code = 'EMOVIE_ADULT' then 15.5\n        when variant_code = 'ESAVER_ADULT' then 12.5\n        when variant_code = 'EMOVIE_CHILD' then 12.5\n        else 0\n    end as supplier_cost\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_heroshop_supplier_cost\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.291030Z", "completed_at": "2024-02-04T15:20:35.299755Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.310352Z", "completed_at": "2024-02-04T15:20:35.310364Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03008890151977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__product_variants_id.316915cb41", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.300998Z", "completed_at": "2024-02-04T15:20:35.311565Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.319054Z", "completed_at": "2024-02-04T15:20:35.319067Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03979325294494629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__product_variants_price.89eb831802", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect price\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\"\nwhere price is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.320228Z", "completed_at": "2024-02-04T15:20:35.333594Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.345703Z", "completed_at": "2024-02-04T15:20:35.345719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03954458236694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__product_variants_variant_code.3fce951eee", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect variant_code\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\"\nwhere variant_code is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.334921Z", "completed_at": "2024-02-04T15:20:35.344361Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.353759Z", "completed_at": "2024-02-04T15:20:35.353772Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030260562896728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__product_variants_id.677dfd86c6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.346941Z", "completed_at": "2024-02-04T15:20:35.356101Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.363971Z", "completed_at": "2024-02-04T15:20:35.363986Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03168320655822754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_heroshop_product", "compiled": true, "compiled_code": "select\n    id           as dim_heroshop_product_id,\n    name         as product_name,\n    product_code,\n    country      as product_country,\n    product_type as product_type_enum,\n    case\n        when product_type_enum = 0 then 'grocery'\n        when product_type_enum = 1 then 'ticket'\n        when product_type_enum = 2 then 'giftcard'\n        when product_type_enum = 3 then 'dropship'\n        else 'Unknown'\n    end          as product_type\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__products\"", "relation_name": "\"dev\".\"mart\".\"dim_heroshop_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.366574Z", "completed_at": "2024-02-04T15:20:35.380963Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.387036Z", "completed_at": "2024-02-04T15:20:35.387050Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03586268424987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__products_id.d914162270", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__products\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.375903Z", "completed_at": "2024-02-04T15:20:35.384778Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.396244Z", "completed_at": "2024-02-04T15:20:35.396259Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0338740348815918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__products_id.e82c592430", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__products\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.389498Z", "completed_at": "2024-02-04T15:20:35.400338Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.407681Z", "completed_at": "2024-02-04T15:20:35.407693Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03501176834106445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__suppliers_id.a69b965e62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__suppliers\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.408901Z", "completed_at": "2024-02-04T15:20:35.422481Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.429195Z", "completed_at": "2024-02-04T15:20:35.429209Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03179001808166504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__suppliers_id.da5dc6c742", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__suppliers\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.418495Z", "completed_at": "2024-02-04T15:20:35.426191Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.435751Z", "completed_at": "2024-02-04T15:20:35.435766Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0390782356262207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_map_heroshop_payment_method", "compiled": true, "compiled_code": "select distinct\n    payment_method_key,\n    case\n        when payment_method_key = 0 then 'credit_card'\n        when payment_method_key = 1 then 'instapay'\n        when payment_method_key = 2 then 'hero_dollars'\n        when payment_method_key = 3 then 'hero_points'\n        else 'unknown'\n    end as payment_method\n\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\"", "relation_name": "\"dev\".\"intermediate\".\"int_map_heroshop_payment_method\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.437038Z", "completed_at": "2024-02-04T15:20:35.448340Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.460014Z", "completed_at": "2024-02-04T15:20:35.460029Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03550839424133301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__transactions_id.9c7f3e67e6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.454520Z", "completed_at": "2024-02-04T15:20:35.464213Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.475960Z", "completed_at": "2024-02-04T15:20:35.475972Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03274655342102051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__transactions_payment_method_key.35e37921b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_key\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\"\nwhere payment_method_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.465445Z", "completed_at": "2024-02-04T15:20:35.474759Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.486061Z", "completed_at": "2024-02-04T15:20:35.486074Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.035649776458740234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__transactions_transaction_amount.ecf79b046c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_amount\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\"\nwhere transaction_amount is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.480991Z", "completed_at": "2024-02-04T15:20:35.490165Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.497747Z", "completed_at": "2024-02-04T15:20:35.497761Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0319828987121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_heroshop_db_public__transactions_transaction_fee.b640231baa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_fee\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\"\nwhere transaction_fee is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.498927Z", "completed_at": "2024-02-04T15:20:35.511994Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.518748Z", "completed_at": "2024-02-04T15:20:35.518762Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03092193603515625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_heroshop_db_public__transactions_id.67baa3159c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.506766Z", "completed_at": "2024-02-04T15:20:35.519926Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.533270Z", "completed_at": "2024-02-04T15:20:35.533288Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04207873344421387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_mp__event_event_id.2ba03f399e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"dev\".\"staging\".\"stg_mp__event\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.524972Z", "completed_at": "2024-02-04T15:20:35.536792Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.551810Z", "completed_at": "2024-02-04T15:20:35.551826Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.038416147232055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_mp__event_event_id.4c523e38e3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_mp__event\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.560400Z", "completed_at": "2024-02-04T15:20:35.570770Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.586693Z", "completed_at": "2024-02-04T15:20:35.586708Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03512430191040039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_postgres_public__members_id.b323cbcb06", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_postgres_public__members\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.572461Z", "completed_at": "2024-02-04T15:20:35.589539Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.594548Z", "completed_at": "2024-02-04T15:20:35.594561Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03013753890991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_postgres_public__members_id.912e5e316e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_postgres_public__members\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.598505Z", "completed_at": "2024-02-04T15:20:35.614549Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.617081Z", "completed_at": "2024-02-04T15:20:35.617093Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025336742401123047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_postgres_public__user_infos_id.8e3eb534cc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_postgres_public__user_infos\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.607726Z", "completed_at": "2024-02-04T15:20:35.619844Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.625099Z", "completed_at": "2024-02-04T15:20:35.625117Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.022884368896484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_postgres_public__user_infos_id.f2a75a0cd0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_postgres_public__user_infos\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.664571Z", "completed_at": "2024-02-04T15:20:35.681098Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.688041Z", "completed_at": "2024-02-04T15:20:35.688059Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03377175331115723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_spined_daily_user_signin_mp", "compiled": true, "compiled_code": "\n\nwith user_signin as (\n    select\n        events.event_timestamp::date as signin_date,\n        eh_users.uuid                as eh_user_uuid,\n        events.user_id,\n        case\n            when events.login_provider = 'eh' or events.eh_employee_id is not NULL then 'employment_hero'\n            when events.login_provider = 'kp' then 'keypay'\n        end                          as platform\n\n    from \"dev\".\"staging\".\"stg_mp__event\" as events\n\n    left join \"dev\".\"staging\".\"stg_postgres_public__users\" as eh_users\n        on\n            events.user_id = eh_users.id\n            and events.eh_employee_id is not NULL\n\n    where\n        lower(events.name) in ('sign in', 'login success')\n    and events.event_timestamp::date >= '2023-01-01' -- limit to 2023 onwards to keep it consistent as we only have Keypay data from 2023 onwards\n),\n\nall_dates as (\n    select date_day\n\n    from \"dev\".\"staging\".\"stg_dates__date_spine\"\n),\n\nfirst_active_days as (\n    select\n        platform,\n        eh_user_uuid,\n        user_id,\n        min(signin_date)::date as first_active_day\n\n    from user_signin\n\n    group by 1,2,3\n),\n\nspined as (\n    select\n        first_active_days.platform,\n        first_active_days.eh_user_uuid,\n        first_active_days.user_id,\n        all_dates.date_day::date\n\n    from first_active_days\n\n    left join all_dates\n        on first_active_days.first_active_day <= all_dates.date_day\n\n    where\n        all_dates.date_day < current_date\n     --noqa: LT02\n            and all_dates.date_day > dateadd('day', -30, (select max(date_day) from \"dev\".\"intermediate\".\"int_spined_daily_user_signin_mp\")) -- we need to include the last 30 days in each incremental run to ensure the has_active_subscription window function continue to work\n    \n),\n\nfilled as (\n    select\n        spined.date_day,\n        spined.platform,\n        spined.eh_user_uuid,\n        spined.user_id,\n        user_signin.signin_date is not NULL                                                                                                                                   as is_active,\n        max(case when is_active then 1 else 0 end) over (partition by spined.user_id, spined.platform order by spined.date_day rows between 6 preceding and current row) > 0  as is_active_last_7_days,\n        max(case when is_active then 1 else 0 end) over (partition by spined.user_id, spined.platform order by spined.date_day rows between 29 preceding and current row) > 0 as is_active_last_30_days\n\n    from spined\n\n    left join user_signin\n        on\n            spined.user_id = user_signin.user_id\n            and spined.platform = user_signin.platform\n            and spined.date_day = user_signin.signin_date\n)\n\nselect * from filled", "relation_name": "\"dev\".\"intermediate\".\"int_spined_daily_user_signin_mp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.710264Z", "completed_at": "2024-02-04T15:20:35.716157Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.718649Z", "completed_at": "2024-02-04T15:20:35.718662Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023827791213989258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_postgres_public__users_id.ca7a515784", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_postgres_public__users\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.725574Z", "completed_at": "2024-02-04T15:20:35.734384Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.736867Z", "completed_at": "2024-02-04T15:20:35.736880Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.01568007469177246, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_postgres_public__users_uuid.0197fb05b0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect uuid\nfrom \"dev\".\"staging\".\"stg_postgres_public__users\"\nwhere uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.744306Z", "completed_at": "2024-02-04T15:20:35.749812Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.751946Z", "completed_at": "2024-02-04T15:20:35.751957Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012139081954956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_postgres_public__users_id.6e5d9e567b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_postgres_public__users\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.758153Z", "completed_at": "2024-02-04T15:20:35.766415Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.769468Z", "completed_at": "2024-02-04T15:20:35.769481Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015206336975097656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_postgres_public__users_uuid.ed0bb99857", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_postgres_public__users\"\nwhere uuid is not null\ngroup by uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.779930Z", "completed_at": "2024-02-04T15:20:35.785319Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.787427Z", "completed_at": "2024-02-04T15:20:35.787439Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013117313385009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__pingdom_check_stats_date.bd3352aba5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_check_stats\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.794018Z", "completed_at": "2024-02-04T15:20:35.799910Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.802358Z", "completed_at": "2024-02-04T15:20:35.802370Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.012435674667358398, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__pingdom_check_stats_id.4762ffb473", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_check_stats\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.809483Z", "completed_at": "2024-02-04T15:20:35.816249Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.818448Z", "completed_at": "2024-02-04T15:20:35.818461Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013170957565307617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__pingdom_check_stats_pingdom_check_id.a868cfebe0", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect pingdom_check_id\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_check_stats\"\nwhere pingdom_check_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.825412Z", "completed_at": "2024-02-04T15:20:35.833586Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.835934Z", "completed_at": "2024-02-04T15:20:35.835955Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015006303787231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_workshop_public__pingdom_check_stats_id.57ec9c3e4b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_check_stats\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.842838Z", "completed_at": "2024-02-04T15:20:35.848501Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.850705Z", "completed_at": "2024-02-04T15:20:35.850718Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011931657791137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__pingdom_checks_id.47a1879a95", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_checks\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.856983Z", "completed_at": "2024-02-04T15:20:35.862584Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.864784Z", "completed_at": "2024-02-04T15:20:35.864796Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011660099029541016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__pingdom_checks_name.2b23a105cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_checks\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.871088Z", "completed_at": "2024-02-04T15:20:35.876563Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.878758Z", "completed_at": "2024-02-04T15:20:35.878769Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011355161666870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_workshop_public__pingdom_checks_id.a89dce612a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_checks\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.885084Z", "completed_at": "2024-02-04T15:20:35.891350Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.893824Z", "completed_at": "2024-02-04T15:20:35.893843Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013756752014160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__prometheus_service_stats_id.868a141fe6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_workshop_public__prometheus_service_stats\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.903199Z", "completed_at": "2024-02-04T15:20:35.909905Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.912050Z", "completed_at": "2024-02-04T15:20:35.912061Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.013955354690551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__prometheus_service_stats_prometheus_service_id.951d83cfc4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect prometheus_service_id\nfrom \"dev\".\"staging\".\"stg_workshop_public__prometheus_service_stats\"\nwhere prometheus_service_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.918653Z", "completed_at": "2024-02-04T15:20:35.931066Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.933860Z", "completed_at": "2024-02-04T15:20:35.933875Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.019300460815429688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_workshop_public__prometheus_service_stats_id.831f6b50ae", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_workshop_public__prometheus_service_stats\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.944491Z", "completed_at": "2024-02-04T15:20:35.954390Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.956654Z", "completed_at": "2024-02-04T15:20:35.956666Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.020222187042236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_cleansed_service_names", "compiled": true, "compiled_code": "with pingdom_services as (\n    select distinct\n        'pingdom'                                                                      as platform,\n        name,\n        replace(replace(translate(lower(name), ' ', '-'), '-service', ''), '-api', '') as cleansed_name\n\n    from \"dev\".\"staging\".\"stg_workshop_public__pingdom_checks\"\n),\n\nprometheus_services as (\n    select distinct\n        'prometheus' as platform,\n        name,\n        case\n            when name ilike 'application.%' then replace(replace(replace(split_part(name, '.', 2), '-web', ''), '-api', ''), '-service', '')\n            else replace(replace(replace(replace(split_part(name, '.application', 1), '-web', ''), '-api', ''), '-service', ''), '-rpc', '')\n        end          as cleansed_name\n\n    from \"dev\".\"staging\".\"stg_workshop_public__prometheus_services\"\n    where name !~* '^destination_app:.'\n),\n\ndatadog_services as (\n    select\n        'datadog'                                                                 as platform,\n        name,\n        regexp_replace(split_part(name, ':', 2), '(-service|-web|-api|-rpc)', '') as cleansed_name\n\n    from \"dev\".\"staging\".\"stg_workshop_public__prometheus_services\"\n    where name ~* '^destination_app:.'\n    group by 1, 2, 3\n),\n\nsentry_services as (\n    select distinct\n        'sentry'                                                                                        as platform,\n        project_name                                                                                    as name, -- noqa: RF04\n        replace(replace(replace(lower(project_name), '-api', ''), '-service', ''), 'eh-sandbox', 'sbx') as cleansed_name\n\n    from \"dev\".\"staging\".\"stg_eh_infra_stat_service_raw__daily_report_sentry_issues\"\n),\n\ncheckly as (\n    select distinct\n        'checkly' as platform,\n        name,\n        name      as cleansed_name\n    from \"dev\".\"staging\".\"stg_checkly__all_checks\"\n)\n\nselect * from pingdom_services\nunion all\nselect * from prometheus_services\nunion all\nselect * from datadog_services\nunion all\nselect * from sentry_services\nunion all\nselect * from checkly", "relation_name": "\"dev\".\"intermediate\".\"int_cleansed_service_names\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.544590Z", "completed_at": "2024-02-04T15:20:35.949656Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.951979Z", "completed_at": "2024-02-04T15:20:35.952011Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4349837303161621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_enrich_keypay_users", "compiled": true, "compiled_code": "\n\n\n\nwith users as (\n    select\n        id,\n        first_name,\n        last_name,\n        email,\n        is_active,\n        is_admin\n\n    from \"dev\".\"stg__keypay\".\"user\"\n\n    where date_trunc('day', _transaction_date) = '2024-01-29'\n),\n\nuser_transformed as (\n    select\n        id as keypay_user_id,\n        first_name,\n        last_name,\n        email,\n        is_active,\n        is_admin\n\n    from users\n),\n\nemployees as (\n    select employee.*\n\n    from \"dev\".\"stg__keypay_dwh\".\"employee\" as employee\n\n    qualify row_number() over (partition by id order by _transaction_date desc) = 1\n),\n\neh_employees as (\n    select *\n\n    from \"dev\".\"staging\".\"stg_postgres_public__members\"\n\n    where organisation_id = 8701\n),\n\nuser_employees as (\n    select *\n\n    from \"dev\".\"stg__keypay\".\"user_employee\"\n\n    where date_trunc('day', _transaction_date) = '2024-02-02'\n),\n\nebenefits_users as (\n    select ebenefits.keypay_user_id\n\n    from \"dev\".\"staging\".\"stg_ebenefits__user_created\" as ebenefits\n\n    group by 1\n),\n\njoined as (\n    select\n        users.*,\n        ebenefits_users.keypay_user_id is not NULL                                                                            as has_swag_profile,\n        count(distinct eh_employees.id) > 0                                                                                   as is_current_eh_employee,\n        count(distinct case when employees.end_date is NULL or employees.end_date > current_date then employees.id end) > 0   as is_active_employee,\n        count(distinct case when employees.end_date is NULL or employees.end_date > current_date then employees.id end)       as active_employee_count,\n        count(distinct case when employees.end_date is not NULL and employees.end_date <= current_date then employees.id end) as terminated_employee_count\n\n    from user_transformed as users\n\n    left join user_employees\n        on users.keypay_user_id = user_employees.user_id\n\n    left join employees\n        on user_employees.employee_id = employees.id\n\n    left join eh_employees\n        on employees.id = eh_employees.external_payroll_employee_id\n\n    left join ebenefits_users\n        on users.keypay_user_id = ebenefits_users.keypay_user_id\n\n    group by 1,2,3,4,5,6,7\n)\n\nselect * from joined", "relation_name": "\"dev\".\"intermediate\".\"int_enrich_keypay_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.964441Z", "completed_at": "2024-02-04T15:20:35.974029Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.982581Z", "completed_at": "2024-02-04T15:20:35.982594Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02344036102294922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__prometheus_services_id.b578e9a690", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_workshop_public__prometheus_services\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.977401Z", "completed_at": "2024-02-04T15:20:35.985432Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:35.990314Z", "completed_at": "2024-02-04T15:20:35.990331Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021821975708007812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__prometheus_services_name.b8ad926297", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect name\nfrom \"dev\".\"staging\".\"stg_workshop_public__prometheus_services\"\nwhere name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.996498Z", "completed_at": "2024-02-04T15:20:36.010790Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.013166Z", "completed_at": "2024-02-04T15:20:36.013179Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026751279830932617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_workshop_public__prometheus_services_id.70249aff18", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_workshop_public__prometheus_services\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.005653Z", "completed_at": "2024-02-04T15:20:36.014267Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.019310Z", "completed_at": "2024-02-04T15:20:36.019322Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019004106521606445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__source_usages_id.2825fb1280", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"staging\".\"stg_workshop_public__source_usages\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.026631Z", "completed_at": "2024-02-04T15:20:36.041292Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.046640Z", "completed_at": "2024-02-04T15:20:36.046654Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02874755859375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_stg_workshop_public__source_usages_source.c62568c099", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect source\nfrom \"dev\".\"staging\".\"stg_workshop_public__source_usages\"\nwhere source is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.036106Z", "completed_at": "2024-02-04T15:20:36.042653Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.047784Z", "completed_at": "2024-02-04T15:20:36.047797Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017342567443847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_stg_workshop_public__source_usages_id.4f5a07cd9d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"staging\".\"stg_workshop_public__source_usages\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.064725Z", "completed_at": "2024-02-04T15:20:36.076559Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.078866Z", "completed_at": "2024-02-04T15:20:36.078880Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.025710582733154297, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_pnc_surv", "compiled": true, "compiled_code": "with\n    survey_data as (\n        select distinct\n            s.name as survey_name,\n            to_date(replace(substring(s.name, charindex('(', s.name) + 1, 8), ')', ''), 'dd/mm/yy') as date,\n            ss.member_id,\n            q.question_text,\n            (\n                case\n                    when (lower(q.question_text) like '%which function%')\n                    then cc.value\n                    else regexp_replace(cc.value, '[^0-9]*', '')\n                end\n            ) as score,\n            tc.value free_text_value\n        from \"dev\".\"survey_services_public\".\"custom_surveys\" s\n        left join\n            \"dev\".\"survey_services_public\".\"custom_survey_submissions\" ss\n            on ss.custom_survey_id = s.id\n            and ss._fivetran_deleted = false\n        left join\n            \"dev\".\"survey_services_public\".\"answers\" a on ss.answer_id = a.id and a._fivetran_deleted = false\n        left join\n            \"dev\".\"survey_services_public\".\"answer_details\" ad\n            on a.id = ad.answer_id\n            and ad._fivetran_deleted = false\n        left join\n            \"dev\".\"survey_services_public\".\"single_choice_answer_contents\" cac\n            on ad.content_id = cac.id\n            and cac._fivetran_deleted = false\n        left join\n            \"dev\".\"survey_services_public\".\"choice_contents\" cc\n            on cc.id = cac.choice_content_id\n            and cc._fivetran_deleted = false\n        left join\n            \"dev\".\"survey_services_public\".\"text_answer_contents\" tc\n            on tc.id = ad.content_id\n            and tc._fivetran_deleted = false\n        left join\n            \"dev\".\"survey_services_public\".\"questions\" q\n            on ad.question_id = q.id\n            and q._fivetran_deleted = false\n        where\n            s.name like '%The EH Engagement & Enablement Survey%'\n            and s.organisation_id = '3cfd1633-4920-488d-be7e-985df4acfd1b'\n            and s._fivetran_deleted = false\n            and s.all_employees = true\n    )\nselect\n    ('n178a9hid-fjk89ad7hf-' || em.member_uuid || '-jy987ahjadf') as member_id,  -- need to keep it this way due to some manual identifications needed on the organisational structure, will change this to dbt hash later\n    em.if_active_employee,\n    em.tenure,\n    em.start_date,\n    em.termination_date,\n    em.gender,\n    em.work_country,\n    em.if_pass_probation,\n    em.manager_name,\n    em.path,\n    s.survey_name,\n    k.date survey_date,\n    s.question_text as question,\n    s.score,\n    s.free_text_value\nfrom \"dev\".\"tableau\".\"tableau_companydash_eh_members_managers\" em\ninner join\n    (select distinct date from survey_data) k\n    on em.start_date <= k.date\n    and (em.termination_date >= k.date or em.termination_date is null)\nleft join\n    survey_data s\n    on em.member_uuid = s.member_id\n    and k.date = s.date\n    and s.question_text not like '%Which function do you belong to%'\n    and s.question_text not like '%Who is your direct manager%'", "relation_name": "\"dev\".\"tableau\".\"tableau_companydash_pnc_surv\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.071016Z", "completed_at": "2024-02-04T15:20:36.081588Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.086587Z", "completed_at": "2024-02-04T15:20:36.086601Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028789758682250977, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_companydash_eh_members_managers_member_uuid.16ff647f67", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_uuid\nfrom \"dev\".\"tableau\".\"tableau_companydash_eh_members_managers\"\nwhere member_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.090839Z", "completed_at": "2024-02-04T15:20:36.105382Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.108113Z", "completed_at": "2024-02-04T15:20:36.108125Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02436685562133789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_companydash_eh_members_managers_member_uuid.2e54f6f009", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"tableau_companydash_eh_members_managers\"\nwhere member_uuid is not null\ngroup by member_uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.100287Z", "completed_at": "2024-02-04T15:20:36.113267Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.123504Z", "completed_at": "2024-02-04T15:20:36.123521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027312040328979492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_monthly_ats_jobs_posted_industry__industry_month_posted_country_is_test_job_is_remote_job_.494754c699", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (industry || month_posted || country || is_test_job || is_remote_job)\nfrom \"dev\".\"tableau\".\"monthly_ats_jobs_posted_industry\"\nwhere (industry || month_posted || country || is_test_job || is_remote_job) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.116607Z", "completed_at": "2024-02-04T15:20:36.127930Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:36.132824Z", "completed_at": "2024-02-04T15:20:36.132837Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03785252571105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_monthly_ats_jobs_posted_industry__industry_month_posted_country_is_test_job_is_remote_job_.7c73b5fb06", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (industry || month_posted || country || is_test_job || is_remote_job) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"monthly_ats_jobs_posted_industry\"\nwhere (industry || month_posted || country || is_test_job || is_remote_job) is not null\ngroup by (industry || month_posted || country || is_test_job || is_remote_job)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.162318Z", "completed_at": "2024-02-04T15:20:37.465742Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:37.468100Z", "completed_at": "2024-02-04T15:20:37.468116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3409647941589355, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__contact", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__contact_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    home_phone\n    \n as \n    \n    home_phone\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    individual_id\n    \n as \n    \n    individual_id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_activity_date\n    \n as \n    \n    last_activity_date\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    lead_source\n    \n as \n    \n    lead_source\n    \n, \n    \n    \n    mailing_city\n    \n as \n    \n    mailing_city\n    \n, \n    \n    \n    mailing_country\n    \n as \n    \n    mailing_country\n    \n, \n    cast(null as TEXT) as \n    \n    mailing_country_code\n    \n , \n    \n    \n    mailing_postal_code\n    \n as \n    \n    mailing_postal_code\n    \n, \n    \n    \n    mailing_state\n    \n as \n    \n    mailing_state\n    \n, \n    cast(null as TEXT) as \n    \n    mailing_state_code\n    \n , \n    \n    \n    mailing_street\n    \n as \n    \n    mailing_street\n    \n, \n    \n    \n    master_record_id\n    \n as \n    \n    master_record_id\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    reports_to_id\n    \n as \n    \n    reports_to_id\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n\n\n\n        \n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as contact_id,\n        account_id,\n        department,\n        description as contact_description,\n        email,\n        first_name,\n        home_phone,\n        individual_id,\n        is_deleted,\n        cast(last_activity_date as timestamp) as last_activity_date,\n        last_modified_by_id,\n        last_modified_date,\n        last_name,\n        last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        lead_source,\n        mailing_city,\n        mailing_country,\n        mailing_country_code,\n        mailing_postal_code,\n        mailing_state,\n        mailing_state_code,\n        mailing_street,\n        master_record_id,\n        mobile_phone,\n        name as contact_name,\n        owner_id,\n        phone,\n        reports_to_id,\n        title\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:36.134155Z", "completed_at": "2024-02-04T15:20:37.554753Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:37.557354Z", "completed_at": "2024-02-04T15:20:37.557373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4586689472198486, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__account", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__account_tmp\"\n), \n\nfields as (\n\n    select\n    \n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    account_source\n    \n as \n    \n    account_source\n    \n, \n    \n    \n    annual_revenue\n    \n as \n    \n    annual_revenue\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_state\n    \n as \n    \n    billing_state\n    \n, \n    cast(null as TEXT) as \n    \n    billing_state_code\n    \n , \n    \n    \n    billing_street\n    \n as \n    \n    billing_street\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    industry\n    \n as \n    \n    industry\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_activity_date\n    \n as \n    \n    last_activity_date\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    master_record_id\n    \n as \n    \n    master_record_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    number_of_employees\n    \n as \n    \n    number_of_employees\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    ownership\n    \n as \n    \n    ownership\n    \n, \n    \n    \n    parent_id\n    \n as \n    \n    parent_id\n    \n, \n    cast(null as TEXT) as \n    \n    rating\n    \n , \n    \n    \n    record_type_id\n    \n as \n    \n    record_type_id\n    \n, \n    \n    \n    shipping_city\n    \n as \n    \n    shipping_city\n    \n, \n    \n    \n    shipping_country\n    \n as \n    \n    shipping_country\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_country_code\n    \n , \n    \n    \n    shipping_postal_code\n    \n as \n    \n    shipping_postal_code\n    \n, \n    \n    \n    shipping_state\n    \n as \n    \n    shipping_state\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_state_code\n    \n , \n    \n    \n    shipping_street\n    \n as \n    \n    shipping_street\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n, \n    \n    \n    geo_code_c\n    \n as \n    \n    geo_code_c\n    \n\n\n\n\n    from base\n), \n\nfinal as (\n\n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        account_number,\n        account_source,\n        cast(annual_revenue as numeric(28,6)) as annual_revenue,\n        billing_city,\n        billing_country,\n        billing_postal_code,\n        billing_state,\n        billing_state_code,\n        billing_street,\n        description as account_description,\n        id as account_id,\n        industry,\n        is_deleted,\n        cast(last_activity_date as timestamp) as last_activity_date,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        master_record_id,\n        name as account_name,\n        number_of_employees,\n        owner_id,\n        ownership,\n        parent_id,\n        rating,\n        record_type_id,\n        shipping_city,\n        shipping_country,\n        shipping_country_code,\n        shipping_postal_code,\n        shipping_state,\n        shipping_state_code,\n        shipping_street,\n        type,\n        website\n        \n        \n\n\n    \n        \n            \n                , geo_code_c\n            \n        \n    \n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:35.629856Z", "completed_at": "2024-02-04T15:20:37.798175Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:37.800455Z", "completed_at": "2024-02-04T15:20:37.800470Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 2.2098453044891357, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_enrich_eh_users", "compiled": true, "compiled_code": "with users as (\n    select\n        \"id\",\n  \"uuid\",\n  \"email\",\n  \"has_acknowledged_eh_tnc\",\n  \"is_twofa_enabled\",\n  \"created_at\"\n\n    from \"dev\".\"staging\".\"stg_postgres_public__users\"\n),\n\nuser_infos as (\n    select\n        \"user_id\",\n  \"first_name\",\n  \"last_name\",\n  \"verified_at\",\n  \"activated_at\",\n  \"marketing_consented_at\",\n  \"is_profile_completed\",\n  \"is_public_profile\"\n\n    from \"dev\".\"staging\".\"stg_postgres_public__user_infos\"\n),\n\nmembers as (\n    select\n        \"id\",\n  \"uuid\",\n  \"external_payroll_employee_id\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"organisation_id\",\n  \"has_accepted_invitation\",\n  \"gender\",\n  \"birth_year\",\n  \"start_date\",\n  \"termination_date\",\n  \"is_active\",\n  \"work_country\",\n  \"user_id\",\n  \"role_id\",\n  \"created_at\",\n  \"fivetran_synced\"\n\n    from \"dev\".\"staging\".\"stg_postgres_public__members\"\n),\n\nebenefits_users as (\n    select ebenefits.eh_user_uuid\n\n    from \"dev\".\"staging\".\"stg_ebenefits__user_created\" as ebenefits\n\n    group by 1\n),\n\ncombined as (\n    select\n        users.id                                                                                                                                                                                 as eh_user_id,\n        users.uuid                                                                                                                                                                               as eh_user_uuid,\n        user_infos.first_name                                                                                                                                                                    as first_name,\n        user_infos.last_name                                                                                                                                                                     as last_name,\n        users.email                                                                                                                                                                              as email,\n        users.has_acknowledged_eh_tnc,\n        users.is_twofa_enabled,\n        user_infos.verified_at is not NULL                                                                                                                                                       as is_verified,\n        user_infos.verified_at,\n        user_infos.is_profile_completed,\n        user_infos.is_public_profile,\n        user_infos.activated_at is not NULL                                                                                                                                                      as is_active,\n        user_infos.activated_at,\n        user_infos.marketing_consented_at is not NULL                                                                                                                                            as is_marketing_consented,\n        user_infos.marketing_consented_at,\n        ebenefits_users.eh_user_uuid is not NULL                                                                                                                                                 as has_swag_profile,\n        users.created_at,\n        count(distinct case when members.is_active and (members.termination_date > current_date or members.termination_date is NULL) and members.organisation_id = 8701 then members.id end) > 0 as is_current_eh_employee,\n        count(distinct case when members.is_active and (members.termination_date > current_date or members.termination_date is NULL) then members.id end) > 0                                    as is_active_employee,\n        count(distinct case when members.is_active and (members.termination_date > current_date or members.termination_date is NULL) then members.id end)                                        as active_employee_count,\n        count(distinct case when not members.is_active and members.termination_date <= current_date then members.id end)                                                                         as terminated_employee_count\n\n    from users\n\n    left join user_infos\n        on users.id = user_infos.user_id\n\n    left join members\n        on users.id = members.user_id\n\n    left join ebenefits_users\n        on users.uuid = ebenefits_users.eh_user_uuid\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n)\n\nselect * from combined", "relation_name": "\"dev\".\"intermediate\".\"int_enrich_eh_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:37.503664Z", "completed_at": "2024-02-04T15:20:38.461333Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:38.463596Z", "completed_at": "2024-02-04T15:20:38.463611Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.9915173053741455, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__event", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__event_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    activity_date\n    \n as \n    \n    activity_date\n    \n, \n    \n    \n    activity_date_time\n    \n as \n    \n    activity_date_time\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    end_date_time\n    \n as \n    \n    end_date_time\n    \n, \n    \n    \n    event_subtype\n    \n as \n    \n    event_subtype\n    \n, \n    \n    \n    group_event_type\n    \n as \n    \n    group_event_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_archived\n    \n as \n    \n    is_archived\n    \n, \n    \n    \n    is_child\n    \n as \n    \n    is_child\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    is_group_event\n    \n as \n    \n    is_group_event\n    \n, \n    \n    \n    is_recurrence\n    \n as \n    \n    is_recurrence\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    start_date_time\n    \n as \n    \n    start_date_time\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    what_count\n    \n as \n    \n    what_count\n    \n, \n    \n    \n    what_id\n    \n as \n    \n    what_id\n    \n, \n    \n    \n    who_count\n    \n as \n    \n    who_count\n    \n, \n    \n    \n    who_id\n    \n as \n    \n    who_id\n    \n\n\n\n\n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as event_id,\n        account_id,\n        cast(activity_date as timestamp) as activity_date,\n        cast(activity_date_time as timestamp) as activity_date_time,\n        created_by_id,\n        cast(created_date as timestamp) as created_date,\n        description as event_description,\n        cast(end_date as timestamp) as end_date,\n        cast(end_date_time as timestamp) as end_date_time,\n        event_subtype,\n        group_event_type,\n        is_archived,\n        is_child,\n        is_deleted,\n        is_group_event,\n        is_recurrence,\n        last_modified_by_id,\n        cast(last_modified_date as timestamp) as last_modified_date,\n        location,\n        owner_id,\n        cast(start_date_time as timestamp) as start_date_time,\n        subject,\n        type,\n        what_count,\n        what_id,\n        who_count,\n        who_id\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:37.838519Z", "completed_at": "2024-02-04T15:20:38.736055Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:38.738316Z", "completed_at": "2024-02-04T15:20:38.738331Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9330909252166748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__opportunity_line_item", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__opportunity_line_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount\n    \n as \n    \n    discount\n    \n, \n    cast(null as boolean) as \n    \n    has_quantity_schedule\n    \n , \n    cast(null as boolean) as \n    \n    has_revenue_schedule\n    \n , \n    cast(null as boolean) as \n    \n    has_schedule\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    list_price\n    \n as \n    \n    list_price\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    opportunity_id\n    \n as \n    \n    opportunity_id\n    \n, \n    \n    \n    pricebook_entry_id\n    \n as \n    \n    pricebook_entry_id\n    \n, \n    \n    \n    product_2_id\n    \n as \n    \n    product_2_id\n    \n, \n    \n    \n    product_code\n    \n as \n    \n    product_code\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    service_date\n    \n as \n    \n    service_date\n    \n, \n    \n    \n    sort_order\n    \n as \n    \n    sort_order\n    \n, \n    \n    \n    total_price\n    \n as \n    \n    total_price\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n\n\n\n        \n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as opportunity_line_item_id,\n        created_by_id,\n        cast(created_date as timestamp) as created_date,\n        description as opportunity_line_item_description,\n        discount,\n        has_quantity_schedule,\n        has_revenue_schedule,\n        has_schedule,\n        is_deleted,\n        last_modified_by_id,\n        cast(last_modified_date as timestamp) as last_modified_date,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        list_price,\n        name as opportunity_line_item_name,\n        opportunity_id,\n        pricebook_entry_id,\n        product_2_id,\n        product_code,\n        quantity,\n        cast(service_date as timestamp) as service_date,\n        sort_order,\n        total_price,\n        unit_price\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__opportunity_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:37.593489Z", "completed_at": "2024-02-04T15:20:38.836238Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:38.838724Z", "completed_at": "2024-02-04T15:20:38.838740Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.283329963684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__lead", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__lead_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    annual_revenue\n    \n as \n    \n    annual_revenue\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    company\n    \n as \n    \n    company\n    \n, \n    \n    \n    converted_account_id\n    \n as \n    \n    converted_account_id\n    \n, \n    \n    \n    converted_contact_id\n    \n as \n    \n    converted_contact_id\n    \n, \n    \n    \n    converted_date\n    \n as \n    \n    converted_date\n    \n, \n    \n    \n    converted_opportunity_id\n    \n as \n    \n    converted_opportunity_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as TEXT) as \n    \n    country_code\n    \n , \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    email_bounced_date\n    \n as \n    \n    email_bounced_date\n    \n, \n    \n    \n    email_bounced_reason\n    \n as \n    \n    email_bounced_reason\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    has_opted_out_of_email\n    \n as \n    \n    has_opted_out_of_email\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    individual_id\n    \n as \n    \n    individual_id\n    \n, \n    \n    \n    industry\n    \n as \n    \n    industry\n    \n, \n    \n    \n    is_converted\n    \n as \n    \n    is_converted\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    is_unread_by_owner\n    \n as \n    \n    is_unread_by_owner\n    \n, \n    \n    \n    last_activity_date\n    \n as \n    \n    last_activity_date\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    lead_source\n    \n as \n    \n    lead_source\n    \n, \n    \n    \n    master_record_id\n    \n as \n    \n    master_record_id\n    \n, \n    \n    \n    mobile_phone\n    \n as \n    \n    mobile_phone\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    number_of_employees\n    \n as \n    \n    number_of_employees\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    cast(null as TEXT) as \n    \n    state_code\n    \n , \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    street\n    \n as \n    \n    street\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    website\n    \n as \n    \n    website\n    \n, \n    \n    \n    industry_primary_c\n    \n as \n    \n    industry_primary_c\n    \n, \n    \n    \n    industry_secondary_c\n    \n as \n    \n    industry_secondary_c\n    \n, \n    \n    \n    lost_reason_c\n    \n as \n    \n    lost_reason_c\n    \n, \n    \n    \n    lost_sub_reason_c\n    \n as \n    \n    lost_sub_reason_c\n    \n, \n    \n    \n    mql_score_c\n    \n as \n    \n    mql_score_c\n    \n, \n    cast(null as TEXT) as \n    \n    numer_of_employees\n    \n , \n    cast(null as TEXT) as \n    \n    requested_demo_date_time\n    \n , \n    cast(null as TEXT) as \n    \n    sal_date\n    \n , \n    \n    \n    sal_score_c\n    \n as \n    \n    sal_score_c\n    \n, \n    \n    \n    sql_score_c\n    \n as \n    \n    sql_score_c\n    \n\n\n\n        \n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as lead_id,\n        annual_revenue,\n        city,\n        company,\n        converted_account_id,\n        converted_contact_id,\n        cast(converted_date as timestamp) as converted_date,\n        converted_opportunity_id,\n        country,\n        country_code,\n        created_by_id,\n        cast(created_date as timestamp) as created_date,\n        description as lead_description,\n        email,\n        cast(email_bounced_date as timestamp) as email_bounced_date,\n        email_bounced_reason,\n        first_name,\n        has_opted_out_of_email,\n        individual_id,\n        industry,\n        is_converted,\n        is_deleted,\n        is_unread_by_owner,\n        cast(last_activity_date as timestamp) as last_activity_date,\n        last_modified_by_id,\n        cast(last_modified_date as timestamp) as last_modified_date,\n        last_name,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        lead_source,\n        master_record_id,\n        mobile_phone,\n        name as lead_name,\n        number_of_employees,\n        owner_id,\n        phone,\n        postal_code,\n        state,\n        state_code,\n        status,\n        street,\n        title,\n        website\n        \n        \n\n\n    \n        \n            \n                , industry_primary_c\n            \n        \n    \n        \n            \n                , industry_secondary_c\n            \n        \n    \n        \n            \n                , lost_reason_c\n            \n        \n    \n        \n            \n                , lost_sub_reason_c\n            \n        \n    \n        \n            \n                , mql_score_c\n            \n        \n    \n        \n            \n                , numer_of_employees\n            \n        \n    \n        \n            \n                , requested_demo_date_time\n            \n        \n    \n        \n            \n                , sal_date\n            \n        \n    \n        \n            \n                , sal_score_c\n            \n        \n    \n        \n            \n                , sql_score_c\n            \n        \n    \n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__lead\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:38.774231Z", "completed_at": "2024-02-04T15:20:39.791247Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:39.793558Z", "completed_at": "2024-02-04T15:20:39.793574Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0571510791778564, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__order", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    activated_by_id\n    \n as \n    \n    activated_by_id\n    \n, \n    \n    \n    activated_date\n    \n as \n    \n    activated_date\n    \n, \n    \n    \n    billing_city\n    \n as \n    \n    billing_city\n    \n, \n    \n    \n    billing_country\n    \n as \n    \n    billing_country\n    \n, \n    cast(null as TEXT) as \n    \n    billing_country_code\n    \n , \n    \n    \n    billing_postal_code\n    \n as \n    \n    billing_postal_code\n    \n, \n    \n    \n    billing_state\n    \n as \n    \n    billing_state\n    \n, \n    cast(null as TEXT) as \n    \n    billing_state_code\n    \n , \n    \n    \n    billing_street\n    \n as \n    \n    billing_street\n    \n, \n    \n    \n    contract_id\n    \n as \n    \n    contract_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    end_date\n    \n as \n    \n    end_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    cast(null as TEXT) as \n    \n    opportunity_id\n    \n , \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    original_order_id\n    \n as \n    \n    original_order_id\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    pricebook_2_id\n    \n as \n    \n    pricebook_2_id\n    \n, \n    \n    \n    shipping_city\n    \n as \n    \n    shipping_city\n    \n, \n    \n    \n    shipping_country\n    \n as \n    \n    shipping_country\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_country_code\n    \n , \n    \n    \n    shipping_postal_code\n    \n as \n    \n    shipping_postal_code\n    \n, \n    \n    \n    shipping_state\n    \n as \n    \n    shipping_state\n    \n, \n    cast(null as TEXT) as \n    \n    shipping_state_code\n    \n , \n    \n    \n    shipping_street\n    \n as \n    \n    shipping_street\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    total_amount\n    \n as \n    \n    total_amount\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n\n\n\n        \n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as order_id,\n        account_id,\n        activated_by_id,\n        cast(activated_date as timestamp) as activated_date,\n        billing_city,\n        billing_country,\n        billing_country_code,\n        billing_postal_code,\n        billing_state,\n        billing_state_code,\n        billing_street,\n        contract_id,\n        created_by_id,\n        created_date,\n        description as order_description,\n        cast(end_date as timestamp) as end_date,\n        is_deleted,\n        last_modified_by_id,\n        cast(last_modified_date as timestamp) as last_modified_date,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        opportunity_id,\n        order_number,\n        original_order_id,\n        owner_id,\n        pricebook_2_id,\n        shipping_city,\n        shipping_country,\n        shipping_country_code,\n        shipping_postal_code,\n        shipping_state,\n        shipping_state_code,\n        shipping_street,\n        status,\n        total_amount,\n        type\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__order\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:38.879189Z", "completed_at": "2024-02-04T15:20:39.877468Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:39.880228Z", "completed_at": "2024-02-04T15:20:39.880242Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.036383867263794, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__product_2", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__product_2_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    display_url\n    \n as \n    \n    display_url\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    family\n    \n as \n    \n    family\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_active\n    \n as \n    \n    is_active\n    \n, \n    \n    \n    is_archived\n    \n as \n    \n    is_archived\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    cast(null as integer) as \n    \n    number_of_quantity_installments\n    \n , \n    cast(null as integer) as \n    \n    number_of_revenue_installments\n    \n , \n    \n    \n    product_code\n    \n as \n    \n    product_code\n    \n, \n    cast(null as TEXT) as \n    \n    quantity_installment_period\n    \n , \n    cast(null as TEXT) as \n    \n    quantity_schedule_type\n    \n , \n    \n    \n    quantity_unit_of_measure\n    \n as \n    \n    quantity_unit_of_measure\n    \n, \n    cast(null as TEXT) as \n    \n    record_type_id\n    \n , \n    cast(null as TEXT) as \n    \n    revenue_installment_period\n    \n , \n    cast(null as TEXT) as \n    \n    revenue_schedule_type\n    \n \n\n\n        \n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as product_2_id,\n        created_by_id,\n        cast(created_date as timestamp) as created_date,\n        description as product_2_description,\n        display_url,\n        external_id,\n        family,\n        is_active,\n        is_archived,\n        is_deleted,\n        last_modified_by_id,\n        cast(last_modified_date as timestamp) as last_modified_date,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        name as product_2_name,\n        number_of_quantity_installments,\n        number_of_revenue_installments,\n        product_code,\n        quantity_installment_period,\n        quantity_schedule_type,\n        quantity_unit_of_measure,\n        record_type_id,\n        revenue_installment_period,\n        revenue_schedule_type\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__product_2\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:38.497955Z", "completed_at": "2024-02-04T15:20:40.625834Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:40.628083Z", "completed_at": "2024-02-04T15:20:40.628099Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 2.1627309322357178, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__opportunity", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__opportunity_tmp\"\n), \n\nfields as (\n\n    select\n\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    campaign_id\n    \n as \n    \n    campaign_id\n    \n, \n    \n    \n    close_date\n    \n as \n    \n    close_date\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    expected_revenue\n    \n as \n    \n    expected_revenue\n    \n, \n    \n    \n    fiscal\n    \n as \n    \n    fiscal\n    \n, \n    \n    \n    fiscal_quarter\n    \n as \n    \n    fiscal_quarter\n    \n, \n    \n    \n    fiscal_year\n    \n as \n    \n    fiscal_year\n    \n, \n    \n    \n    forecast_category\n    \n as \n    \n    forecast_category\n    \n, \n    \n    \n    forecast_category_name\n    \n as \n    \n    forecast_category_name\n    \n, \n    \n    \n    has_open_activity\n    \n as \n    \n    has_open_activity\n    \n, \n    \n    \n    has_opportunity_line_item\n    \n as \n    \n    has_opportunity_line_item\n    \n, \n    \n    \n    has_overdue_task\n    \n as \n    \n    has_overdue_task\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_closed\n    \n as \n    \n    is_closed\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    is_won\n    \n as \n    \n    is_won\n    \n, \n    \n    \n    last_activity_date\n    \n as \n    \n    last_activity_date\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    lead_source\n    \n as \n    \n    lead_source\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    next_step\n    \n as \n    \n    next_step\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    probability\n    \n as \n    \n    probability\n    \n, \n    \n    \n    record_type_id\n    \n as \n    \n    record_type_id\n    \n, \n    \n    \n    stage_name\n    \n as \n    \n    stage_name\n    \n, \n    \n    \n    synced_quote_id\n    \n as \n    \n    synced_quote_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    demo_sat_date_c\n    \n as demo_sat_date , \n    \n    \n    admin_opportunity_c\n    \n as \n    \n    admin_opportunity_c\n    \n, \n    cast(null as TEXT) as \n    \n    became_mql_date\n    \n , \n    \n    \n    existing_customer_revenue_type_c\n    \n as \n    \n    existing_customer_revenue_type_c\n    \n, \n    \n    \n    industry_c\n    \n as \n    \n    industry_c\n    \n, \n    \n    \n    lead_source_sub_type_c\n    \n as \n    \n    lead_source_sub_type_c\n    \n, \n    \n    \n    lead_source_type_c\n    \n as \n    \n    lead_source_type_c\n    \n, \n    \n    \n    lost_reason_c\n    \n as \n    \n    lost_reason_c\n    \n, \n    \n    \n    lost_sub_reason_c\n    \n as \n    \n    lost_sub_reason_c\n    \n, \n    \n    \n    opportunity_employees_c\n    \n as \n    \n    opportunity_employees_c\n    \n, \n    \n    \n    opportunity_originator_c\n    \n as \n    \n    opportunity_originator_c\n    \n, \n    \n    \n    originating_lead_id_c\n    \n as \n    \n    originating_lead_id_c\n    \n, \n    \n    \n    quote_arr_c\n    \n as \n    \n    quote_arr_c\n    \n, \n    \n    \n    quote_srr_c\n    \n as \n    \n    quote_srr_c\n    \n, \n    \n    \n    annual_recurring_revenue_c\n    \n as \n    \n    annual_recurring_revenue_c\n    \n\n\n\n\n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        account_id,\n        cast(amount as numeric(28,6)) as amount,\n        campaign_id,\n        cast(close_date as timestamp) as close_date,\n        cast(created_date as timestamp) as created_date,\n        description as opportunity_description,\n        cast(expected_revenue as numeric(28,6)) as expected_revenue,\n        fiscal,\n        fiscal_quarter,\n        fiscal_year,\n        forecast_category,\n        forecast_category_name,\n        has_open_activity,\n        has_opportunity_line_item,\n        has_overdue_task,\n        id as opportunity_id,\n        is_closed,\n        is_deleted,\n        is_won,\n        cast(last_activity_date as timestamp) as last_activity_date,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        lead_source,\n        name as opportunity_name,\n        next_step,\n        owner_id,\n        probability,\n        record_type_id,\n        stage_name,\n        synced_quote_id,\n        type\n        \n        \n\n\n    \n        \n            \n                , demo_sat_date\n            \n        \n    \n        \n            \n                , admin_opportunity_c\n            \n        \n    \n        \n            \n                , became_mql_date\n            \n        \n    \n        \n            \n                , existing_customer_revenue_type_c\n            \n        \n    \n        \n            \n                , industry_c\n            \n        \n    \n        \n            \n                , lead_source_sub_type_c\n            \n        \n    \n        \n            \n                , lead_source_type_c\n            \n        \n    \n        \n            \n                , lost_reason_c\n            \n        \n    \n        \n            \n                , lost_sub_reason_c\n            \n        \n    \n        \n            \n                , opportunity_employees_c\n            \n        \n    \n        \n            \n                , opportunity_originator_c\n            \n        \n    \n        \n            \n                , originating_lead_id_c\n            \n        \n    \n        \n            \n                , quote_arr_c\n            \n        \n    \n        \n            \n                , quote_srr_c\n            \n        \n    \n        \n            \n                , annual_recurring_revenue_c\n            \n        \n    \n\n\n\n\n    from fields\n), \n\ncalculated as (\n        \n    select \n        *,\n        created_date >= date_trunc('month', getdate()) as is_created_this_month,\n        created_date >= date_trunc('quarter', getdate()) as is_created_this_quarter,\n        datediff(\n        day,\n        getdate(),\n        created_date\n        ) as days_since_created,\n        datediff(\n        day,\n        close_date,\n        created_date\n        ) as days_to_close,\n        date_trunc('month', close_date) = date_trunc('month', getdate()) as is_closed_this_month,\n        date_trunc('quarter', close_date) = date_trunc('quarter', getdate()) as is_closed_this_quarter\n    from final\n)\n\nselect * \nfrom calculated\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__opportunity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:39.833934Z", "completed_at": "2024-02-04T15:20:40.930208Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:40.932612Z", "completed_at": "2024-02-04T15:20:40.932650Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.1337790489196777, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__task", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"salesforce\".\"stg_salesforce__task_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    activity_date\n    \n as \n    \n    activity_date\n    \n, \n    \n    \n    call_disposition\n    \n as \n    \n    call_disposition\n    \n, \n    \n    \n    call_duration_in_seconds\n    \n as \n    \n    call_duration_in_seconds\n    \n, \n    \n    \n    call_object\n    \n as \n    \n    call_object\n    \n, \n    \n    \n    call_type\n    \n as \n    \n    call_type\n    \n, \n    \n    \n    completed_date_time\n    \n as \n    \n    completed_date_time\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_archived\n    \n as \n    \n    is_archived\n    \n, \n    \n    \n    is_closed\n    \n as \n    \n    is_closed\n    \n, \n    \n    \n    is_deleted\n    \n as \n    \n    is_deleted\n    \n, \n    \n    \n    is_high_priority\n    \n as \n    \n    is_high_priority\n    \n, \n    \n    \n    last_modified_by_id\n    \n as \n    \n    last_modified_by_id\n    \n, \n    \n    \n    last_modified_date\n    \n as \n    \n    last_modified_date\n    \n, \n    \n    \n    owner_id\n    \n as \n    \n    owner_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    record_type_id\n    \n as \n    \n    record_type_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    task_subtype\n    \n as \n    \n    task_subtype\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    what_count\n    \n as \n    \n    what_count\n    \n, \n    \n    \n    what_id\n    \n as \n    \n    what_id\n    \n, \n    \n    \n    who_count\n    \n as \n    \n    who_count\n    \n, \n    \n    \n    who_id\n    \n as \n    \n    who_id\n    \n\n\n\n        \n    from base\n), \n\nfinal as (\n    \n    select \n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        id as task_id,\n        account_id,\n        cast(activity_date as timestamp) as activity_date,\n        call_disposition,\n        call_duration_in_seconds,\n        call_object,\n        call_type,\n        cast(completed_date_time as timestamp) as completed_date_time,\n        created_by_id,\n        cast(created_date as timestamp) as created_date,\n        description as task_description,\n        is_archived,\n        is_closed,\n        is_deleted,\n        is_high_priority,\n        last_modified_by_id,\n        cast(last_modified_date as timestamp) as last_modified_date,\n        owner_id,\n        priority,\n        record_type_id,\n        status,\n        subject,\n        task_subtype,\n        type,\n        what_count,\n        what_id,\n        who_count,\n        who_id\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final\nwhere not coalesce(is_deleted, false)", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__task\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:39.917952Z", "completed_at": "2024-02-04T15:20:40.947714Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:40.949937Z", "completed_at": "2024-02-04T15:20:40.949950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.085747480392456, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__user_role", "compiled": true, "compiled_code": "--To disable this model, set the using_user_role variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user_role_tmp\"\n), \n\nfields as (\n\n    select\n        \n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    developer_name\n    \n as \n    \n    developer_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    opportunity_access_for_account_owner\n    \n as \n    \n    opportunity_access_for_account_owner\n    \n, \n    \n    \n    parent_role_id\n    \n as \n    \n    parent_role_id\n    \n, \n    \n    \n    rollup_description\n    \n as \n    \n    rollup_description\n    \n\n\n\n\n    from base\n), \n\nfinal as (\n\n    select\n        _fivetran_deleted,\n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        developer_name,\n        id as user_role_id,\n        name as user_role_name,\n        opportunity_access_for_account_owner,\n        parent_role_id,\n        rollup_description\n        \n        \n\n\n\n\n        \n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__user_role\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:40.663155Z", "completed_at": "2024-02-04T15:20:41.381427Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:41.383630Z", "completed_at": "2024-02-04T15:20:41.383645Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.757321834564209, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce_source.stg_salesforce__user", "compiled": true, "compiled_code": "with base as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user_tmp\"\n), \n\nfields as (\n\n    select\n\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    alias\n    \n as \n    \n    alias\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    company_name\n    \n as \n    \n    company_name\n    \n, \n    \n    \n    contact_id\n    \n as \n    \n    contact_id\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    cast(null as TEXT) as \n    \n    country_code\n    \n , \n    \n    \n    department\n    \n as \n    \n    department\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    individual_id\n    \n as \n    \n    individual_id\n    \n, \n    \n    \n    is_active\n    \n as \n    \n    is_active\n    \n, \n    \n    \n    last_login_date\n    \n as \n    \n    last_login_date\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    last_referenced_date\n    \n as \n    \n    last_referenced_date\n    \n, \n    \n    \n    last_viewed_date\n    \n as \n    \n    last_viewed_date\n    \n, \n    \n    \n    manager_id\n    \n as \n    \n    manager_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n, \n    \n    \n    profile_id\n    \n as \n    \n    profile_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    cast(null as TEXT) as \n    \n    state_code\n    \n , \n    \n    \n    street\n    \n as \n    \n    street\n    \n, \n    \n    \n    title\n    \n as \n    \n    title\n    \n, \n    \n    \n    user_role_id\n    \n as \n    \n    user_role_id\n    \n, \n    \n    \n    user_type\n    \n as \n    \n    user_type\n    \n, \n    \n    \n    username\n    \n as \n    \n    username\n    \n, \n    cast(null as TEXT) as \n    \n    market\n    \n \n\n\n\n    from base\n), \n\nfinal as (\n    \n    select \n        _fivetran_deleted,\n        cast(_fivetran_synced as timestamp) as _fivetran_synced,\n        account_id,\n        alias,\n        city,\n        company_name,\n        contact_id,\n        country,\n        country_code,\n        department,\n        email,\n        first_name,\n        id as user_id,\n        individual_id,\n        is_active,\n        cast(last_login_date as timestamp) as last_login_date,\n        last_name,\n        cast(last_referenced_date as timestamp) as last_referenced_date,\n        cast(last_viewed_date as timestamp) as last_viewed_date,\n        manager_id,\n        name as user_name,\n        postal_code,\n        profile_id,\n        state,\n        state_code,\n        street,\n        title,\n        user_role_id,\n        user_type,\n        username \n        \n        \n\n\n    \n        \n            \n                , market\n            \n        \n    \n\n\n\n    \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"salesforce\".\"stg_salesforce__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:40.970422Z", "completed_at": "2024-02-04T15:20:42.081411Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:42.119615Z", "completed_at": "2024-02-04T15:20:42.119635Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2882091999053955, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__brand", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__brand_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    brand_url\n    \n as \n    \n    brand_url\n    \n, \n    \n    \n    has_help_center\n    \n as \n    \n    has_help_center\n    \n, \n    \n    \n    help_center_state\n    \n as \n    \n    help_center_state\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    logo_content_type\n    \n as \n    \n    logo_content_type\n    \n, \n    \n    \n    logo_content_url\n    \n as \n    \n    logo_content_url\n    \n, \n    \n    \n    logo_deleted\n    \n as \n    \n    logo_deleted\n    \n, \n    \n    \n    logo_file_name\n    \n as \n    \n    logo_file_name\n    \n, \n    \n    \n    logo_height\n    \n as \n    \n    logo_height\n    \n, \n    \n    \n    logo_id\n    \n as \n    \n    logo_id\n    \n, \n    \n    \n    logo_inline\n    \n as \n    \n    logo_inline\n    \n, \n    \n    \n    logo_mapped_content_url\n    \n as \n    \n    logo_mapped_content_url\n    \n, \n    \n    \n    logo_size\n    \n as \n    \n    logo_size\n    \n, \n    \n    \n    logo_url\n    \n as \n    \n    logo_url\n    \n, \n    \n    \n    logo_width\n    \n as \n    \n    logo_width\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    subdomain\n    \n as \n    \n    subdomain\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as brand_id,\n        brand_url,\n        name,\n        subdomain,\n        active as is_active\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__brand\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:41.423215Z", "completed_at": "2024-02-04T15:20:42.230204Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:42.343933Z", "completed_at": "2024-02-04T15:20:42.343956Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.1789195537567139, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__domain_name", "compiled": true, "compiled_code": "--To disable this model, set the using_domain_names variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__domain_name_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    domain_name\n    \n as \n    \n    domain_name\n    \n, \n    \n    \n    index\n    \n as \n    \n    index\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        domain_name,\n        index\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__domain_name\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:41.006543Z", "completed_at": "2024-02-04T15:20:42.240383Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:42.369334Z", "completed_at": "2024-02-04T15:20:42.369351Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.6305160522460938, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__daylight_time", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__daylight_time_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    daylight_end_utc\n    \n as \n    \n    daylight_end_utc\n    \n, \n    \n    \n    daylight_offset\n    \n as \n    \n    daylight_offset\n    \n, \n    \n    \n    daylight_start_utc\n    \n as \n    \n    daylight_start_utc\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    year\n    \n as \n    \n    year\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        daylight_end_utc,\n        daylight_offset,\n        daylight_start_utc,\n        time_zone,\n        year,\n        daylight_offset * 60 as daylight_offset_minutes\n        \n    from fields\n)\n\nselect * from final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__daylight_time\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:42.517389Z", "completed_at": "2024-02-04T15:20:43.597180Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:43.635702Z", "completed_at": "2024-02-04T15:20:43.635724Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3465049266815186, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__group", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__group_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as group_id,\n        name\n    from fields\n    \n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:42.829477Z", "completed_at": "2024-02-04T15:20:43.894375Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:43.954816Z", "completed_at": "2024-02-04T15:20:43.954837Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.470414638519287, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__organization_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    shared_comments\n    \n as \n    \n    shared_comments\n    \n, \n    \n    \n    shared_tickets\n    \n as \n    \n    shared_tickets\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as organization_id,\n        created_at,\n        updated_at,\n        details,\n        name,\n        external_id\n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__organization\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:42.855932Z", "completed_at": "2024-02-04T15:20:44.068863Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:44.114078Z", "completed_at": "2024-02-04T15:20:44.114096Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.4594216346740723, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__organization_tag", "compiled": true, "compiled_code": "--To disable this model, set the using_organization_tags variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__organization_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n        \n            \n            \"tag\"\n            \n        \n    \n as \n    \n        \n            \n            \"tag\"\n            \n        \n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        organization_id,\n        \n        'tag'\n        \n        as tags\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__organization_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:43.799034Z", "completed_at": "2024-02-04T15:20:44.976175Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:45.009619Z", "completed_at": "2024-02-04T15:20:45.009638Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.3543548583984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule_holiday", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__schedule_holiday_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    cast(null as TEXT) as \n    \n    end_date\n    \n , \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    cast(null as TEXT) as \n    \n    name\n    \n , \n    \n    \n    schedule_id\n    \n as \n    \n    schedule_id\n    \n, \n    cast(null as TEXT) as \n    \n    start_date\n    \n \n\n\n    from base\n),\n\nfinal as (\n    \n    select\n        _fivetran_deleted,\n        cast(_fivetran_synced as timestamp ) as _fivetran_synced,\n        cast(end_date as timestamp ) as holiday_end_date_at,\n        cast(id as TEXT ) as holiday_id,\n        name as holiday_name,\n        cast(schedule_id as TEXT ) as schedule_id,\n        cast(start_date as timestamp ) as holiday_start_date_at\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__schedule_holiday\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:44.291671Z", "completed_at": "2024-02-04T15:20:45.344765Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:45.422714Z", "completed_at": "2024-02-04T15:20:45.422736Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.3567066192626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__schedule", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__schedule_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    end_time\n    \n as \n    \n    end_time\n    \n, \n    \n    \n    end_time_utc\n    \n as \n    \n    end_time_utc\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    start_time\n    \n as \n    \n    start_time\n    \n, \n    \n    \n    start_time_utc\n    \n as \n    \n    start_time_utc\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        cast(id as TEXT) as schedule_id, --need to convert from numeric to string for downstream models to work properly\n        end_time,\n        start_time,\n        name as schedule_name,\n        created_at,\n        time_zone\n        \n    from fields\n    where not coalesce(_fivetran_deleted, false)\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:44.387305Z", "completed_at": "2024-02-04T15:20:45.474844Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:45.507529Z", "completed_at": "2024-02-04T15:20:45.507547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3153162002563477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_comment", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_comment_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    body\n    \n as \n    \n    body\n    \n, \n    \n    \n    call_duration\n    \n as \n    \n    call_duration\n    \n, \n    \n    \n    call_id\n    \n as \n    \n    call_id\n    \n, \n    \n    \n    created\n    \n as \n    \n    created\n    \n, \n    \n    \n    facebook_comment\n    \n as \n    \n    facebook_comment\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    location\n    \n as \n    \n    location\n    \n, \n    \n    \n    public\n    \n as \n    \n    public\n    \n, \n    \n    \n    recording_url\n    \n as \n    \n    recording_url\n    \n, \n    \n    \n    started_at\n    \n as \n    \n    started_at\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    transcription_status\n    \n as \n    \n    transcription_status\n    \n, \n    \n    \n    transcription_text\n    \n as \n    \n    transcription_text\n    \n, \n    \n    \n    trusted\n    \n as \n    \n    trusted\n    \n, \n    \n    \n    tweet\n    \n as \n    \n    tweet\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    voice_comment\n    \n as \n    \n    voice_comment\n    \n, \n    \n    \n    voice_comment_transcription_visible\n    \n as \n    \n    voice_comment_transcription_visible\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_comment_id,\n        _fivetran_synced,\n        body,\n        cast(created as timestamp without time zone) as created_at,\n        \n        public as is_public,\n        ticket_id,\n        user_id,\n        facebook_comment as is_facebook_comment,\n        tweet as is_tweet,\n        voice_comment as is_voice_comment\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_comment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:45.180674Z", "completed_at": "2024-02-04T15:20:46.234931Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:46.258505Z", "completed_at": "2024-02-04T15:20:46.258526Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.264159917831421, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_field_history", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_field_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    field_name\n    \n as \n    \n    field_name\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n    updated\n    \n as \n    \n    updated\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n    value\n    \n as \n    \n    value\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        field_name,\n        cast(updated as timestamp without time zone) as valid_starting_at,\n            cast(lead(updated) over (partition by ticket_id, field_name order by updated) as timestamp without time zone) as valid_ending_at,\n        \n        value,\n        user_id\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:45.871508Z", "completed_at": "2024-02-04T15:20:46.939143Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:46.961990Z", "completed_at": "2024-02-04T15:20:46.962009Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3580784797668457, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_form_history", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_form_history_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_deleted\n    \n as \n    \n    _fivetran_deleted\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    display_name\n    \n as \n    \n    display_name\n    \n, \n    \n    \n    end_user_visible\n    \n as \n    \n    end_user_visible\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_form_id,\n        cast(created_at as timestamp without time zone) as created_at,\n            cast(updated_at as timestamp without time zone) as updated_at,\n        \n        display_name,\n        active as is_active,\n        name\n    from fields\n    where not coalesce(_fivetran_deleted, false)\n    \n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_form_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:45.799742Z", "completed_at": "2024-02-04T15:20:46.973459Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:47.056374Z", "completed_at": "2024-02-04T15:20:47.056400Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.5232608318328857, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_schedule", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_schedule_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    schedule_id\n    \n as \n    \n    schedule_id\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        cast(created_at as timestamp without time zone) as created_at,\n        \n        cast(schedule_id as TEXT) as schedule_id --need to convert from numeric to string for downstream models to work properly\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_schedule\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:46.538543Z", "completed_at": "2024-02-04T15:20:47.374715Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:47.515832Z", "completed_at": "2024-02-04T15:20:47.515854Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.2617204189300537, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket_tag", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    ticket_id\n    \n as \n    \n    ticket_id\n    \n, \n    \n    \n        \n            \n            \"tag\"\n            \n        \n    \n as \n    \n        \n            \n            \"tag\"\n            \n        \n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        ticket_id,\n        \n        \"tag\" as tags\n        \n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:47.281726Z", "completed_at": "2024-02-04T15:20:48.813574Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:48.892900Z", "completed_at": "2024-02-04T15:20:48.892921Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.8554918766021729, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user_tag", "compiled": true, "compiled_code": "--To disable this model, set the using_user_tags variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__user_tag_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    user_id\n    \n as \n    \n    user_id\n    \n, \n    \n    \n        \n            \n            \"tag\"\n            \n        \n    \n as \n    \n        \n            \n            \"tag\"\n            \n        \n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        user_id,\n        \n        'tag'\n        \n        as tags\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__user_tag\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:47.386170Z", "completed_at": "2024-02-04T15:20:48.830218Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:48.918309Z", "completed_at": "2024-02-04T15:20:48.918326Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 1.8577449321746826, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__time_zone", "compiled": true, "compiled_code": "--To disable this model, set the using_schedules variable within your dbt_project.yml file to False.\n\n\nwith base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__time_zone_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    standard_offset\n    \n as \n    \n    standard_offset\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        standard_offset,\n        time_zone,\n        -- the standard_offset is a string written as [+/-]HH:MM\n        -- let's convert it to an integer value of minutes\n        cast( \n\n  \n    \n\n    split_part(\n        standard_offset,\n        ':',\n        1\n        )\n\n\n  \n\n as integer ) * 60 +\n            (cast( \n\n  \n    \n\n    split_part(\n        standard_offset,\n        ':',\n        2\n        )\n\n\n  \n\n as integer ) *\n                (case when standard_offset like '-%' then -1 else 1 end) ) as standard_offset_minutes\n    \n    from fields\n)\n\nselect * from final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__time_zone\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:49.383093Z", "completed_at": "2024-02-04T15:20:49.506840Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:49.566801Z", "completed_at": "2024-02-04T15:20:49.566822Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4118926525115967, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_daily_members_date.1fc49996d7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"mp\".\"daily_members\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:47.845255Z", "completed_at": "2024-02-04T15:20:49.197333Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:49.352582Z", "completed_at": "2024-02-04T15:20:49.352600Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.853844404220581, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__ticket", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    allow_channelback\n    \n as \n    \n    allow_channelback\n    \n, \n    \n    \n    assignee_id\n    \n as \n    \n    assignee_id\n    \n, \n    \n    \n    brand_id\n    \n as \n    \n    brand_id\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    due_at\n    \n as \n    \n    due_at\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    forum_topic_id\n    \n as \n    \n    forum_topic_id\n    \n, \n    \n    \n    group_id\n    \n as \n    \n    group_id\n    \n, \n    \n    \n    has_incidents\n    \n as \n    \n    has_incidents\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    is_public\n    \n as \n    \n    is_public\n    \n, \n    \n    \n    merged_ticket_ids\n    \n as \n    \n    merged_ticket_ids\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    priority\n    \n as \n    \n    priority\n    \n, \n    \n    \n    problem_id\n    \n as \n    \n    problem_id\n    \n, \n    \n    \n    recipient\n    \n as \n    \n    recipient\n    \n, \n    \n    \n    requester_id\n    \n as \n    \n    requester_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subject\n    \n as \n    \n    subject\n    \n, \n    \n    \n    submitter_id\n    \n as \n    \n    submitter_id\n    \n, \n    \n    \n    system_ccs\n    \n as \n    \n    system_ccs\n    \n, \n    \n    \n    system_client\n    \n as \n    \n    system_client\n    \n, \n    \n    \n    system_ip_address\n    \n as \n    \n    system_ip_address\n    \n, \n    \n    \n    system_json_email_identifier\n    \n as \n    \n    system_json_email_identifier\n    \n, \n    \n    \n    system_latitude\n    \n as \n    \n    system_latitude\n    \n, \n    \n    \n    system_location\n    \n as \n    \n    system_location\n    \n, \n    \n    \n    system_longitude\n    \n as \n    \n    system_longitude\n    \n, \n    \n    \n    system_machine_generated\n    \n as \n    \n    system_machine_generated\n    \n, \n    \n    \n    system_message_id\n    \n as \n    \n    system_message_id\n    \n, \n    \n    \n    system_raw_email_identifier\n    \n as \n    \n    system_raw_email_identifier\n    \n, \n    \n    \n    ticket_form_id\n    \n as \n    \n    ticket_form_id\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    via_channel\n    \n as \n    \n    via_channel\n    \n, \n    \n    \n    via_source_from_address\n    \n as \n    \n    via_source_from_address\n    \n, \n    \n    \n    via_source_from_id\n    \n as \n    \n    via_source_from_id\n    \n, \n    \n    \n    via_source_from_title\n    \n as \n    \n    via_source_from_title\n    \n, \n    \n    \n    via_source_rel\n    \n as \n    \n    via_source_rel\n    \n, \n    \n    \n    via_source_to_address\n    \n as \n    \n    via_source_to_address\n    \n, \n    \n    \n    via_source_to_name\n    \n as \n    \n    via_source_to_name\n    \n\n\n\n\n        --The below script allows for pass through columns.\n        \n        \n    from base\n),\n\nfinal as (\n    \n    select \n        id as ticket_id,\n        _fivetran_synced,\n        assignee_id,\n        brand_id,\n        cast(created_at as timestamp without time zone) as created_at,\n            cast(updated_at as timestamp without time zone) as updated_at,\n        \n        description,\n        due_at,\n        group_id,\n        external_id,\n        is_public,\n        organization_id,\n        priority,\n        recipient,\n        requester_id,\n        status,\n        subject,\n        problem_id,\n        submitter_id,\n        ticket_form_id,\n        type,\n        url,\n        via_channel as created_channel,\n        via_source_from_id as source_from_id,\n        via_source_from_title as source_from_title,\n        via_source_rel as source_rel,\n        via_source_to_address as source_to_address,\n        via_source_to_name as source_to_name\n\n        --The below script allows for pass through columns.\n        \n\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__ticket\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:49.806015Z", "completed_at": "2024-02-04T15:20:49.896421Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:49.989850Z", "completed_at": "2024-02-04T15:20:49.989871Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.36388731002807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_benefits_pillar_blacklist_users_user_id.bd5d652463", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:49.834907Z", "completed_at": "2024-02-04T15:20:49.943717Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:50.081870Z", "completed_at": "2024-02-04T15:20:50.081890Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4004945755004883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_benefits_pillar_blacklist_users_user_id.513dd3d5ad", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_users\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:50.236335Z", "completed_at": "2024-02-04T15:20:50.314335Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:50.361728Z", "completed_at": "2024-02-04T15:20:50.361749Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.2352895736694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_money_pillar_on_off_users", "compiled": true, "compiled_code": "\n\nwith\n-- only checking user_infos, not member country  \nau_users as (\n    select u.id as user_id         \n        , case when sum(case when upper(ui.country_code) in ('AU', 'AUS') then 1 else 0 end) > 0 then true else false end as is_au\n    from \"dev\".\"postgres_public\".\"users\" u\n    join \"dev\".\"postgres_public\".\"user_infos\" ui on u.id = ui.user_id\n    where not u._fivetran_deleted\n        and not ui._fivetran_deleted\n    group by 1\n)\n\nselect u.id as user_id     \n    , case when bl.user_id is not null then false    -- blacklisted \n        when au.is_au is null then null         -- not picked country\n        when au.is_au and (bl.user_id is null) then true    -- country picker: AU, and not blacklisted\n        end as money_enabled\nfrom \"dev\".\"postgres_public\".\"users\" u\nleft join \"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_users\" bl on bl.user_id = u.id \nleft join au_users au on u.id = au.user_id\nwhere not u._fivetran_deleted\nand (au.user_id is not null or bl.user_id is not null)", "relation_name": "\"dev\".\"ebenefits\".\"_v_money_pillar_on_off_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:50.302880Z", "completed_at": "2024-02-04T15:20:50.368022Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:50.477096Z", "completed_at": "2024-02-04T15:20:50.477117Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3194141387939453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_money_pillar_blacklist_users_user_id.4e44552f4f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:49.315535Z", "completed_at": "2024-02-04T15:20:50.533385Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:50.650192Z", "completed_at": "2024-02-04T15:20:50.650211Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.7091941833496094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk_source.stg_zendesk__user", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__user_tmp\"\n\n),\n\nfields as (\n\n    select\n        /*\n        The below macro is used to generate the correct SQL for package staging models. It takes a list of columns \n        that are expected/needed (staging_columns from dbt_zendesk_source/models/tmp/) and compares it with columns \n        in the source (source_columns from dbt_zendesk_source/macros/).\n        For more information refer to our dbt_fivetran_utils documentation (https://github.com/fivetran/dbt_fivetran_utils.git).\n        */\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    alias\n    \n as \n    \n    alias\n    \n, \n    \n    \n    authenticity_token\n    \n as \n    \n    authenticity_token\n    \n, \n    \n    \n    chat_only\n    \n as \n    \n    chat_only\n    \n, \n    \n    \n    created_at\n    \n as \n    \n    created_at\n    \n, \n    \n    \n    details\n    \n as \n    \n    details\n    \n, \n    \n    \n    email\n    \n as \n    \n    email\n    \n, \n    \n    \n    external_id\n    \n as \n    \n    external_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_login_at\n    \n as \n    \n    last_login_at\n    \n, \n    \n    \n    locale\n    \n as \n    \n    locale\n    \n, \n    \n    \n    locale_id\n    \n as \n    \n    locale_id\n    \n, \n    \n    \n    moderator\n    \n as \n    \n    moderator\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    only_private_comments\n    \n as \n    \n    only_private_comments\n    \n, \n    \n    \n    organization_id\n    \n as \n    \n    organization_id\n    \n, \n    \n    \n    phone\n    \n as \n    \n    phone\n    \n, \n    \n    \n    remote_photo_url\n    \n as \n    \n    remote_photo_url\n    \n, \n    \n    \n    restricted_agent\n    \n as \n    \n    restricted_agent\n    \n, \n    \n    \n    role\n    \n as \n    \n    role\n    \n, \n    \n    \n    shared\n    \n as \n    \n    shared\n    \n, \n    \n    \n    shared_agent\n    \n as \n    \n    shared_agent\n    \n, \n    \n    \n    signature\n    \n as \n    \n    signature\n    \n, \n    \n    \n    suspended\n    \n as \n    \n    suspended\n    \n, \n    \n    \n    ticket_restriction\n    \n as \n    \n    ticket_restriction\n    \n, \n    \n    \n    time_zone\n    \n as \n    \n    time_zone\n    \n, \n    \n    \n    two_factor_auth_enabled\n    \n as \n    \n    two_factor_auth_enabled\n    \n, \n    \n    \n    updated_at\n    \n as \n    \n    updated_at\n    \n, \n    \n    \n    url\n    \n as \n    \n    url\n    \n, \n    \n    \n    verified\n    \n as \n    \n    verified\n    \n\n\n\n        \n    from base\n),\n\nfinal as ( \n    \n    select \n        id as user_id,\n        external_id,\n        _fivetran_synced,\n        cast(last_login_at as timestamp without time zone) as last_login_at,\n            cast(created_at as timestamp without time zone) as created_at,\n            cast(updated_at as timestamp without time zone) as updated_at,\n        email,\n        name,\n        organization_id,\n        role,\n        ticket_restriction,\n        time_zone,\n        locale,\n        active as is_active,\n        suspended as is_suspended\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"stg_zendesk__user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:50.628431Z", "completed_at": "2024-02-04T15:20:50.731940Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:50.860031Z", "completed_at": "2024-02-04T15:20:50.860052Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4262521266937256, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_money_pillar_blacklist_users_user_id.9f278ea229", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_money_pillar_blacklist_users\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:50.824478Z", "completed_at": "2024-02-04T15:20:50.935476Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:51.060306Z", "completed_at": "2024-02-04T15:20:51.060349Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.45143818855285645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_swag_store_on_off_users_user_id.fa0cf7b49f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"ebenefits\".\"_v_swag_store_on_off_users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:51.146849Z", "completed_at": "2024-02-04T15:20:51.224600Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:51.358652Z", "completed_at": "2024-02-04T15:20:51.358673Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.42797064781188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_swag_store_on_off_users_user_id.f56b193322", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_swag_store_on_off_users\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:51.163295Z", "completed_at": "2024-02-04T15:20:51.270674Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:51.384111Z", "completed_at": "2024-02-04T15:20:51.384133Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.42775416374206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customers_users_user_uuid.0b57bdd479", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"customers\".\"users\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:51.338279Z", "completed_at": "2024-02-04T15:20:51.435288Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:51.543637Z", "completed_at": "2024-02-04T15:20:51.543654Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4018406867980957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customers_users__user_uuid_account_list_.ddd4258724", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (user_uuid || account_list ) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customers\".\"users\"\nwhere (user_uuid || account_list ) is not null\ngroup by (user_uuid || account_list )\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:51.707701Z", "completed_at": "2024-02-04T15:20:51.790287Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:51.917888Z", "completed_at": "2024-02-04T15:20:51.917908Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4119412899017334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_v_ei_organisations_organisation_id.7b9a744fcb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"employment_hero\".\"_v_ei_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:51.733134Z", "completed_at": "2024-02-04T15:20:51.820835Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:51.958885Z", "completed_at": "2024-02-04T15:20:51.958907Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.41190528869628906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_v_ei_organisations_organisation_id.a089661010", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"_v_ei_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:51.856394Z", "completed_at": "2024-02-04T15:20:51.969029Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:52.098762Z", "completed_at": "2024-02-04T15:20:52.098782Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4163229465484619, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_organisations", "compiled": true, "compiled_code": "\n\nwith \n  stage_churn as (\n  -- view with churn account details, ie.is_churn=0 means account churned\n  select\n    za.id     \n    , count(\n      case\n        when(\n          zs.status = 'Active'\n          or zs.status = 'Suspended'\n        )\n         then 1\n        else null\n      end\n    ) as is_churn\n  from\n    \"dev\".\"zuora\".\"account\" za \n    inner join \"dev\".\"zuora\".\"subscription\" zs on zs.account_id = za.id\n    left join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on zs.id = zrpc.subscription_id\n    left join \"dev\".\"zuora\".\"product_rate_plan\" zprp on zrpc.product_rate_plan_id = zprp.id\n    left join \"dev\".\"zuora\".\"product\" zp on zprp.product_id = zp.id\n  where\n    not za._fivetran_deleted\n    and not zs._fivetran_deleted\n    and not zp._fivetran_deleted\n    and not zprp._fivetran_deleted\n    and not zrpc._fivetran_deleted\n    --and zp.name ilike '%hr software%'\n  group by 1\n)\n, org_creators as (\n  select\n      organisation_id\n      , member_id\n      , user_email\n    from\n      (\n        select\n        m.organisation_id\n        , m.id as member_id\n        , u.email as user_email\n        , row_number() over (partition by m.organisation_id order by m.created_at) as rn\n        from\n          \"dev\".\"postgres_public\".\"members\" as m\n        join \"dev\".\"postgres_public\".\"users\" as u on\n          m.user_id = u.id\n        where\n          not m._fivetran_deleted        \n          and not u._fivetran_deleted\n          and not m.is_shadow_data\n          and not u.is_shadow_data\n        )\n    where rn = 1\n)\n, churn_date_field as (\n    -- view with churn account date\n    select\n      scn.id\n      --, sa.churn_date_c, sa.downgrade_to_churn_date_c, zs.subscription_end_date, zs.cancelled_date, zs.term_end_date, sa.churn_request_date_c      \n      , max(coalesce(zs.cancelled_date, zs.subscription_end_date, zs.term_end_date)) as churn_date \n    from\n      stage_churn as scn            \n      inner join \"dev\".\"zuora\".\"subscription\" zs on\n        zs.account_id = scn.id\n    left join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on zs.id = zrpc.subscription_id\n    left join \"dev\".\"zuora\".\"product_rate_plan\" zprp on zrpc.product_rate_plan_id = zprp.id\n    left join \"dev\".\"zuora\".\"product\" zp on zprp.product_id = zp.id\n      inner join  (\n        -- get the last version of a subscription\n        select s.account_id\n      , s.name as sub_name\n      , max(s.version) as version\n    from\n      \"dev\".\"zuora\".\"subscription\" s\n      join \"dev\".\"zuora\".\"account\" a on\n        s.account_id = a.id\n    where\n      not a._fivetran_deleted\n      and not s._fivetran_deleted   \n    group by\n      1,2\n    )cs on cs.sub_name = zs.name and zs.account_id = cs.account_id and cs.version = zs.version    \n    where\n      scn.is_churn = 0      \n      and not zs._fivetran_deleted    \n        and not zrpc._fivetran_deleted\n        and not zprp._fivetran_deleted\n        and not zp._fivetran_deleted\n        --and zp.name ilike '%hr software%'\n    group by 1\n  )  \n\nselect \n  o.*,\n--   addresses.country,\n--   addresses.state,\n--   addresses.city as suburb,\n--   addresses.postcode,\n  i.\"title\" as industry,\n  trim('Auth' from p.type) as payroll_type, \n  p.connected_app, \n  s.id as sub_id, \n  s.name as sub_name, \n  s.yin_yang,\n  s.pricing_type,\n  s.pricing_tier,\n  s.pricing_hierarchy,\n  sa.account_id\n  , case when sc.id is not null and za.batch is not null and za.batch != 'Batch50' and (sc.is_churn > 0 or getdate() < cdf.churn_date or cdf.churn_date is null) and s.pricing_tier not ilike '%free%' then true    \n    --when o.id in (select host_organisation_id from \"dev\".\"employment_hero\".\"_v_gt_active_organisations\") then true \n    else false end as is_paying_eh\n  , coalesce(cdf.churn_date, case when a.subscription_plan_id = 43 and not a.cancelled then a.created_at end) as churn_date,\n  oc.member_id as creator_member_id,\n  oc.user_email as creator_email\nfrom \n  \"dev\".\"postgres_public\".\"organisations\" as o\n  left join \n    (\n    select \n      *\n    from \"dev\".\"postgres_public\".\"agreements\"\n    where id in \n      (\n      select\n        FIRST_VALUE(id) over (partition by organisation_id order by created_at desc rows between unbounded preceding and current row)\n      from\n        \"dev\".\"postgres_public\".\"agreements\"\n      where\n        not cancelled\n      )\n    ) as a on o.id = a.organisation_id\n  left join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s\n    on a.subscription_plan_id = s.id\n  left join \"dev\".\"employment_hero\".\"_v_last_connected_payroll\" as p\n    on o.id = p.organisation_id\n  left join \"dev\".\"postgres_public\".\"industry_categories\" as i\n    on o.industry_category_id = i.id\n      and not i._fivetran_deleted\n  left join \"dev\".\"postgres_public\".\"salesforce_accounts\" as sa\n    on o.id = sa.organisation_id\n      and not sa._fivetran_deleted\n  left join \"dev\".\"zuora\".\"account\" za on o.zuora_account_id = za.id and not za._fivetran_deleted   \n  left join stage_churn sc on sc.id = za.id\n  left join churn_date_field cdf on cdf.id = za.id\n  left join org_creators oc on o.id = oc.organisation_id\nwhere \n  not o._fivetran_deleted\n  and not o.is_shadow_data", "relation_name": "\"dev\".\"employment_hero\".\"organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:52.262035Z", "completed_at": "2024-02-04T15:20:52.357173Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:52.466332Z", "completed_at": "2024-02-04T15:20:52.466354Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40489768981933594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_cx_metrics", "compiled": true, "compiled_code": "-- establish dates\nwith\n    dates as (\n        select distinct cast(dateadd('day', - generated_number::int, current_date) as date) as \"date\"\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 761\n    order by generated_number\n\n)\n    ),\n    ces as (\n        select distinct\n            r.response_date::date as date,\n            (\n                case\n                    when r.country in ('Australia', 'Singapore', 'United Kingdom', 'Malaysia', 'New Zealand')\n                    then r.country\n                    else 'untracked'\n                end\n            ) as country,\n            count(case when lower(mo.product_family) like '%talent%' then average_score end) as talent_total_count,\n            sum(case when lower(mo.product_family) like '%talent%' then average_score end) as talent_total_score,\n            count(case when lower(mo.product_family) like '%eben%' then average_score end) as eben_total_count,\n            sum(case when lower(mo.product_family) like '%eben%' then average_score end) as eben_total_score,\n            count(\n                case\n                    when lower(mo.product_family) not like '%payroll%' or lower(mo.product_family) = 'pre-payroll'\n                    then average_score\n                end\n            ) as hr_total_count,\n            sum(\n                case\n                    when lower(mo.product_family) not like '%payroll%' or lower(mo.product_family) = 'pre-payroll'\n                    then average_score\n                end\n            ) as hr_total_score,\n            count(\n                case\n                    when lower(mo.product_family) like '%payroll%' and lower(mo.product_family) != 'pre-payroll'\n                    then average_score\n                end\n            ) as payroll_total_count,\n            sum(\n                case\n                    when lower(mo.product_family) like '%payroll%' and lower(mo.product_family) != 'pre-payroll'\n                    then average_score\n                end\n            ) as payroll_total_score\n        from \"dev\".\"ces\".\"responses\" r\n        left join \"dev\".\"eh_product\".\"module_ownership\" mo on lower(mo.event_module) = lower(r.module)\n        group by 1, 2\n    ),\n    product_mapping as (\n        select\n            po.product_family,\n            wo.product_line,\n            po.workstream,\n            po.hr_page as product,\n            po.product_owner,\n            case when po.payroll_integration = 'no' then 0 else 1 end as payroll_integration,\n            case\n                -- Billing was moved from General Settings sidebar\n                when po.sidebar = 'Billings'\n                then 'hr_endpoint_general_settings__billing'\n                -- To cater for the legacy tagging on Recruitment sidebar \n                when po.sidebar = 'Recruitment' and lower(po.sub_category) = 'ats'\n                then 'hr_endpoint_recruitment__ats_'\n                when po.sidebar = 'Recruitment' and lower(po.sub_category) = 'job posting'\n                then 'hr_endpoint_recruitment__ats___post_to_job_board'\n                when po.sidebar = 'Recruitment' and lower(po.sub_category) = 'manage job board'\n                then 'hr_endpoint_recruitment__ats___manage_job_board_'\n                when po.sidebar = 'Recruitment'\n                then 'hr_endpoint_recruitment__ats___' + lower(replace(po.sub_category, ' ', '_'))\n                else\n                    'hr_endpoint_'\n                    + lower(regexp_replace(replace(po.hr_page, '> ', '>'), '[^a-zA-Z0-9_&()>]+|[&()>]', '_'))\n            end as legacy_tag,\n            'employment_hero_hr_' + lower(regexp_replace(po.sidebar, '[^a-zA-Z0-9_&()]+|[&()]', '_')) as sidebar_tag,\n            lower(\n                regexp_replace((po.sidebar + '_' + po.sub_category), '[^a-zA-Z0-9_&()]+|[&()]', '_')\n            ) as sub_category_tag,\n            lower(\n                regexp_replace((po.sub_category + '_' + po.sub_sub_category), '[^a-zA-Z0-9_&()]+|[&()]', '_')\n            ) as sub_sub_category_tag,\n            coalesce(sub_sub_category_tag, sub_category_tag, sidebar_tag) as feature_tag\n        from \"dev\".\"eh_product\".\"product_ownership\" as po\n        left join \"dev\".\"eh_product\".\"workstream_ownership\" as wo on po.workstream = wo.workstream\n        order by po.hr_page\n    ),\n    ticket as (\n        select distinct\n            t.created_at::date as date,\n            (\n                case\n                    when lower(t.custom_country) = 'au'\n                    then 'Australia'\n                    when lower(t.custom_country) = 'uk'\n                    then 'United Kingdom'\n                    when lower(t.custom_country) = 'nz'\n                    then 'New Zealand'\n                    when lower(t.custom_country) = 'my'\n                    then 'Malaysia'\n                    when lower(t.custom_country) = 'sg'\n                    then 'Singapore'\n                    else 'untracked'\n                end\n            ) as country,\n            count(distinct(case when lower(g.name) like '%hr%' then t.id end)) as hr_tickets,\n            count(distinct(case when lower(g.name) like '%payroll%' then t.id end)) as payroll_tickets,\n            count(\n                distinct(\n                    case\n                        when lower(po.product_family) like '%eben%' or lower(po.product_line) like '%eben%' then t.id\n                    end\n                )\n            ) as eben_tickets,\n            count(distinct(case when lower(po.product_family) like '%talent%' then t.id end)) as talent_tickets\n        from \"dev\".\"zendesk\".\"ticket\" t\n        left join \"dev\".\"zendesk\".\"ticket_tag\" tt on t.id = tt.ticket_id\n        left join product_mapping po on tt.\"tag\" = po.feature_tag or tt.\"tag\" = po.legacy_tag\n        left join \"dev\".\"zendesk\".\"group\" g on t.group_id = g.id\n        group by 1, 2\n    )\nselect\n    d.date,\n    (\n        case\n            when t.country is not null then t.country when ces.country is not null then ces.country else 'untracked'\n        end\n    ) as country,\n    ces.talent_total_count,\n    ces.talent_total_score,\n    ces.eben_total_count,\n    ces.eben_total_score,\n    ces.hr_total_count,\n    ces.hr_total_score,\n    ces.payroll_total_count,\n    ces.payroll_total_score,\n    t.hr_tickets,\n    t.payroll_tickets,\n    t.eben_tickets,\n    t.talent_tickets\nfrom dates d\nleft join ticket t on d.date = t.date\nleft join ces on ces.date = d.date and ces.country = t.country", "relation_name": "\"dev\".\"tableau\".\"tableau_companydash_cx_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:52.284787Z", "completed_at": "2024-02-04T15:20:52.383896Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:52.502104Z", "completed_at": "2024-02-04T15:20:52.502122Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.40999531745910645, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ces_responses_id.d5ea661b22", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ces\".\"responses\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:52.424644Z", "completed_at": "2024-02-04T15:20:52.522463Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:52.640879Z", "completed_at": "2024-02-04T15:20:52.640904Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.40647387504577637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ces_responses_id.c3733a1ceb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ces\".\"responses\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:52.798667Z", "completed_at": "2024-02-04T15:20:52.908556Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:52.992689Z", "completed_at": "2024-02-04T15:20:52.992710Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.40837907791137695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_benefits_pillar_on_off_users", "compiled": true, "compiled_code": "\n\nwith\n    -- only checking user_infos, not member country  \n    au_users as (\n        select\n            u.id as user_id,            \n            case\n                when\n                    sum(\n                        case\n                            when\n                                upper(ui.country_code) in ('AU', 'AUS')\n                                and not ui._fivetran_deleted\n                            then 1\n                            else 0\n                        end\n                    )\n                    > 0\n                then true\n                else false\n            end as is_au            \n        from \"dev\".\"postgres_public\".\"users\" u\n        join \"dev\".\"postgres_public\".\"user_infos\" ui on u.id = ui.user_id\n        where not u._fivetran_deleted \n            and not ui._fivetran_deleted\n        group by 1\n    )\n\n, international_benefits as (    \n    select u.id as user_id         \n        , case when sum(case when o.international_benefits_enabled then 1 else 0 end) > 0 then true else false end as international_benefits_enabled        \n    from \"dev\".\"postgres_public\".\"users\" u\n    join \"dev\".\"postgres_public\".\"members\" m on m.user_id = u.id     \n    join \"dev\".\"ebenefits\".\"_v_international_benefits_on_off_organisations\" o on m.organisation_id = o.organisation_id\n    where not u._fivetran_deleted\n        and not m._fivetran_deleted\n        and m.active\n    group by 1\n)\n\nselect\n    u.id as user_id,\n    case when au.is_au and (bl.user_id is null) then true  -- country picker: AU, and not blacklisted    \n        when bl.user_id is not null then false  -- blacklisted \n        when au.is_au is null then null  -- not picked country        \n    end as au_benefits_enabled, \n    ib.international_benefits_enabled, \n    case when au_benefits_enabled or ib.international_benefits_enabled then true\n        when not au_benefits_enabled or not ib.international_benefits_enabled then false        \n        end as benefits_enabled  \nfrom \"dev\".\"postgres_public\".\"users\" u\nleft join \"dev\".\"ebenefits\".\"_v_benefits_pillar_blacklist_users\" bl on bl.user_id = u.id\nleft join au_users au on u.id = au.user_id\nleft join international_benefits ib on ib.user_id = u.id \n    where not u._fivetran_deleted", "relation_name": "\"dev\".\"ebenefits\".\"_v_benefits_pillar_on_off_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:52.825604Z", "completed_at": "2024-02-04T15:20:52.911183Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.043733Z", "completed_at": "2024-02-04T15:20:53.043751Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.42376708984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_international_benefits_on_off_organisations_organisation_id.86343b16fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"ebenefits\".\"_v_international_benefits_on_off_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:52.941699Z", "completed_at": "2024-02-04T15:20:53.033588Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.161060Z", "completed_at": "2024-02-04T15:20:53.161083Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.3910953998565674, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_international_benefits_on_off_organisations_organisation_id.0650307339", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_international_benefits_on_off_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.351355Z", "completed_at": "2024-02-04T15:20:53.468599Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.582423Z", "completed_at": "2024-02-04T15:20:53.582445Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.4001617431640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_closed_lost_opportunities_opportunity_id.880f671d78", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_id\nfrom \"dev\".\"sales\".\"closed_lost_opportunities\"\nwhere opportunity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.407320Z", "completed_at": "2024-02-04T15:20:53.500702Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.588951Z", "completed_at": "2024-02-04T15:20:53.588981Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.37465977668762207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_sales_closed_lost_opportunities_opportunity_id.5f21d02370", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    opportunity_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"sales\".\"closed_lost_opportunities\"\nwhere opportunity_id is not null\ngroup by opportunity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.480289Z", "completed_at": "2024-02-04T15:20:53.595325Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.723814Z", "completed_at": "2024-02-04T15:20:53.723833Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4135255813598633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_sales_assisted_opportunities_id.342aa0e748", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"sales\".\"sales_assisted_opportunities\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.886740Z", "completed_at": "2024-02-04T15:20:53.957670Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.967315Z", "completed_at": "2024-02-04T15:20:53.967332Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.2271723747253418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_sales_sales_assisted_opportunities_id.1d23d03742", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"sales\".\"sales_assisted_opportunities\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.902995Z", "completed_at": "2024-02-04T15:20:53.958867Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.969872Z", "completed_at": "2024-02-04T15:20:53.969889Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.20958662033081055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_accrual_status", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"accrual_status\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"description\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"accrual_status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.960050Z", "completed_at": "2024-02-04T15:20:53.968676Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:53.976612Z", "completed_at": "2024-02-04T15:20:53.976650Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05261492729187012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_award_package", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"award_package\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"date_created_utc\",\n            \"fair_work_award_id\",\n            \"is_disabled\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"award_package\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.986655Z", "completed_at": "2024-02-04T15:20:53.999955Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.007823Z", "completed_at": "2024-02-04T15:20:54.007839Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.032573699951171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_aba_details", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"aba_details\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"businessid\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"aba_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:53.994608Z", "completed_at": "2024-02-04T15:20:54.006567Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.013931Z", "completed_at": "2024-02-04T15:20:54.013943Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03577852249145508, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_bacs_details", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"bacs_details\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"businessid\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"bacs_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.001266Z", "completed_at": "2024-02-04T15:20:54.009068Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.016214Z", "completed_at": "2024-02-04T15:20:54.016227Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027442216873168945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_bank_payment_file_details", "compiled": true, "compiled_code": "\nselect *\nfrom \"dev\".\"int__keypay\".\"bank_payment_file_details\"", "relation_name": "\"dev\".\"keypay\".\"bank_payment_file_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.026775Z", "completed_at": "2024-02-04T15:20:54.044182Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.050990Z", "completed_at": "2024-02-04T15:20:54.051013Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0364222526550293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_bank_account", "compiled": true, "compiled_code": "\nselect *\nfrom \"dev\".\"int__keypay\".\"bank_account\"", "relation_name": "\"dev\".\"keypay\".\"bank_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.035640Z", "completed_at": "2024-02-04T15:20:54.048609Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.057392Z", "completed_at": "2024-02-04T15:20:54.057407Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03631877899169922, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_billing_plan", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"billing_plan\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"function_employee_onboarding\",\n            \"price_per_unit\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"billing_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.040031Z", "completed_at": "2024-02-04T15:20:54.049859Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.058548Z", "completed_at": "2024-02-04T15:20:54.058560Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03148627281188965, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_business_award_package", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"business_award_package\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"award_package_id\",\n            \"current_version_id\",\n            \"award_package_name\",\n            \"installation_status\",\n            \"installation_status_last_updated_utc\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"business_award_package\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.072336Z", "completed_at": "2024-02-04T15:20:54.086539Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.097545Z", "completed_at": "2024-02-04T15:20:54.097569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03772091865539551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_contribution_info", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"contribution_info\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"cont_amount\",\n            \"cont_type\",\n            \"super_member_id\",\n            \"employee_id\",\n            \"failed\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"contribution_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.080275Z", "completed_at": "2024-02-04T15:20:54.096057Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.105595Z", "completed_at": "2024-02-04T15:20:54.105609Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040924787521362305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_contribution_info_deduction", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"contribution_info_deduction\"\n\n),\n\nrenamed as (\n\nselect\n            \"contribution_info_id\",\n            \"deduction_id\",\n            \"failed\",\n            \"id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"contribution_info_deduction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.087704Z", "completed_at": "2024-02-04T15:20:54.098782Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.108006Z", "completed_at": "2024-02-04T15:20:54.108027Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04253864288330078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_csn_details", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"csn_details\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"cpf_submission_number\",\n            \"csn_type\",\n            \"is_deleted\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"csn_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.120642Z", "completed_at": "2024-02-04T15:20:54.136414Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.148048Z", "completed_at": "2024-02-04T15:20:54.148064Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03928780555725098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_deduction", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"deduction\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"pay_run_total_id\",\n            \"deduction_category_id\",\n            \"amount\",\n            \"pay_run_id\",\n            \"employee_super_fund_id\",\n            \"contribution_info_id\",\n            \"associated_employee_deduction_category_id\",\n            \"bank_account_id\",\n            \"is_resc\",\n            \"bank_account_bsb\",\n            \"bank_account_number\",\n            \"bank_account_type\",\n            \"is_member_voluntary\",\n            \"associated_employee_pension_contribution_plan_id\",\n            \"is_pension_scheme_salary_sacrifice\",\n            \"additional_data\",\n            \"paid_to_tax_office\",\n            \"payg_adjustment_id\",\n            \"bank_account_swift\",\n            \"bank_account_branch_code\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"deduction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.131915Z", "completed_at": "2024-02-04T15:20:54.146809Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.154780Z", "completed_at": "2024-02-04T15:20:54.154793Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04078173637390137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_earnings_line", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"earnings_line\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"pay_category_id\",\n            \"pay_run_id\",\n            \"units\",\n            \"location_id\",\n            \"pay_run_total_id\",\n            \"rate\",\n            \"earnings_line_status_id\",\n            \"external_reference_id\",\n            \"net_earnings\",\n            \"net_earnings_reporting\",\n            \"earnings_line_ext_au_id\",\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"earnings_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.137662Z", "completed_at": "2024-02-04T15:20:54.152207Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.163241Z", "completed_at": "2024-02-04T15:20:54.163255Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04170727729797363, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_deduction_category", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"deduction_category\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"deduction_category_name\",\n            \"business_id\",\n            \"tax_exempt\",\n            \"is_deleted\",\n            \"source\",\n            \"external_reference_id\",\n            \"payment_summary_classification_id\",\n            \"expense_general_ledger_mapping_code\",\n            \"liability_general_ledger_mapping_code\",\n            \"sgc_calculation_impact\",\n            \"minimum_wage_deduction_impact\",\n            \"is_system\",\n            \"deduction_category_ext_sg_id\",\n            \"deduction_category_ext_uk_id\",\n            \"is_resc\",\n            \"is_name_read_only\",\n            \"is_allow_pre_tax_super\",\n            \"is_allow_member_voluntary\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"deduction_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.169755Z", "completed_at": "2024-02-04T15:20:54.209889Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.227427Z", "completed_at": "2024-02-04T15:20:54.227444Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06872439384460449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_device_token", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"device_token\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"user_id\",\n            \"platform\",\n            \"endpoint\",\n            \"date_created_utc\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"device_token\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.211115Z", "completed_at": "2024-02-04T15:20:54.220867Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.231720Z", "completed_at": "2024-02-04T15:20:54.231736Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06853675842285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_earnings_line_ext_au", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"earnings_line_ext_au\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"earnings_line_id\",\n            \"pay_run_id\",\n            \"average_total_earnings_amount\",\n            \"average_total_earnings_payg_amount\",\n            \"average_additional_payments_amount\",\n            \"full_earnings_payg_amount\",\n            \"calculated_payg_amount\",\n            \"max_payg_amount\",\n            \"gross_earnings_amount\",\n            \"gross_earnings_payg_amount\",\n            \"pre_adjustment_payg_withholding_amount\",\n            \"gross_earnings_stsl_amount\",\n            \"average_total_earnings_stsl_amount\",\n            \"full_earnings_stsl_amount\",\n            \"calculated_stsl_amount\",\n            \"lump_sum_e_financial_year\",\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"earnings_line_ext_au\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.221993Z", "completed_at": "2024-02-04T15:20:54.233049Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.242992Z", "completed_at": "2024-02-04T15:20:54.243013Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.060739755630493164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employee_deduction_category", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employee_deduction_category\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"deduction_category_id\",\n            \"from_date\",\n            \"to_date\",\n            \"amount\",\n            \"employee_super_fund_id\",\n            \"expiry_date\",\n            \"maximum_amount_paid\",\n            \"is_active\",\n            \"bank_account_id\",\n            \"deleted\",\n            \"notes\",\n            \"external_reference_id\",\n            \"source\",\n            \"deduction_type\",\n            \"preserved_earnings\",\n            \"preserved_earnings_amount\",\n            \"preserved_earnings_amount_not_reached_action\",\n            \"carry_forward_unpaid_deductions\",\n            \"payment_reference\",\n            \"employee_pension_contribution_plan_id\",\n            \"additional_data\",\n            \"paid_to_tax_office\",\n            \"priority\",\n            \"student_loan_deduction_option\",\n            \"carry_forward_unused_preserved_earnings\",\n            \"tiered_deduction_settings_id\",\n            \"paid_to_external_service\",\n            \"employee_deduction_category_ext_sg_id\",\n            \"employee_deduction_category_ext_my_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employee_deduction_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.250551Z", "completed_at": "2024-02-04T15:20:54.263741Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.270289Z", "completed_at": "2024-02-04T15:20:54.270304Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036716461181640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employee_expense", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employee_expense\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"pay_run_id\",\n            \"pay_run_total_id\",\n            \"employee_id\",\n            \"employee_expense_category_id\",\n            \"location_id\",\n            \"business_id\",\n            \"amount\",\n            \"notes\",\n            \"external_id\",\n            \"employee_recurring_expense_id\",\n            \"employee_expense_request_id\",\n            \"tax_code\",\n            \"tax_rate\",\n            \"tax_code_display_name\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employee_expense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.258169Z", "completed_at": "2024-02-04T15:20:54.267998Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.278322Z", "completed_at": "2024-02-04T15:20:54.278336Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03547501564025879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employee_expense_request", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employee_expense_request\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"status\",\n            \"created_by_user_id\",\n            \"date_created_utc\",\n            \"status_updated_by_user_id\",\n            \"date_status_updated_utc\",\n            \"description\",\n            \"status_update_notes\",\n            \"pay_run_total_id\",\n            \"business_id\",\n            \"date_first_approved_utc\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employee_expense_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.272520Z", "completed_at": "2024-02-04T15:20:54.280814Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.288099Z", "completed_at": "2024-02-04T15:20:54.288112Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02968144416809082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employee_history", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employee_history\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"employee_history_action_id\",\n            \"date_created\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employee_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.290594Z", "completed_at": "2024-02-04T15:20:54.298595Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.307653Z", "completed_at": "2024-02-04T15:20:54.307666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03182077407836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employee_pay_category", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"int__keypay\".\"employee_pay_category\"\n\n),\n\nrenamed as (\n\n    select\n        id,\n        calculated_rate,\n        employee_id,\n        standard_weekly_hours,\n        is_default,\n        from_date,\n        to_date,\n        user_supplied_rate,\n        standard_daily_hours,\n        pay_category_rate_unit_id,\n        employee_rate_unit_id,\n        expiry_date,\n        pay_category_id,\n        _transaction_date,\n        _etl_date,\n        _modified,\n        _file\n    from source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employee_pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.299802Z", "completed_at": "2024-02-04T15:20:54.308930Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.321049Z", "completed_at": "2024-02-04T15:20:54.321063Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03669309616088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employee_super_fund", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employee_super_fund\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"super_fund_name\",\n            \"member_number\",\n            \"allocated_percentage\",\n            \"fixed_amount\",\n            \"employee_id\",\n            \"deleted\",\n            \"super_fund_product_id\",\n            \"allocate_balance\",\n            \"has_non_super_stream_compliant_fund\",\n            \"date_employee_nominated_utc\",\n            \"super_details_default_fund_id\",\n            \"self_managed_super_fund_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employee_super_fund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.310059Z", "completed_at": "2024-02-04T15:20:54.319614Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.328789Z", "completed_at": "2024-02-04T15:20:54.328804Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.033159732818603516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employment_agreement", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employment_agreement\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"classification\",\n            \"date_created_utc\",\n            \"external_reference_id\",\n            \"is_deleted\",\n            \"business_award_package_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employment_agreement\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.331692Z", "completed_at": "2024-02-04T15:20:54.341437Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.351939Z", "completed_at": "2024-02-04T15:20:54.351954Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.038781166076660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_employment_type", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"employment_type\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"description\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"employment_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.346391Z", "completed_at": "2024-02-04T15:20:54.359365Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.366052Z", "completed_at": "2024-02-04T15:20:54.366066Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.031433820724487305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_expense", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"expense\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"expense_date\",\n            \"business_id\",\n            \"unit_cost\",\n            \"quantity\",\n            \"invoice_id\",\n            \"notes\",\n            \"expense_type\",\n            \"displayed_unit_cost\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"expense\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.353267Z", "completed_at": "2024-02-04T15:20:54.364820Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.372217Z", "completed_at": "2024-02-04T15:20:54.372230Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.035425424575805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_expense_type", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"expense_type\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"description\",\n            \"unit_cost\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"expense_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.374586Z", "completed_at": "2024-02-04T15:20:54.384230Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.393819Z", "completed_at": "2024-02-04T15:20:54.393834Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0335240364074707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_fair_work_award", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"fair_work_award\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"fair_work_award\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.386750Z", "completed_at": "2024-02-04T15:20:54.394982Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.404528Z", "completed_at": "2024-02-04T15:20:54.404543Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028180837631225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_fair_work_award_selection", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"fair_work_award_selection\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"fair_work_award_id\",\n            \"business_id\",\n            \"date_time_utc\",\n            \"source\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"fair_work_award_selection\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.396131Z", "completed_at": "2024-02-04T15:20:54.405700Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.414336Z", "completed_at": "2024-02-04T15:20:54.414348Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.036856651306152344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_industry", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"industry\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.415572Z", "completed_at": "2024-02-04T15:20:54.426385Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.446618Z", "completed_at": "2024-02-04T15:20:54.446637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05090737342834473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_invoice_line_item", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"invoice_line_item\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"invoice_id\",\n            \"total_including_gst\",\n            \"abn\",\n            \"business_id\",\n            \"unit_price_including_gst\",\n            \"quantity\",\n            \"billing_code\",\n            \"billing_plan\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"invoice_line_item\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.429931Z", "completed_at": "2024-02-04T15:20:54.445402Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.459506Z", "completed_at": "2024-02-04T15:20:54.459526Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04435586929321289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_invoice", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"invoice\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"date\",\n            \"gst_rate\",\n            \"billing_region_id\",\n            \"invoicee_id\",\n            \"invoicee_type_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"invoice\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.449090Z", "completed_at": "2024-02-04T15:20:54.462032Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.471183Z", "completed_at": "2024-02-04T15:20:54.471198Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044037580490112305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_leave_accrual", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"leave_accrual\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"accrued_amount\",\n            \"accrual_status_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"leave_accrual\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.473706Z", "completed_at": "2024-02-04T15:20:54.482352Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.491742Z", "completed_at": "2024-02-04T15:20:54.491756Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03271889686584473, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_journal_default_account", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"journal_default_account\"\n\n),\n\nrenamed as (\n\nselect\n            \"_transaction_date\",\n            \"_modified\",\n            \"id\",\n            \"business_id\",\n            \"account_type\",\n            \"_etl_date\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"journal_default_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.483468Z", "completed_at": "2024-02-04T15:20:54.492959Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.502490Z", "completed_at": "2024-02-04T15:20:54.502504Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.034234046936035156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_leave_allowance_template", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"leave_allowance_template\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"name\",\n            \"external_reference_id\",\n            \"source\",\n            \"business_award_package_id\",\n            \"leave_accrual_start_date_type\",\n            \"leave_year_start\",\n            \"leave_loading_calculated_from_pay_category_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"leave_allowance_template\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.494111Z", "completed_at": "2024-02-04T15:20:54.503609Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.511390Z", "completed_at": "2024-02-04T15:20:54.511404Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030753374099731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_leave_request", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"leave_request\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"from_date\",\n            \"to_date\",\n            \"total_hours\",\n            \"requested_date\",\n            \"status\",\n            \"business_id\",\n            \"leave_category_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"leave_request\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.512658Z", "completed_at": "2024-02-04T15:20:54.521304Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.532662Z", "completed_at": "2024-02-04T15:20:54.532677Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0304110050201416, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_location", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"location\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"businessid\",\n            \"is_deleted\",\n            \"parentid\",\n            \"date_created\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"location\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.523591Z", "completed_at": "2024-02-04T15:20:54.536500Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.547808Z", "completed_at": "2024-02-04T15:20:54.547825Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.033818721771240234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_location_restriction", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"location_restriction\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"user_id\",\n            \"filter_type\",\n            \"value\",\n            \"permissions\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"location_restriction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.537691Z", "completed_at": "2024-02-04T15:20:54.552646Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.565458Z", "completed_at": "2024-02-04T15:20:54.565477Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03821825981140137, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pay_category", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pay_category\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"pay_category_name\",\n            \"business_id\",\n            \"date_created\",\n            \"rate_unit_id\",\n            \"accrues_leave\",\n            \"default_super_rate\",\n            \"is_tax_exempt\",\n            \"linked_pay_category_id\",\n            \"penalty_loading_multiplier\",\n            \"is_deleted\",\n            \"rate_loading_multiplier\",\n            \"external_reference_id\",\n            \"source\",\n            \"is_payroll_tax_exempt\",\n            \"pay_category_type\",\n            \"business_award_package_id\",\n            \"payment_summary_classification_id\",\n            \"general_ledger_mapping_code\",\n            \"super_liability_mapping_code\",\n            \"super_expense_mapping_code\",\n            \"is_w1_exempt\",\n            \"number_of_decimal_places\",\n            \"is_national_insurance_exempt\",\n            \"minimum_wage_calculation_impact\",\n            \"exclude_from_average_earnings\",\n            \"cpf_classification_id\",\n            \"include_in_gross_rate_of_pay\",\n            \"exclude_from_ordinary_earnings\",\n            \"hide_units_on_pay_slip\",\n            \"pay_category_ext_my_id\",\n            \"rounding_method\",\n            \"pay_category_ext_nz_id\",\n            \"pay_category_ext_uk_id\",\n            \"allowance_description\",\n            \"pay_category_ext_sg_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.554841Z", "completed_at": "2024-02-04T15:20:54.564141Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.576401Z", "completed_at": "2024-02-04T15:20:54.576417Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03314805030822754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pay_cycle", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pay_cycle\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"pay_cycle_frequencyid\",\n            \"name\",\n            \"last_pay_run\",\n            \"is_deleted\",\n            \"aba_detailsid\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pay_cycle\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.570632Z", "completed_at": "2024-02-04T15:20:54.581289Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.588665Z", "completed_at": "2024-02-04T15:20:54.588678Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03309154510498047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pay_cycle_frequency", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pay_cycle_frequency\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"description\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pay_cycle_frequency\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.589954Z", "completed_at": "2024-02-04T15:20:54.601740Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.607867Z", "completed_at": "2024-02-04T15:20:54.607880Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029118776321411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pay_day_filing", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pay_day_filing\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"pay_run_id\",\n            \"status\",\n            \"date_last_modified\",\n            \"date_submitted\",\n            \"version\",\n            \"pay_day_filing_lodgement_data_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pay_day_filing\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.597244Z", "completed_at": "2024-02-04T15:20:54.605381Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.612924Z", "completed_at": "2024-02-04T15:20:54.612939Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03375983238220215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_payrun", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"payrun\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"date_finalised\",\n            \"pay_period_starting\",\n            \"pay_period_ending\",\n            \"date_paid\",\n            \"business_id\",\n            \"invoice_id\",\n            \"date_first_finalised\",\n            \"pay_run_lodgement_data_id\",\n            \"notification_date\",\n            \"finalised_by_id\",\n            \"pay_cycle_id\",\n            \"pay_cycle_frequency_id\",\n            \"date_created_utc\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"payrun\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.614143Z", "completed_at": "2024-02-04T15:20:54.626871Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.639238Z", "completed_at": "2024-02-04T15:20:54.639254Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.041562557220458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pay_event", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pay_event\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"date_created_utc\",\n            \"status\",\n            \"pay_run_id\",\n            \"date_lodged_utc\",\n            \"date_response_received_utc\",\n            \"pay_run_lodgement_data_id\",\n            \"is_deleted\",\n            \"stp_version\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pay_event\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.630668Z", "completed_at": "2024-02-04T15:20:54.640590Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.653275Z", "completed_at": "2024-02-04T15:20:54.653292Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.034345149993896484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pay_run_lodgement_data", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pay_run_lodgement_data\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"status\",\n            \"is_test\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pay_run_lodgement_data\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.641798Z", "completed_at": "2024-02-04T15:20:54.652022Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.659724Z", "completed_at": "2024-02-04T15:20:54.659737Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03815960884094238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_payrun_total_history", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"payrun_total_history\"\n\n),\n\nrenamed as (\n\nselect\n            id,\n            employee_id,\n            payrun_id,\n            total_hours,\n            gross_earnings,\n            net_earnings,\n            is_excluded_from_billing,\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"payrun_total_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.662310Z", "completed_at": "2024-02-04T15:20:54.674244Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.683434Z", "completed_at": "2024-02-04T15:20:54.683447Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03596854209899902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_payrun_total", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"payrun_total\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"payrun_id\",\n            \"total_hours\",\n            \"gross_earnings\",\n            \"net_earnings\",\n            \"is_excluded_from_billing\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"payrun_total\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.676849Z", "completed_at": "2024-02-04T15:20:54.684836Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.694609Z", "completed_at": "2024-02-04T15:20:54.694623Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029469966888427734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_payrun_default", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"int__keypay\".\"payrun_default\"\n\n),\n\nrenamed as (\n\n    select\n        id,\n        employee_id,\n        from_date,\n        to_date,\n        job_title,\n        business_id,\n        default_pay_category_id,\n        is_payroll_tax_exempt,\n        employment_agreement_id,\n        default_pay_cycle_id,\n        _transaction_date,\n        _etl_date,\n        _modified,\n        _file\n    from source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"payrun_default\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.685997Z", "completed_at": "2024-02-04T15:20:54.697204Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.710137Z", "completed_at": "2024-02-04T15:20:54.710154Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03839540481567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_region", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"region\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"currency\",\n            \"name\",\n            \"culture_name\",\n            \"default_standard_hours_per_day\",\n            \"commence_billing_from\",\n            \"minimum_bill_able_amount\",\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"region\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.705341Z", "completed_at": "2024-02-04T15:20:54.715250Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.728024Z", "completed_at": "2024-02-04T15:20:54.728040Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03619837760925293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_pension_scheme_contribution_plan", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"pension_scheme_contribution_plan\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_contribution_percentage\",\n            \"employer_contribution_percentage\",\n            \"pension_type\",\n            \"max_earnings_threshold\",\n            \"min_earnings_threshold\",\n            \"contribution_group_name\",\n            \"contribution_group_id\",\n            \"contribution_plan_name\",\n            \"reporting_frequency\",\n            \"calculate_on_qualifying_earnings\",\n            \"pension_scheme_id\",\n            \"contribution_plan_id\",\n            \"collection_source_id\",\n            \"is_deleted\",\n            \"salary_sacrifice_percentage\",\n            \"salary_sacrifice_deduction_category_id\",\n            \"nic_saving_rebate_percentage\",\n            \"salary_sacrifice_pay_category_ids\",\n            \"employee_contribution_pay_category_ids\",\n            \"employer_contribution_pay_category_ids\",\n            \"is_auto_enrolment_scheme\",\n            \"lower_earnings_disregard\",\n            \"lower_default_earnings_disregard_type\",\n            \"upper_earnings_cap\",\n            \"upper_default_earnings_cap_type\",\n            \"use_tax_month_pay_period\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"pension_scheme_contribution_plan\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.721484Z", "completed_at": "2024-02-04T15:20:54.730461Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.740666Z", "completed_at": "2024-02-04T15:20:54.740681Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03338789939880371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_resellers", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"resellers\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"billing_name\",\n            \"date_created_utc\",\n            \"commence_billing_from\",\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"resellers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.733346Z", "completed_at": "2024-02-04T15:20:54.741907Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.749879Z", "completed_at": "2024-02-04T15:20:54.749895Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03288888931274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_rate_unit", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"rate_unit\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"description\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"rate_unit\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.751100Z", "completed_at": "2024-02-04T15:20:54.762011Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.771398Z", "completed_at": "2024-02-04T15:20:54.771414Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0320439338684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_reseller_contact", "compiled": true, "compiled_code": "\nselect *\nfrom \"dev\".\"int__keypay\".\"reseller_contact\"", "relation_name": "\"dev\".\"keypay\".\"reseller_contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.764533Z", "completed_at": "2024-02-04T15:20:54.772572Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.782973Z", "completed_at": "2024-02-04T15:20:54.782987Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02933979034423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_statutory_settings", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"statutory_settings\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"income_tax_number_encrypted\",\n            \"e_number\",\n            \"epf_number\",\n            \"socso_number\",\n            \"hrdf_status\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"statutory_settings\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.777512Z", "completed_at": "2024-02-04T15:20:54.785688Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.795766Z", "completed_at": "2024-02-04T15:20:54.795779Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028687238693237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_super_details", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"super_details\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"business_id\",\n            \"date_registered_utc\",\n            \"enabled\",\n            \"date_beam_terms_accepted_utc\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"super_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.791626Z", "completed_at": "2024-02-04T15:20:54.801044Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.810017Z", "completed_at": "2024-02-04T15:20:54.810030Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029490947723388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_super_details_default_fund", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"super_details_default_fund\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"super_details_id\",\n            \"usi\",\n            \"abn\",\n            \"name\",\n            \"is_deleted\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"super_details_default_fund\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.803362Z", "completed_at": "2024-02-04T15:20:54.812275Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.821484Z", "completed_at": "2024-02-04T15:20:54.821498Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02849435806274414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_super_fund_product", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"super_fund_product\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"abn\",\n            \"product_code\",\n            \"product_type\",\n            \"business_name\",\n            \"product_name\",\n            \"source\",\n            \"business_id\",\n            \"super_stream_status\",\n            \"is_managed_by_system\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"super_fund_product\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.815039Z", "completed_at": "2024-02-04T15:20:54.823946Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.837589Z", "completed_at": "2024-02-04T15:20:54.837602Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03189992904663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_super_payment", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"super_payment\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"pay_run_total_id\",\n            \"employee_super_fund_id\",\n            \"amount\",\n            \"pay_run_id\",\n            \"employee_id\",\n            \"contribution_type\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"super_payment\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.830102Z", "completed_at": "2024-02-04T15:20:54.842847Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.854852Z", "completed_at": "2024-02-04T15:20:54.854865Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035947561264038086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_spined_daily_user_signin_keypay", "compiled": true, "compiled_code": "\n\nwith user_signin as (\n    select\n        date::date        as signin_date,\n        logged_in_user_id as user_id,\n        'keypay'::varchar as platform\n\n    from \"dev\".\"keypay\".\"system_event\" as events\n\n    where\n        events.logged_in_user_id is not NULL\n    \n\n    group by 1,2,3\n),\n\nall_dates as (\n    select date_day\n\n    from \"dev\".\"staging\".\"stg_dates__date_spine\"\n),\n\nfirst_active_days as (\n    select\n        platform,\n        user_id,\n        min(signin_date)::date as first_active_day\n\n    from user_signin\n\n    group by 1,2\n),\n\nspined as (\n    select\n        first_active_days.platform,\n        first_active_days.user_id,\n        all_dates.date_day::date\n\n    from first_active_days\n\n    left join all_dates\n        on first_active_days.first_active_day <= all_dates.date_day\n\n    where\n        all_dates.date_day < current_date\n    --noqa: LT02\n        and all_dates.date_day > dateadd('day', -30, (select max(date_day) from \"dev\".\"intermediate\".\"int_spined_daily_user_signin_keypay\")) -- we need to include the last 30 days in each incremental run to ensure the has_active_subscription window function continue to work\n),\n\nfilled as (\n    select\n        spined.date_day,\n        spined.platform,\n        spined.user_id,\n        user_signin.signin_date is not NULL                                                                                                                  as is_active,\n        max(case when is_active then 1 else 0 end) over (partition by spined.user_id order by spined.date_day rows between 6 preceding and current row) > 0  as is_active_last_7_days,\n        max(case when is_active then 1 else 0 end) over (partition by spined.user_id order by spined.date_day rows between 29 preceding and current row) > 0 as is_active_last_30_days\n\n    from spined\n\n    left join user_signin\n        on\n            spined.user_id = user_signin.user_id\n            and spined.date_day = user_signin.signin_date\n)\n\nselect * from filled", "relation_name": "\"dev\".\"intermediate\".\"int_spined_daily_user_signin_keypay\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.845265Z", "completed_at": "2024-02-04T15:20:54.856030Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.866480Z", "completed_at": "2024-02-04T15:20:54.866495Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03189206123352051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_superfund_ato", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"superfund_ato\"\n\n),\n\nrenamed as (\n\nselect\n            \"abn\",\n            \"fund_name\",\n            \"usi\",\n            \"product_name\",\n            \"contribution_restrictions\",\n            \"from_date\",\n            \"to_date\",\n            \"_transaction_date\",\n            \"_etl_date\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"superfund_ato\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.861019Z", "completed_at": "2024-02-04T15:20:54.869184Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.879588Z", "completed_at": "2024-02-04T15:20:54.879601Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.029052257537841797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_timesheet_line", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"timesheet_line\"\n\n),\n\nrenamed as (\n\nselect\n            \"_file\",\n            \"_modified\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"id\",\n            \"employee_id\",\n            \"start_time\",\n            \"end_time\",\n            \"units\",\n            \"date_created\",\n            \"submitted_start_time\",\n            \"submitted_end_time\",\n            \"pay_category_id\",\n            \"status\",\n            \"leave_request_id\",\n            \"consolidated_with_timesheet_line_id\",\n            \"pay_run_total_id\",\n            \"business_id\",\n            \"auto_approved_by_roster_shift_id\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"timesheet_line\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.875266Z", "completed_at": "2024-02-04T15:20:54.884972Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.893807Z", "completed_at": "2024-02-04T15:20:54.893820Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029761552810668945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_tax_file_declaration", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"tax_file_declaration\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"employee_id\",\n            \"employment_type_id\",\n            \"from_date\",\n            \"to_date\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"tax_file_declaration\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.887180Z", "completed_at": "2024-02-04T15:20:54.896004Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.905309Z", "completed_at": "2024-02-04T15:20:54.905323Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02850198745727539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"first_name\",\n            \"last_name\",\n            \"email\",\n            \"is_active\",\n            \"is_admin\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.898758Z", "completed_at": "2024-02-04T15:20:54.906503Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.913855Z", "completed_at": "2024-02-04T15:20:54.913869Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02851557731628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user_business", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user_business\"\n\n),\n\nrenamed as (\n\nselect\n            \"user_id\",\n            \"business_id\",\n            \"is_single_sign_on_enabled\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.915041Z", "completed_at": "2024-02-04T15:20:54.923277Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.935819Z", "completed_at": "2024-02-04T15:20:54.935832Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.030817747116088867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user_employee", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user_employee\"\n\n),\n\nrenamed as (\n\nselect\n            \"user_id\",\n            \"employee_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user_employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.925643Z", "completed_at": "2024-02-04T15:20:54.939683Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.948700Z", "completed_at": "2024-02-04T15:20:54.948713Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03312373161315918, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user_employee_group", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user_employee_group\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"user_id\",\n            \"employee_group_id\",\n            \"permissions\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user_employee_group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.940924Z", "completed_at": "2024-02-04T15:20:54.949832Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.961450Z", "completed_at": "2024-02-04T15:20:54.961465Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03196120262145996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user_report_access", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user_report_access\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"user_id\",\n            \"business_id\",\n            \"access_type\",\n            \"no_reporting_restriction\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user_report_access\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.954785Z", "completed_at": "2024-02-04T15:20:54.965038Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.975306Z", "completed_at": "2024-02-04T15:20:54.975321Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03086709976196289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_white_label", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"white_label\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"is_deleted\",\n            \"region_id\",\n            \"support_email\",\n            \"primary_champion_id\",\n            \"function_enable_super_choice_marketplace\",\n            \"default_billing_plan_id\",\n            \"reseller_id\",\n            \"_file\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"white_label\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.970951Z", "completed_at": "2024-02-04T15:20:54.980456Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:54.989935Z", "completed_at": "2024-02-04T15:20:54.989949Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03114485740661621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user_reseller", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user_reseller\"\n\n),\n\nrenamed as (\n\nselect\n            \"userid\",\n            \"reseller_id\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user_reseller\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.982843Z", "completed_at": "2024-02-04T15:20:54.991353Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.001684Z", "completed_at": "2024-02-04T15:20:55.001699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02820754051208496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_zoom_info", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"zoom_info\"\n\n),\n\nrenamed as (\n\nselect\n        record_id,\n        _id,\n        company_name,\n        abn,\n        country,\n        match_status,\n        zoom_info_company_id,\n        website,\n        founded_year,\n        company_hq_phone,\n        revenue_in_000_s_usd_,\n        revenue_range_in_usd_,\n        est_hr_department_budget_in_000_s_usd_,\n        employees,\n        employee_range,\n        past_1_year_employee_growth_rate,\n        past_2_year_employee_growth_rate,\n        sic_code_1,\n        sic_code_2,\n        sic_codes,\n        naics_code_1,\n        naics_code_2,\n        naics_codes,\n        primary_industry,\n        primary_sub_industry,\n        all_industries,\n        all_sub_industries,\n        industry_hierarchical_category,\n        secondary_industry_hierarchical_category,\n        alexa_rank,\n        zoom_info_company_profile_url,\n        linked_in_company_profile_url,\n        facebook_company_profile_url,\n        twitter_company_profile_url,\n        ownership_type,\n        business_model,\n        certified_active_company,\n        certification_date,\n        defunct_company,\n        total_funding_amount_in_000_s_usd_,\n        recent_funding_amount_in_000_s_usd_,\n        recent_funding_round,\n        recent_funding_date,\n        recent_investors,\n        all_investors,\n        company_street_address,\n        company_city,\n        company_state,\n        company_zip_code,\n        company_country,\n        full_address,\n        number_of_locations,\n        company_is_acquired,\n        company_id_ultimate_parent_,\n        entity_name_ultimate_parent_,\n        company_id_immediate_parent_,\n        entity_name_immediate_parent_,\n        relationship_immediate_parent_,\n        _file,\n        _transaction_date,\n        _etl_date,\n        _modified\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"zoom_info\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:54.996223Z", "completed_at": "2024-02-04T15:20:55.005849Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.016828Z", "completed_at": "2024-02-04T15:20:55.016845Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.031050682067871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_dwh_business", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"int__keypay_dwh\".\"business\"\n\n),\n\nrenamed as (\n\n    select\n        id,\n        name,\n        abn,\n        legal_name,\n        date_created,\n        industry_id,\n        industry_name,\n        address_line1,\n        address_line2,\n        suburb_id,\n        billing_plan_id,\n        commence_billing_from,\n        to_be_deleted,\n        white_label_id,\n        electronic_payroll_lodgement_enabled,\n        _transaction_date,\n        _etl_date,\n        _modified,\n        _file\n    from source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay_dwh\".\"business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.010556Z", "completed_at": "2024-02-04T15:20:55.026027Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.033885Z", "completed_at": "2024-02-04T15:20:55.033899Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03458404541015625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mart__keypay__business_traits", "compiled": true, "compiled_code": "\n\nselect b.id\n    , b.name\n    , b.date_created as created_at\n    , b.industry_id\n    , b.industry_name \n    , split_part(r.culture_name,'-',2) as country\n    , b.commence_billing_from::date\n    , b.White_Label_Id\n    , wl.name as white_label_name\n    , wl.Reseller_Id as partner_id\n    , p.name as partner_name\nfrom\n    \"dev\".\"int__keypay_dwh\".\"business\" b\n    JOIN \"dev\".\"int__keypay\".\"white_label\" AS wl ON b.White_Label_Id = wl.id\n    left join \"dev\".\"int__keypay\".\"region\"  r on wl.region_id = r.id\n    left join \"dev\".\"int__keypay\".\"resellers\" p on p.id = wl.Reseller_Id", "relation_name": "\"dev\".\"mart__keypay\".\"business_traits\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.020927Z", "completed_at": "2024-02-04T15:20:55.032705Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.044524Z", "completed_at": "2024-02-04T15:20:55.044539Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0322725772857666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mart__keypay__t_pay_run_total_monthly_summary", "compiled": true, "compiled_code": "\n\nselect coalesce(prt.employee_id, prth.employee_id) as employee_id\n  , pr.business_id\n  , pr.invoice_id\n  --, DATEADD(month, 1, DATEFROMPARTS(year(pr.DateFirstFinalised), month(pr.DateFirstFinalised), 1)) as BillingMonth\n  , DATEADD('DAY', 1, LAST_DAY(pr.date_first_finalised)) as billing_month\n  , coalesce(prt.is_excluded_from_billing, prth.is_excluded_from_billing) as is_excluded_from_billing\n  , sum(coalesce(prt.gross_earnings, prth.gross_earnings)) as monthly_gross_earnings\n  , sum(coalesce(prt.net_earnings, prth.net_earnings)) as monthly_net_earnings\n  , sum(coalesce(prt.total_hours, prth.total_hours)) as total_hours\n  --, sum(prt.PaygWithholdingAmount) as PaygWithholdingAmount\n  --, sum(prt.HelpAmount) as HelpAmount\n  --, sum(prt.SuperContribution) as SuperContribution\nfrom  \"dev\".\"int__keypay\".\"payrun\" pr\n  \tjoin \"dev\".\"int__keypay_dwh\".\"business\" b on pr.business_id = b.id AND SPLIT_PART(b._file, 'Shard', 2) = SPLIT_PART(pr._file, 'Shard', 2)\n\tleft join \"dev\".\"int__keypay\".\"payrun_total\" prt on prt.payrun_id = pr.id and SPLIT_PART(pr._file, 'Shard', 2) = SPLIT_PART(prt._file, 'Shard', 2) and pr.date_first_finalised::date >= '2022-01-01' and prt.is_excluded_from_billing = 0\n  \tleft join \"dev\".\"stg__keypay\".\"payrun_total_history\" prth on prth.payrun_id = pr.id and SPLIT_PART(pr._file, 'Shard', 2) = SPLIT_PART(prth._file, 'Shard', 2) and pr.date_first_finalised::date < '2022-01-01' and prth.is_excluded_from_billing = 0\n  where\n      pr.date_first_finalised is not null\n      --and pr.DateFirstFinalised >= ''''',@fromDate,'''''      and pr.DateFirstFinalised <= ''''',@toDate,'''''           \n      and (b.to_be_deleted is null or not to_be_deleted) --ISNULL(b.to_be_deleted, 0) = 0\n    group by 1,2,3,4,5", "relation_name": "\"dev\".\"mart__keypay\".\"_t_pay_run_total_monthly_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.038858Z", "completed_at": "2024-02-04T15:20:55.051754Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.064203Z", "completed_at": "2024-02-04T15:20:55.064218Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03998446464538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_int__keypay_dwh__business_id.45f4c97ea2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"int__keypay_dwh\".\"business\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.057670Z", "completed_at": "2024-02-04T15:20:55.069834Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.076078Z", "completed_at": "2024-02-04T15:20:55.076091Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030994415283203125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_int__keypay_dwh__business_id.9a96b7c02d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"int__keypay_dwh\".\"business\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.065549Z", "completed_at": "2024-02-04T15:20:55.073789Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.081377Z", "completed_at": "2024-02-04T15:20:55.081393Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031239986419677734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_user_whitelabel", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"user_whitelabel\"\n\n),\n\nrenamed as (\n\nselect\n            \"user_id\",\n            \"whitelabel_id\",\n            \"is_default_parent\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"user_whitelabel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.086718Z", "completed_at": "2024-02-04T15:20:55.095843Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.110782Z", "completed_at": "2024-02-04T15:20:55.110797Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03632473945617676, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_dwh_employee", "compiled": true, "compiled_code": "\nwith source as (\n\n    select * from \"dev\".\"int__keypay_dwh\".\"employee\"\n\n),\n\nrenamed as (\n\n    select\n        id,\n        business_id,\n        firstname,\n        surname,\n        date_created,\n        date_of_birth,\n        residential_street_address,\n        residential_suburb_id,\n        start_date,\n        end_date,\n        gender,\n        payrollid,\n        pay_run_default_id,\n        tax_file_declaration_id,\n        email,\n        home_phone,\n        work_phone,\n        mobile_phone,\n        employee_onboarding_id,\n        status,\n        _transaction_date,\n        _etl_date,\n        _modified,\n        _file\n    from source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay_dwh\".\"employee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.097038Z", "completed_at": "2024-02-04T15:20:55.109629Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.115982Z", "completed_at": "2024-02-04T15:20:55.115995Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.028964757919311523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_int__keypay_dwh__employee_id.6fc28fe327", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"int__keypay_dwh\".\"employee\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.104556Z", "completed_at": "2024-02-04T15:20:55.113242Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.121297Z", "completed_at": "2024-02-04T15:20:55.121311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03088545799255371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_int__keypay_dwh__employee_id.de19bc3d8d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"int__keypay_dwh\".\"employee\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.132356Z", "completed_at": "2024-02-04T15:20:55.149713Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.161204Z", "completed_at": "2024-02-04T15:20:55.161219Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04306149482727051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_white_label_contact", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay\".\"white_label_contact\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"white_label_id\",\n            \"user_id\",\n            \"contact_type\",\n            \"name\",\n            \"email\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"white_label_contact\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.142340Z", "completed_at": "2024-02-04T15:20:55.158889Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.166775Z", "completed_at": "2024-02-04T15:20:55.166788Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04177427291870117, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_checkly_downtime_global_raw", "compiled": true, "compiled_code": "with downtime as (\n    select\n        id,\n        name,\n        check_type,\n        current_check_started_at,\n        current_check_stopped_at,\n        next_check_started_at,\n        datediff(\n            'millisecond',\n            current_check_started_at,\n            least(\n                next_check_started_at,\n                dateadd(\n                    'millisecond',\n                    -1,\n                    dateadd('day', 1, current_check_started_at::date) -- this is the end of the day for the check start time\n                )\n            )\n        )::float / 1000                                      as downtime_check_start_date,\n        lag(next_check_started_at) over (\n            order by\n                current_check_started_at\n        )                                                    as checkpoint, -- noqa: RF04\n        -- this is to compare the starting time of each check against the previous one's next checkpoint to determine if there's an overlap\n        case\n            when current_check_started_at < checkpoint\n                then datediff(\n                    'millisecond',\n                    current_check_started_at,\n                    least(\n                        checkpoint,\n                        dateadd(\n                            'millisecond',\n                            -1,\n                            dateadd('day', 1, current_check_started_at::date) -- this is the end of the day for the check start time\n                        ),\n                        next_check_started_at\n                    )\n                )::float / 1000\n            else 0\n        end                                                  as overlap_check_start_date,\n        downtime_check_start_date - overlap_check_start_date as net_downtime_check_start_date,\n        case\n            when current_check_started_at::date < current_check_stopped_at::date\n                then datediff('millisecond', dateadd('day', 1, current_check_started_at::date), current_check_stopped_at)\n            else 0\n        end                                                  as downtime_check_end_date,\n        case\n            when current_check_started_at::date < current_check_stopped_at::date and current_check_stopped_at::date = checkpoint::date\n                then datediff('millisecond', dateadd('day', 1, current_check_started_at::date), least(current_check_stopped_at, checkpoint))\n            else 0\n        end                                                  as overlap_check_end_date,\n        downtime_check_end_date - overlap_check_end_date     as net_downtime_check_end_date\n    from\n        \"dev\".\"intermediate\".\"int_checkly_results\"\n    where\n        has_failures\n\n),\n\nqbo_au_downtime as (\n    select\n        id,\n        name,\n        check_type,\n        current_check_started_at,\n        current_check_stopped_at,\n        next_check_started_at,\n        datediff(\n            'millisecond',\n            current_check_started_at,\n            least(\n                next_check_started_at,\n                dateadd(\n                    'millisecond',\n                    -1,\n                    dateadd('day', 1, current_check_started_at::date) -- this is the end of the day for the check start time\n                )\n            )\n        )::float / 1000                                      as downtime_check_start_date,\n        lag(next_check_started_at) over (\n            order by\n                current_check_started_at\n        )                                                    as checkpoint, -- noqa: RF04\n        -- this is to compare the starting time of each check against the previous one's next checkpoint to determine if there's an overlap\n        case\n            when current_check_started_at < checkpoint\n                then datediff(\n                    'millisecond',\n                    current_check_started_at,\n                    least(\n                        checkpoint,\n                        dateadd(\n                            'millisecond',\n                            -1,\n                            dateadd('day', 1, current_check_started_at::date) -- this is the end of the day for the check start time\n                        ),\n                        next_check_started_at\n                    )\n                )::float / 1000\n            else 0\n        end                                                  as overlap_check_start_date,\n        downtime_check_start_date - overlap_check_start_date as net_downtime_check_start_date,\n        case\n            when current_check_started_at::date < current_check_stopped_at::date\n                then datediff('millisecond', dateadd('day', 1, current_check_started_at::date), current_check_stopped_at)\n            else 0\n        end                                                  as downtime_check_end_date,\n        case\n            when current_check_started_at::date < current_check_stopped_at::date and current_check_stopped_at::date = checkpoint::date\n                then datediff('millisecond', dateadd('day', 1, current_check_started_at::date), least(current_check_stopped_at, checkpoint))\n            else 0\n        end                                                  as overlap_check_end_date,\n        downtime_check_end_date - overlap_check_end_date     as net_downtime_check_end_date\n    from\n        \"dev\".\"intermediate\".\"int_checkly_results\"\n    where\n        has_failures\n        and name ~* 'AU'\n        and case\n            when lower(check_type) = 'browser' and name ~* 'QBO' and name ~* 'AU' and convert_timezone('Australia/Sydney', current_check_started_at)::time between '08:00:00' and '19:59:59' then TRUE -- Browser check in AU\n            when lower(check_type) = 'api' and name ~* 'AU' and convert_timezone('Australia/Sydney', current_check_started_at)::time between '08:00:00' and '19:59:59' then TRUE -- API check in AU\n        end\n),\n\nqbo_uk_downtime as (\n    select\n        id,\n        name,\n        check_type,\n        current_check_started_at,\n        current_check_stopped_at,\n        next_check_started_at,\n        datediff(\n            'millisecond',\n            current_check_started_at,\n            least(\n                next_check_started_at,\n                dateadd(\n                    'millisecond',\n                    -1,\n                    dateadd('day', 1, current_check_started_at::date) -- this is the end of the day for the check start time\n                )\n            )\n        )::float / 1000                                      as downtime_check_start_date,\n        lag(next_check_started_at) over (\n            order by\n                current_check_started_at\n        )                                                    as checkpoint, -- noqa: RF04\n        -- this is to compare the starting time of each check against the previous one's next checkpoint to determine if there's an overlap\n        case\n            when current_check_started_at < checkpoint\n                then datediff(\n                    'millisecond',\n                    current_check_started_at,\n                    least(\n                        checkpoint,\n                        dateadd(\n                            'millisecond',\n                            -1,\n                            dateadd('day', 1, current_check_started_at::date) -- this is the end of the day for the check start time\n                        ),\n                        next_check_started_at\n                    )\n                )::float / 1000\n            else 0\n        end                                                  as overlap_check_start_date,\n        downtime_check_start_date - overlap_check_start_date as net_downtime_check_start_date,\n        case\n            when current_check_started_at::date < current_check_stopped_at::date\n                then datediff('millisecond', dateadd('day', 1, current_check_started_at::date), current_check_stopped_at)\n            else 0\n        end                                                  as downtime_check_end_date,\n        case\n            when current_check_started_at::date < current_check_stopped_at::date and current_check_stopped_at::date = checkpoint::date\n                then datediff('millisecond', dateadd('day', 1, current_check_started_at::date), least(current_check_stopped_at, checkpoint))\n            else 0\n        end                                                  as overlap_check_end_date,\n        downtime_check_end_date - overlap_check_end_date     as net_downtime_check_end_date\n    from\n        \"dev\".\"intermediate\".\"int_checkly_results\"\n    where\n        has_failures\n        and name ~* 'UK'\n        and case\n            when lower(check_type) = 'browser' and name ~* 'QBO' and name ~* 'UK' and current_check_started_at::time between '08:00:00' and '17:59:59' then TRUE -- Browser check in the UK\n            when lower(check_type) = 'api' and name ~* 'UK' and current_check_started_at::time between '08:00:00' and '17:59:59' then TRUE --API check in the UK\n        end\n)\n\nselect\n    *,\n    TRUE  as is_overall_downtime,\n    FALSE as is_qbo_au_downtime,\n    FALSE as is_qbo_uk_downtime\n\nfrom downtime\n\nunion distinct\n\nselect\n    *,\n    FALSE as is_overall_downtime,\n    TRUE  as is_qbo_au_downtime,\n    FALSE as is_qbo_uk_downtime\n\nfrom qbo_au_downtime\n\nunion distinct\n\nselect\n    *,\n    FALSE as is_overall_downtime,\n    FALSE as is_qbo_au_downtime,\n    TRUE  as is_qbo_uk_downtime\n\nfrom qbo_uk_downtime", "relation_name": "\"dev\".\"intermediate\".\"int_checkly_downtime_global_raw\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.151008Z", "completed_at": "2024-02-04T15:20:55.163551Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.171807Z", "completed_at": "2024-02-04T15:20:55.171820Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03555011749267578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_dwh_suburb", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"int__keypay_dwh\".\"suburb\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"postcode\",\n            \"state\",\n            \"country\",\n            \"_transaction_date\",\n            \"_etl_date\",\n            \"_modified\",\n            \"_file\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay_dwh\".\"suburb\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.181542Z", "completed_at": "2024-02-04T15:20:55.196862Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.207641Z", "completed_at": "2024-02-04T15:20:55.207657Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03750109672546387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_date", "compiled": true, "compiled_code": "select\n    *,\n    \n\n  to_number(to_char(report_date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk\nfrom \"dev\".\"intermediate\".\"int_enrich_date_spine\"", "relation_name": "\"dev\".\"mart\".\"dim_date\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.189499Z", "completed_at": "2024-02-04T15:20:55.201014Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.211836Z", "completed_at": "2024-02-04T15:20:55.211849Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03734135627746582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_spined_daily_bill_management_subscription", "compiled": true, "compiled_code": "\n\nwith all_dates as (\n    select date_day\n\n    from \"dev\".\"staging\".\"stg_dates__date_spine\"\n),\n\nsubscription as (\n    select *\n\n    from \"dev\".\"intermediate\".\"int_union_bill_management_subscription\"\n\n    where subscription_status != 'submitted'\n),\n\nfirst_active_days as (\n    select\n        ebenefits_user_uuid,\n        min(activated_at)::date as first_active_day\n\n    from subscription\n\n    group by 1\n),\n\nspined as (\n    select\n        first_active_days.ebenefits_user_uuid,\n        all_dates.date_day::date\n\n    from first_active_days\n\n    left join all_dates\n        on first_active_days.first_active_day <= all_dates.date_day\n\n    where\n        all_dates.date_day < current_date\n     --noqa: LT02\n            and all_dates.date_day > dateadd('day', -30, (select max(date_day) from \"dev\".\"intermediate\".\"int_spined_daily_bill_management_subscription\")) -- we need to include the last 30 days in each incremental run to ensure the has_active_subscription window function continue to work\n    \n),\n\nfilled as (\n    select\n        spined.date_day,\n        spined.ebenefits_user_uuid,\n        count(distinct subscription.subscription_id)                                                                                                         as active_subscription_count,\n        max(active_subscription_count) over (partition by spined.ebenefits_user_uuid order by spined.date_day rows between 6 preceding and current row) > 0  as has_active_subscription_last_7_days,\n        max(active_subscription_count) over (partition by spined.ebenefits_user_uuid order by spined.date_day rows between 29 preceding and current row) > 0 as has_active_subscription_last_30_days\n\n    from spined\n\n    left join subscription\n        on\n            spined.ebenefits_user_uuid = subscription.ebenefits_user_uuid\n            and subscription.activated_at::date <= spined.date_day\n            and (subscription.cancelled_at::date > spined.date_day or subscription.cancelled_at is NULL)\n\n    group by 1, 2\n),\n\nuser_mapping as (\n    select\n        ebenefits.*,\n        eh_users.id as eh_user_id\n\n    from \"dev\".\"staging\".\"stg_ebenefits__user_created\" as ebenefits\n\n    left join \"dev\".\"staging\".\"stg_postgres_public__users\" as eh_users\n        on ebenefits.eh_user_uuid = eh_users.uuid\n),\n\nmapped as (\n    select\n        filled.date_day,\n        filled.ebenefits_user_uuid,\n        user_mapping.eh_user_id,\n        user_mapping.keypay_user_id,\n        case when user_mapping.eh_user_id is not NULL then 'employment_hero' else 'keypay' end as platform,\n        filled.active_subscription_count,\n        filled.has_active_subscription_last_7_days,\n        filled.has_active_subscription_last_30_days\n\n    from filled\n\n    inner join user_mapping\n        on filled.ebenefits_user_uuid = user_mapping.ebenefits_user_uuid\n)\n\nselect * from mapped", "relation_name": "\"dev\".\"intermediate\".\"int_spined_daily_bill_management_subscription\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.202314Z", "completed_at": "2024-02-04T15:20:55.213086Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.220650Z", "completed_at": "2024-02-04T15:20:55.220664Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036733150482177734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_squad", "compiled": true, "compiled_code": "with all_squads as (\n    select squad\n    from \"dev\".\"intermediate\".\"int_cleansed_squad_names\"\n    union distinct\n    select distinct squad from \"dev\".\"staging\".\"stg_eh_product__squad_board_ownership\"\n    union distinct\n    select distinct squad from \"dev\".\"staging\".\"stg_eh_engineering__squad_members\"\n)\n\nselect\n    md5(cast(coalesce(cast(squad as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as dim_squad_sk,\n    squad                                                                              as squad_name\nfrom all_squads\nwhere\n    squad is not NULL\n    and squad != ''", "relation_name": "\"dev\".\"mart\".\"dim_squad\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.225871Z", "completed_at": "2024-02-04T15:20:55.412868Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.422887Z", "completed_at": "2024-02-04T15:20:55.422904Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.21341943740844727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_calc_herodollar_revenue_margin", "compiled": true, "compiled_code": "with mapped_herodollar_transactions as (\n    select\n        transactions.id,\n        transactions.transaction_initiator_id,\n        transactions.ref_id,\n        transactions.parent_id,\n        transactions.transaction_source,\n        transactions.transaction_initiator_type,\n        transaction_type.transaction_type,\n        reason_type.reason_type,\n        transactions.currency_code,\n        transactions.is_hero_points_transaction,\n        transactions.hero_dollar_amount,\n        transactions.hero_points_amount,\n        transactions.hero_points_conversion_rate,\n        transactions.created_at::date as transaction_date\n\n    from \"dev\".\"staging\".\"stg_herodollar_service_public__herodollar_transactions\" as transactions\n\n    inner join \"dev\".\"intermediate\".\"int_map_herodollar_transaction_type\" as transaction_type\n        on transactions.transaction_type_key = transaction_type.transaction_type_key\n\n    left join \"dev\".\"staging\".\"stg_herodollar_service_public__tracking_infos\" as tracking\n        on transactions.id = tracking.hero_dollar_transaction_id\n\n    left join \"dev\".\"intermediate\".\"int_map_herodollar_reason_type_key\" as reason_type\n        on tracking.reason_type_key = reason_type.reason_type_key\n\n    where not transactions.fivetran_deleted\n),\n\nunified_transaction_amount as (\n    select\n        id,\n        transaction_initiator_id,\n        ref_id,\n        parent_id,\n        transaction_source,\n        transaction_initiator_type,\n        transaction_type,\n        reason_type,\n        currency_code,\n        is_hero_points_transaction,\n        hero_dollar_amount,\n        hero_points_amount,\n        hero_points_conversion_rate,\n        transaction_date,\n        case\n            when is_hero_points_transaction then hero_points_amount * hero_points_conversion_rate\n            else hero_dollar_amount\n        end as unified_transaction_amount\n\n    from mapped_herodollar_transactions\n),\n\ntransactions_with_margin_and_revenue as (\n    select\n        herodollar_transactions.*,\n        case\n            when herodollar_transactions.is_hero_points_transaction\n                then\n                    case\n                        when herodollar_transactions.transaction_source = 'ebf_shaype' then -abs(redeem_success_transactions.redeemed_amount)\n                        when herodollar_transactions.transaction_source = 'marketplace' then -abs(heroshop_transactions.transaction_amount)\n                        when herodollar_transactions.transaction_source = 'hero_dollar_purchase' then herodollar_purchase.net_transaction_amount\n                        else herodollar_transactions.unified_transaction_amount\n                    end\n            else herodollar_transactions.unified_transaction_amount\n        end as transaction_amount_margin_rate,\n        case\n            when herodollar_transactions.is_hero_points_transaction\n                then\n                    case\n                        when herodollar_transactions.transaction_source in ('ebf_shaype', 'marketplace', 'hero_dollar_purchase') then abs(herodollar_transactions.unified_transaction_amount - transaction_amount_margin_rate)\n                        else 0\n                    end\n            when herodollar_transactions.transaction_source = 'ebf_shaype' and herodollar_transactions.reason_type = 'transaction_fee' then abs(herodollar_transactions.unified_transaction_amount)\n            else 0\n        end as transaction_revenue_amount\n\n    from unified_transaction_amount as herodollar_transactions\n\n    left join \"dev\".\"staging\".\"stg_ebenefits__hd_redeem_success_transactions\" as redeem_success_transactions\n        on\n            herodollar_transactions.ref_id = redeem_success_transactions.id\n            and herodollar_transactions.transaction_source = 'ebf_shaype'\n            and herodollar_transactions.reason_type = 'default'\n\n    left join \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\" as heroshop_transactions\n        on\n            herodollar_transactions.ref_id = heroshop_transactions.order_id\n            and herodollar_transactions.transaction_source = 'marketplace'\n            and heroshop_transactions.status = 'success'\n            and heroshop_transactions.payment_method_key = 3 -- only pull Heroshop transactions using heropoints\n\n    left join \"dev\".\"staging\".\"stg_herodollar_purchases_service_public__transactions\" as herodollar_purchase\n        on\n            herodollar_transactions.ref_id = herodollar_purchase.id\n            and herodollar_transactions.transaction_source = 'hero_dollar_purchase'\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17\n)\n\nselect * from transactions_with_margin_and_revenue", "relation_name": "\"dev\".\"intermediate\".\"int_calc_herodollar_revenue_margin\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.238395Z", "completed_at": "2024-02-04T15:20:55.429248Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.436523Z", "completed_at": "2024-02-04T15:20:55.436535Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2177588939666748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_instapay_transactions", "compiled": true, "compiled_code": "with enriched_instapay_transactions as (\n    select\n        heropay.id,\n        heropay.employee_uuid,\n        transaction_status.transaction_status,\n        fee_tier.fee_tier,\n        heropay.transaction_amount,\n        heropay.fee_charged,\n        heropay.created_at::date as transaction_date\n\n    from \"dev\".\"staging\".\"stg_heropay_db__heropay_transactions\" as heropay\n\n    left join \"dev\".\"intermediate\".\"int_map_instapay_fee_tier\" as fee_tier\n        on heropay.fee_tier_key = fee_tier.fee_tier_key\n\n    left join \"dev\".\"intermediate\".\"int_map_instapay_transaction_status\" as transaction_status\n        on heropay.transaction_status_key = transaction_status.transaction_status_key\n\n    where not heropay.fivetran_deleted\n)\n\nselect\n    instapay.id, -- PK\n    instapay.employee_uuid                                         as dim_employee_uuid,\n    instapay.transaction_date,\n    instapay.transaction_status,\n    instapay.fee_tier,\n    instapay.transaction_amount,\n    instapay.fee_charged                                           as revenue_amount,\n    \n\n  to_number(to_char(transaction_date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk\n\nfrom enriched_instapay_transactions as instapay", "relation_name": "\"dev\".\"mart\".\"fct_instapay_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.424157Z", "completed_at": "2024-02-04T15:20:55.435372Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.443103Z", "completed_at": "2024-02-04T15:20:55.443117Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03162407875061035, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_heroshop_order_details", "compiled": true, "compiled_code": "with enriched_heroshop_order_details as (\n    select\n        order_details.id,\n        order_details.created_at::date                                                                                                                      as order_date,\n        \n\n  to_number(to_char(order_details.created_at::DATE,'YYYYMMDD'),'99999999')\n\n                                                                                                                          as dim_date_sk,\n        order_details.order_id,\n        order_details.product_variant_id                                                                                                                    as dim_heroshop_product_variant_id,\n        orders.member_id                                                                                                                                    as dim_employee_eh_employee_id,\n        product_variants.product_id                                                                                                                         as dim_heroshop_product_id,\n        products.product_category_id                                                                                                                        as dim_heroshop_product_category_id,\n        suppliers.id                                                                                                                                        as dim_supplier_id,\n        order_details.local_id,\n        order_details.discount,\n        order_details.quantity,\n        order_details.subtotal,\n        order_details.billable_amount,\n        order_details.price,\n        order_details.transaction_fee,\n        order_details.supplier_price,\n        order_details.freight_cost,\n        order_details.price * order_details.quantity                                                                                                        as total_price,\n        supplier_cost.supplier_cost,\n        order_details.discount - order_details.transaction_fee                                                                                              as savings,\n        -- (order_details.billable_amount) - (order_details.transaction_fee + order_details.freight_cost) - (supplier_cost.supplier_cost * order_details.quantity) as revenue,\n        order_details.billable_amount - (order_details.quantity * supplier_cost.supplier_cost) - order_details.freight_cost - order_details.transaction_fee as margin,\n        order_details.status\n\n\n    from \"dev\".\"staging\".\"stg_heroshop_db_public__order_details\" as order_details\n    left join \"dev\".\"intermediate\".\"int_map_heroshop_supplier_cost\" as supplier_cost on order_details.product_variant_id = supplier_cost.product_variant_id\n    left join \"dev\".\"staging\".\"stg_heroshop_db_public__orders\" as orders on order_details.order_id = orders.id\n    left join \"dev\".\"staging\".\"stg_heroshop_db_public__product_variants\" as product_variants on order_details.product_variant_id = product_variants.id\n    left join \"dev\".\"staging\".\"stg_heroshop_db_public__products\" as products on product_variants.product_id = products.id\n    left join \"dev\".\"staging\".\"stg_heroshop_db_public__product_categories\" as product_categories on products.product_category_id = product_categories.id\n    left join \"dev\".\"staging\".\"stg_heroshop_db_public__suppliers\" as suppliers on products.supplier_id = suppliers.id\n    --add member details and org details when tables are ready\n\n)\n\nselect\n\n    order_details.id,\n    order_details.order_date,\n    order_details.dim_date_sk,\n    order_details.order_id,\n    order_details.dim_heroshop_product_variant_id,\n    order_details.dim_employee_eh_employee_id,\n    order_details.dim_heroshop_product_id,\n    order_details.dim_heroshop_product_category_id,\n    order_details.dim_supplier_id,\n    order_details.local_id,\n    order_details.discount,\n    order_details.quantity,\n    order_details.subtotal,\n    order_details.billable_amount,\n    order_details.price,\n    order_details.transaction_fee,\n    order_details.supplier_price,\n    order_details.freight_cost,\n    order_details.total_price,\n    order_details.supplier_cost,\n    order_details.savings,\n    -- order_details.revenue,\n    order_details.margin,\n    order_details.status\n\nfrom enriched_heroshop_order_details as order_details", "relation_name": "\"dev\".\"mart\".\"fct_heroshop_order_details\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.445518Z", "completed_at": "2024-02-04T15:20:55.455690Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.465977Z", "completed_at": "2024-02-04T15:20:55.465991Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035768985748291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_heroshop_transactions", "compiled": true, "compiled_code": "with enriched_heroshop_transactions as (\n    select\n        transactions.id,\n        transactions.order_id,\n        transactions.status,\n        transactions.created_at::date                                     as transaction_date,\n        \n\n  to_number(to_char(transactions.created_at::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n        payment_method.payment_method,\n        transactions.transaction_amount,\n        transactions.hero_points_amount,\n        transactions.transaction_fee,\n        transactions.fee_rate,\n        transactions.currency_code\n\n\n\n    from \"dev\".\"staging\".\"stg_heroshop_db_public__transactions\" as transactions\n    left join \"dev\".\"intermediate\".\"int_map_heroshop_payment_method\" as payment_method on transactions.payment_method_key = payment_method.payment_method_key\n\n)\n\nselect\n    transactions.id,\n    transactions.order_id,\n    transactions.status,\n    transactions.transaction_date,\n    transactions.dim_date_sk,\n    transactions.payment_method,\n    transactions.transaction_amount,\n    transactions.hero_points_amount,\n    transactions.transaction_fee,\n    transactions.fee_rate,\n    transactions.currency_code\n\nfrom enriched_heroshop_transactions as transactions", "relation_name": "\"dev\".\"mart\".\"fct_heroshop_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.458258Z", "completed_at": "2024-02-04T15:20:55.467198Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.477392Z", "completed_at": "2024-02-04T15:20:55.477406Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029433012008666992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_service", "compiled": true, "compiled_code": "select distinct\n    md5(cast(coalesce(cast(cleansed_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as dim_service_sk,\n    cleansed_name                                                                              as service_name\nfrom \"dev\".\"intermediate\".\"int_cleansed_service_names\"\nwhere\n    cleansed_name is not NULL\n    and cleansed_name != ''", "relation_name": "\"dev\".\"mart\".\"dim_service\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.468394Z", "completed_at": "2024-02-04T15:20:55.478534Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.486450Z", "completed_at": "2024-02-04T15:20:55.486468Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03834056854248047, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_pingdom_check_uptime_raw", "compiled": true, "compiled_code": "select\n    wppcs.id           as pingdom_check_stats_id,\n    wppc.id            as pingdom_check_id,\n    srvc.cleansed_name as service_name,\n    wppcs.date,\n    wppcs.up_time\nfrom \"dev\".\"staging\".\"stg_workshop_public__pingdom_check_stats\" as wppcs\nleft join \"dev\".\"staging\".\"stg_workshop_public__pingdom_checks\" as wppc on wppcs.pingdom_check_id = wppc.id\ninner join \"dev\".\"intermediate\".\"int_cleansed_service_names\" as srvc on wppc.name = srvc.name\nleft join \"dev\".\"staging\".\"stg_eh_engineering__service_ownership\" as eeso on srvc.cleansed_name = eeso.service\nwhere\n    eeso.nonapplicable is NULL\n    and wppcs.unknown_time not like 86399 --this is to exlcude cases where no information is known about uptime/downtime", "relation_name": "\"dev\".\"intermediate\".\"int_pingdom_check_uptime_raw\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.487788Z", "completed_at": "2024-02-04T15:20:55.499115Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.511035Z", "completed_at": "2024-02-04T15:20:55.511049Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03960919380187988, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_companydash_pnc_surv__member_id_question_survey_name_score_.b8c05e5f11", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (member_id || question || survey_name || score) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"tableau_companydash_pnc_surv\"\nwhere (member_id || question || survey_name || score) is not null\ngroup by (member_id || question || survey_name || score)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.500270Z", "completed_at": "2024-02-04T15:20:55.512243Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.524200Z", "completed_at": "2024-02-04T15:20:55.524214Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.034716129302978516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__contact_contact_id.d7c02bef78", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__contact\"\nwhere contact_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.513469Z", "completed_at": "2024-02-04T15:20:55.523037Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.530664Z", "completed_at": "2024-02-04T15:20:55.530677Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031339168548583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__contact_contact_id.0cc2c0609e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.533071Z", "completed_at": "2024-02-04T15:20:55.542563Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.553634Z", "completed_at": "2024-02-04T15:20:55.553649Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03874850273132324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__account_account_id.1e0ff361d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.547228Z", "completed_at": "2024-02-04T15:20:55.562715Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.569066Z", "completed_at": "2024-02-04T15:20:55.569081Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.033008575439453125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__account_account_id.6d58a39ba7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__account\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.554889Z", "completed_at": "2024-02-04T15:20:55.567790Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.575275Z", "completed_at": "2024-02-04T15:20:55.575288Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03832244873046875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.dim_user", "compiled": true, "compiled_code": "with eh_users as (\n    select *\n\n    from \"dev\".\"intermediate\".\"int_enrich_eh_users\"\n),\n\nkeypay_users as (\n    select *\n\n    from \"dev\".\"intermediate\".\"int_enrich_keypay_users\"\n)\n\nselect\n    'employment_hero'                                                                                                                                                                                                                                         as platform,\n    eh_user_id,\n    eh_user_uuid,\n    NULL                                                                                                                                                                                                                                                      as keypay_user_id,\n    md5(cast(coalesce(cast(platform as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(eh_user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(keypay_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as dim_user_sk,\n    first_name,\n    last_name,\n    email,\n    has_acknowledged_eh_tnc,\n    is_twofa_enabled,\n    is_verified,\n    is_profile_completed,\n    is_public_profile,\n    is_active,\n    is_current_eh_employee,\n    is_active_employee,\n    active_employee_count,\n    terminated_employee_count,\n    case\n        when (is_active_employee or is_current_eh_employee) then 'employee'\n        else 'candidate'\n    end                                                                                                                                                                                                                                                       as current_persona,\n    NULL                                                                                                                                                                                                                                                      as is_payroll_admin,\n    is_marketing_consented,\n    marketing_consented_at,\n    has_swag_profile,\n    created_at\n\nfrom eh_users\n\nunion distinct\n\nselect\n    'keypay'                                                                                                                                                                                                                                                  as platform,\n    NULL                                                                                                                                                                                                                                                      as eh_user_id,\n    NULL                                                                                                                                                                                                                                                      as eh_user_uuid,\n    keypay_user_id,\n    md5(cast(coalesce(cast(platform as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(eh_user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(keypay_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as dim_user_sk,\n    first_name,\n    last_name,\n    email,\n    NULL                                                                                                                                                                                                                                                      as has_acknowledged_eh_tnc,\n    NULL                                                                                                                                                                                                                                                      as is_twofa_enabled,\n    is_active                                                                                                                                                                                                                                                 as is_verified,\n    NULL                                                                                                                                                                                                                                                      as is_profile_completed,\n    NULL                                                                                                                                                                                                                                                      as is_public_profile,\n    is_active,\n    is_current_eh_employee,\n    is_active_employee,\n    active_employee_count,\n    terminated_employee_count,\n    case\n        when (is_active_employee or is_current_eh_employee) then 'employee'\n        else 'candidate'\n    end                                                                                                                                                                                                                                                       as current_persona,\n    is_admin                                                                                                                                                                                                                                                  as is_payroll_admin,\n    NULL                                                                                                                                                                                                                                                      as is_marketing_consented,\n    NULL                                                                                                                                                                                                                                                      as marketing_consented_at,\n    has_swag_profile,\n    NULL                                                                                                                                                                                                                                                      as created_at\n\nfrom keypay_users", "relation_name": "\"dev\".\"mart\".\"dim_user\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.577648Z", "completed_at": "2024-02-04T15:20:55.588503Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.599924Z", "completed_at": "2024-02-04T15:20:55.599937Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03762054443359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__event_event_id.e964b30db8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__event\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.591069Z", "completed_at": "2024-02-04T15:20:55.601125Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.611611Z", "completed_at": "2024-02-04T15:20:55.611624Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03117513656616211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__event_event_id.13f7c8c0d9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__event\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.602276Z", "completed_at": "2024-02-04T15:20:55.612796Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.620236Z", "completed_at": "2024-02-04T15:20:55.620248Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03909420967102051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__opportunity_line_item_opportunity_line_item_id.b5d2465072", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_line_item_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__opportunity_line_item\"\nwhere opportunity_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.621465Z", "completed_at": "2024-02-04T15:20:55.632439Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.645046Z", "completed_at": "2024-02-04T15:20:55.645070Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03992056846618652, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__opportunity_line_item_opportunity_line_item_id.c18042d902", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    opportunity_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__opportunity_line_item\"\nwhere opportunity_line_item_id is not null\ngroup by opportunity_line_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.633732Z", "completed_at": "2024-02-04T15:20:55.646915Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.659543Z", "completed_at": "2024-02-04T15:20:55.659567Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.036676645278930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__lead_lead_id.e2ba6b2026", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lead_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__lead\"\nwhere lead_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.648071Z", "completed_at": "2024-02-04T15:20:55.658330Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.666276Z", "completed_at": "2024-02-04T15:20:55.666303Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035092830657958984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__lead_lead_id.ba8b21e282", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    lead_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__lead\"\nwhere lead_id is not null\ngroup by lead_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.668818Z", "completed_at": "2024-02-04T15:20:55.682095Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.697140Z", "completed_at": "2024-02-04T15:20:55.697157Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.051744699478149414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__order_order_id.4782f3b34f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__order\"\nwhere order_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.688399Z", "completed_at": "2024-02-04T15:20:55.709957Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.718023Z", "completed_at": "2024-02-04T15:20:55.718038Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044457197189331055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__order_order_id.12a96b4e3c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.698549Z", "completed_at": "2024-02-04T15:20:55.716769Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.724498Z", "completed_at": "2024-02-04T15:20:55.724510Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04806995391845703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__opportunity_line_item_enhanced", "compiled": true, "compiled_code": "--This model will only run if you have the underlying opportunity line item table.\n\n\nwith opportunity_line_item as (\n    \n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__opportunity_line_item\"\n), \n\n-- If using product_2 table, the following will be included, otherwise it will not.\n\nproduct_2 as (\n\nselect *\nfrom \"dev\".\"salesforce\".\"stg_salesforce__product_2\"\n),\n\n\nfinal as (\n\n    select\n        oli.opportunity_line_item_id,\n        oli.opportunity_line_item_name,\n        oli.opportunity_line_item_description,\n        oli.opportunity_id,\n        row_number() over (partition by oli.opportunity_id order by oli.created_date) as line_item_index,\n        count(opportunity_line_item_id) over (partition by oli.opportunity_id) as total_line_items,\n        oli.created_date,\n        oli.last_modified_date,\n        oli.service_date,\n        oli.pricebook_entry_id,\n        oli.product_2_id,\n        oli.list_price,\n        oli.quantity,\n        oli.unit_price,\n        oli.total_price,\n        oli.has_quantity_schedule,\n        oli.has_revenue_schedule\n\n        \n        ,\n        product_2.product_2_name,\n        product_2.product_code,\n        product_2.product_2_description,\n        product_2.external_id as product_external_id,\n        product_2.family as product_family,\n        product_2.is_active as product_is_active,\n        product_2.is_archived as product_is_archived,\n        product_2.is_deleted as product_is_deleted,\n        product_2.number_of_quantity_installments as product_number_of_quantity_installments,\n        product_2.quantity_installment_period as product_quantity_installment_period,\n        product_2.quantity_schedule_type as product_quantity_schedule_type,\n        product_2.quantity_unit_of_measure as product_quantity_unit_of_measure,\n        product_2.number_of_revenue_installments as product_number_of_revenue_installments,\n        product_2.revenue_installment_period as product_revenue_installment_period,\n        product_2.revenue_schedule_type as product_revenue_schedule_type\n        \n\n        --The below script allows for pass through columns.\n        \n\n\n\n\n\n        \n        \n\n\n\n\n        \n\n    from opportunity_line_item as oli\n\n    \n    left join product_2\n        on oli.product_2_id = product_2.product_2_id\n    \n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"salesforce\".\"salesforce__opportunity_line_item_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.726836Z", "completed_at": "2024-02-04T15:20:55.737998Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.750642Z", "completed_at": "2024-02-04T15:20:55.750659Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03834867477416992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__product_2_product_2_id.84aed29e8a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_2_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__product_2\"\nwhere product_2_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.743651Z", "completed_at": "2024-02-04T15:20:55.758822Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.766750Z", "completed_at": "2024-02-04T15:20:55.766763Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.036765336990356445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__product_2_product_2_id.b4bc489d61", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_2_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__product_2\"\nwhere product_2_id is not null\ngroup by product_2_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.751953Z", "completed_at": "2024-02-04T15:20:55.761409Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.769363Z", "completed_at": "2024-02-04T15:20:55.769378Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03670001029968262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__opportunity_opportunity_id.234c5e60bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__opportunity\"\nwhere opportunity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.772140Z", "completed_at": "2024-02-04T15:20:55.782887Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.795166Z", "completed_at": "2024-02-04T15:20:55.795188Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04951906204223633, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__opportunity_opportunity_id.367b0f577a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    opportunity_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__opportunity\"\nwhere opportunity_id is not null\ngroup by opportunity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.789110Z", "completed_at": "2024-02-04T15:20:55.822895Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.831010Z", "completed_at": "2024-02-04T15:20:55.831049Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05801272392272949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.salesforce__call_performance_daily", "compiled": true, "compiled_code": "with date_spine as (\n    select\n        date_trunc('day', date_day) as date_day\n    from \"dev\".\"salesforce\".\"int_salesforce__date_spine\"\n),\n\nnot_sat_demo_opp as (\n    select opportunity_id\n    from \"dev\".\"salesforce\".\"stg_salesforce__opportunity\"\n    where demo_sat_date is NULL\n),\n\ntask_call as (\n    select\n        date_trunc('day', task.activity_date) as activity_date,\n        task.owner_id,\n        sum(case\n            when task.type in ('Call', 'Call - Reminder') then call_duration_in_seconds\n            else 0\n        end)                                  as total_call_duration_in_sec,\n        sum(\n            case\n                when task.call_duration_in_seconds > 0 and task.type in ('Call', 'Call - Reminder') then 1\n                else 0\n            end\n        )                                     as total_calls,\n        sum(\n            case\n                when task.type in ('Connect', 'Connect - Meaningful', 'Connect - Non-Meaningful') then 1\n                else 0\n            end\n        )                                     as total_connects,\n        sum(\n            case\n                when task.type in ('Connect', 'Connect - Meaningful', 'Connect - Non-Meaningful') and opp.opportunity_id is not NULL then 1\n                else 0\n            end\n        )                                     as total_connect_to_opps\n    from \"dev\".\"salesforce\".\"stg_salesforce__task\" as task\n    left join not_sat_demo_opp as opp\n        on task.what_id = opp.opportunity_id\n    group by 1, 2\n),\n\nfinal as (\n    select\n        date_spine.date_day,\n        task_call.owner_id,\n        task_call.total_call_duration_in_sec,\n        task_call.total_calls,\n        task_call.total_connects,\n        task_call.total_connect_to_opps,\n        round(\n            case\n                when task_call.total_connects then 100.0 * task_call.total_connect_to_opps / task_call.total_connects\n                else 0\n            end, 2\n        )       as connect_to_opp_ratio,\n        round(case\n            when task_call.total_calls > 0 then 100.0 * task_call.total_connects / task_call.total_calls\n            else 0\n        end, 2) as call_to_connect_ratio\n    from date_spine\n    left join task_call\n        on date_spine.date_day = task_call.activity_date\n)\n\nselect * from final", "relation_name": "\"dev\".\"salesforce\".\"salesforce__call_performance_daily\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.797298Z", "completed_at": "2024-02-04T15:20:55.828556Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.840970Z", "completed_at": "2024-02-04T15:20:55.840985Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.061411380767822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__daily_activity", "compiled": true, "compiled_code": "with date_spine as (\n    \n    select \n        date_trunc('day', date_day) as date_day\n    from \"dev\".\"salesforce\".\"int_salesforce__date_spine\"\n),\n\n\ntask as (\n    \n    select \n        date_trunc('day', activity_date) as activity_date,\n        count(task_id) as tasks_completed\n    from \"dev\".\"salesforce\".\"stg_salesforce__task\"\n    group by 1\n), \n\n\n\nsalesforce_event as (\n\n    select \n        coalesce(date_trunc('day', activity_date), date_trunc('day', activity_date_time)) as activity_date,\n        count(event_id) as events_completed\n    from \"dev\".\"salesforce\".\"stg_salesforce__event\"  \n    group by 1\n), \n\n\n\nsalesforce_lead as (\n\n    select \n        date_trunc('day', created_date) as created_date,\n        count(lead_id) as leads_created\n    from \"dev\".\"salesforce\".\"stg_salesforce__lead\"\n    group by 1\n), \n\nsalesforce_converted_lead as (\n\n    select \n        date_trunc('day', converted_date) as converted_date,\n        count(lead_id) as leads_converted\n    from \"dev\".\"salesforce\".\"stg_salesforce__lead\"\n    where is_converted\n    group by 1\n), \n\n\nopportunity as (\n\n    select \n        opportunity_id,\n        date_trunc('day', created_date) as created_date,\n        account_id,\n        date_trunc('day', close_date) as close_date,\n        is_closed,\n        is_deleted,\n        is_won,\n        owner_id, \n        stage_name,\n        type,\n        amount,\n        case\n            when is_won then 'Won'\n            when not is_won and is_closed then 'Lost'\n            when not is_closed and lower(forecast_category) in ('pipeline','forecast','bestcase') then 'Pipeline'\n            else 'Other'\n        end as status\n    from \"dev\".\"salesforce\".\"stg_salesforce__opportunity\"\n),\n\nopportunities_created as (\n\n    select\n        created_date,\n        count(opportunity_id) as opportunities_created,\n        round(sum(amount)) as opportunities_created_amount\n    from opportunity\n    group by 1\n),\n\nopportunities_closed as (\n\n    select\n        close_date,\n        count(case when status = 'Won' then opportunity_id else null end) as opportunities_won,\n        round(sum(case when status = 'Won' then amount else 0 end)) as opportunities_won_amount,\n        count(case when status = 'Lost' then opportunity_id else null end) as opportunities_lost,\n        round(sum(case when status = 'Lost' then amount else null end)) as opportunities_lost_amount,\n        round(sum(case when status = 'Pipeline' then amount else null end)) as pipeline_amount\n    from opportunity\n    group by 1\n)\n\nselect\n    date_spine.date_day,\n\n    \n    salesforce_lead.leads_created,\n    salesforce_converted_lead.leads_converted,\n    \n    \n    \n    task.tasks_completed,\n    \n\n    \n    salesforce_event.events_completed,\n    \n\n    opportunities_created.opportunities_created,\n    opportunities_created.opportunities_created_amount,\n    opportunities_closed.opportunities_won,\n    opportunities_closed.opportunities_won_amount,\n    opportunities_closed.opportunities_lost,\n    opportunities_closed.opportunities_lost_amount,\n    opportunities_closed.pipeline_amount\nfrom date_spine\n\n\nleft join salesforce_lead\n    on date_spine.date_day = salesforce_lead.created_date\nleft join salesforce_converted_lead\n    on date_spine.date_day = salesforce_converted_lead.converted_date\n\n\n\nleft join task\n    on date_spine.date_day = task.activity_date\n\n\n\nleft join salesforce_event\n    on date_spine.date_day = salesforce_event.activity_date\n\n\nleft join opportunities_created\n    on date_spine.date_day = opportunities_created.created_date\nleft join opportunities_closed\n    on date_spine.date_day = opportunities_closed.close_date", "relation_name": "\"dev\".\"salesforce\".\"salesforce__daily_activity\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.833624Z", "completed_at": "2024-02-04T15:20:55.843607Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.851553Z", "completed_at": "2024-02-04T15:20:55.851566Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03489804267883301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__task_task_id.aabe11a5d9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect task_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__task\"\nwhere task_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.854173Z", "completed_at": "2024-02-04T15:20:55.868648Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.873805Z", "completed_at": "2024-02-04T15:20:55.873820Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.035332679748535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__task_task_id.73684ed605", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    task_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__task\"\nwhere task_id is not null\ngroup by task_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.863536Z", "completed_at": "2024-02-04T15:20:55.874972Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.887996Z", "completed_at": "2024-02-04T15:20:55.888012Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03964042663574219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__user_role_user_role_id.949036e9bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_role_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__user_role\"\nwhere user_role_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.876118Z", "completed_at": "2024-02-04T15:20:55.889182Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.898874Z", "completed_at": "2024-02-04T15:20:55.898892Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.041779279708862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__user_role_user_role_id.1259050718", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_role_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__user_role\"\nwhere user_role_id is not null\ngroup by user_role_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.900248Z", "completed_at": "2024-02-04T15:20:55.915863Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.934290Z", "completed_at": "2024-02-04T15:20:55.934308Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.052031517028808594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__contact_enhanced", "compiled": true, "compiled_code": "with contact as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__contact\"\n), \n\naccount as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__account\"\n),\n\nsalesforce_user as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user\"\n)\n\nselect \n    contact.contact_id,\n    contact.contact_name,\n    contact.account_id,\n    contact.department,\n    contact.contact_description,\n    contact.email,\n    contact.individual_id,\n    contact.is_deleted as contact_is_deleted,\n    contact.last_activity_date,\n    contact.lead_source,\n    contact.mailing_city,\n    contact.mailing_country,\n    contact.mailing_country_code,\n    contact.mailing_postal_code,\n    contact.mailing_state,\n    contact.mailing_state_code,\n    contact.mailing_street,\n    contact.master_record_id,\n    contact.mobile_phone,\n    contact.owner_id as contact_owner_id,\n    contact.phone,\n    contact.reports_to_id,\n    salesforce_user.user_name as contact_owner_name,\n    account.account_name,\n    account.account_number,\n    account.account_source,\n    account.annual_revenue as account_annual_revenue,\n    account.account_description,\n    account.industry as account_industry,\n    account.is_deleted as account_is_deleted,\n    account.number_of_employees as account_number_of_employees,\n    account.owner_id as account_owner_id,\n    account.parent_id as account_parent_id,\n    account.rating as account_rating,\n    account.type as account_type\n\n        --The below scripts allows for pass through columns.\n    \n\n\n\n\n    \n\n\n    \n        , (account.geo_code_c) as geo_code_c\n    \n\n\n\n    \n\n\n    \n        , (salesforce_user.market) as market\n    \n\n\n\n    \nfrom contact\nleft join account \n    on contact.account_id = account.account_id\nleft join salesforce_user\n    on contact.owner_id = salesforce_user.user_id", "relation_name": "\"dev\".\"salesforce\".\"salesforce__contact_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.917154Z", "completed_at": "2024-02-04T15:20:55.940934Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.947275Z", "completed_at": "2024-02-04T15:20:55.947289Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04111504554748535, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__opportunity_enhanced", "compiled": true, "compiled_code": "with opportunity as (\n    \n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__opportunity\"\n),\n\nsalesforce_user as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user\"  \n), \n\n-- If using user_role table, the following will be included, otherwise it will not.\n\nuser_role as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user_role\"  \n), \n\n\naccount as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__account\"\n), \n\nadd_fields as (\n\n    select \n        opportunity.*,\n        account.account_number,\n        account.account_source,\n        account.industry,\n        account.account_name,\n        account.number_of_employees,\n        account.type as account_type,\n        opportunity_owner.user_id as opportunity_owner_id,\n        opportunity_owner.user_name as opportunity_owner_name,\n        opportunity_owner.user_role_id as opportunity_owner_role_id,\n        opportunity_owner.city opportunity_owner_city,\n        opportunity_owner.state as opportunity_owner_state,\n        opportunity_manager.user_id as opportunity_manager_id,\n        opportunity_manager.user_name as opportunity_manager_name,\n        opportunity_manager.city opportunity_manager_city,\n        opportunity_manager.state as opportunity_manager_state,\n\n        -- If using user_role table, the following will be included, otherwise it will not.\n        \n        user_role.user_role_name as opportunity_owner_position, \n        user_role.developer_name as opportunity_owner_developer_name,\n        user_role.parent_role_id as opportunity_owner_parent_role_id,\n        user_role.rollup_description as opportunity_owner_rollup_description,\n        \n\n        case\n            when opportunity.is_won then 'Won'\n            when not opportunity.is_won and opportunity.is_closed then 'Lost'\n            when not opportunity.is_closed and lower(opportunity.forecast_category) in ('pipeline','forecast','bestcase') then 'Pipeline'\n            else 'Other'\n        end as status,\n        case when is_created_this_month then amount else 0 end as created_amount_this_month,\n        case when is_created_this_quarter then amount else 0 end as created_amount_this_quarter,\n        case when is_created_this_month then 1 else 0 end as created_count_this_month,\n        case when is_created_this_quarter then 1 else 0 end as created_count_this_quarter,\n        case when is_closed_this_month then amount else 0 end as closed_amount_this_month,\n        case when is_closed_this_quarter then amount else 0 end as closed_amount_this_quarter,\n        case when is_closed_this_month then 1 else 0 end as closed_count_this_month,\n        case when is_closed_this_quarter then 1 else 0 end as closed_count_this_quarter\n\n        --The below script allows for pass through columns.\n        \n\n\n    \n        , (account.geo_code_c) as geo_code_c\n    \n\n\n\n        \n\n\n    \n        , (opportunity_owner.market) as market_owner\n    \n\n\n\n        \n\n\n    \n        , (opportunity_manager.market) as market_manager\n    \n\n\n\n\n        -- If using user_role table, the following will be included, otherwise it will not.\n        \n        \n\n\n\n\n        \n\n    from opportunity\n    left join account \n        on opportunity.account_id = account.account_id\n    left join salesforce_user as opportunity_owner \n        on opportunity.owner_id = opportunity_owner.user_id\n    left join salesforce_user as opportunity_manager \n        on opportunity_owner.manager_id = opportunity_manager.user_id\n\n    -- If using user_role table, the following will be included, otherwise it will not.\n    \n    left join user_role \n        on opportunity_owner.user_role_id = user_role.user_role_id\n\n    \n    )\n\nselect *\nfrom add_fields", "relation_name": "\"dev\".\"salesforce\".\"salesforce__opportunity_enhanced\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.935504Z", "completed_at": "2024-02-04T15:20:55.946112Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.953689Z", "completed_at": "2024-02-04T15:20:55.953702Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03197312355041504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.not_null_stg_salesforce__user_user_id.ac0ab26d65", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"salesforce\".\"stg_salesforce__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.956010Z", "completed_at": "2024-02-04T15:20:55.967185Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.978161Z", "completed_at": "2024-02-04T15:20:55.978176Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.036368608474731445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce_source.unique_stg_salesforce__user_user_id.9a29b41152", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"stg_salesforce__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.969846Z", "completed_at": "2024-02-04T15:20:55.986330Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.993922Z", "completed_at": "2024-02-04T15:20:55.993935Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03445267677307129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__brand_brand_id.a2419e1741", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect brand_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__brand\"\nwhere brand_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.979440Z", "completed_at": "2024-02-04T15:20:55.988910Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:55.996172Z", "completed_at": "2024-02-04T15:20:55.996185Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035878896713256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__brand_brand_id.fdf8e23c9e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    brand_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__brand\"\nwhere brand_id is not null\ngroup by brand_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:55.998887Z", "completed_at": "2024-02-04T15:20:56.009525Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.022323Z", "completed_at": "2024-02-04T15:20:56.022336Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03792619705200195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__domain_name_organization_id.a2b5ff8fd3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__domain_name\"\nwhere organization_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.017033Z", "completed_at": "2024-02-04T15:20:56.030451Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.040553Z", "completed_at": "2024-02-04T15:20:56.040567Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0367889404296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.dbt_utils_unique_combination_of_columns_stg_zendesk__daylight_time_time_zone__year.88227aef3d", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        time_zone, year\n    from \"dev\".\"zendesk\".\"stg_zendesk__daylight_time\"\n    group by time_zone, year\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.023461Z", "completed_at": "2024-02-04T15:20:56.033839Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.043221Z", "completed_at": "2024-02-04T15:20:56.043236Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04109787940979004, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__group_group_id.7659ed83ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect group_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__group\"\nwhere group_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.046273Z", "completed_at": "2024-02-04T15:20:56.055636Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.063132Z", "completed_at": "2024-02-04T15:20:56.063145Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03809070587158203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__group_group_id.f0658dabcd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    group_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__group\"\nwhere group_id is not null\ngroup by group_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.064281Z", "completed_at": "2024-02-04T15:20:56.079319Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.093268Z", "completed_at": "2024-02-04T15:20:56.093284Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03930211067199707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__organization_organization_id.de7b98c06a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__organization\"\nwhere organization_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.069620Z", "completed_at": "2024-02-04T15:20:56.080565Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.094507Z", "completed_at": "2024-02-04T15:20:56.094521Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.039608001708984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__organization_organization_id.152be1ab31", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organization_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__organization\"\nwhere organization_id is not null\ngroup by organization_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.085541Z", "completed_at": "2024-02-04T15:20:56.101656Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.108939Z", "completed_at": "2024-02-04T15:20:56.108953Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.044580936431884766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__organization_aggregates", "compiled": true, "compiled_code": "with organizations as (\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__organization\"\n\n--If you use organization tags this will be included, if not it will be ignored.\n\n), organization_tags as (\n    select * \n    from \"dev\".\"zendesk\".\"stg_zendesk__organization_tag\"\n\n), tag_aggregates as (\n    select\n        organizations.organization_id,\n        \n    listagg(organization_tags.tags, ', ')\n\n as organization_tags\n    from organizations\n\n    left join organization_tags\n        using (organization_id)\n\n    group by 1\n\n\n--If you use using_domain_names tags this will be included, if not it will be ignored.\n\n), domain_names as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__domain_name\"\n\n), domain_aggregates as (\n    select\n        organizations.organization_id,\n        \n    listagg(domain_names.domain_name, ', ')\n\n as domain_names\n    from organizations\n\n    left join domain_names\n        using(organization_id)\n    \n    group by 1\n\n\n\n), final as (\n    select\n        organizations.*\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n        ,tag_aggregates.organization_tags\n        \n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,domain_aggregates.domain_names\n        \n\n    from organizations\n\n    --If you use using_domain_names tags this will be included, if not it will be ignored.\n    \n    left join domain_aggregates\n        using(organization_id)\n    \n\n    --If you use organization tags this will be included, if not it will be ignored.\n    \n    left join tag_aggregates\n        using(organization_id)\n    \n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__organization_aggregates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.110084Z", "completed_at": "2024-02-04T15:20:56.126942Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.138181Z", "completed_at": "2024-02-04T15:20:56.138197Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03949737548828125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__schedule_holiday_holiday_id.52eb08f782", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect holiday_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__schedule_holiday\"\nwhere holiday_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.117266Z", "completed_at": "2024-02-04T15:20:56.129511Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.139453Z", "completed_at": "2024-02-04T15:20:56.139467Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03976273536682129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__schedule_holiday_holiday_id.0341d5635a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    holiday_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__schedule_holiday\"\nwhere holiday_id is not null\ngroup by holiday_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.131840Z", "completed_at": "2024-02-04T15:20:56.140808Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.148847Z", "completed_at": "2024-02-04T15:20:56.148860Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.027751445770263672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_comment_ticket_comment_id.b821f4a606", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_comment_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__ticket_comment\"\nwhere ticket_comment_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.164053Z", "completed_at": "2024-02-04T15:20:56.176464Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.182382Z", "completed_at": "2024-02-04T15:20:56.182397Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.034796953201293945, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__latest_ticket_form", "compiled": true, "compiled_code": "--To disable this model, set the using_ticket_form_history variable within your dbt_project.yml file to False.\n\n\nwith ticket_form_history as (\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__ticket_form_history\"\n),\n\nlatest_ticket_form as (\n    select\n      *,\n      row_number() over(partition by ticket_form_id order by updated_at desc) as latest_form_index\n    from ticket_form_history\n),\n\nfinal as (\n    select \n        ticket_form_id,\n        created_at,\n        updated_at,\n        display_name,\n        is_active,\n        name,\n        latest_form_index\n    from latest_ticket_form\n\n    where latest_form_index = 1\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__latest_ticket_form\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.157857Z", "completed_at": "2024-02-04T15:20:56.177623Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.183538Z", "completed_at": "2024-02-04T15:20:56.183551Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03767871856689453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__ticket_comment_ticket_comment_id.ba353330cd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_comment_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__ticket_comment\"\nwhere ticket_comment_id is not null\ngroup by ticket_comment_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.171187Z", "completed_at": "2024-02-04T15:20:56.181129Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.188984Z", "completed_at": "2024-02-04T15:20:56.188996Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.024333715438842773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_form_history_ticket_form_id.1afe781a17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_form_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__ticket_form_history\"\nwhere ticket_form_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.202045Z", "completed_at": "2024-02-04T15:20:56.234179Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.240652Z", "completed_at": "2024-02-04T15:20:56.240678Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05077028274536133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__schedule_spine", "compiled": true, "compiled_code": "\n\n/*\n    The purpose of this model is to create a spine of appropriate timezone offsets to use for schedules, as offsets may change due to Daylight Savings.\n    End result will include `valid_from` and `valid_until` columns which we will use downstream to determine which schedule-offset to associate with each ticket (ie standard time vs daylight time)\n*/\n\nwith timezone as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__time_zone\"\n\n), daylight_time as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__daylight_time\"\n\n), schedule as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__schedule\"   \n\n), schedule_holiday as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__schedule_holiday\"   \n\n), timezone_with_dt as (\n\n    select \n        timezone.*,\n        daylight_time.daylight_start_utc,\n        daylight_time.daylight_end_utc,\n        daylight_time.daylight_offset_minutes\n\n    from timezone \n    left join daylight_time \n        on timezone.time_zone = daylight_time.time_zone\n\n), order_timezone_dt as (\n\n    select \n        *,\n        -- will be null for timezones without any daylight savings records (and the first entry)\n        -- we will coalesce the first entry date with .... the X years ago\n        lag(daylight_end_utc, 1) over (partition by time_zone order by daylight_end_utc asc) as last_daylight_end_utc,\n        -- will be null for timezones without any daylight savings records (and the last entry)\n        -- we will coalesce the last entry date with the current date \n        lead(daylight_start_utc, 1) over (partition by time_zone order by daylight_start_utc asc) as next_daylight_start_utc\n\n    from timezone_with_dt\n\n), split_timezones as (\n\n    -- standard schedule (includes timezones without DT)\n    -- starts: when the last Daylight Savings ended\n    -- ends: when the next Daylight Savings starts\n    select \n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- last_daylight_end_utc is null for the first record of the time_zone's daylight time, or if the TZ doesn't use DT\n        coalesce(last_daylight_end_utc, cast('1970-01-01' as date)) as valid_from,\n\n        -- daylight_start_utc is null for timezones that don't use DT\n        coalesce(daylight_start_utc, cast( \n\n    dateadd(\n        year,\n        1,\n        getdate()\n        )\n\n as date)) as valid_until\n\n    from order_timezone_dt\n\n    union all \n\n    -- DT schedule (excludes timezones without it)\n    -- starts: when this Daylight Savings started\n    -- ends: when this Daylight Savings ends\n    select \n        time_zone,\n        -- Pacific Time is -8h during standard time and -7h during DT\n        standard_offset_minutes + daylight_offset_minutes as offset_minutes,\n        daylight_start_utc as valid_from,\n        daylight_end_utc as valid_until\n\n    from order_timezone_dt\n    where daylight_offset_minutes is not null\n\n    union all\n\n    select\n        time_zone,\n        standard_offset_minutes as offset_minutes,\n\n        -- Get the latest daylight_end_utc time and set that as the valid_from\n        max(daylight_end_utc) as valid_from,\n\n        -- If the latest_daylight_end_time_utc is less than todays timestamp, that means DST has ended. Therefore, we will make the valid_until in the future.\n        cast( \n\n    dateadd(\n        year,\n        1,\n        getdate()\n        )\n\n as date) as valid_until\n\n    from order_timezone_dt\n    group by 1, 2\n    -- We only want to apply this logic to time_zone's that had daylight saving time and it ended at a point. For example, Hong Kong ended DST in 1979.\n    having cast(max(daylight_end_utc) as date) < cast(getdate() as date)\n\n), calculate_schedules as (\n\n    select \n        schedule.schedule_id,\n        schedule.time_zone,\n        schedule.start_time,\n        schedule.end_time,\n        schedule.created_at,\n        schedule.schedule_name,\n        schedule.start_time - coalesce(split_timezones.offset_minutes, 0) as start_time_utc,\n        schedule.end_time - coalesce(split_timezones.offset_minutes, 0) as end_time_utc,\n        coalesce(split_timezones.offset_minutes, 0) as offset_minutes_to_add,\n        -- we'll use these to determine which schedule version to associate tickets with\n        cast(split_timezones.valid_from as timestamp) as valid_from,\n        cast(split_timezones.valid_until as timestamp) as valid_until\n\n    from schedule\n    left join split_timezones\n        on split_timezones.time_zone = schedule.time_zone\n\n-- Now we need take holiday's into consideration and perform the following transformations to account for Holidays in existing schedules\n), holiday_start_end_times as (\n\n    select\n        calculate_schedules.*,\n        schedule_holiday.holiday_name,\n        schedule_holiday.holiday_start_date_at,\n        cast(\n\n    dateadd(\n        second,\n        86400,\n        schedule_holiday.holiday_end_date_at\n        )\n\n as timestamp) as holiday_end_date_at, -- add 24*60*60 seconds\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        schedule_holiday.holiday_start_date_at\n        )\n\n)\n        )\n\n as date) as timestamp) as holiday_week_start,\n        cast(cast(\n\n    dateadd(\n        day,\n        6,\n        -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        schedule_holiday.holiday_end_date_at\n        )\n\n)\n        )\n\n as date)\n        )\n\n as date) as timestamp) as holiday_week_end\n    from schedule_holiday\n    inner join calculate_schedules\n        on calculate_schedules.schedule_id = schedule_holiday.schedule_id\n        and schedule_holiday.holiday_start_date_at >= calculate_schedules.valid_from \n        and schedule_holiday.holiday_start_date_at < calculate_schedules.valid_until\n\n-- Let's calculate the start and end date of the Holiday in terms of minutes from Sunday (like other Zendesk schedules)\n), holiday_minutes as(\n\n    select\n        holiday_start_end_times.*,\n        datediff(\n        minute,\n        holiday_week_start,\n        holiday_start_date_at\n        ) - coalesce(timezone.standard_offset_minutes, 0) as minutes_from_sunday_start,\n        datediff(\n        minute,\n        holiday_week_start,\n        holiday_end_date_at\n        ) - coalesce(timezone.standard_offset_minutes, 0) as minutes_from_sunday_end\n    from holiday_start_end_times\n    left join timezone\n        on timezone.time_zone = holiday_start_end_times.time_zone\n\n-- Determine which schedule days include a holiday\n), holiday_check as (\n\n    select\n        *,\n        case when minutes_from_sunday_start < start_time_utc and minutes_from_sunday_end > end_time_utc \n            then holiday_name \n        end as holiday_name_check\n    from holiday_minutes\n\n-- Consolidate the holiday records that were just created\n), holiday_consolidated as (\n\n    select \n        schedule_id, \n        time_zone, \n        schedule_name, \n        valid_from, \n        valid_until, \n        start_time_utc, \n        end_time_utc, \n        holiday_week_start,\n        cast(\n\n    dateadd(\n        second,\n        86400,\n        holiday_week_end\n        )\n\n as timestamp) as holiday_week_end,\n        max(holiday_name_check) as holiday_name_check\n    from holiday_check\n    group by 1,2,3,4,5,6,7,8,9\n\n-- Since we have holiday schedules and normal schedules, we need to union them into a holistic schedule spine\n), spine_union as (\n\n    select\n        schedule_id, \n        time_zone, \n        schedule_name, \n        valid_from, \n        valid_until, \n        start_time_utc, \n        end_time_utc, \n        holiday_week_start,\n        holiday_week_end,\n        holiday_name_check\n    from holiday_consolidated\n\n    union all\n\n    select\n        schedule_id, \n        time_zone, \n        schedule_name, \n        valid_from, \n        valid_until, \n        start_time_utc, \n        end_time_utc, \n        null as holiday_week_start,\n        null as holiday_week_end,\n        null as holiday_name_check\n    from calculate_schedules\n\n-- Now that we have an understanding of which weeks are holiday's let's consolidate them with non holiday weeks\n), all_periods as (\n\n    select distinct\n        schedule_id,\n        holiday_week_start as period_start,\n        holiday_week_end as period_end,\n        start_time_utc,\n        end_time_utc,\n        holiday_name_check,\n        true as is_holiday_week\n    from spine_union\n    where holiday_week_start is not null\n        and holiday_week_end is not null\n\n    union all\n\n    select distinct\n        schedule_id,\n        valid_from as period_start,\n        valid_until as period_end,\n        start_time_utc,\n        end_time_utc,\n        cast(null as TEXT) as holiday_name_check,\n        false as is_holiday_week\n    from spine_union\n\n-- We have holiday and non holiday schedules together, now let's sort them to understand the previous end and next start of neighboring schedules\n), sorted_periods as (\n\n    select distinct\n        *,\n        lag(period_end) over (partition by schedule_id order by period_start, start_time_utc) as prev_end,\n        lead(period_start) over (partition by schedule_id order by period_start, start_time_utc) as next_start\n    from all_periods\n\n-- We need to adjust some non holiday schedules in order to properly fill holiday gaps in the schedules later down the transformation\n), non_holiday_period_adjustments as (\n\n    select\n        schedule_id, \n        period_start, \n        period_end,\n        prev_end,\n        next_start,\n        -- taking first_value/last_value because prev_end and next_start are inconsistent within the schedule partitions -- they all include a record that is outside the partition. so we need to ignore those erroneous records that slip in\n        coalesce(greatest(case \n            when not is_holiday_week and prev_end is not null then first_value(prev_end) over (partition by schedule_id, period_start order by start_time_utc rows between unbounded preceding and unbounded following)\n            else period_start\n        end, period_start), period_start) as valid_from,\n        coalesce(case \n            when not is_holiday_week and next_start is not null then last_value(next_start) over (partition by schedule_id, period_start order by start_time_utc rows between unbounded preceding and unbounded following)\n            else period_end\n        end, period_end) as valid_until,\n        start_time_utc,\n        end_time_utc,\n        holiday_name_check,\n        is_holiday_week\n    from sorted_periods\n\n-- A few window function results will be leveraged downstream. Let's generate them now.\n), gap_starter as (\n    select \n        *,\n        max(period_end) over (partition by schedule_id) as max_valid_until,\n        last_value(next_start) over (partition by schedule_id, period_start order by valid_until rows between unbounded preceding and unbounded following) as lead_next_start,\n        first_value(prev_end) over (partition by schedule_id, valid_from order by start_time_utc rows between unbounded preceding and unbounded following) as first_prev_end\n    from non_holiday_period_adjustments\n\n-- There may be gaps in holiday and non holiday schedules, so we need to identify where these gaps are\n), gap_adjustments as(\n\n    select \n        *,\n        -- In order to identify the gaps we check to see if the valid_from and previous valid_until are right next to one. If we add two hours to the previous valid_until it should always be greater than the current valid_from.\n        -- However, if the valid_from is greater instead then we can identify that this period has a gap that needs to be filled.\n        case \n        when cast(\n\n    dateadd(\n        hour,\n        2,\n        valid_until\n        )\n\n as timestamp) < cast(lead_next_start as timestamp)\n            then 'gap'\n        when (lead_next_start is null and valid_from < max_valid_until and period_end != max_valid_until)\n            then 'gap'\n            else null\n        end as is_schedule_gap\n\n    from gap_starter\n\n-- We know where the gaps are, so now lets prime the data to fill those gaps\n), schedule_spine_primer as (\n\n    select \n        schedule_id, \n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        lead_next_start,\n        max_valid_until,\n        holiday_name_check,\n        is_holiday_week,\n        max(is_schedule_gap) over (partition by schedule_id, valid_until) as is_gap_period,\n        lead(valid_from) over (partition by schedule_id order by valid_from, start_time_utc) as fill_primer\n    from gap_adjustments\n\n-- We know the gaps and where they are, so let's fill them with the following union\n), final_union as (\n\n    -- For all gap periods, let's properly create a schedule filled before the holiday.\n    select \n        schedule_id,\n        valid_until as valid_from,\n        coalesce(last_value(fill_primer) over (partition by schedule_id, valid_until order by start_time_utc rows between unbounded preceding and unbounded following), max_valid_until) as valid_until,\n        start_time_utc, \n        end_time_utc, \n        cast(null as TEXT) as holiday_name_check,\n        false as is_holiday_week\n    from schedule_spine_primer\n    where is_gap_period is not null\n\n    union all\n\n    -- Fill all other normal schedules.\n    select\n        schedule_id, \n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        holiday_name_check,\n        is_holiday_week\n    from schedule_spine_primer\n\n-- We can finally filter out the holiday_name_check results as the gap filling properly filled in the gaps for holidays\n), final as(\n\n    select\n        schedule_id, \n        valid_from,\n        valid_until,\n        start_time_utc,\n        end_time_utc,\n        is_holiday_week\n    from final_union\n    where holiday_name_check is null\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__schedule_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.221954Z", "completed_at": "2024-02-04T15:20:56.235569Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.242051Z", "completed_at": "2024-02-04T15:20:56.242066Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0510098934173584, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__time_zone_time_zone.b25b3452b1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect time_zone\nfrom \"dev\".\"zendesk\".\"stg_zendesk__time_zone\"\nwhere time_zone is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.228879Z", "completed_at": "2024-02-04T15:20:56.239377Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.247641Z", "completed_at": "2024-02-04T15:20:56.247654Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05140972137451172, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__time_zone_time_zone.67995adbaf", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    time_zone as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__time_zone\"\nwhere time_zone is not null\ngroup by time_zone\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.271463Z", "completed_at": "2024-02-04T15:20:56.286353Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.293128Z", "completed_at": "2024-02-04T15:20:56.293145Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04288339614868164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_aggregates", "compiled": true, "compiled_code": "with tickets as (\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), ticket_tags as (\n\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__ticket_tag\"\n\n), brands as (\n\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__brand\"\n  \n), ticket_tag_aggregate as (\n  select\n    ticket_tags.ticket_id,\n    \n    listagg(ticket_tags.tags, ', ')\n\n as ticket_tags\n  from ticket_tags\n  group by 1\n\n), final as (\n  select \n    tickets.*,\n    case when lower(tickets.type) = 'incident'\n      then true\n      else false\n        end as is_incident,\n    brands.name as ticket_brand_name,\n    ticket_tag_aggregate.ticket_tags\n  from tickets\n\n  left join ticket_tag_aggregate\n    using(ticket_id)\n\n  left join brands\n    on brands.brand_id = tickets.brand_id\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_aggregates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.260051Z", "completed_at": "2024-02-04T15:20:56.287504Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.294273Z", "completed_at": "2024-02-04T15:20:56.294287Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04581618309020996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_calendar_spine", "compiled": true, "compiled_code": "\n\nwith calendar as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__calendar_spine\"\n    \n\n), ticket as (\n\n    select \n        *,\n        -- closed tickets cannot be re-opened or updated, and solved tickets are automatically closed after a pre-defined number of days configured in your Zendesk settings\n        cast( date_trunc('day', case when status != 'closed' then getdate() else updated_at end) as date) as open_until\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n    \n), joined as (\n\n    select \n        calendar.date_day,\n        ticket.ticket_id\n    from calendar\n    inner join ticket\n        on calendar.date_day >= cast(ticket.created_at as date)\n        -- use this variable to extend the ticket's history past its close date (for reporting/data viz purposes :-)\n        and \n\n    dateadd(\n        month,\n        0,\n        ticket.open_until\n        )\n\n >= calendar.date_day\n\n), surrogate_key as (\n\n    select\n        *,\n        md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as ticket_day_id\n    from joined\n\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__field_calendar_spine\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.317249Z", "completed_at": "2024-02-04T15:20:56.329493Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.334150Z", "completed_at": "2024-02-04T15:20:56.334164Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027500152587890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__updates", "compiled": true, "compiled_code": "with ticket_history as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_field_history\"\n\n), ticket_comment as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_comment\"\n\n), tickets as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), updates_union as (\n    select \n        ticket_id,\n        field_name,\n        value,\n        null as is_public,\n        user_id,\n        valid_starting_at,\n        valid_ending_at\n    from ticket_history\n\n    union all\n\n    select\n        ticket_id,\n        cast('comment' as TEXT) as field_name,\n        body as value,\n        is_public,\n        user_id,\n        created_at as valid_starting_at,\n        lead(created_at) over (partition by ticket_id order by created_at) as valid_ending_at\n    from ticket_comment\n\n), final as (\n    select\n        updates_union.*,\n        tickets.created_at as ticket_created_date\n    from updates_union\n\n    left join tickets\n        on tickets.ticket_id = updates_union.ticket_id\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__updates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.323880Z", "completed_at": "2024-02-04T15:20:56.330621Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.335372Z", "completed_at": "2024-02-04T15:20:56.335385Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0249636173248291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__ticket_ticket_id.a8229e6981", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.347200Z", "completed_at": "2024-02-04T15:20:56.357795Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.360441Z", "completed_at": "2024-02-04T15:20:56.360454Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02068924903869629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__ticket_ticket_id.4be7124521", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\nwhere ticket_id is not null\ngroup by ticket_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.352516Z", "completed_at": "2024-02-04T15:20:56.361692Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.367120Z", "completed_at": "2024-02-04T15:20:56.367133Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.026260852813720703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_money_pillar_on_off_users_user_id.876021b7a4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"ebenefits\".\"_v_money_pillar_on_off_users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.373679Z", "completed_at": "2024-02-04T15:20:56.388348Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.391674Z", "completed_at": "2024-02-04T15:20:56.391694Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02698659896850586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_money_pillar_on_off_users_user_id.76bfeaea5b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_money_pillar_on_off_users\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.382513Z", "completed_at": "2024-02-04T15:20:56.392936Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.399346Z", "completed_at": "2024-02-04T15:20:56.399364Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02277851104736328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__user_aggregates", "compiled": true, "compiled_code": "with users as (\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__user\"\n\n--If you use user tags this will be included, if not it will be ignored.\n\n), user_tags as (\n\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__user_tag\"\n  \n), user_tag_aggregate as (\n  select\n    user_tags.user_id,\n    \n    listagg(user_tags.tags, ', ')\n\n as user_tags\n  from user_tags\n  group by 1\n\n\n\n), final as (\n  select \n    users.*\n\n    --If you use user tags this will be included, if not it will be ignored.\n    \n    ,user_tag_aggregate.user_tags\n    \n  from users\n\n  --If you use user tags this will be included, if not it will be ignored.\n  \n  left join user_tag_aggregate\n    using(user_id)\n  \n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__user_aggregates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.406779Z", "completed_at": "2024-02-04T15:20:56.424743Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.436817Z", "completed_at": "2024-02-04T15:20:56.436837Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04032540321350098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.not_null_stg_zendesk__user_user_id.102d572926", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"zendesk\".\"stg_zendesk__user\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.426794Z", "completed_at": "2024-02-04T15:20:56.438072Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.445887Z", "completed_at": "2024-02-04T15:20:56.445900Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03404951095581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk_source.unique_stg_zendesk__user_user_id.3d3e346b11", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"stg_zendesk__user\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.277868Z", "completed_at": "2024-02-04T15:20:56.435391Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.443415Z", "completed_at": "2024-02-04T15:20:56.443428Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.19402861595153809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_schedules", "compiled": true, "compiled_code": "\n\nwith ticket as (\n  \n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), ticket_schedule as (\n \n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__ticket_schedule\"\n\n), schedule as (\n \n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__schedule\"\n\n\n), default_schedule_events as (\n-- Goal: understand the working schedules applied to tickets, so that we can then determine the applicable business hours/schedule.\n-- Your default schedule is used for all tickets, unless you set up a trigger to apply a specific schedule to specific tickets.\n\n-- This portion of the query creates ticket_schedules for these \"default\" schedules, as the ticket_schedule table only includes\n-- trigger schedules\n\n\n\n    \n\n    \n\n    \n\n  select\n    ticket.ticket_id,\n    ticket.created_at as schedule_created_at,\n    '7089' as schedule_id\n  from ticket\n  left join ticket_schedule as first_schedule\n    on first_schedule.ticket_id = ticket.ticket_id\n    and \n\n        dateadd(\n        second,\n        -5,\n        first_schedule.created_at\n        )\n\n <= ticket.created_at\n    and first_schedule.created_at >= ticket.created_at    \n  where first_schedule.ticket_id is null\n\n), schedule_events as (\n  \n  select\n    *\n  from default_schedule_events\n  \n  union all\n  \n  select \n    ticket_id,\n    created_at as schedule_created_at,\n    schedule_id\n  from ticket_schedule\n\n), ticket_schedules as (\n  \n  select \n    ticket_id,\n    schedule_id,\n    schedule_created_at,\n    coalesce(lead(schedule_created_at) over (partition by ticket_id order by schedule_created_at)\n            , \n\n        dateadd(\n        hour,\n        1000,\n        getdate()\n        )\n\n ) as schedule_invalidated_at\n  from schedule_events\n\n)\nselect\n  *\nfrom ticket_schedules", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.455169Z", "completed_at": "2024-02-04T15:20:56.467183Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.486571Z", "completed_at": "2024-02-04T15:20:56.486585Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04104924201965332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_hiring_essentials_organisations", "compiled": true, "compiled_code": "\n\nwith\norg_creator as (\n    select\n        organisation_id,\n        member_id,\n        creator_email\n    from\n        (\n            select\n                m.organisation_id,\n                m.id                                                                     as member_id,\n                u.email                                                                  as creator_email,\n                row_number() over (partition by m.organisation_id order by m.created_at) as rn\n            from\n                \"dev\".\"postgres_public\".\"members\" as m\n            inner join \"dev\".\"postgres_public\".\"users\" as u\n                on\n                    m.user_id = u.id\n            where\n                not m._fivetran_deleted\n                and not u._fivetran_deleted\n                and not m.is_shadow_data\n                and not u.is_shadow_data\n        )\n    where rn = 1\n)\n\nselect\n    so.org_id_c            as organisation_id,\n    so.name,\n    so.country_c           as country,\n    o.created_at           as organisation_created,\n    so.created_date        as created_on_sf,\n    so.active_employees_c  as active_employees,\n    o.estimated_number_of_employees,\n    so.subscription_plan_c as subscription_plan,\n    so.lead_linking_id_c   as lead_linking_id,\n    o.industry,\n    o.sub_id,\n    o.sub_name,\n    o.pricing_tier,\n    o.pricing_type,\n    m.creator_email\nfrom\n    \"dev\".\"salesforce\".\"eh_org_c\" as so\ninner join \"dev\".\"employment_hero\".\"organisations\" as o\n    on\n        so.org_id_c = o.id\n        and o.id not in (select id from ats.spam_organisations) -- remove SPAM or Test organisations\ninner join org_creator as m\n    on\n        o.id = m.organisation_id\nwhere\n    so.ats_c\n    and not so._fivetran_deleted\n    and not so.is_deleted\n    and \n    m.creator_email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n    and organisation_created::date >= '2023-04-12' -- launch of hiring essentials (previous ones are all test/old accounts)", "relation_name": "\"dev\".\"ats\".\"hiring_essentials_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.468491Z", "completed_at": "2024-02-04T15:20:56.485397Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.492495Z", "completed_at": "2024-02-04T15:20:56.492508Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03424191474914551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_jobs_created", "compiled": true, "compiled_code": "\n\nwith\ndemo_organisations as (\n    select o.*\n    from\n        \"dev\".\"employment_hero\".\"organisations\" as o\n    left join \"dev\".\"zuora\".\"account\" as za on o.zuora_account_id = za.id\n    where\n        sub_name ilike '%demo%'\n        or za.batch = 'Batch50'\n        and not o.is_shadow_data\n)\n\nselect\n    j.id                                 as job_id,\n    o.id                                 as organisation_id,\n    o.country,\n    i.title                              as industry,\n    j.created_at,\n    j.updated_at,\n    j.title                              as job_title,\n    j.description                        as job_description,\n    case\n        when j.employment_type = 0 then 'full time'\n        when j.employment_type = 1 then 'part time'\n    end                                  as employment_type,\n    js.name                              as job_sector,\n    case\n        when status = 0\n            then 'open'\n        else 'closed'\n    end                                  as job_status,\n    case\n        when workplace_type = 0\n            then TRUE\n        when workplace_type = 1\n            then TRUE\n        when workplace_type = 2\n            then FALSE\n        when workplace_type = 3\n            then FALSE\n    end                                  as is_remote_job,\n    case\n        when j.workplace_type = 0\n            then 'Remote'\n        when j.workplace_type = 1\n            then 'Remote'\n        when j.workplace_type = 2\n            then 'Hybrid'\n        when j.workplace_type = 3\n            then 'On-site'\n    end                                  as workplace_type,\n    case\n        when remote_settings.anywhere is TRUE\n            then 'Remote Anywhere'\n        when remote_settings.country_code is not NULL\n            then concat('Remote Country: ', remote_settings.country_code)\n        when remote_settings.timezone is not NULL\n            then concat('Remote Timezone: ', remote_settings.timezone)\n    end                                  as candidate_location,\n    coalesce(demo.id is not NULL, FALSE) as is_test_job\nfrom\n    \"dev\".\"ats_public\".\"jobs\" as j\n-- using this just to get the org id that created the job, no need to filter\ninner join \"dev\".\"postgres_public\".\"organisations\" as o\n    on\n        j.organisation_id = o.uuid\n        and not o._fivetran_deleted\n        and o.id not in (select id from ats.spam_organisations) -- remove SPAM organisations\nleft join \"dev\".\"ats_public\".\"remote_settings\" as remote_settings\n    on\n        j.id = remote_settings.job_id\n        and not remote_settings._fivetran_deleted\nleft join demo_organisations as demo\n    on\n        j.organisation_id = demo.uuid\nleft join \"dev\".\"postgres_public\".\"industry_categories\" as i\n    on\n        o.industry_category_id = i.id\n        and not i._fivetran_deleted\nleft join \"dev\".\"ats_public\".\"job_sectors\" as js\n    on\n        j.job_sector_id = js.id\nwhere\n    not j._fivetran_deleted", "relation_name": "\"dev\".\"ats\".\"jobs_created\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.474738Z", "completed_at": "2024-02-04T15:20:56.490466Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.499056Z", "completed_at": "2024-02-04T15:20:56.499072Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03940868377685547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.billing_invoice_items", "compiled": true, "compiled_code": "\n\nselect\n  f.id as organisation_id\n  , invoice.account_id as zuora_account_id\n  , a.account_number as zuora_account_num\n  , a.name as zuora_account_name\n  , invoice_item.subscription_id\n  , invoice.id as invoice_id\n  , invoice.invoice_date\n  , invoice.status as invoice_status\n  , invoice.posted_date as invoice_posted_date\n  , invoice_item.charge_name\n  , invoice_item.quantity\n  , invoice_item.charge_amount\n  , invoice_item.tax_amount\n  , p.name as product_name\n  , prp.name as product_rate_plan\n  , dense_rank() over(partition by invoice.account_id order by invoice.posted_date asc) invoice_order\nfrom\n  \"dev\".\"employment_hero\".\"organisations\" as f\n  join \"dev\".\"zuora\".\"account\" a on f.zuora_account_id = a.id\n  join \"dev\".\"zuora\".\"invoice\" on a.id = invoice.account_id\n  join \"dev\".\"zuora\".\"invoice_item\" on invoice.id = invoice_item.invoice_id\n  join \"dev\".\"zuora\".\"rate_plan_charge\" rpc on rpc.id = invoice_item.rate_plan_charge_id\n  join \"dev\".\"zuora\".\"product_rate_plan\" prp on rpc.product_rate_plan_id = prp.id\n  join \"dev\".\"zuora\".\"product\" p on p.id = prp.product_id\nwhere \n  not a._fivetran_deleted\n  and not invoice._fivetran_deleted                       \n  and not invoice_item._fivetran_deleted\n  and not p._fivetran_deleted\n  and not prp._fivetran_deleted\n  and not rpc._fivetran_deleted", "relation_name": "\"dev\".\"billing\".\"invoice_items\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.505624Z", "completed_at": "2024-02-04T15:20:56.519810Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.531233Z", "completed_at": "2024-02-04T15:20:56.531247Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036269187927246094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_v_instapay_on_off_organisations", "compiled": true, "compiled_code": "\n\nwith payroll_auths as (\n    select distinct organisation_id    \n    , sum(case when json_extract_path_text(data, 'kp_white_label') in ('Employment Hero', 'Employment Innovations', 'Employment Innovations Internal', 'Employment Innovations internal UK', 'Employment Hero NZ', 'KeyPay', 'Lucent Advisory Pty Ltd') or json_extract_path_text(data, 'kp_white_label') = '' then 1 else 0 end) as eligible_white_label\n    from \n    \"dev\".\"employment_hero\".\"_v_connected_payrolls\"\n    group by 1\n)\n\n    select o.id as organisation_id \n    , case when epa.organisation_id is null then null   -- not linked to payroll, not eligible\n           --when eo.id is null then null                 -- org deleted, not eligible \n           when o.pricing_tier not ilike '%free%' and o.payroll_type ilike '%Keypay%' and o.connected_app ilike '%Employment Hero Payroll%' \n                and epa.eligible_white_label > 0\n                and bl.organisation_uuid is null then true           -- eligible and not blacklisted \n           when bl.organisation_uuid is not null then false          -- blacklisted \n           end as instapay_enabled \nfrom \"dev\".\"employment_hero\".\"organisations\" as o\n    left join payroll_auths epa on epa.organisation_id = o.id\n    left join \"dev\".\"ebenefits\".\"_v_instapay_blacklist_organisations\" as bl on bl.organisation_uuid = o.uuid", "relation_name": "\"dev\".\"ebenefits\".\"_v_instapay_on_off_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.514405Z", "completed_at": "2024-02-04T15:20:56.528405Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.536383Z", "completed_at": "2024-02-04T15:20:56.536397Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03599691390991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_employees", "compiled": true, "compiled_code": "\n\nselect \n  m.*,\n  u.uuid as user_uuid,\n  u.email,\n--   a.state as state,\n--   a.city as suburb,\n--   a.postcode,\n--   case\n--       when a.state ~* '^[\\\\W]?nsw|act|^[\\\\W]?vic|^nt|qld|^s[.]?a[.]?$|tas|new south wales|sydney|^w[.]?a$|western aus|south australia|queensland|northern territory|australia' then 'AU'\n--       else a.country\n--   end as country,\n--   loc.country as working_country,\n  h.title as latest_job_title,\n  h.industry_standard_job_title,\n  h.employment_type as latest_employment_type,\n  o.name as org_name,\n  o.sub_name\nfrom\n    \"dev\".\"postgres_public\".\"members\" m  \n    join \"dev\".\"postgres_public\".\"users\" u on u.id = m.user_id\n    join \"dev\".\"employment_hero\".\"organisations\" o on o.id = m.organisation_id\n    left join \n\n(\nselect\n    *\n  from\n    \"dev\".\"postgres_public\".\"employment_histories\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n      where\n        not _fivetran_deleted\n    )\n)\n\n h\n      on m.id = h.member_id\nwhere \n  \n    email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n  and not m.system_manager\n  and not m.system_user\n  and not m.independent_contractor\n  and not m._fivetran_deleted\n  and not u._fivetran_deleted\n  and not m.is_shadow_data\n  and not u.is_shadow_data\n  and not m.dummy", "relation_name": "\"dev\".\"employment_hero\".\"employees\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.523316Z", "completed_at": "2024-02-04T15:20:56.535204Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.542861Z", "completed_at": "2024-02-04T15:20:56.542875Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03419375419616699, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_organisations_id.3ae7b14a20", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"employment_hero\".\"organisations\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.549923Z", "completed_at": "2024-02-04T15:20:56.558746Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.572643Z", "completed_at": "2024-02-04T15:20:56.572659Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.033754825592041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_organisations_id.2e82684e5c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"organisations\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.560004Z", "completed_at": "2024-02-04T15:20:56.573801Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.580124Z", "completed_at": "2024-02-04T15:20:56.580136Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035485029220581055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_benefits_pillar_on_off_users_user_id.81fa24504d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"ebenefits\".\"_v_benefits_pillar_on_off_users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.567502Z", "completed_at": "2024-02-04T15:20:56.577783Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.585325Z", "completed_at": "2024-02-04T15:20:56.585337Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03166961669921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_benefits_pillar_on_off_users_user_id.7ee38b655b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_benefits_pillar_on_off_users\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.601351Z", "completed_at": "2024-02-04T15:20:56.606061Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.617174Z", "completed_at": "2024-02-04T15:20:56.617190Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.023680925369262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.proserv_payroll_settings_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect distinct b.id as business_id\n, true as is_payroll_settings_completed\n    from \"dev\".\"keypay_dwh\".\"business\" b\n    join (select distinct businessid from \"dev\".\"keypay\".\"location\" where not Is_Deleted) l on l.businessid = b.id\n    join (select distinct business_id from \"dev\".\"keypay\".\"pay_cycle\" where not Is_Deleted) pc on pc.business_id = b.id\n    left join \"dev\".\"keypay\".\"aba_details\" ad on b.id = ad.businessid  -- AU\n    left join \"dev\".\"keypay\".\"bacs_details\" bd on bd.businessid = b.id  -- UK\n    left join \"dev\".\"keypay\".\"csn_details\" cd on b.id = cd.business_id -- SG\n    left join \"dev\".\"keypay\".\"statutory_settings\" ss on b.id = ss.business_id -- MY\n    left join \"dev\".\"keypay\".\"bank_payment_file_details\" bp on b.id = bp.business_id --NZ\n    where b.name is not null and b.abn is not null and (b.to_be_deleted = 0 or b.to_be_deleted is null)\n    and (ad.businessid is not null \n        or bd.businessid is not null \n        or cd.business_id is not null \n        or (ss.income_tax_number_encrypted is not null and ss.e_number is not null and ss.epf_number is not null and ss.socso_number is not null and ss.hrdf_status is not null)\n        or (bp.business_id is not null and bp.file_format is not null and bp.originating_account_number is not null and bp.originating_account_name is not null and bp.lodgement_reference is not null ))\n", "relation_name": "\"dev\".\"proserv\".\"payroll_settings_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.590320Z", "completed_at": "2024-02-04T15:20:56.607324Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.618337Z", "completed_at": "2024-02-04T15:20:56.618349Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.039176225662231445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_union_daily_user_signin", "compiled": true, "compiled_code": "\n\n\nwith keypay_login as (\n    select\n        date_day,\n        platform,\n        eh_user_uuid, -- user uuid should naturally be null for all Keypay users\n        NULL    as eh_user_id, -- hard coded as we specifically look for Keypay users in the upstream\n        user_id as keypay_user_id,\n        is_active,\n        is_active_last_7_days,\n        is_active_last_30_days\n\n    from \"dev\".\"intermediate\".\"int_spined_daily_user_signin_mp\"\n\n    where platform = 'keypay'\n\n    union distinct\n\n    select\n        date_day,\n        platform,\n        NULL    as eh_user_uuid,\n        NULL    as eh_user_id,\n        user_id as keypay_user_id,\n        is_active,\n        is_active_last_7_days,\n        is_active_last_30_days\n\n    from \"dev\".\"intermediate\".\"int_spined_daily_user_signin_keypay\"\n),\n\naggregated_keypay as (\n    select\n        date_day,\n        platform,\n        eh_user_uuid,\n        eh_user_id,\n        keypay_user_id,\n        bool_or(is_active)              as is_active, -- to obtain the overall active status of Keypay users, EITHER through Keypay portal or through Swag\n        bool_or(is_active_last_7_days)  as is_active_last_7_days, -- to obtain the overall active status of Keypay users over the last 7 days, EITHER through Keypay portal or through Swag\n        bool_or(is_active_last_30_days) as is_active_last_30_days -- to obtain the overall active status of Keypay users over the last 30 days, EITHER through Keypay portal or through Swag\n\n    from keypay_login\n\n    group by 1,2,3,4,5\n),\n\noverall_union as (\n    select\n        date_day,\n        platform,\n        eh_user_uuid,\n        user_id as eh_user_id,\n        NULL    as keypay_user_id, -- forced to be null to enable surrogate key generation\n        is_active,\n        is_active_last_7_days,\n        is_active_last_30_days\n\n    from \"dev\".\"intermediate\".\"int_spined_daily_user_signin_mp\"\n\n    where\n        platform = 'employment_hero'\n        and eh_user_uuid in (select distinct uuid from \"dev\".\"staging\".\"stg_postgres_public__users\") -- we need to exclude shadow data and users that have been deleted\n\n    group by 1,2,3,4,5,6,7,8\n\n    union distinct\n\n    select *\n\n    from aggregated_keypay\n)\n\nselect * from overall_union", "relation_name": "\"dev\".\"intermediate\".\"int_union_daily_user_signin\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.611682Z", "completed_at": "2024-02-04T15:20:56.622808Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.630390Z", "completed_at": "2024-02-04T15:20:56.630404Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03412199020385742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_business_traits", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"mart__keypay\".\"business_traits\"\n\n),\n\nrenamed as (\n\nselect\n            \"id\",\n            \"name\",\n            \"created_at\",\n            \"industry_id\",\n            \"industry_name\",\n            \"country\",\n            \"commence_billing_from\",\n            \"white_label_id\",\n            \"white_label_name\",\n            \"partner_id\",\n            \"partner_name\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"business_traits\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.635340Z", "completed_at": "2024-02-04T15:20:56.649731Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.658624Z", "completed_at": "2024-02-04T15:20:56.658638Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.034964799880981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mart__keypay__business_traits_id.ad1c74540a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"mart__keypay\".\"business_traits\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.640476Z", "completed_at": "2024-02-04T15:20:56.655095Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.660958Z", "completed_at": "2024-02-04T15:20:56.660971Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036119937896728516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_mart__keypay__business_traits_id.19790c0931", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mart__keypay\".\"business_traits\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.650917Z", "completed_at": "2024-02-04T15:20:56.659732Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.667609Z", "completed_at": "2024-02-04T15:20:56.667622Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.02462029457092285, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_t_pay_run_total_monthly_summary", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"mart__keypay\".\"_t_pay_run_total_monthly_summary\"\n\n),\n\nrenamed as (\n\nselect\n            \"employee_id\",\n            \"business_id\",\n            \"invoice_id\",\n            \"billing_month\",\n            \"is_excluded_from_billing\",\n            \"monthly_gross_earnings\",\n            \"monthly_net_earnings\",\n            \"total_hours\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"_t_pay_run_total_monthly_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.678129Z", "completed_at": "2024-02-04T15:20:56.702450Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.708359Z", "completed_at": "2024-02-04T15:20:56.708374Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04203033447265625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mart__keypay__au_pay_run_summary_s", "compiled": true, "compiled_code": "\n\nwith\nkp_business_industry as (\n    select\n        mapped_business.id,\n        case\n            when mapped_business.industry = 'Other' then 'Other'\n            when mapped_business.industry != 'Other' and mapped_business.industry is not NULL then op_industry.consolidated_industry\n        end as industry\n    from\n        (\n            select\n                kp_business.id,\n                case\n                    when kp_business.industry_id is NULL and kp_business.industry_name is not NULL\n                        then 'Other'\n                    when\n                        kp_business.industry_id is NULL and kp_business.industry_name is NULL\n                        and kp_zoom_info.primary_industry is not NULL and kp_zoom_info.primary_industry != ''\n                        then kp_zoom_info.primary_industry\n                    when kp_business.industry_id is not NULL then kp_industry.name\n                end as industry\n            from\n                \"dev\".\"int__keypay_dwh\".\"business\" as kp_business\n            left join (select\n                id,\n                name\n            from \"dev\".\"int__keypay\".\"industry\") as kp_industry\n                on\n                    kp_business.industry_id = kp_industry.id\n            left join (select\n                _id,\n                primary_industry\n            from \"dev\".\"int__keypay\".\"zoom_info\") as kp_zoom_info on\n                kp_business.id = kp_zoom_info._id\n        ) as mapped_business\n    left join \"dev\".\"one_platform\".\"industry\" as op_industry on\n        regexp_replace(mapped_business.industry, '\\\\s', '') = regexp_replace(op_industry.keypay_industry, '\\\\s', '')\n        or regexp_replace(mapped_business.industry, '\\\\s', '') = regexp_replace(op_industry.zoom_info_primary_industry, '\\\\s', '')\n        or regexp_replace(mapped_business.industry, '\\\\s', '') = regexp_replace(op_industry.eh_industry, '\\\\s', '')\n),\n\nbilled_employees_by_business as (\n    select\n        billing_month,\n        business_id,\n        count(distinct employee_id) as billed_employees\n    from \"dev\".\"mart__keypay\".\"_t_pay_run_total_monthly_summary\"\n    where\n        not is_excluded_from_billing\n        and business_id is not NULL\n        and billing_month is not NULL\n    group by 1, 2\n),\n\n--keypay.business_monthly_summary_062022 as bs \nbilled_business as (\n    select distinct coalesce(kp_invoice_line_item.business_id, kp_business.id) as business_id\n    from \"dev\".\"int__keypay\".\"invoice_line_item\" as kp_invoice_line_item\n    inner join \"dev\".\"int__keypay\".\"invoice\" as kp_invoice on kp_invoice_line_item.invoice_id = kp_invoice.id and split_part(kp_invoice._file, 'Shard', 2) = split_part(kp_invoice_line_item._file, 'Shard', 2)\n    left join \"dev\".\"int__keypay_dwh\".\"business\" as kp_business on kp_invoice_line_item.abn = kp_business.abn and kp_invoice_line_item.business_id is NULL\n),\n\nkeypay_employees as (\n    select\n        kp_employee.id,\n        kp_employee.date_created,\n        kp_employee.date_of_birth,\n        kp_employee.residential_suburb_id,\n        kp_employee.end_date,\n        kp_employee.gender,\n        kp_employee.business_id,\n        kp_employee.start_date,\n        kp_et.description as employment_type_description,\n        kp_employee._file\n    from \"dev\".\"int__keypay_dwh\".\"employee\" as kp_employee\n    inner join \"dev\".\"int__keypay_dwh\".\"business\" as kp_business on kp_employee.business_id = kp_business.id\n    left join \"dev\".\"int__keypay\".\"white_label\" as kp_whitelabel on kp_business.white_label_id = kp_whitelabel.id and split_part(kp_business._file, 'Shard', 2) = split_part(kp_whitelabel._file, 'Shard', 2)\n    left join \"dev\".\"int__keypay\".\"tax_file_declaration\" as kp_tfd on kp_employee.tax_file_declaration_id = kp_tfd.id and kp_employee.id = kp_tfd.employee_id and split_part(kp_tfd._file, 'Shard', 2) = split_part(kp_employee._file, 'Shard', 2) -- AU\n    left join \"dev\".\"int__keypay\".\"employment_type\" as kp_et on kp_tfd.employment_type_id = kp_et.id\n    where\n        (kp_employee.end_date is NULL or kp_employee.end_date >= kp_employee.date_created)\n        and \n    surname !~* '(^|[ !@#$%^&*(),.?\":{}|<>]|\\d+)(test|demo)($|[ !@#$%^&*(),.?\":{}|<>]|\\d+)'\n    and surname not ilike ('%zzz%')\n\n        and \n    firstname !~* '(^|[ !@#$%^&*(),.?\":{}|<>]|\\d+)(test|demo)($|[ !@#$%^&*(),.?\":{}|<>]|\\d+)'\n    and firstname not ilike ('%zzz%')\n\n),\n\nemployee_details as (\n    select\n        keypay_employees.id,\n        keypay_employees.gender,\n        keypay_employees.date_of_birth,\n        keypay_employees.employment_type_description,\n        keypay_employees.start_date,\n        keypay_employees.end_date,\n        kp_suburb.postcode as residential_postcode,\n        kp_suburb.name     as residential_suburb,\n        --, l.state as residential_state\t\t\t\n        case\n            when kp_suburb.state ~* '(South Australia|SA)' then 'SA'\n            when kp_suburb.state ~* '(Northern Territory|NT)' then 'NT'\n            when kp_suburb.state ~* '(Victoria|VIC)' then 'VIC'\n            when kp_suburb.state ~* '(New South|NSW)' then 'NSW'\n            when kp_suburb.state ~* '(Queensland|QLD)' then 'QLD'\n            when kp_suburb.state ~* '(Tasmania|TAS)' then 'TAS'\n            when kp_suburb.state ~* '(Western Australia|WA)' then 'WA'\n            when kp_suburb.state ~* '(Australian Capital Territory|ACT)' then 'ACT'\n        end                as residential_state,\n        kp_suburb.country  as residential_country\n    from\n        keypay_employees\n    left join \"dev\".\"int__keypay_dwh\".\"suburb\" as kp_suburb\n        on\n            keypay_employees.residential_suburb_id = kp_suburb.id\n)\n\nselect\n    pr.employee_id,\n    employee_details.residential_state,\n    pr.business_id,\n    kp_business_industry.industry,\n    billed_employees.billed_employees                                                                                  as business_billed_employees,\n    pr.invoice_id,\n    pr.billing_month,\n    pr.is_excluded_from_billing,\n    pr.monthly_gross_earnings,\n    pr.monthly_net_earnings,\n    pr.total_hours,\n    case when pr.total_hours = 0 then NULL else pr.monthly_gross_earnings / pr.total_hours::float end                  as hourly_rate,\n    --, pr.payg_withholding_amount\n    --, pr.help_amount\n    --, pr.super_contribution      \n    case when employee_details.gender = 'F' then 'Female' when employee_details.gender = 'M' then 'Male' end           as gender,\n    datediff('year', employee_details.date_of_birth, pr.billing_month)                                                 as age,\n    case\n        when employee_details.employment_type_description = '' or employee_details.employment_type_description is NULL or employee_details.employment_type_description = 'NULL' then NULL\n        when employee_details.employment_type_description = 'Full Time' then 'Full-time'\n        when employee_details.employment_type_description = 'Part Time' then 'Part-time'\n        else employee_details.employment_type_description\n    end                                                                                                                as employment_type,\n    employee_details.start_date,\n    employee_details.end_date,\n    (pr.monthly_gross_earnings - avg(pr.monthly_gross_earnings) over ()) / (stddev(pr.monthly_gross_earnings) over ()) as z_score_earnings,\n    (pr.total_hours - avg(pr.total_hours) over ()) / (stddev(pr.total_hours) over ())                                  as z_score_hours,\n    (hourly_rate - avg(hourly_rate) over ()) / (stddev(hourly_rate) over ())                                           as z_score_hourly_rate\nfrom\n    \"dev\".\"mart__keypay\".\"_t_pay_run_total_monthly_summary\" as pr  -- noqa: AL06\ninner join employee_details\n    on\n        pr.employee_id = employee_details.id\ninner join \"dev\".\"int__keypay_dwh\".\"business\" as kp_business\n    on\n        pr.business_id = kp_business.id\nleft join \"dev\".\"int__keypay\".\"white_label\" as kp_whitelabel on kp_business.white_label_id = kp_whitelabel.id --AND SPLIT_PART(kp_business._file, 'Shard', 2) = SPLIT_PART(kp_whitelabel._file, 'Shard', 2)                                                   \ninner join billed_business on kp_business.id = billed_business.business_id and billed_business.business_id is not NULL  --      and billed_business.month = pr.billing_month\nleft join billed_employees_by_business as billed_employees on pr.billing_month = billed_employees.billing_month and kp_business.id = billed_employees.business_id\nleft join kp_business_industry\n    on\n        kp_business.id = kp_business_industry.id\nwhere\n    pr.total_hours < 24 * 31\n    and not pr.is_excluded_from_billing\n    and (employee_details.employment_type_description != 'Superannuation Income Stream' or employee_details.employment_type_description is NULL)\n    and (employee_details.employment_type_description != 'Labour Hire' or employee_details.employment_type_description is NULL)\n    and pr.invoice_id is not NULL\n    and (kp_whitelabel.region_id is NULL or kp_whitelabel.region_id = 1)  -- AU business      \n    and (kp_whitelabel.reseller_id is NULL or kp_whitelabel.reseller_id not in (511, 829, 22, 708, 755, 790, 669)) -- exclude Test Partners\n    and kp_business.abn != 11111111111\n    and datediff('day', getdate(), kp_business.commence_billing_from::date) < 180\n    --   and kp_business.name ilike '%test%' or name ilike '%demo%'     \n    and pr.billing_month is not NULL", "relation_name": "\"dev\".\"mart__keypay\".\"au_pay_run_summary_s\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.688251Z", "completed_at": "2024-02-04T15:20:56.703747Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.710668Z", "completed_at": "2024-02-04T15:20:56.710681Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04190182685852051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mart__keypay__t_pay_run_total_monthly_summary_billing_month.98214df229", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_month\nfrom \"dev\".\"mart__keypay\".\"_t_pay_run_total_monthly_summary\"\nwhere billing_month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.695341Z", "completed_at": "2024-02-04T15:20:56.706098Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.713464Z", "completed_at": "2024-02-04T15:20:56.713478Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030853271484375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mart__keypay__t_pay_run_total_monthly_summary_business_id.1e312e98ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect business_id\nfrom \"dev\".\"mart__keypay\".\"_t_pay_run_total_monthly_summary\"\nwhere business_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.737506Z", "completed_at": "2024-02-04T15:20:56.741239Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.749358Z", "completed_at": "2024-02-04T15:20:56.749373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03017282485961914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.proserv_payroll_first_leave_balance_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect distinct e.business_id\n, true as open_balance_imported\n    from \"dev\".\"keypay\".\"leave_accrual\" l\n    join \"dev\".\"keypay\".\"accrual_status\" s on l.accrual_status_id = s.id\n    join \"dev\".\"keypay_dwh\".\"employee\" e on l.employee_id = e.id\n    where l.accrued_amount != 0\n    and s.description in ('Leave Adjustment', 'Leave Termination', 'Manually Applied', 'Manually Overridden', 'Reconciliation Adjustment')\n    group by 1\n", "relation_name": "\"dev\".\"proserv\".\"payroll_first_leave_balance_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.727862Z", "completed_at": "2024-02-04T15:20:56.748027Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.755486Z", "completed_at": "2024-02-04T15:20:56.755499Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03895926475524902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customers_events", "compiled": true, "compiled_code": "\n\nwith\n  all_events as (\n    select\n        e.message_id\n        , e.timestamp\n        , e.name\n        , case \n            when module != '' and e.name != 'Visit Company Feed' then module\n            when app_version_string is not null then 'mobile' \n            else 'others' end as module\n        , (case when sub_module= '' then null else sub_module end) as sub_module\n        , regexp_substr(e.name, '[^#]*$') as mobile_page\n        -- general user details  \n        , case\n        when trim(user_id) ~ '^[0-9]+$' then trim(user_id)\n        else null\n    end::int as numeric_user_id\n        , (case when eh_user_type= '' then null else eh_user_type end) as eh_persona\n        , (case when login_provider= 'kp' then 'kp' else 'eh' end) as login_provider\n        -- EH user details if EH event\n        , (case when email= '' then null else email end) as email\n        , coalesce(\n            (case when user_uuid= '' then null else user_uuid end),\n            (case when user_id= '' then null else user_id end)\n         ) as user_id\n        , (case when member_id= '' then null else member_id end) as member_id\n        , (case when member_uuid= '' then null else member_uuid end) as member_uuid\n        , case\n        when trim(organisation_id) ~ '^[0-9]+$' then trim(organisation_id)\n        else null\n    end::int as organisation_id\n        , (case when user_type= '' then null else user_type end) as user_type\n        -- Keypay user details if KP event\n        , (case when user_email= '' then null else user_email end) as kp_email\n        , case\n        when trim(kp_employee_id) ~ '^[0-9]+$' then trim(kp_employee_id)\n        else null\n    end::int as kp_employee_id\n        , case\n        when trim(kp_business_id) ~ '^[0-9]+$' then trim(kp_business_id)\n        else null\n    end::int as kp_business_id\n        , (case when kp_user_type= '' then null else kp_user_type end) as kp_user_type\n        -- misc event details  \n        , (case when platform= '' then null else platform end) as platform\n        , e.os\n        , e.device  \n        , e.browser\n        , e.screen_width\n        , e.screen_height\n        , e.screen_dpi\n        , e.app_version_string\n        , e.shopnow_offer_module\n        , e.shopnow_offer_type\n        , e.shopnow_offer_category\n\n    from\n        \"dev\".\"customers\".\"int_events\" e\n  )\n\n, members as (\n    select \n      m.uuid as member_uuid, m.is_shadow_data as member_is_shadow_data, m._fivetran_deleted as member_fivetran_deleted, m.system_manager, m.system_user\n     , u.email, u.uuid as user_uuid, u.id as user_id, u.is_shadow_data as u_is_shadow_data, u._fivetran_deleted as u_fivetran_deleted\n    from \n      \"dev\".\"postgres_public\".\"users\" u\n      join \"dev\".\"postgres_public\".\"members\" m on \n        u.id = m.user_id\n  \t\tand m.uuid != 'ff570046-b394-4c62-9bf9-aaa93f4b6a8f' -- duplicate m.uuid, these are internal members\n  )\n\nselect\n  e.message_id\n  , e.timestamp\n  , e.name\n  , e.module\n  , e.sub_module\n  , e.mobile_page\n  , e.login_provider\n  , e.numeric_user_id\n  , e.member_id\n  , e.member_uuid\n  , e.organisation_id\n  , e.user_type\n  , e.kp_employee_id\n  , e.kp_business_id\n  , e.kp_user_type\n , coalesce(e.user_id, u.uuid, m.user_uuid, e.login_provider || '-' || e.numeric_user_id ) as user_id -- need this for vitally\n  , coalesce(e.email, e.kp_email, kp_user.email, kp_employee.email, u.email, u2.email, m.email)  as user_email\n  , case \n  \twhen e.login_provider = 'kp' then 'WZ User' \n  \twhen e.login_provider = 'eh' and eh_persona ilike '%candidate%' then 'Candidate'\n\telse 'EH Employee' end as persona\n  , e.platform\n  , e.os\n  , e.device  \n  , e.browser\n  , e.screen_width\n  , e.screen_height\n  , e.screen_dpi\n  , e.app_version_string\n  , e.shopnow_offer_module\n  , e.shopnow_offer_type\n  , e.shopnow_offer_category\nfrom \n  all_events e\n  left join \"dev\".\"keypay\".\"user\" kp_user on\n    e.numeric_user_id = kp_user.id\n    and login_provider = 'kp'\n  left join \"dev\".\"keypay_dwh\".\"employee\" kp_employee on\n   \te.kp_employee_id = kp_employee.id\n  \tand login_provider = 'kp'\n  left join \"dev\".\"postgres_public\".\"users\" u on\n    e.numeric_user_id = u.id\n    and login_provider = 'eh'\n  left join \"dev\".\"postgres_public\".\"users\" u2 on\n    e.user_id = u2.uuid\n    and login_provider = 'eh'\n  left join members m on\n    e.member_uuid = m.member_uuid\n    and login_provider = 'eh'\n where\n    (user_email !~* '.*(employmenthero|keypay|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*')\n   and (system_manager is null or not system_manager)\n   and (system_user is null or not system_user)\n\n       \n     and e.timestamp > (SELECT MAX(timestamp) FROM \"dev\".\"customers\".\"events\")\n", "relation_name": "\"dev\".\"customers\".\"events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.742511Z", "completed_at": "2024-02-04T15:20:56.750510Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.757877Z", "completed_at": "2024-02-04T15:20:56.757890Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03681159019470215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_checkly_daily_downtime", "compiled": true, "compiled_code": "with downtime as (\n    select *\n\n    from \"dev\".\"intermediate\".\"int_checkly_downtime_global_raw\"\n),\n\ncheck_start_date_downtime as (\n    select\n        current_check_started_at::date                                                   as date, -- noqa: RF04\n        name,\n        sum(case when is_overall_downtime then net_downtime_check_start_date else 0 end) as total_net_downtime_same_day,\n        sum(case when is_overall_downtime then downtime_check_start_date else 0 end)     as total_downtime_same_day,\n        sum(case when is_qbo_au_downtime then net_downtime_check_start_date else 0 end)  as qbo_au_net_downtime_same_day,\n        sum(case when is_qbo_au_downtime then downtime_check_start_date else 0 end)      as qbo_au_downtime_same_day,\n        sum(case when is_qbo_uk_downtime then net_downtime_check_start_date else 0 end)  as qbo_uk_net_downtime_same_day,\n        sum(case when is_qbo_uk_downtime then downtime_check_start_date else 0 end)      as qbo_uk_downtime_same_day\n    from downtime\n    group by 1, 2\n),\n\ncheck_end_date_downtime as (\n    select\n        current_check_stopped_at::date                                                 as date, -- noqa: RF04\n        name,\n        sum(case when is_overall_downtime then net_downtime_check_end_date else 0 end) as total_net_downtime_next_day,\n        sum(case when is_overall_downtime then downtime_check_end_date else 0 end)     as total_downtime_next_day,\n        sum(case when is_qbo_au_downtime then net_downtime_check_end_date else 0 end)  as qbo_au_net_downtime_next_day,\n        sum(case when is_qbo_au_downtime then downtime_check_end_date else 0 end)      as qbo_au_downtime_next_day,\n        sum(case when is_qbo_uk_downtime then net_downtime_check_end_date else 0 end)  as qbo_uk_net_downtime_next_day,\n        sum(case when is_qbo_uk_downtime then downtime_check_end_date else 0 end)      as qbo_uk_downtime_next_day\n    from downtime\n    group by 1, 2\n),\n\ncombined as (\n    select\n        intcr.current_check_started_at::date                                                                      as date, -- noqa: RF04\n        intcr.name,\n        coalesce(max(csdd.total_net_downtime_same_day), 0) + coalesce(max(cedd.total_net_downtime_next_day), 0)   as total_net_downtime,\n        coalesce(max(csdd.total_downtime_same_day), 0) + coalesce(max(cedd.total_downtime_next_day), 0)           as total_downtime,\n        coalesce(max(csdd.qbo_au_net_downtime_same_day), 0) + coalesce(max(cedd.qbo_au_net_downtime_next_day), 0) as qbo_au_net_downtime,\n        coalesce(max(csdd.qbo_au_downtime_same_day), 0) + coalesce(max(cedd.qbo_au_downtime_next_day), 0)         as qbo_au_downtime,\n        coalesce(max(csdd.qbo_uk_net_downtime_same_day), 0) + coalesce(max(cedd.qbo_uk_net_downtime_next_day), 0) as qbo_uk_net_downtime,\n        coalesce(max(csdd.qbo_uk_downtime_same_day), 0) + coalesce(max(cedd.qbo_uk_downtime_next_day), 0)         as qbo_uk_downtime\n    from \"dev\".\"intermediate\".\"int_checkly_results\" as intcr\n\n    left join check_start_date_downtime as csdd\n        on\n            csdd.date = intcr.current_check_started_at::date\n            and (intcr.name = csdd.name or csdd.name is NULL)\n\n    left join check_end_date_downtime as cedd\n        on\n            cedd.date = intcr.current_check_started_at::date\n            and (intcr.name = cedd.name or cedd.name is NULL)\n\n    group by 1, 2\n)\n\nselect * from combined", "relation_name": "\"dev\".\"intermediate\".\"int_checkly_daily_downtime\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.769345Z", "completed_at": "2024-02-04T15:20:56.786803Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.795676Z", "completed_at": "2024-02-04T15:20:56.795693Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03892016410827637, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_v_median_hours_worked_kp", "compiled": true, "compiled_code": "\n\nwith\n    kp_business_industry as (\n        select\n            m.id,\n            case\n                when m.industry = 'Other'\n                then 'Other'\n                when m.industry != 'Other' and m.industry is not null\n                then i.consolidated_industry\n                else null\n            end as industry\n        from\n            (\n                select\n                    b.id,\n                    case\n                        when\n                            b.industry_id is null\n                            and b.industry_name is not null\n                        then 'Other'\n                        when\n                            b.industry_id is null\n                            and b.industry_name is null\n                            and z.primary_industry is not null\n                            and z.primary_industry != ''\n                        then z.primary_industry\n                        when b.industry_id is not null\n                        then i.name\n                        else null\n                    end as industry\n                from \"dev\".\"keypay_dwh\".\"business\" as b\n                left join\n                    (select id, name from \"dev\".\"keypay\".\"industry\") as i on b.industry_id = i.id\n                left join\n                    (select _id, primary_industry from keypay.zoom_info) as z\n                    on b.id = z._id\n            ) as m\n        left join\n            \"dev\".\"one_platform\".\"industry\" as i\n            on regexp_replace(m.industry, '\\\\s', '')\n            = regexp_replace(i.keypay_industry, '\\\\s', '')\n            or regexp_replace(m.industry, '\\\\s', '')\n            = regexp_replace(i.zoom_info_primary_industry, '\\\\s', '')\n            or regexp_replace(m.industry, '\\\\s', '')\n            = regexp_replace(i.eh_industry, '\\\\s', '')\n    ),\n\n    keypay_employees as (\n        select\n            e.id,\n            e.date_created,\n            e.date_of_birth,\n            e.residential_suburb_id,\n            e.end_date,\n            e.gender,\n            e.business_id,\n            e.start_date,\n            et.description as employment_type_description\n        from \"dev\".\"keypay_dwh\".\"employee\" e\n        join \"dev\".\"keypay_dwh\".\"business\" as b on b.id = e.business_id\n        left join \"dev\".\"keypay\".\"white_label\" as wl on b.white_label_id = wl.id\n        left join\n            \"dev\".\"keypay\".\"tax_file_declaration\" as tfd\n            on tfd.id = e.tax_file_declaration_id\n            and e.id = tfd.employee_id  -- AU\n        left join \"dev\".\"keypay\".\"employment_type\" as et on et.id = tfd.employment_type_id\n        where\n            (\n                e.end_date is null\n                or e.end_date >= e.date_created\n            )\n            and surname not ilike ('%zzz%')\n            and firstname not ilike ('%zzz%')\n            and not (\n                surname\n                ~* '(^|[ !@#$%^&*(),.?\":{}|<>]|\\d+)(test|demo)($|[ !@#$%^&*(),.?\":{}|<>]|\\d+)'\n                or firstname\n                ~* '(^|[ !@#$%^&*(),.?\":{}|<>]|\\d+)(test|demo)($|[ !@#$%^&*(),.?\":{}|<>]|\\d+)'\n            )\n    ),\n\n    employee_details as (\n        select\n            m.id,\n            m.gender,\n            m.date_of_birth,\n            m.employment_type_description,\n            m.start_date,\n            m.end_date,\n            s.postcode as residential_postcode,\n            s.name as residential_suburb,\n            -- , l.state as residential_state\t\t\t\n            case\n                when s.state ~* '(South Australia|SA)'\n                then 'SA'\n                when s.state ~* '(Northern Territory|NT)'\n                then 'NT'\n                when s.state ~* '(Victoria|VIC)'\n                then 'VIC'\n                when s.state ~* '(New South|NSW)'\n                then 'NSW'\n                when s.state ~* '(Queensland|QLD)'\n                then 'QLD'\n                when s.state ~* '(Tasmania|TAS)'\n                then 'TAS'\n                when s.state ~* '(Western Australia|WA)'\n                then 'WA'\n                when s.state ~* '(Australian Capital Territory|ACT)'\n                then 'ACT'\n                else null\n            end as residential_state,\n            s.country as residential_country\n        -- distinct lower(surname) as sname\n        -- ,lower(first_name) as fname\n        -- count(*)\n        from keypay_employees m\n        left join \"dev\".\"keypay_dwh\".\"suburb\" s on m.residential_suburb_id = s.id\n    -- multiple matches of state for one postcode\n    -- left join (select distinct postcode, state from\n    -- csv.australian_postcodes_localities where sa_4_code_2016 is not null)l on\n    -- s.postcode = l.postcode\n    ),\n\n    dates as (\n        select\n            dateadd(\n                'month', -generated_number::int, (date_trunc('month', add_months(current_date, 1)))\n            )::date as month\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 300\n    order by generated_number\n\n)\n        where month >= '2017-01-01'\n    -- where month >= '2023-02-01'\n    ),\n\n    keypay_pay_run_summary as (\n        select\n            -- d.month,\n            coalesce(prt.employee_id, prth.employee_id) as employee_id,\n            pr.business_id,\n            pr.invoice_id,\n            -- , DATEADD(month, 1, DATEFROMPARTS(year(pr.DateFirstFinalised),\n            -- month(pr.DateFirstFinalised), 1)) as BillingMonth\n            dateadd('DAY', 1, last_day(pr.date_first_finalised::date))::date\n            as billing_month,\n            coalesce(\n                prt.is_excluded_from_billing, prth.is_excluded_from_billing\n            ) as is_excluded_from_billing,\n            pay_period_starting,\n            pay_period_ending,\n            sum(coalesce(prt.total_hours, prth.total_hours)) as total_hours_combined\n        from  \"dev\".\"keypay\".\"payrun\" pr\n        join \"dev\".\"keypay_dwh\".\"business\" b on pr.business_id = b.id\n        left join\n            \"dev\".\"keypay\".\"payrun_total\" prt\n            on prt.payrun_id = pr.id\n            and split_part(pr._file, 'Shard', 2) = split_part(prt._file, 'Shard', 2)\n            and pr.date_first_finalised::date >= '2022-01-01'\n            and prt.is_excluded_from_billing = 0\n        left join\n            \"dev\".\"keypay\".\"payrun_total_history\" prth\n            on prth.payrun_id = pr.id\n            and split_part(pr._file, 'Shard', 2) = split_part(prth._file, 'Shard', 2)\n            and pr.date_first_finalised::date < '2022-01-01'\n            and prth.is_excluded_from_billing = 0\n        where\n            pr.date_first_finalised is not null --and pr.date_first_finalised != 'NULL'\n            -- and pr.DateFirstFinalised >= ''''',@fromDate,'''''      and\n            -- pr.DateFirstFinalised <= ''''',@toDate,'''''\n            and (\n                b.to_be_deleted is null\n                or b.to_be_deleted = 0\n--                 or b.to_be_deleted = ''\n--                 or b.to_be_deleted = 'NULL'\n--                 or b.to_be_deleted = 'False'\n            )  -- ISNULL(b.to_be_deleted, 0) = 0\n            -- and prt.employee_id = '320280'\n            -- and invoice_id = '3752585'\n        group by 1, 2, 3, 4, 5, 6, 7\n    ),\n\n    monthly_hours as (\n        select\n            d.month,\n            employee_id,\n            business_id,\n            invoice_id,\n            -- pay_period_starting,\n            -- pay_period_ending,\n            sum(\n                total_hours_combined * (\n                    datediff(\n                        day,\n                        case\n                            when d.month <= pay_period_starting::date\n                            then pay_period_starting::date\n                            else d.month\n                        end,\n                        case\n                            when dateadd('month', 1, d.month) > pay_period_ending::date\n                            then pay_period_ending::date\n                            else dateadd('month', 1, d.month)\n                        end\n                    )\n                    + 1\n                )\n                / (\n                    datediff(day, pay_period_starting::date, pay_period_ending::date)\n                    + 1\n                )\n            ) as monthly_hours\n\n        from dates as d\n        join\n            keypay_pay_run_summary\n            on (\n                pay_period_starting::date < dateadd('month', 1, d.month)\n                and d.month <= pay_period_ending::date\n            )\n        group by 1, 2, 3, 4\n    ),\n\n    total_employees_per_business as (\n        select month, business_id, count(distinct employee_id) as total_employees\n        from monthly_hours\n        group by 1, 2\n    ),\n\n    billed_business as (\n        select distinct  -- DATE_TRUNC('month', i.date::date)::date as month\n            case\n                when ili.business_id is null\n                then b.id\n                else ili.business_id\n            end as business_id\n        from \"dev\".\"keypay\".\"invoice_line_item\" ili\n        join\n            \"dev\".\"keypay\".\"invoice\" i\n            on i.id = ili.invoice_id\n            and split_part(i._file, 'Shard', 2) = split_part(ili._file, 'Shard', 2)\n        left join\n            \"dev\".\"keypay_dwh\".\"business\" b\n            on ili.abn = b.abn\n            and ili.business_id is null\n    )\n\nselect\n    mh.employee_id,\n    e.residential_state,\n    mh.business_id,\n    i.industry,\n    total_emps.total_employees,\n    mh.invoice_id,\n    mh.month,\n    mh.monthly_hours,\n    -- , pr.payg_withholding_amount\n    -- , pr.help_amount\n    -- , pr.super_contribution      \n    case when e.gender = 'F' then 'Female' when e.gender = 'M' then 'Male' end as gender\n    ,\n    datediff('year', e.date_of_birth, mh.month) as age,\n    case\n        when\n            employment_type_description = ''\n            or employment_type_description is null\n            or employment_type_description = 'NULL'\n        then null\n        when employment_type_description = 'Full Time'\n        then 'Full-time'\n        when employment_type_description = 'Part Time'\n        then 'Part-time'\n        else employment_type_description\n    end as employment_type,\n    e.start_date,\n    e.end_date\n-- , (pr.monthly_gross_earnings-avg(pr.monthly_gross_earnings) over ()) /\n-- (stddev(pr.monthly_gross_earnings) over ()) as z_score_earnings\n-- , (pr.total_hours-avg(pr.total_hours) over ()) / (stddev(pr.total_hours) over ())\n-- as z_score_hours\n-- , (hourly_rate-avg(hourly_rate) over ()) / (stddev(hourly_rate) over ()) as\n-- z_score_hourly_rate\nfrom monthly_hours mh\njoin employee_details e on mh.employee_id = e.id\njoin \"dev\".\"keypay_dwh\".\"business\" b on mh.business_id = b.id\nleft join \"dev\".\"keypay\".\"white_label\" as wl on b.white_label_id = wl.id\njoin\n    -- keypay.business_monthly_summary_062022 as bs \n    billed_business bs on bs.business_id = b.id and bs.business_id is not null  -- and bs.month = pr.billing_month      \nleft join\n    total_employees_per_business total_emps\n    on total_emps.month = mh.month\n    and total_emps.business_id = b.id\nleft join kp_business_industry as i on b.id = i.id\nwhere\n    mh.monthly_hours < 24 * 31\n    -- and not mh.is_excluded_from_billing\n    and (\n        employment_type_description != 'Superannuation Income Stream'\n        or employment_type_description is null\n    )\n    and (\n        employment_type_description != 'Labour Hire'\n        or employment_type_description is null\n    )\n    and mh.invoice_id is not null\n    and (wl.region_id is null or wl.region_id = 1)  -- AU business      \n    and (\n        reseller_id is null\n        or reseller_id not in (511, 829, 22, 708, 755, 790, 669)\n    )  -- exclude Test Partners\n    and abn != 11111111111\n    and datediff('day', getdate(), b.commence_billing_from::date) < 180\n    -- and b.name ilike '%test%' or name ilike '%demo%'     \n    and mh.month is not null", "relation_name": "\"dev\".\"employment_index\".\"v_median_hours_worked_kp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.782513Z", "completed_at": "2024-02-04T15:20:56.794460Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.800798Z", "completed_at": "2024-02-04T15:20:56.800812Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03696250915527344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_herodollar_transactions", "compiled": true, "compiled_code": "select\n    id, -- PK\n\n    -- Foreign Keys\n    \n\n  to_number(to_char(transaction_date::DATE,'YYYYMMDD'),'99999999')\n\n  as dim_date_sk,\n\n    case when lower(transaction_initiator_type) = 'user' then transaction_initiator_id end         as dim_user_eh_user_id,\n    case when lower(transaction_initiator_type) = 'organisation' then transaction_initiator_id end as dim_organisation_id,\n    ref_id,\n    parent_id,\n    transaction_source,\n    transaction_initiator_type,\n    transaction_type,\n    reason_type,\n    currency_code,\n    is_hero_points_transaction,\n    hero_dollar_amount,\n    hero_points_amount,\n    hero_points_conversion_rate,\n    unified_transaction_amount,\n    transaction_date,\n    transaction_revenue_amount                                                                     as revenue_amount\n\nfrom \"dev\".\"intermediate\".\"int_calc_herodollar_revenue_margin\"", "relation_name": "\"dev\".\"mart\".\"fct_herodollar_transactions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.787938Z", "completed_at": "2024-02-04T15:20:56.798061Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.806077Z", "completed_at": "2024-02-04T15:20:56.806091Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031341552734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_int_calc_herodollar_revenue_margin_id.cbae86ceae", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"intermediate\".\"int_calc_herodollar_revenue_margin\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.817438Z", "completed_at": "2024-02-04T15:20:56.835168Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.845901Z", "completed_at": "2024-02-04T15:20:56.845917Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04321885108947754, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_int_calc_herodollar_revenue_margin_id.033e551b49", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"intermediate\".\"int_calc_herodollar_revenue_margin\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.828355Z", "completed_at": "2024-02-04T15:20:56.843916Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.852693Z", "completed_at": "2024-02-04T15:20:56.852709Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04180192947387695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_dim_user_dim_user_sk.a1b2f26e3d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_user_sk\nfrom \"dev\".\"mart\".\"dim_user\"\nwhere dim_user_sk is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.836616Z", "completed_at": "2024-02-04T15:20:56.848601Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.857845Z", "completed_at": "2024-02-04T15:20:56.857858Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03609275817871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_dim_user_dim_user_sk.37d88c7eef", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    dim_user_sk as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mart\".\"dim_user\"\nwhere dim_user_sk is not null\ngroup by dim_user_sk\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.866913Z", "completed_at": "2024-02-04T15:20:56.882178Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.894884Z", "completed_at": "2024-02-04T15:20:56.894898Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0396575927734375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.not_null_salesforce__opportunity_line_item_enhanced_opportunity_line_item_id.d1357e96aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_line_item_id\nfrom \"dev\".\"salesforce\".\"salesforce__opportunity_line_item_enhanced\"\nwhere opportunity_line_item_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.875467Z", "completed_at": "2024-02-04T15:20:56.893639Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.901019Z", "completed_at": "2024-02-04T15:20:56.901031Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04049181938171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.unique_salesforce__opportunity_line_item_enhanced_opportunity_line_item_id.3d5a350c32", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    opportunity_line_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"salesforce__opportunity_line_item_enhanced\"\nwhere opportunity_line_item_id is not null\ngroup by opportunity_line_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.883438Z", "completed_at": "2024-02-04T15:20:56.896087Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.903345Z", "completed_at": "2024-02-04T15:20:56.903358Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.033760786056518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_salesforce__call_performance_daily_total_calls___0.5b019bb60f", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"salesforce\".\"salesforce__call_performance_daily\" where total_call_duration_in_sec > 0) dbt_subquery\n\nwhere not(total_calls > 0)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.913893Z", "completed_at": "2024-02-04T15:20:56.929738Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.938380Z", "completed_at": "2024-02-04T15:20:56.938394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03596067428588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_salesforce__call_performance_daily_date_day.6f1cba4f62", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom \"dev\".\"salesforce\".\"salesforce__call_performance_daily\"\nwhere date_day is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.924418Z", "completed_at": "2024-02-04T15:20:56.937089Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.944481Z", "completed_at": "2024-02-04T15:20:56.944494Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03585028648376465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.not_null_salesforce__daily_activity_date_day.154c971cb8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date_day\nfrom \"dev\".\"salesforce\".\"salesforce__daily_activity\"\nwhere date_day is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.930921Z", "completed_at": "2024-02-04T15:20:56.939561Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.946860Z", "completed_at": "2024-02-04T15:20:56.946873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03056931495666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.unique_salesforce__daily_activity_date_day.288eaadb04", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date_day as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"salesforce__daily_activity\"\nwhere date_day is not null\ngroup by date_day\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.957521Z", "completed_at": "2024-02-04T15:20:56.966378Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.979029Z", "completed_at": "2024-02-04T15:20:56.979041Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03078770637512207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.not_null_salesforce__contact_enhanced_contact_id.8c317adf93", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom \"dev\".\"salesforce\".\"salesforce__contact_enhanced\"\nwhere contact_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.972688Z", "completed_at": "2024-02-04T15:20:56.981921Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.989169Z", "completed_at": "2024-02-04T15:20:56.989182Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030271291732788086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.int_salesforce__opportunity_aggregation_by_owner", "compiled": true, "compiled_code": "with salesforce_opportunity_enhanced as (\n    \n    select *\n    from \"dev\".\"salesforce\".\"salesforce__opportunity_enhanced\"\n), \n\nsalesforce_user as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user\"\n), \n\nbooking_by_owner as (\n\n    select \n        opportunity_manager_id as b_manager_id,\n        opportunity_owner_id as b_owner_id,\n        round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n        round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n        count(*) as total_number_bookings,\n        round(sum(amount)) as total_bookings_amount,\n        sum(closed_count_this_month) as bookings_count_closed_this_month,\n        sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n        round(avg(amount)) as avg_bookings_amount,\n        max(amount) as largest_booking,\n        avg(days_to_close) as avg_days_to_close\n    from salesforce_opportunity_enhanced\n    where status = 'Won'\n    group by 1, 2\n), \n\nlost_by_owner as (\n\n    select \n        opportunity_manager_id as l_manager_id,\n        opportunity_owner_id as l_owner_id,\n        round(sum(closed_amount_this_month)) as lost_amount_this_month,\n        round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n        count(*) as total_number_lost,\n        round(sum(amount)) as total_lost_amount,\n        sum(closed_count_this_month) as lost_count_this_month,\n        sum(closed_count_this_quarter) as lost_count_this_quarter\n    from salesforce_opportunity_enhanced\n    where status = 'Lost'\n    group by 1, 2\n), \n\npipeline_by_owner as (\n\n    select \n        opportunity_manager_id as p_manager_id,\n        opportunity_owner_id as p_owner_id,\n        round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n        round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n        round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n        round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n        sum(created_count_this_month) as pipeline_count_created_this_month,\n        sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n        count(*) as total_number_pipeline,\n        round(sum(amount)) as total_pipeline_amount,\n        round(sum(amount * probability)) as total_pipeline_forecast_amount,\n        round(avg(amount)) as avg_pipeline_opp_amount,\n        max(amount) as largest_deal_in_pipeline,\n        avg(days_since_created) as avg_days_open\n    from salesforce_opportunity_enhanced\n    where status = 'Pipeline'\n    group by 1, 2\n)\n\nselect \n    salesforce_user.user_id as owner_id,\n    coalesce(p_manager_id, b_manager_id, l_manager_id) as manager_id,\n    booking_by_owner.*,\n    lost_by_owner.*,\n    pipeline_by_owner.*\nfrom salesforce_user\nleft join booking_by_owner \n    on booking_by_owner.b_owner_id = salesforce_user.user_id\nleft join lost_by_owner \n    on lost_by_owner.l_owner_id = salesforce_user.user_id\nleft join pipeline_by_owner \n    on pipeline_by_owner.p_owner_id = salesforce_user.user_id", "relation_name": "\"dev\".\"salesforce\".\"int_salesforce__opportunity_aggregation_by_owner\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.967622Z", "completed_at": "2024-02-04T15:20:56.984165Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:56.991450Z", "completed_at": "2024-02-04T15:20:56.991465Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.044240713119506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.unique_salesforce__contact_enhanced_contact_id.3a0def3b1e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"salesforce__contact_enhanced\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:56.994353Z", "completed_at": "2024-02-04T15:20:57.005793Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.016747Z", "completed_at": "2024-02-04T15:20:57.016760Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.036832571029663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__sales_snapshot", "compiled": true, "compiled_code": "with salesforce_opportunity_enhanced as (\n    \n    select *\n    from \"dev\".\"salesforce\".\"salesforce__opportunity_enhanced\"\n), \n\npipeline as (\n\n    select \n        round(sum(created_amount_this_month)) as pipeline_created_amount_this_month,\n        round(sum(created_amount_this_quarter)) as pipeline_created_amount_this_quarter,\n        round(sum(created_amount_this_month * probability)) as pipeline_created_forecast_amount_this_month,\n        round(sum(created_amount_this_quarter * probability)) as pipeline_created_forecast_amount_this_quarter,\n        sum(created_count_this_month) as pipeline_count_created_this_month,\n        sum(created_count_this_quarter) as pipeline_count_created_this_quarter,\n        count(*) as total_number_pipeline,\n        round(sum(amount)) as total_pipeline_amount,\n        round(sum(amount * probability)) as total_pipeline_forecast_amount,\n        round(avg(amount)) as avg_pipeline_opp_amount,\n        max(amount) as largest_deal_in_pipeline,\n        avg(days_since_created) as avg_days_open\n    from salesforce_opportunity_enhanced\n    where status = 'Pipeline'\n), \n\nbookings as (\n\n    select \n        round(sum(closed_amount_this_month)) as bookings_amount_closed_this_month,\n        round(sum(closed_amount_this_quarter)) as bookings_amount_closed_this_quarter,\n        count(*) as total_number_bookings,\n        round(sum(amount)) as total_bookings_amount,\n        sum(closed_count_this_month) as bookings_count_closed_this_month,\n        sum(closed_count_this_quarter) as bookings_count_closed_this_quarter,\n        round(avg(amount)) as avg_bookings_amount,\n        max(amount) as largest_booking,\n        avg(days_to_close) as avg_days_to_close\n    from salesforce_opportunity_enhanced\n    where status = 'Won'\n), \n\nlost as (\n\n    select \n        round(sum(closed_amount_this_month)) as lost_amount_this_month,\n        round(sum(closed_amount_this_quarter)) as lost_amount_this_quarter,\n        count(*) as total_number_lost,\n        round(sum(amount)) as total_lost_amount,\n        sum(closed_count_this_month) as lost_count_this_month,\n        sum(closed_count_this_quarter) as lost_count_this_quarter\n    from salesforce_opportunity_enhanced\n    where status = 'Lost'\n)\n\nselect \n    bookings.*,\n    pipeline.*,\n    lost.*,\n    case \n        when (bookings.bookings_amount_closed_this_month + lost.lost_amount_this_month) = 0 then null\n        else round( (bookings.bookings_amount_closed_this_month / (bookings.bookings_amount_closed_this_month + lost.lost_amount_this_month) ) * 100, 2 )\n    end as win_percent_this_month,\n    case \n        when (bookings.bookings_amount_closed_this_quarter + lost.lost_amount_this_quarter) = 0 then null\n        else round( (bookings.bookings_amount_closed_this_quarter / (bookings.bookings_amount_closed_this_quarter + lost.lost_amount_this_quarter) ) * 100, 2 ) \n    end as win_percent_this_quarter,\n    case \n        when (bookings.total_bookings_amount + lost.total_lost_amount) = 0 then null \n        else round( (bookings.total_bookings_amount / (bookings.total_bookings_amount + lost.total_lost_amount) ) * 100, 2) \n    end as total_win_percent\nfrom bookings, pipeline, lost", "relation_name": "\"dev\".\"salesforce\".\"salesforce__sales_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.011566Z", "completed_at": "2024-02-04T15:20:57.024693Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.030931Z", "completed_at": "2024-02-04T15:20:57.030945Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030190229415893555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.not_null_salesforce__opportunity_enhanced_opportunity_id.0faefe3afc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opportunity_id\nfrom \"dev\".\"salesforce\".\"salesforce__opportunity_enhanced\"\nwhere opportunity_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.017914Z", "completed_at": "2024-02-04T15:20:57.028361Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.035927Z", "completed_at": "2024-02-04T15:20:57.035939Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035758018493652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.unique_salesforce__opportunity_enhanced_opportunity_id.fb4f6a1788", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    opportunity_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"salesforce__opportunity_enhanced\"\nwhere opportunity_id is not null\ngroup by opportunity_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.037138Z", "completed_at": "2024-02-04T15:20:57.045572Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.055811Z", "completed_at": "2024-02-04T15:20:57.055825Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028922080993652344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__assignee_updates", "compiled": true, "compiled_code": "with ticket_updates as (\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n\n), ticket as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), ticket_requester as (\n    select\n        ticket.ticket_id,\n        ticket.assignee_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.assignee_id\n\n), final as (\n    select \n        ticket_id,\n        assignee_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__assignee_updates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.051453Z", "completed_at": "2024-02-04T15:20:57.065334Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.071346Z", "completed_at": "2024-02-04T15:20:57.071361Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03595137596130371, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__comments_enriched", "compiled": true, "compiled_code": "with ticket_comment as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n    where field_name = 'comment'\n\n), users as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__user\"\n\n), joined as (\n\n    select \n\n        ticket_comment.*,\n        case when commenter.role = 'end-user' then 'external_comment'\n            when commenter.role in ('agent','admin') then 'internal_comment'\n            else 'unknown' end as commenter_role\n    \n    from ticket_comment\n    \n    join users as commenter\n        on commenter.user_id = ticket_comment.user_id\n\n), add_previous_commenter_role as (\n    /*\n    In int_zendesk__ticket_reply_times we will only be focusing on reply times between public tickets.\n    The below union explicitly identifies the previous commenter roles of public and not public comments.\n    */\n    select\n        *,\n        coalesce(\n            lag(commenter_role) over (partition by ticket_id order by valid_starting_at, commenter_role)\n            , 'first_comment') \n            as previous_commenter_role\n    from joined\n    where is_public\n\n    union all\n\n    select\n        *,\n        'non_public_comment' as previous_commenter_role\n    from joined\n    where not is_public\n)\n\nselect \n    *,\n    first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_comment_added_at,\n    sum(case when not is_public then 1 else 0 end) over (partition by ticket_id order by valid_starting_at rows between unbounded preceding and current row) as previous_internal_comment_count\nfrom add_previous_commenter_role", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__comments_enriched\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.059783Z", "completed_at": "2024-02-04T15:20:57.069115Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.081427Z", "completed_at": "2024-02-04T15:20:57.081440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03414416313171387, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_updates", "compiled": true, "compiled_code": "with ticket_updates as (\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n\n), ticket as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), ticket_requester as (\n    select\n        ticket.ticket_id,\n        ticket.requester_id,\n        ticket_updates.valid_starting_at\n\n    from ticket\n\n    left join ticket_updates\n        on ticket_updates.ticket_id = ticket.ticket_id\n            and ticket_updates.user_id = ticket.requester_id\n\n), final as (\n    select \n        ticket_id,\n        requester_id,\n        max(valid_starting_at) as last_updated,\n        count(*) as total_updates\n    from ticket_requester\n\n    group by 1, 2\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__requester_updates\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.073626Z", "completed_at": "2024-02-04T15:20:57.085801Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.093031Z", "completed_at": "2024-02-04T15:20:57.093044Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03575563430786133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__sla_policy_applied", "compiled": true, "compiled_code": "-- step 1, figure out when sla was applied to tickets\n\n-- more on SLA policies here: https://support.zendesk.com/hc/en-us/articles/204770038-Defining-and-using-SLA-policies-Professional-and-Enterprise-\n-- SLA policies are calculated for next_reply_time, first_reply_time, agent_work_time, requester_wait_time.  If you're company uses other SLA metrics, and would like this\n-- package to support those, please reach out to the Fivetran team on Slack.\n\nwith ticket_field_history as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n\n), sla_policy_name as (\n\n  select \n    *\n  from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n  where field_name = ('sla_policy')\n\n), ticket as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_aggregates\"\n\n), sla_policy_applied as (\n\n  select\n    ticket_field_history.ticket_id,\n    ticket.created_at as ticket_created_at,\n    ticket_field_history.valid_starting_at,\n    ticket.status as ticket_current_status,\n    ticket_field_history.field_name as metric,\n    case when ticket_field_history.field_name = 'first_reply_time' then row_number() over (partition by ticket_field_history.ticket_id, ticket_field_history.field_name order by ticket_field_history.valid_starting_at desc) else 1 end as latest_sla,\n    case when ticket_field_history.field_name = 'first_reply_time' then ticket.created_at else ticket_field_history.valid_starting_at end as sla_applied_at,\n    cast(\n\n  json_extract_path_text(ticket_field_history.value,'minutes')\n\n as integer ) as target,\n    \n\n  json_extract_path_text(ticket_field_history.value,'in_business_hours')\n\n = 'true' as in_business_hours\n  from ticket_field_history\n  join ticket\n    on ticket.ticket_id = ticket_field_history.ticket_id\n  where ticket_field_history.value is not null\n    and ticket_field_history.field_name in ('next_reply_time', 'first_reply_time', 'agent_work_time', 'requester_wait_time')\n\n), final as (\n  select\n    sla_policy_applied.*,\n    sla_policy_name.value as sla_policy_name\n  from sla_policy_applied\n  left join sla_policy_name\n    on sla_policy_name.ticket_id = sla_policy_applied.ticket_id\n      and sla_policy_applied.valid_starting_at >= sla_policy_name.valid_starting_at\n      and sla_policy_applied.valid_starting_at < coalesce(sla_policy_name.valid_ending_at, getdate()) \n  where sla_policy_applied.latest_sla = 1\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__sla_policy_applied\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.094184Z", "completed_at": "2024-02-04T15:20:57.108762Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.114905Z", "completed_at": "2024-02-04T15:20:57.114918Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03457307815551758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_assignee", "compiled": true, "compiled_code": "with assignee_updates as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n    where field_name = 'assignee_id'\n\n), calculate_metrics as (\n    select\n        ticket_id,\n        field_name as assignee_id,\n        value,\n        ticket_created_date,\n        valid_starting_at,\n        lag(valid_starting_at) over (partition by ticket_id order by valid_starting_at) as previous_update,\n        lag(value) over (partition by ticket_id order by valid_starting_at) as previous_assignee,\n        first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_agent_assignment_date,\n        first_value(value) over (partition by ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_assignee_id,\n        first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_agent_assignment_date,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_assignee_id,\n        count(value) over (partition by ticket_id) as assignee_stations_count\n    from assignee_updates\n\n), unassigned_time as (\n    select\n        ticket_id,\n        sum(case when assignee_id is not null and previous_assignee is null \n            then datediff(\n        second,\n        coalesce(previous_update, ticket_created_date),\n        valid_starting_at\n        ) / 60\n            else 0\n                end) as ticket_unassigned_duration_calendar_minutes,\n        count(distinct value) as unique_assignee_count\n    from calculate_metrics\n\n    group by 1\n\n), window_group as (\n    select\n        calculate_metrics.ticket_id,\n        calculate_metrics.first_agent_assignment_date,\n        calculate_metrics.first_assignee_id,\n        calculate_metrics.last_agent_assignment_date,\n        calculate_metrics.last_assignee_id,\n        calculate_metrics.assignee_stations_count\n    from calculate_metrics\n\n    group by 1,2,3,4,5,6\n\n), final as (\n    select\n        window_group.*,\n        unassigned_time.unique_assignee_count,\n        unassigned_time.ticket_unassigned_duration_calendar_minutes\n    from window_group\n\n    left join unassigned_time\n        using(ticket_id)\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_historical_assignee\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.103706Z", "completed_at": "2024-02-04T15:20:57.113734Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.122833Z", "completed_at": "2024-02-04T15:20:57.122845Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03516125679016113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_group", "compiled": true, "compiled_code": "with ticket_group_history as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n    where field_name = 'group_id'\n\n), group_breakdown as (\n    select\n  \n        ticket_id,\n        valid_starting_at,\n        valid_ending_at,\n        value as group_id\n    from ticket_group_history\n\n), final as (\n    select\n        ticket_id,\n        count(group_id) as group_stations_count\n    from group_breakdown\n\n    group by 1\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_historical_group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.116044Z", "completed_at": "2024-02-04T15:20:57.125295Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.132843Z", "completed_at": "2024-02-04T15:20:57.132856Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030255556106567383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_satisfaction", "compiled": true, "compiled_code": "with satisfaction_updates as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n    where field_name in ('satisfaction_score', 'satisfaction_comment', 'satisfaction_reason_code') \n\n), latest_reason as (\n    select\n        ticket_id,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_reason\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_reason_code'\n\n), latest_comment as (\n    select\n        ticket_id,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_comment\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_comment'\n\n), first_and_latest_score as (\n    select\n        ticket_id,\n        first_value(value) over (partition by ticket_id order by valid_starting_at, ticket_id rows unbounded preceding) as first_satisfaction_score,\n        first_value(value) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as latest_satisfaction_score\n    from satisfaction_updates\n\n    where field_name = 'satisfaction_score' and value != 'offered'\n\n), satisfaction_scores as (\n    select\n        ticket_id,\n        count(value) over (partition by ticket_id) as count_satisfaction_scores,\n        case when lag(value) over (partition by ticket_id order by valid_starting_at desc) = 'good' and value = 'bad'\n            then 1\n            else 0\n                end as good_to_bad_score,\n        case when lag(value) over (partition by ticket_id order by valid_starting_at desc) = 'bad' and value = 'good'\n            then 1\n            else 0\n                end as bad_to_good_score\n    from satisfaction_updates\n    where field_name = 'satisfaction_score'\n\n), score_group as (\n    select\n        ticket_id,\n        count_satisfaction_scores,\n        sum(good_to_bad_score) as total_good_to_bad_score,\n        sum(bad_to_good_score) as total_bad_to_good_score\n    from satisfaction_scores\n\n    group by 1, 2\n\n), window_group as (\n    select\n        satisfaction_updates.ticket_id,\n        latest_reason.latest_satisfaction_reason,\n        latest_comment.latest_satisfaction_comment,\n        first_and_latest_score.first_satisfaction_score,\n        first_and_latest_score.latest_satisfaction_score,\n        score_group.count_satisfaction_scores,\n        score_group.total_good_to_bad_score,\n        score_group.total_bad_to_good_score\n\n    from satisfaction_updates\n\n    left join latest_reason\n        on satisfaction_updates.ticket_id = latest_reason.ticket_id\n\n    left join latest_comment\n        on satisfaction_updates.ticket_id = latest_comment.ticket_id\n\n    left join first_and_latest_score\n        on satisfaction_updates.ticket_id = first_and_latest_score.ticket_id\n\n    left join score_group\n        on satisfaction_updates.ticket_id = score_group.ticket_id\n\n    group by 1, 2, 3, 4, 5, 6, 7, 8\n\n), final as (\n    select\n        ticket_id,\n        latest_satisfaction_reason,\n        latest_satisfaction_comment,\n        first_satisfaction_score,\n        latest_satisfaction_score,\n        case when count_satisfaction_scores > 0\n            then (count_satisfaction_scores - 1) --Subtracting one as the first score is always \"offered\".\n            else count_satisfaction_scores\n                end as count_satisfaction_scores,\n        case when total_good_to_bad_score > 0\n            then true\n            else false\n                end as is_good_to_bad_satisfaction_score,\n        case when total_bad_to_good_score > 0\n            then true\n            else false\n                end as is_bad_to_good_satisfaction_score\n    from window_group\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_historical_satisfaction\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.135276Z", "completed_at": "2024-02-04T15:20:57.149368Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.155408Z", "completed_at": "2024-02-04T15:20:57.155421Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.035256385803222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_historical_status", "compiled": true, "compiled_code": "-- To do -- can we delete ticket_status_counter and unique_status_counter?\n\nwith ticket_status_history as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n    where field_name = 'status'\n\n)\n\n  select\n  \n    ticket_id,\n    valid_starting_at,\n    valid_ending_at,\n    datediff(\n        minute,\n        valid_starting_at,\n        coalesce(valid_ending_at, getdate())\n        ) as status_duration_calendar_minutes,\n    value as status,\n    -- MIGHT BE ABLE TO DELETE ROWS BELOW\n    row_number() over (partition by ticket_id order by valid_starting_at) as ticket_status_counter,\n    row_number() over (partition by ticket_id, value order by valid_starting_at) as unique_status_counter\n\n  from ticket_status_history", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_historical_status\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.144104Z", "completed_at": "2024-02-04T15:20:57.153205Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.164555Z", "completed_at": "2024-02-04T15:20:57.164569Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.033370018005371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__updater_information", "compiled": true, "compiled_code": "with users as (\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__user_aggregates\"\n\n), organizations as (\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__organization_aggregates\"\n\n), final as (\n    select\n        users.user_id as updater_user_id\n        ,users.name as updater_name\n        ,users.role as updater_role\n        ,users.email as updater_email\n        ,users.external_id as updater_external_id\n        ,users.locale as updater_locale\n        ,users.is_active as updater_is_active\n\n        --If you use user tags this will be included, if not it will be ignored.\n        \n        ,users.user_tags as updater_user_tags\n        \n\n        ,users.last_login_at as updater_last_login_at\n        ,users.time_zone as updater_time_zone\n        ,organizations.organization_id as updater_organization_id\n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        ,organizations.domain_names as updater_organization_domain_names\n        \n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n        ,organizations.organization_tags as updater_organization_organization_tags\n        \n    from users\n\n    left join organizations\n        using(organization_id)\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__updater_information\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.157668Z", "completed_at": "2024-02-04T15:20:57.170106Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.182948Z", "completed_at": "2024-02-04T15:20:57.182962Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035115957260131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_hiring_essentials_organisations_organisation_id.b5b277a409", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"ats\".\"hiring_essentials_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.176253Z", "completed_at": "2024-02-04T15:20:57.192491Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.198668Z", "completed_at": "2024-02-04T15:20:57.198681Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03350329399108887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_hiring_essentials_organisations_organisation_id.65d2a40515", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"hiring_essentials_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.186931Z", "completed_at": "2024-02-04T15:20:57.197500Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.208283Z", "completed_at": "2024-02-04T15:20:57.208297Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03617072105407715, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_job_applications", "compiled": true, "compiled_code": "\n\nselect distinct\n    cj.id,\n    cj.job_id,\n    j.job_title,\n    j.created_at                                                 as job_created_at,\n    j.job_sector,\n    j.organisation_id,\n    j.industry,\n    j.country,\n    j.is_remote_job,\n    j.is_test_job,\n    case\n        when cj.result = 1\n            then 'in progress'\n        when cj.result = 2\n            then 'hired'\n        else 'rejected'\n    end                                                          as result,\n    cj.created_at                                                as applied_at,\n    cj.updated_at,\n    cj.hired_at,\n    datediff(days, cj.created_at, cj.hired_at)                   as time_to_hire,\n    coalesce(\n        portal.name,\n        case\n            when cj.source_name ~* '.*(direct).*' then 'Employment Hero Careers'\n            when cj.source_name ~* '.*(jora).*' then 'JORA'\n            when cj.source_name ~* '.*(adzuna).*' then 'Adzuna'\n            when cj.source_name ~* '.*(seek).*' then 'SEEK'\n        end\n    )                                                            as portal_name,\n    coalesce(posting.posted_at, cpj.created_at, jbja.created_at) as posted_at,\n    cj.source_name                                               as source,\n    case\n        when cj.source_name ~* '.*(manual|shortlisted|copied).*' then 'Manual'\n        when cj.source_name ~* '.*(direct|jora|adzuna|referral).*' then 'Direct'\n        else 'Indirect'\n    end                                                          as application_type,\n    cj.applied_first_name || ' ' || cj.applied_last_name         as applicant,\n    lower(cj.applied_email)                                      as applicant_email,\n    cj.user_id\nfrom\n    \"dev\".\"ats_public\".\"candidate_jobs\" as cj\ninner join \"dev\".\"ats\".\"jobs_created\" as j\n    on\n        cj.job_id = j.job_id\nleft join \"dev\".\"ats_public\".\"job_boards_postings\" as posting\n    on\n        cj.vendor_posting_id = posting.vendor_posting_id\n        and not posting._fivetran_deleted\nleft join \"dev\".\"ats_public\".\"job_boards_portals\" as portal\n    on\n        posting.job_boards_portal_id = portal.id\n        and not portal._fivetran_deleted\nleft join \"dev\".\"ats_public\".\"career_page_jobs\" as cpj\n    on\n        cj.career_page_job_id = cpj.id\nleft join \"dev\".\"ats_public\".\"job_boards_job_adverts\" as jbja\n    on\n        cj.job_boards_job_advert_id = jbja.id\nwhere\n    not cj._fivetran_deleted\n    and \n    applicant_email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n", "relation_name": "\"dev\".\"ats\".\"job_applications\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.203560Z", "completed_at": "2024-02-04T15:20:57.212352Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.219710Z", "completed_at": "2024-02-04T15:20:57.219724Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03129291534423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_jobs_posted", "compiled": true, "compiled_code": "\n\nselect\n    posting.job_id,\n    j.created_at  as job_created_at,\n    j.job_title,\n    j.job_sector,\n    j.organisation_id,\n    o.name        as organisation_name,\n    o.pricing_tier,\n    j.industry,\n    j.country,\n    posting.id    as job_boards_post_id,\n    portal.name   as portal_name,\n    portal.source as portal_source,\n    posting.posted_at,\n    posting.created_at,\n    posting.updated_at,\n    posting.expired_at,\n    j.job_status,\n    case\n        when status = 1\n            then 'pending'\n        when status = 2\n            then 'posted'\n        when status = 3\n            then 'updated'\n        when status = 4\n            then 'failed'\n        when status = 5\n            then 'expired'\n        else 'deleted'\n    end           as job_posting_status,\n    posting.applicants_count,\n    j.is_remote_job,\n    j.is_test_job\nfrom\n    \"dev\".\"ats_public\".\"job_boards_postings\" as posting\ninner join \"dev\".\"ats\".\"jobs_created\" as j\n    on\n        posting.job_id = j.job_id\ninner join \"dev\".\"ats_public\".\"job_boards_portals\" as portal\n    on\n        posting.job_boards_portal_id = portal.id\nleft join \"dev\".\"employment_hero\".\"organisations\" as o on j.organisation_id = o.id\nwhere\n    not posting._fivetran_deleted", "relation_name": "\"dev\".\"ats\".\"jobs_posted\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.220904Z", "completed_at": "2024-02-04T15:20:57.233947Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.240164Z", "completed_at": "2024-02-04T15:20:57.240178Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030295848846435547, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_jobs_created_job_id.553e170c8d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_id\nfrom \"dev\".\"ats\".\"jobs_created\"\nwhere job_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.228806Z", "completed_at": "2024-02-04T15:20:57.237738Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.245163Z", "completed_at": "2024-02-04T15:20:57.245175Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03490185737609863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_jobs_created_job_id.e87dbdf2ff", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    job_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"jobs_created\"\nwhere job_id is not null\ngroup by job_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.246306Z", "completed_at": "2024-02-04T15:20:57.255965Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.267013Z", "completed_at": "2024-02-04T15:20:57.267027Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.031098365783691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_v_instapay_on_off_organisations_organisation_id.3f0d6b43e8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"ebenefits\".\"_v_instapay_on_off_organisations\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.261887Z", "completed_at": "2024-02-04T15:20:57.281239Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.288416Z", "completed_at": "2024-02-04T15:20:57.288430Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04263901710510254, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_v_instapay_on_off_organisations_organisation_id.4839d56b47", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"_v_instapay_on_off_organisations\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.271309Z", "completed_at": "2024-02-04T15:20:57.283931Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.295662Z", "completed_at": "2024-02-04T15:20:57.295676Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0383760929107666, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_feedback", "compiled": true, "compiled_code": "\n\n-- with feedback_1 as (\n--     select org_uuid, org_id, user_uuid, matched_job_title\n--     , listagg(distinct vote, '; ') WITHIN GROUP (order by created_at desc) as votes\n--     , listagg(distinct explanation, '; ') WITHIN GROUP (order by created_at desc) as explanations\n--     from (        \n--         select fb.id, fb.created_at, explanation, vote    \n--         , u.id as feedback_user_id\n\n--         , o.uuid as org_uuid\n--         , o.id as org_id\n--         , json_extract_path_text(context, 'matching_job_title')::varchar as matched_job_title\n--         from \"dev\".\"ats_public\".\"feedbacks\" fb\n--         join \"dev\".\"postgres_public\".\"users\" u on fb.user_id = u.uuid\n--         join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id\n--         join \"dev\".\"employment_hero\".\"organisations\" o on e.organisation_id = o.id\n--         where not fb._fivetran_deleted\n--         --and explanation is not null\n--         and feature = 'candidate_recommendation'\n--         and is_paying_eh\n--     )\n--     group by 1,2,3,4\n--   )\n\nwith\nfeedback_init as (\n    select\n        id,\n        user_id,\n        created_at,\n        explanation,\n        vote,\n        context,\n        json_extract_path_text(context, 'matching_job_title')::varchar as matched_job_title,\n        json_extract_path_text(context, 'user_ids')                    as context_user_ids,\n        json_extract_path_text(context, 'href')                        as hrefs\n    from \"dev\".\"ats_public\".\"feedbacks\"\n    where not _fivetran_deleted and feature = 'candidate_recommendation'\n)\n,\n\nnumbers as (\n    select generated_number::int as num\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 1000\n    order by generated_number\n\n)\n),\n\nfeedback_1 as (\n    select\n        fb.id,\n        fb.created_at,\n        fb.explanation,\n        fb.vote,\n        u.id                                                                                                                                                                       as feedback_user_id,\n        fb.matched_job_title,\n        fb.context_user_ids,\n        case when fb.hrefs ilike '%/organisations/%' then (split_part(regexp_substr(fb.hrefs, '/organisations/([0-9]+)/', 1, 1, 'i'), '/', 3))::integer end                        as org_id,\n        case when fb.hrefs ilike '%/memberships/%' then replace(split_part(regexp_substr(fb.hrefs, '/memberships/([0-9]+)/', 1, 1, 'i'), '/', 3), ' ', '') end                     as member_id1,\n        case when fb.hrefs ilike '%/memberships/%' then replace(split_part(split_part(regexp_substr(fb.hrefs, '/memberships/([0-9]+)#', 1, 1, 'i'), '/', 3), '#', 1), ' ', '') end as member_id2,\n        case when fb.hrefs ilike '%/memberships/%' then replace(split_part(split_part(regexp_substr(fb.hrefs, '/memberships/([0-9]+)?', 1, 1, 'i'), '/', 3), '?', 1), ' ', '') end as member_id3\n    from feedback_init as fb\n    inner join \"dev\".\"postgres_public\".\"users\" as u on fb.user_id = u.uuid\n)\n,\nfeedback_2 as (\n    select\n        a.id,\n        a.created_at,\n        a.explanation,\n        a.vote,\n        a.feedback_user_id,\n        a.matched_job_title,\n        a.context_user_ids,\n        coalesce(a.org_id, b.organisation_id) as final_org_id\n    from\n        (select\n            id,\n            created_at,\n            explanation,\n            vote,\n            feedback_user_id,\n            matched_job_title,\n            context_user_ids,\n            org_id,\n            coalesce(nullif(member_id1, ''), nullif(member_id2, ''), nullif(member_id3, '')) as member_id_final\n        from feedback_1) as a\n    left join \"dev\".\"postgres_public\".\"members\" as b on a.member_id_final = b.id and a.org_id is NULL\n)\n,\nfeedback_3 as (\n    select\n        a.id                                                                                          as feedbacks_id,\n        a.created_at,\n        a.explanation,\n        a.vote,\n        a.feedback_user_id,\n        a.matched_job_title,\n        a.final_org_id,\n        o.uuid                                                                                        as org_uuid,\n        replace(trim(both '[]''\"' from split_part(a.context_user_ids, ',', n.num::integer)), '\"', '') as user_uuid\n    from feedback_2 as a\n    inner join \"dev\".\"employment_hero\".\"employees\" as e on a.feedback_user_id = e.user_id and a.final_org_id = e.organisation_id\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on a.final_org_id = o.id\n    inner join numbers as n on n.num <= 1 + length(a.context_user_ids) - length(replace(a.context_user_ids, ',', ''))\n    where\n        a.context_user_ids is not NULL\n        and a.context_user_ids != '[]'\n        and replace(trim(both '[]''\"' from split_part(a.context_user_ids, ',', n.num::integer)), '\"', '') is not NULL\n        and o.is_paying_eh\n)\n\n\nselect\n    org_uuid,\n    final_org_id                                                                as org_id,\n    user_uuid,\n    matched_job_title,\n    listagg(distinct vote, '; ') within group (order by created_at desc)        as votes,\n    listagg(distinct explanation, '; ') within group (order by created_at desc) as explanations\nfrom feedback_3\ngroup by 1, 2, 3, 4", "relation_name": "\"dev\".\"ats\".\"feedback\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.289616Z", "completed_at": "2024-02-04T15:20:57.301457Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.308817Z", "completed_at": "2024-02-04T15:20:57.308831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.035242319107055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_employees", "compiled": true, "compiled_code": "\n\nselect\n    e.id                                                                               as member_id,\n    e.user_id,\n    u.uuid                                                                             as user_uuid,\n    e.organisation_id,\n    e.work_country,\n    e.trim_job_title                                                                   as latest_job_title\n    ,  \ncase\n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i')) end\n as job_title_without_seniority\n    ,  \ncase \n        when INITCAP(job_title_seniority) in ('Associate', 'Assistant', 'Graduate', 'Apprentice', 'Trainee') then 'Junior'\n        when INITCAP(job_title_seniority) = '' or INITCAP(job_title_seniority) is null then 'Intermediate'\n        when INITCAP(job_title_seniority) in ('Principal', 'Leader') then 'Lead'\n        when INITCAP(job_title_seniority) in ('Managing') then 'Manager'\n        when INITCAP(job_title_seniority) in ('Head') then 'Head'\n        when INITCAP(job_title_seniority) in ('Vice', 'Executive') then 'Director'\n        else INITCAP(job_title_seniority) end \n as job_title_seniority,\n    e.industry_standard_job_title,\n    e.latest_employment_type,\n    datediff('year', h.start_date, current_date)                                       as job_title_tenure,\n    datediff('year', ha.first_start_date, current_date)                                as org_tenure,\n    datediff('year', date_of_birth, current_date)                                      as age,\n    addr.city,\n    addr.postcode\nfrom (select\n    *,\n    trim(latest_job_title) as trim_job_title,\n    lower( \ncase when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when trim_job_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when trim_job_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when trim_job_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when trim_job_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when trim_job_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when trim_job_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when trim_job_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when trim_job_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when trim_job_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when trim_job_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when trim_job_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when trim_job_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when trim_job_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n)                          as job_title_seniority\nfrom \"dev\".\"employment_hero\".\"employees\") as e\ninner join \"dev\".\"postgres_public\".\"users\" as u on e.user_id = u.id\ninner join \"dev\".\"employment_hero\".\"organisations\" as o on e.organisation_id = o.id\nleft join \n\n(\nselect\n    *\n  from\n    \"dev\".\"postgres_public\".\"employment_histories\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n      where\n        not _fivetran_deleted\n    )\n)\n\n as h\n    on e.id = h.member_id\nleft join (select\n    member_id,\n    min(start_date) as first_start_date\nfrom \"dev\".\"postgres_public\".\"employment_histories\" group by 1) as ha on e.id = ha.member_id\nleft join \"dev\".\"postgres_public\".\"addresses\" as addr on e.address_id = addr.id and not addr._fivetran_deleted\nwhere\n    e.active\n    and o.is_paying_eh", "relation_name": "\"dev\".\"ats\".\"smart_match_employees\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.311106Z", "completed_at": "2024-02-04T15:20:57.329975Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.341011Z", "completed_at": "2024-02-04T15:20:57.341025Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03987741470336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_employers", "compiled": true, "compiled_code": "\n-- to be added: Employer side member id\n\nwith shortlisted as (\n    select\n        o.uuid                                                                    as org_uuid,\n        o.id                                                                      as org_id,\n        cj.user_id                                                                as candidate_user_uuid,\n        cj.job_id,\n        j.job_title\n        ,  \ncase\n    when regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i')) end\n as job_title_without_seniority\n        ,  \ncase \n        when INITCAP(job_title_seniority) in ('Associate', 'Assistant', 'Graduate', 'Apprentice', 'Trainee') then 'Junior'\n        when INITCAP(job_title_seniority) = '' or INITCAP(job_title_seniority) is null then 'Intermediate'\n        when INITCAP(job_title_seniority) in ('Principal', 'Leader') then 'Lead'\n        when INITCAP(job_title_seniority) in ('Managing') then 'Manager'\n        when INITCAP(job_title_seniority) in ('Head') then 'Head'\n        when INITCAP(job_title_seniority) in ('Vice', 'Executive') then 'Director'\n        else INITCAP(job_title_seniority) end \n as job_title_seniority,\n        j.job_sector,\n        j.industry,\n        j.country,\n        j.employment_type,\n        j.job_description,\n        j.candidate_location,\n        j.is_remote_job,\n        j.workplace_type,\n        cj.created_at,\n        cj._fivetran_deleted,\n        cj.id\n    from \"dev\".\"ats_public\".\"candidate_jobs\" as cj\n    inner join (select\n        *,\n        lower( \ncase when regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when job_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when job_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when job_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when job_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when job_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when job_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when job_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when job_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when job_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when job_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when job_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when job_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when job_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n) as job_title_seniority\n    from \"dev\".\"ats\".\"jobs_created\") as j on cj.job_id = j.job_id\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on j.organisation_id = o.id\n    where\n        cj.source_name = 'Shortlisted from Saved candidate'\n        and not j.is_test_job\n        and is_paying_eh\n),\n\nsaved as (\n    select distinct\n        o.uuid                                                                                                                                                           as org_uuid,\n        o.id                                                                                                                                                             as org_id,\n        u.uuid                                                                                                                                                           as candidate_user_uuid,\n        sc.job_saved_for,\n        sc.created_at,\n        o.industry,\n        o.country,\n        sc.id,\n        sc._fivetran_deleted,\n        first_value(eh.title) over (partition by sc._fivetran_deleted, eh.member_id order by eh.start_date asc rows between unbounded preceding and unbounded following) as employer_job_title\n    from \"dev\".\"postgres_public\".\"saved_candidates\" as sc\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on sc.organisation_id = o.id\n    inner join \"dev\".\"postgres_public\".\"users\" as u on sc.user_id = u.id\n    left join \"dev\".\"employment_hero\".\"employees\" as he on sc.author_id = he.id\n    left join \"dev\".\"postgres_public\".\"employment_histories\" as eh on he.id = eh.member_id and sc.created_at > eh.start_date and not eh._fivetran_deleted\n    where o.is_paying_eh\n)\n\nselect\n    coalesce(l.org_uuid, s.org_uuid)                       as org_uuid,\n    coalesce(l.org_id, s.org_id)                           as org_id,\n    coalesce(l.candidate_user_uuid, s.candidate_user_uuid) as candidate_user_uuid,\n    coalesce(l.country, s.country)                         as country,\n    s.employer_job_title,\n    s.job_saved_for,\n    s.created_at                                           as saved_at,\n    l.job_title                                            as shortlisted_job_title,\n    l.created_at                                           as shortlisted_at,\n    l.job_title_without_seniority,\n    l.job_title_seniority,\n    l.job_id,\n    l.job_sector,\n    l.industry,\n    l.employment_type,\n    l.job_description,\n    l.candidate_location,\n    l.is_remote_job,\n    l.workplace_type\nfrom (\n    select * from shortlisted\n    where id in (\n        select first_value(id) over (partition by org_uuid, candidate_user_uuid order by _fivetran_deleted asc, created_at desc rows between unbounded preceding and unbounded following)\n        from\n            shortlisted\n    )\n) as l\nfull outer join\n    (\n        select * from saved\n        where id in (\n            select first_value(id) over (partition by org_uuid, candidate_user_uuid order by _fivetran_deleted asc, created_at desc rows between unbounded preceding and unbounded following)\n            from saved\n        )\n    ) as s on l.org_uuid = s.org_uuid and l.candidate_user_uuid = s.candidate_user_uuid", "relation_name": "\"dev\".\"ats\".\"smart_match_employers\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.319070Z", "completed_at": "2024-02-04T15:20:57.331093Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.342146Z", "completed_at": "2024-02-04T15:20:57.342159Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0399930477142334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_instapay_transactions_with_member_profile", "compiled": true, "compiled_code": "\n\nwith timesheets as (\n  select \n  heropay_balance_id\n  , sum(datediff('day', start_time, end_time)+ 1) as days\n  , sum(units) as units\n  from \"dev\".\"heropay_db_public\".\"timesheets\" \n  where not _fivetran_deleted\n  group by 1 \n  )\n\n, payslips as (\n  select id, member_id  \n  , ps.created_at\n  , ps.pay_period_starting\n  , ps.pay_period_ending\n  , round(wages/(datediff(day, ps.pay_period_starting, ps.pay_period_ending)+1)* 365, 0) as annum_wages\n  --, ROW_NUMBER() OVER (PARTITION BY member_id, pay_period_ending order by created_at desc) as rn \n  from  \"dev\".\"postgres_public\".\"payslips\" ps\n  where not ps._fivetran_deleted     \n  --and ps.created_at > '2022-10-01'\n  --order by member_id, pay_period_ending, rn\n  )\n\n, salaries as (\n  select member_id   \n  , effective_from  \n  , case when salary_type ~* 'hour' and hours_per_week > 0 then salary * hours_per_week * 52\n         when salary_type ~* 'day' and days_per_week > 0 then salary * days_per_week * 52\n         when salary_type ~* 'fortnight' and days_per_week > 0 then salary * days_per_week * 26\n         when salary_type ~* '^month' then salary * 12 \n         when salary_type ~* 'annum' then salary\n         else 0 end as salary\n  , lead(effective_from, 1) over (PARTITION by member_id order by effective_from) as effective_to \n  from \"dev\".\"postgres_public\".\"salary_versions\" \n  where not _fivetran_deleted\n  and salary > 0    \n  and effective_from is not null\n)\n  \n, instapay_members as (\n  select distinct\n  ht.id as transaction_id\n  , ht.created_at as transaction_date  \n  , m.id as member_id\n  , m.user_id\n  , m.organisation_id\n  , datediff('year', m.date_of_birth, ht.created_at) as age\n  , case when m.gender ~* '^f' then 'Female'\n       when gender ~* '^m' then 'Male' else 'N/A' end as gender\n  , case when age < 18 THEN ' <18'\n      WHEN age >= 18 AND age <= 24 THEN '18-24'\n      WHEN age > 24 AND age <= 34 THEN '25-34'\n      WHEN age > 34 AND age <= 44 THEN '35-44'\n      WHEN age > 44 AND age <= 54 THEN '45-54'\n      WHEN age > 54 AND age <= 64 THEN '55-64'\n      WHEN age > 64 THEN '65+' end as age_bracket \n  , (\n        case\n          when mi.salary_type = 'Annum' then  round(mi.salary, 0)\n          when mi.salary_type = 'Hour' and ts.units is not null then round(mi.salary * ts.units / ts.days * 365, 0)\n          else sum(ps.annum_wages) \n        end\n      ) as annum_salary      \n  , case when coalesce(annum_salary, s.salary)/1000 < 40 then '<40k'\n      when coalesce(annum_salary, s.salary)/1000 >= 40 and coalesce(annum_salary, s.salary)/1000 < 50 then '40-50k'\n      when coalesce(annum_salary, s.salary)/1000 >= 50 and coalesce(annum_salary, s.salary)/1000 < 70 then '50-70k'\n      when coalesce(annum_salary, s.salary)/1000 >= 70 and coalesce(annum_salary, s.salary)/1000 < 100 then '70-100k'\n      when coalesce(annum_salary, s.salary)/1000 >= 100 and coalesce(annum_salary, s.salary)/1000 < 120 then '100-120k' \n      when coalesce(annum_salary, s.salary)/1000 >= 120 and coalesce(annum_salary, s.salary)/1000 < 160 then '120-160k' \n      when coalesce(annum_salary, s.salary)/1000 >= 160 then '160k+' end as income_bracket\n  , i.consolidated_industry as industry   \n  , (\n    case\n      when mi.employment_type = 1\n        then 'Full-time'\n      when mi.employment_type = 2\n        then 'Casual'\n      when mi.employment_type = 0\n        then 'Part-time'\n    end\n  ) as employment_type  \n  , DATEDIFF(day, b.pay_period_starting, b.pay_period_ending) + 1 as pay_period  \n  , (\n    case when pay_period = 7\n        then 'weekly'\n      when pay_period = 14\n        then 'fortnightly'\n      when pay_period >= 28\n        then 'monthly'\n    end\n  )  as pay_frequency  \n  , case when os.active_employees < 20 then '1-19'\n      when os.active_employees >= 20 and os.active_employees < 200 then '20-199' \n      when os.active_employees >= 200 then '200+' end as business_size\n  , case\n          when ea.state ~* '(South Australia|SA)' then 'SA'\n          when ea.state ~* '(Northern Territory|NT)' then 'NT'\n          when ea.state ~* '(Victoria|VIC)' then 'VIC'\n          when ea.state ~* '(New South|NSW)' then 'NSW'\n          when ea.state ~* '(Queensland|QLD)' then 'QLD'\n          when ea.state ~* '(Tasmania|TAS)' then 'TAS'\n          when ea.state ~* '(Western Australia|WA)' then 'WA'\n          when ea.state ~* '(Australian Capital Territory|ACT)' then 'ACT'\n          else null end as residential_state\nfrom \"dev\".\"heropay_db_public\".\"heropay_transactions\" as ht\njoin \"dev\".\"employment_hero\".\"employees\" as m on m.uuid = ht.member_id\njoin \"dev\".\"employment_hero\".\"_v_active_employees_by_organisations\" os on m.organisation_id = os.organisation_id  \njoin \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \nleft join \"dev\".\"heropay_db_public\".\"heropay_balances\" b on b.id = ht.heropay_balance_id and not b._fivetran_deleted\nleft join \"dev\".\"heropay_db_public\".\"member_infos\" mi on mi.heropay_balance_id = b.id and not mi._fivetran_deleted\nleft join \"dev\".\"one_platform\".\"industry\" as i on regexp_replace( o.industry,'\\\\s','') = regexp_replace( i.eh_industry,'\\\\s','')\nleft join timesheets ts on ts.heropay_balance_id = ht.heropay_balance_id\nleft join salaries s on s.member_id = m.id and (s.effective_from <= ht.created_at) and (s.effective_to is null or s.effective_to > ht.created_at )\nleft join payslips ps on ps.pay_period_starting = b.pay_period_starting and ps.pay_period_ending = b.pay_period_ending and ps.member_id = m.id \nleft join \"dev\".\"postgres_public\".\"addresses\" ea on m.address_id = ea.id and not ea._fivetran_deleted\nwhere o.pricing_tier not ilike '%free%'\n\n\n        and ht.created_at > (SELECT MAX(transaction_date) FROM \"dev\".\"ebenefits\".\"instapay_transactions_with_member_profile\" ) \n \n-- and ht.status = 1 --'payment_processed' and ht.created_at >= '2022-10-01'\n\n  group by ht.id, ht.created_at, m.id, m.user_id, m.organisation_id, m.date_of_birth, mi.salary, i.consolidated_industry, mi.employment_type, mi.salary_type, mi.hours_per_week, b.pay_period_starting, b.pay_period_ending, m.gender, os.active_employees, ea.state, ts.units, ts.days, s.salary\n  )\n\nselect * from instapay_members", "relation_name": "\"dev\".\"ebenefits\".\"instapay_transactions_with_member_profile\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.335588Z", "completed_at": "2024-02-04T15:20:57.344952Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.352605Z", "completed_at": "2024-02-04T15:20:57.352641Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027706623077392578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_paysplit_members", "compiled": true, "compiled_code": "\n\nwith\n    eh_wallet_users as (\n        select \n            distinct eh_user_uuid\n        from\n            \"dev\".\"ebenefits\".\"_v_user_mapping\" as m\n            join \"dev\".\"ebenefits\".\"wallet_customers\" as w on\n                m.eben_uuid = w.eben_uuid\n        where m.eh_user_uuid is not null\n    )\n    -- eben paysplit log (doesnt capture full cohort), this is only used to capture the first date they became a paysplit user if entry exist\n    , paysplit_eben_users as (\n        select \n            m.eh_user_uuid, m.email, e.*\n        from\n            \"dev\".\"ebenefits\".\"_v_user_mapping\" as m\n            join \n\n(\n    select\n        *\n    from\n        \"dev\".\"dynamodb_eventlog\".\"event_log\"\n    where\n        id in (\n        select\n            FIRST_VALUE(id) over(partition by user_id order by created_date asc rows between unbounded preceding and unbounded following)\n        from\n            \"dev\".\"dynamodb_eventlog\".\"event_log\"\n        where\n            not _fivetran_deleted\n        )\n)\n\n as e on\n                m.eben_uuid = e.user_id\n        where m.eh_user_uuid is not null\n    )\n    , paysplit_members as (\n        select\n            b.member_id\n            , m.user_id\n            , m.user_uuid\n            , m.organisation_id\n            , b.amount\n            , b.account_name\n            , case \n                when bank_split_type = 0 then 'percentage' \n                else 'fixed_amount' end as amount_type \n            , b.created_at as bank_account_created_at\n            , b.updated_at as bank_account_updated_at\n        from\n            \"dev\".\"postgres_public\".\"bank_accounts\" as b\n            join \"dev\".\"employment_hero\".\"employees\" as m on \n                b.member_id = m.id\n        where \n            b.bank_type = 'ewallet'\n            and not b.disabled\n            and not b._fivetran_deleted\n    )\n\nselect \n    m.member_id\n    , m.user_id\n    , m.user_uuid\n    , m.organisation_id\n    , m.amount\n    , m.account_name\n    , m.amount_type \n    -- paysplit came out in october2022 but more than likely any early bank account created at may not be the paysplit but an user entering an different account and changing to paysplit later\n    , case\n        when u.created_at is not null then u.created_at\n        when u.created_at is null and bank_account_created_at<'2023-01-01' then bank_account_updated_at\n        else bank_account_created_at\n    end as paysplit_created_at\n    , case when wu.eh_user_uuid is not null then True else False end as has_wallet_account\nfrom \n    paysplit_members m\n    left join paysplit_eben_users u on u.eh_user_uuid = m.user_uuid\n    left join eh_wallet_users wu on wu.eh_user_uuid = m.user_uuid", "relation_name": "\"dev\".\"ebenefits\".\"paysplit_members\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.358765Z", "completed_at": "2024-02-04T15:20:57.375551Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.391491Z", "completed_at": "2024-02-04T15:20:57.391507Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04477882385253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.eh_paying_employee_job_titles", "compiled": true, "compiled_code": "\n\nwith raw_records as (\n    select e.id as member_id, e.organisation_id, h.title, industry\n    from \"dev\".\"employment_hero\".\"employees\" e \n    join \"dev\".\"employment_hero\".\"organisations\" as o on e.organisation_id = o.id \n    join \n        (select * from\n            \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n            id in (\n            select\n                FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n            from\n                \"dev\".\"postgres_public\".\"employment_histories\"\n            where\n                not _fivetran_deleted\n            )\n        ) as h on e.id = h.member_id\n    where e.active\n        and o.is_paying_eh\n        and h.title is not null and h.title !~ '^$' and len(h.title) !=1\n)\n\n, t_cleansed as (\n    select title,  \n-- remove ending words   \ntrim(regexp_replace(trim(regexp_replace(trim(regexp_replace(trim(regexp_replace(         \n    trim(replace(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(replace(trim(lower(\n        -- abbreviations\n        trim(job_title_abbreviation_expand( \n            -- replace & with and\n            trim(replace(replace(\n                -- replace + with and\n                trim(replace(replace(\n                    -- 5. replace & with and\n                    trim(replace(replace(\n                        -- 4. replace ! with of\n                        trim(replace(replace(replace(replace(replace(replace(replace(\n                            -- 3. trim ending special characters\n                            trim(trim('&' from trim(trim('/' from trim(trim(':' from trim(trim('|' from trim(trim('-' from trim(trim('|' FROM ( \n                                -- 2. remove state\n                                trim(REGEXP_REPLACE(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(lower(   \n                                    -- 1. remove content inside bracket\n                                    trim(REGEXP_REPLACE(title, '\\\\([^)]*\\\\)'))\n                                ), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' '), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' ')), '-$'))\n                            )))))))))))))\n                        , ' - ', ' of '), ' : ', ' of '), ':', ' of '), ' | ', ' of '), '|', ' of '), ', ', ' of '), ',', ' of '))\n                    , ' / ', ' and '), '/', ' and '))\n                , ' + ', ' and '), '+', 'and'))\n            , ' & ', ' and '), '&', ' and '))\n        ))\n    )), ' the ', ' '), '^[-/]', ''), '[-/]$', '')), '  ', ' '))\n, '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', ''))\n as t_title,\n    member_id, organisation_id, industry\n    from raw_records\n)\n\n, t_common as (\n    select t.title, trim(INITCAP(coalesce(m.title_common, t.t_title))) as processed_title,\n    member_id, organisation_id, industry\n    from t_cleansed t \n    left join \"dev\".\"csv\".\"more_common_job_titles\" m on t.t_title = m.title_original\n)\n\n, seniority as (\n    select title as original_title\n    ,  \ncase\n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i')) end\n AS processed_title\n    ,  \ncase when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when processed_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when processed_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when processed_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when processed_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when processed_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when processed_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when processed_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when processed_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when processed_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when processed_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when processed_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when processed_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when processed_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n AS seniority\n    , member_id, organisation_id, industry    \n    from t_common\n)\n\nselect * from seniority", "relation_name": "\"dev\".\"salary_guide\".\"eh_paying_employee_job_titles\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.366577Z", "completed_at": "2024-02-04T15:20:57.390285Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.397367Z", "completed_at": "2024-02-04T15:20:57.397381Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046334028244018555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employee_scorecard_cohort", "compiled": true, "compiled_code": "\n\nwith \n  member_details as (\n    select \n      e.id as member_id\n      , e.uuid as member_uuid\n      , e.user_id\n      , e.user_uuid\n      -- , e.first_name + ' ' + e.last_name as full_name \n      , e.created_at\n      , e.start_date\n      , e.termination_date\n      , e.active\n      , e.organisation_id\n      , date_part('year', getdate()) - date_part('year', e.date_of_birth) as age\n      , e.gender\n      , e.latest_employment_type\n      , e.work_country\n      , coalesce(o.industry, 'Unknown') as organisation_industry\n      , o.country as organisation_country\n    from \n      \"dev\".\"employment_hero\".\"employees\" e\n      join \"dev\".\"employment_hero\".\"organisations\" o on \n        e.organisation_id = o.id\n    where \n      (e.start_date is null or e.start_date<=getdate())\n      and (e.termination_date>=e.created_at or e.termination_date is null)\n      and o.pricing_tier not ilike '%free%'\n  )\n\nselect * from member_details", "relation_name": "\"dev\".\"employee_scorecard\".\"employee_scorecard_cohort\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.380079Z", "completed_at": "2024-02-04T15:20:57.401806Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.409979Z", "completed_at": "2024-02-04T15:20:57.409993Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04407072067260742, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_au_employee_monthly_pay", "compiled": true, "compiled_code": "\n\nwith dates as (\n    select\n      DATEADD('month', -generated_number::int, (date_trunc('month', add_months(CURRENT_DATE, 1))))::date date\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 300\n    order by generated_number\n\n)\n    where date >= '2017-01-01'\n  )\n\n, org_size as (\n  select d.date, organisation_id, count(*) as total_employees \n  from dates d \n  join \"dev\".\"employment_hero\".\"employees\" as e on e.start_date <= d.date and (e.termination_date >= d.date or e.termination_date is null) and e.created_at <= d.date\n  join \"dev\".\"employment_hero\".\"organisations\" as o on o.id = e.organisation_id and o.created_at <= d.date\n  where --e.active and\n  o.pricing_type != 'demo' \n  and o.country = 'AU'\n  group by 1,2\n  )\n\n, monthly_pay as (\n  select d.date as month, member_id\n  , sum(wages*(datediff(day, case when d.date <= ps.pay_period_starting then ps.pay_period_starting else d.date end, case when DATEADD('month', 1, d.date) > ps.pay_period_ending then ps.pay_period_ending else DATEADD('month', 1, d.date) end)+1)/(datediff(day, ps.pay_period_starting, ps.pay_period_ending)+1)) as monthly_wages  \n  , sum(total_hours*(datediff(day, case when d.date <= ps.pay_period_starting then ps.pay_period_starting else d.date end, case when DATEADD('month', 1, d.date) > ps.pay_period_ending then ps.pay_period_ending else DATEADD('month', 1, d.date) end)+1)/(datediff(day, ps.pay_period_starting, ps.pay_period_ending)+1)) as monthly_hours\n  , case when monthly_hours = 0 then null else monthly_wages/monthly_hours end as hourly_rate  \n  from dates as d join \"dev\".\"postgres_public\".\"payslips\" ps on ps.pay_period_starting < DATEADD('month', 1, d.date) and d.date <= ps.pay_period_ending   \n  where not _fivetran_deleted  \n  and (currency = 'AUD' or currency is null)\n  and total_hours < 24*31\n  group by 1, 2\n)\n\n,  eh_business_industry as (\n    select \n      m.id\n      , case \n          when m.industry is not null then i.consolidated_industry \n          else null\n        end as industry\n    from \n      \"dev\".\"employment_hero\".\"organisations\" as m\n    left join \"dev\".\"one_platform\".\"industry\" as i on\n      regexp_replace( m.industry,'\\\\s','') = regexp_replace( i.eh_industry,'\\\\s','')\n  )\n\nselect d.date as month, o.id as organisation_id, i.industry, os.total_employees,\n  oa.state as org_state,\t\n  p.member_id,\t\n  e.work_country,\n\tcase\n          when ea.state ~* '(South Australia|SA)' then 'SA'\n          when ea.state ~* '(Northern Territory|NT)' then 'NT'\n          when ea.state ~* '(Victoria|VIC)' then 'VIC'\n          when ea.state ~* '(New South|NSW)' then 'NSW'\n          when ea.state ~* '(Queensland|QLD)' then 'QLD'\n          when ea.state ~* '(Tasmania|TAS)' then 'TAS'\n          when ea.state ~* '(Western Australia|WA)' then 'WA'\n          when ea.state ~* '(Australian Capital Territory|ACT)' then 'ACT'\n          else null end as residential_state,        \n  case when gender ~* '^f' then 'Female' when gender ~* '^m' then 'Male' end as gender,\n  datediff('year', date_of_birth, d.date) as age,\n  case when employment_type like 'Full%' then 'Full-time' else employment_type end as employment_type,\n  monthly_wages,\n  monthly_hours,\n  hourly_rate,\n  z_score_wages,\n  z_score_hours,\n  z_score_hourly_rate\n  from dates d\n  join (select *,\n        (monthly_wages-avg(monthly_wages) over ()) / (stddev(monthly_wages) over ()) as z_score_wages\n      , (monthly_hours-avg(monthly_hours) over ()) / (stddev(monthly_hours) over ()) as z_score_hours\n      , (hourly_rate-avg(hourly_rate) over ()) / (stddev(hourly_rate) over ()) as z_score_hourly_rate\n        from monthly_pay        \n       ) as p on d.date = p.month \n  join \"dev\".\"employment_hero\".\"employees\" as e on p.member_id = e.id \n  join \"dev\".\"postgres_public\".\"employment_histories\" as h on coalesce(h.start_date, h.created_at) <= d.date and (h.end_date >= d.date or h.end_date is null) and h.member_id = e.id and not h._fivetran_deleted\n  join \"dev\".\"employment_hero\".\"organisations\" as o on o.id = e.organisation_id and o.created_at <= d.date\n  join org_size os on os.date = p.month and os.organisation_id = o.id\n  join eh_business_industry i on o.id = i.id\n  left join \"dev\".\"postgres_public\".\"addresses\" oa on o.primary_address_id = oa.id and not oa._fivetran_deleted\n  left join \"dev\".\"postgres_public\".\"addresses\" ea on e.address_id = ea.id and not ea._fivetran_deleted         \n  where --e.active and \n  o.pricing_type != 'demo' \n  and o.country = 'AU'", "relation_name": "\"dev\".\"employment_hero\".\"au_employee_monthly_pay\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.411133Z", "completed_at": "2024-02-04T15:20:57.428583Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.434737Z", "completed_at": "2024-02-04T15:20:57.434752Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03965497016906738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_employee_status_by_org", "compiled": true, "compiled_code": "\n\nwith invites as (\n    select e.id as member_id, min(i.created_at) as first_invited_at\n    from\n    \"dev\".\"workshop_public\".\"invite_emails\" as i \n    join \"dev\".\"employment_hero\".\"employees\" as e\n        on i.member_id = e.uuid         \n    where not i._fivetran_deleted\n    group by 1\n)\n    \n, legit_emps as (\n    select e.organisation_id, e.id as member_id, e.active,\n    e.created_at,\n    coalesce(least(i.first_invited_at, e.first_sign_in_at), case when e.accepted then e.created_at end) as invited_at,\n    coalesce(case when e.accepted then coalesce(e.first_sign_in_at, invited_at) end) as activated_at, \n    row_number() over (partition by e.organisation_id order by e.created_at) as create_order,\n    row_number() over (partition by e.organisation_id order by invited_at) as invite_order,\n    row_number() over (partition by e.organisation_id order by activated_at) as activate_order\n    from \"dev\".\"employment_hero\".\"employees\" as e\n    left join invites i on e.id = i.member_id\n    where (e.termination_date is null or e.termination_date > e.created_at)\n    -- counting deleted as well  \n)\n\nselect * from legit_emps", "relation_name": "\"dev\".\"employment_hero\".\"employee_status_by_org\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.418493Z", "completed_at": "2024-02-04T15:20:57.432486Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.444757Z", "completed_at": "2024-02-04T15:20:57.444772Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03890347480773926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_guided_milestones_by_org", "compiled": true, "compiled_code": "\n\nwith custom_surveys as (\n  select o.id as organisation_id, min(c.updated_at) as first_custom_survey_at\n  from \"dev\".\"survey_services_public\".\"custom_surveys\" as c\n  join \"dev\".\"employment_hero\".\"organisations\" as o on c.organisation_id = o.uuid\n  --where not c._fivetran_deleted\n  group by o.id\n),\n  \nhappiness_surveys as (\n  select o.id as organisation_id, min(h.updated_at) as first_happiness_survey_at\n  from \"dev\".\"survey_services_public\".\"happiness_surveys\" as h\n  join \"dev\".\"employment_hero\".\"organisations\" as o on  h.organisation_id = o.uuid\n  --where not h._fivetran_deleted\n  group by o.id\n),\n\nannouncements as (\n  select o.id as organisation_id, min(a.created_at) as first_announcement_at\n  from \"dev\".\"announcement_api_production_public\".\"announcements\" as a\n  join \"dev\".\"employment_hero\".\"organisations\" as o on a.organisation_id = o.uuid\n  --where not a._fivetran_deleted\n  group by o.id\n),\n\ncompany_values as (\n  select o.id, min(cv.created_at) as first_company_values_created_at\n  from \"dev\".\"nominations_public\".\"company_values\" as cv\n  join \"dev\".\"employment_hero\".\"organisations\" as o on cv.organisation_id = o.uuid\n  --where company_values._fivetran_deleted is not null\n  group by o.id\n),\n\ndocuments as (\n  select min(d.created_at) as first_document_uploaded_at, m.organisation_id\n  from \"dev\".\"postgres_public\".\"uploaded_documents\" as d\n  join \"dev\".\"employment_hero\".\"employees\" as m on d.member_id = m.id\n  --where not d._fivetran_deleted\n  group by m.organisation_id\n),\n\ncertifications as (\n  select organisation_id, min(created_at) as first_certification_created_at\n  from \"dev\".\"postgres_public\".\"licences\"\n  --where not _fivetran_deleted  \n  group by organisation_id\n),\n\npolicy as (  \n  select organisation_id, min(created_at) as first_policy_added_at\n  from  \"dev\".\"postgres_public\".\"contracts\" \n  where --not _fivetran_deleted and \n  type = 'Policy'\n  and \"status\" = 'Published' \n  group by organisation_id\n),\n\nchecklist as (\n  select min(created_at) as first_onboarding_checklist_created_at, organisation_id\n  from  \"dev\".\"postgres_public\".\"checklists\"\n  where --not _fivetran_deleted\n    type = 'OnboardingChecklist'\n  group by organisation_id\n),\n\nperformance_review as (\n  select min(created_at) as first_performance_review_created_at, organisation_id\n  from \"dev\".\"postgres_public\".\"reviews\" \n  --where not _fivetran_deleted\n  group by organisation_id\n),\n\nassets as (\n  select organisation_id, min(created_at) as first_asset_created_at\n  from  \"dev\".\"postgres_public\".\"asset_items\" \n  --where not _fivetran_deleted\n  group by organisation_id\n),\n\ncoaching as (\n  select min(ooo.created_at) as first_coaching_session_created_at, o.id as organisation_id\n  from \"dev\".\"meeting_management_public\".\"one_on_one_sessions\" as ooo\n  join \"dev\".\"meeting_management_public\".\"one_on_ones\" as oo on oo.id = ooo.one_on_one_id\n  join \"dev\".\"employment_hero\".\"organisations\"  as o on oo.organisation_id = o.uuid\n  group by o.id\n),\n\nokr as (\n  select m.organisation_id, min(obj.created_at) as first_okr_created_at\n  from \"dev\".\"postgres_public\".\"okrs_objectives\" as obj\n  join \"dev\".\"employment_hero\".\"employees\" as m on obj.creator_id = m.id or obj.owner_id = m.id \n  --where not archived  and not obj._fivetran_deleted\n  group by m.organisation_id\n),\n\nsecurity_group as (\n    select * from \n    (\n        select organisation_id, \n        created_at as first_custom_security_group_created_at,\n        row_number () over (partition by organisation_id order by created_at asc)\n        from (\n            select\n            organisation_id,\n            created_at    \n            from \"dev\".\"postgres_public\".\"groups\"\n            union \n            select \n            organisation_id,\n            created_at   \n            from \"dev\".\"postgres_public\".\"security_roles\" \n        )\n    )\n  where row_number = 2\n)\n\n  select o.id as organisation_id,  \n  first_announcement_at,\n  first_company_values_created_at,\n  first_custom_survey_at,\n  first_happiness_survey_at,\n  first_document_uploaded_at,\n  first_certification_created_at,\n  first_policy_added_at,\n  first_onboarding_checklist_created_at,\n  first_performance_review_created_at,\n  first_asset_created_at,\n  first_coaching_session_created_at,  \n  first_okr_created_at,\n  first_custom_security_group_created_at\n  from \"dev\".\"employment_hero\".\"organisations\" as o  \n  left join announcements as anc on o.id = anc.organisation_id\n  left join custom_surveys as cs on o.id = cs.organisation_id\n  left join happiness_surveys as hs on o.id = hs.organisation_id\n  left join company_values on o.id = company_values.id\n  left join documents on o.id = documents.organisation_id\n  left join certifications on o.id = certifications.organisation_id\n  left join policy on o.id = policy.organisation_id\n  left join checklist on o.id = checklist.organisation_id\n  left join performance_review on o.id = performance_review.organisation_id\n  left join assets on o.id = assets.organisation_id\n  left join coaching on o.id = coaching.organisation_id  \n  left join okr on o.id = okr.organisation_id\n  left join security_group on o.id = security_group.organisation_id", "relation_name": "\"dev\".\"employment_hero\".\"guided_milestones_by_org\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.436971Z", "completed_at": "2024-02-04T15:20:57.448943Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.456344Z", "completed_at": "2024-02-04T15:20:57.456358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03703045845031738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_au_fulltime_job_title_salary", "compiled": true, "compiled_code": "with salaries as (\n    select distinct m.id as member_id, m.organisation_id, m.termination_date, h.title, o.industry,\n    case\n          when ea.state ~* '(South Australia|SA)' then 'SA'\n          when ea.state ~* '(Northern Territory|NT)' then 'NT'\n          when ea.state ~* '(Victoria|VIC)' then 'VIC'\n          when ea.state ~* '(New South|NSW)' then 'NSW'\n          when ea.state ~* '(Queensland|QLD)' then 'QLD'\n          when ea.state ~* '(Tasmania|TAS)' then 'TAS'\n          when ea.state ~* '(Western Australia|WA)' then 'WA'\n          when ea.state ~* '(Australian Capital Territory|ACT)' then 'ACT'\n          else null end as residential_state,      \n    case when salary_type ~* 'hour' and hours_per_week > 0 then salary * hours_per_week * 52\n         when salary_type ~* 'day' and days_per_week > 0 then salary * days_per_week * 52\n         when salary_type ~* '^week' and days_per_week > 0 then salary * days_per_week * 52\n         when salary_type ~* 'fortnight' and days_per_week > 0 then salary * days_per_week * 26\n         when salary_type ~* '^month' then salary * 12 \n         when salary_type ~* 'annum' then salary\n         else 0 end as annual_salary\n  from \"dev\".\"employment_hero\".\"employees\" m\n  join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n  join \n      (select * from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n            id in (\n            select\n                FIRST_VALUE(id) over(partition by member_id order by start_date desc rows between unbounded preceding and unbounded following)\n            from\n                \"dev\".\"postgres_public\".\"employment_histories\"\n            where\n                not _fivetran_deleted\n                and (end_date is null or datediff('month', end_date, CURRENT_DATE) < 12)\n                and start_date < CURRENT_DATE\n            )\n    ) as h on m.id = h.member_id\n  join\n    (select * from\n            \"dev\".\"postgres_public\".\"salary_versions\"\n            where\n                id in (\n                select\n                    FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n                from\n                    \"dev\".\"postgres_public\".\"salary_versions\"\n                where\n                    not _fivetran_deleted\n                    and effective_from < CURRENT_DATE            \n                )\n        ) as sv on sv.member_id = m.id\n  left join \"dev\".\"postgres_public\".\"addresses\" ea on m.address_id = ea.id and not ea._fivetran_deleted    \n  where (active or datediff('month', m.termination_date, CURRENT_DATE) < 12 )  \n    and annual_salary > 1000\n    and annual_salary < 1000000  \n    and employment_type='Full-time'   \n    and h.title is not null and h.title !~ '^$' and len(h.title) !=1\n    and o.pricing_tier != 'free'\n    and o.country = 'AU'\n    and (sv.currency = 'AUD' or sv.currency is null)\n)\n\n , t_cleansed as (\n    select title,  \n-- remove ending words   \ntrim(regexp_replace(trim(regexp_replace(trim(regexp_replace(trim(regexp_replace(         \n    trim(replace(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(replace(trim(lower(\n        -- abbreviations\n        trim(job_title_abbreviation_expand( \n            -- replace & with and\n            trim(replace(replace(\n                -- replace + with and\n                trim(replace(replace(\n                    -- 5. replace & with and\n                    trim(replace(replace(\n                        -- 4. replace ! with of\n                        trim(replace(replace(replace(replace(replace(replace(replace(\n                            -- 3. trim ending special characters\n                            trim(trim('&' from trim(trim('/' from trim(trim(':' from trim(trim('|' from trim(trim('-' from trim(trim('|' FROM ( \n                                -- 2. remove state\n                                trim(REGEXP_REPLACE(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(lower(   \n                                    -- 1. remove content inside bracket\n                                    trim(REGEXP_REPLACE(title, '\\\\([^)]*\\\\)'))\n                                ), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' '), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' ')), '-$'))\n                            )))))))))))))\n                        , ' - ', ' of '), ' : ', ' of '), ':', ' of '), ' | ', ' of '), '|', ' of '), ', ', ' of '), ',', ' of '))\n                    , ' / ', ' and '), '/', ' and '))\n                , ' + ', ' and '), '+', 'and'))\n            , ' & ', ' and '), '&', ' and '))\n        ))\n    )), ' the ', ' '), '^[-/]', ''), '[-/]$', '')), '  ', ' '))\n, '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', ''))\n as t_title,\n    organisation_id, industry, residential_state, member_id, termination_date, annual_salary\n    from salaries\n)\n\n, t_common as (\n    select t.title, trim(INITCAP(coalesce(m.title_common, t.t_title))) as common_title,\n    organisation_id, industry, residential_state, member_id, termination_date, annual_salary    \n    from t_cleansed t \n    left join \"dev\".\"csv\".\"more_common_job_titles\" m on t.t_title = m.title_original\n)\n\nselect \n    title as job_title\n    , common_title as processed_title\n \t, organisation_id\n    , member_id\n    , termination_date\n    , residential_state\n    , annual_salary  \n    , industry\nfrom t_common", "relation_name": "\"dev\".\"salary_guide\".\"employment_hero_v_au_fulltime_job_title_salary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.457540Z", "completed_at": "2024-02-04T15:20:57.475294Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.482668Z", "completed_at": "2024-02-04T15:20:57.482683Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.043996572494506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_eh_pay_category", "compiled": true, "compiled_code": "\n\nwith\n    eh_pay_category_mapping as (\n        select pay_category_name, category from \"dev\".\"pay_category_mappings\".\"eh_pay_category_mapping\"\n    ),\n    dates as (\n        select\n            dateadd(\n                'month', -generated_number::int, (date_trunc('month', add_months(current_date, 1)))\n            )::date date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 300\n    order by generated_number\n\n)\n        where date >= '2017-01-01'\n    ),\n\n    net_earnings_table as (\n        select *\n        from \"dev\".\"postgres_public\".\"earnings_lines\" el\n        left join\n            eh_pay_category_mapping epcm\n            on el.pay_category_name = epcm.pay_category_name\n        left join\n            \"dev\".\"postgres_public\".\"payslips\" ps on el.payslip_id = ps.id\n        where\n            --country is not null\n            currency = 'AUD' or currency is null\n            and not ps._fivetran_deleted\n            --and el.pay_category_name = 'Salary'\n    ),\n\n    monthly_net_earnings as (\n        select\n            d.date as month,\n            member_id,\n            category,\n            sum(\n                net_pay * (\n                    datediff(\n                        day,\n                        case\n                            when d.date <= net.pay_period_starting\n                            then net.pay_period_starting\n                            else d.date\n                        end,\n                        case\n                            when dateadd('month', 1, d.date) > net.pay_period_ending\n                            then net.pay_period_ending\n                            else dateadd('month', 1, d.date)\n                        end\n                    )\n                    + 1\n                )\n                / (datediff(day, net.pay_period_starting, net.pay_period_ending) + 1)\n            ) as net_earnings\n        from dates as d\n        join\n            net_earnings_table net\n            on net.pay_period_starting < dateadd('month', 1, d.date)\n            and d.date <= net.pay_period_ending\n        where currency = 'AUD' or currency is null\n        group by 1, 2, 3\n    ),\n\n    monthly_category_breakdown as (\n        select month, category, sum(net_earnings)\n        from monthly_net_earnings\n        group by 1, 2\n    ),\n\n    org_size as (\n        select d.date, organisation_id, count(*) as total_employees\n        from dates d\n        join\n            \"dev\".\"employment_hero\".\"employees\" as e\n            on e.start_date <= d.date\n            and (e.termination_date >= d.date or e.termination_date is null)\n            and e.created_at <= d.date\n        join\n            \"dev\".\"employment_hero\".\"organisations\" as o\n            on o.id = e.organisation_id\n            and o.created_at <= d.date\n        where  -- e.active and\n            o.pricing_type != 'demo' and o.country = 'AU'\n        group by 1, 2\n    ),\n\n    eh_business_industry as (\n        select\n            m.id,\n            case\n                when m.industry is not null then i.consolidated_industry else null\n            end as industry\n        from \"dev\".\"employment_hero\".\"organisations\" as m\n        left join\n            \"dev\".\"one_platform\".\"industry\" as i\n            on regexp_replace(m.industry, '\\\\s', '')\n            = regexp_replace(i.eh_industry, '\\\\s', '')\n    )\n\nselect\n    d.date as month,\n    o.id as organisation_id,\n    i.industry,\n    os.total_employees,\n    oa.state as org_state,\n    p.member_id,\n    e.work_country,\n    p.category,\n    case\n        when ea.state ~* '(South Australia|SA)'\n        then 'SA'\n        when ea.state ~* '(Northern Territory|NT)'\n        then 'NT'\n        when ea.state ~* '(Victoria|VIC)'\n        then 'VIC'\n        when ea.state ~* '(New South|NSW)'\n        then 'NSW'\n        when ea.state ~* '(Queensland|QLD)'\n        then 'QLD'\n        when ea.state ~* '(Tasmania|TAS)'\n        then 'TAS'\n        when ea.state ~* '(Western Australia|WA)'\n        then 'WA'\n        when ea.state ~* '(Australian Capital Territory|ACT)'\n        then 'ACT'\n        else null\n    end as residential_state,\n    case\n        when gender ~* '^f' then 'Female' when gender ~* '^m' then 'Male'\n    end as gender,\n    datediff('year', date_of_birth, d.date) as age,\n    case\n        when employment_type like 'Full%' then 'Full-time' else employment_type\n    end as employment_type,\n    net_earnings,\n    z_net_earnings\nfrom dates d\njoin\n    (\n        select\n            *,\n            (net_earnings - avg(net_earnings) over ())\n            / (stddev(net_earnings) over ()) as z_net_earnings\n        from monthly_net_earnings\n    ) as p\n    on d.date = p.month\njoin \"dev\".\"employment_hero\".\"employees\" as e on p.member_id = e.id\njoin\n    \"dev\".\"postgres_public\".\"employment_histories\" as h\n    on coalesce(h.start_date, h.created_at) <= d.date\n    and (h.end_date >= d.date or h.end_date is null)\n    and h.member_id = e.id\n    and not h._fivetran_deleted\njoin\n    \"dev\".\"employment_hero\".\"organisations\" as o\n    on o.id = e.organisation_id\n    and o.created_at <= d.date\njoin org_size os on os.date = p.month and os.organisation_id = o.id\njoin eh_business_industry i on o.id = i.id\nleft join\n    \"dev\".\"postgres_public\".\"addresses\" oa\n    on o.primary_address_id = oa.id\n    and not oa._fivetran_deleted\nleft join\n    \"dev\".\"postgres_public\".\"addresses\" ea\n    on e.address_id = ea.id\n    and not ea._fivetran_deleted\nwhere  -- e.active and \n    o.pricing_type != 'demo' and o.country = 'AU'", "relation_name": "\"dev\".\"employment_index\".\"eh_pay_category\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.468536Z", "completed_at": "2024-02-04T15:20:57.479712Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.495466Z", "completed_at": "2024-02-04T15:20:57.495480Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0434412956237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.marketing_internal_eh_employee_growth_country", "compiled": true, "compiled_code": "\n\nwith\n    valid_members as (\n        select *\n        from \"dev\".\"employment_hero\".\"employees\"\n        where\n            (termination_date is null or termination_date >= created_at)\n            and organisation_id = 8701\n    ),\n    member_creations as (\n        select\n            date_trunc('month', created_at) as creation_date,\n            work_country,\n            count(*) as new_emps\n        from valid_members\n        group by 1, 2\n        order by creation_date desc\n    ),\n    terminations as (\n        select\n            date_trunc(\n                'month', coalesce(termination_date, created_at)\n            ) as terminated_date,\n            work_country,\n            coalesce(count(*), 0) as terminated_emps\n        from valid_members\n        where not active\n        group by 1, 2\n        order by terminated_date desc\n    ),\n    dates as (\n        select *\n        from (select distinct work_country from valid_members)\n        cross join\n            (\n                select\n                    dateadd('month', 1 - generated_number::int, date_trunc('month', getdate()))::date\n                    as month\n                from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 100\n    order by generated_number\n\n)\n            )\n        order by work_country, month\n    ),\n\n    combined as (\n        select d.month, d.work_country, new_emps, terminated_emps\n        from dates d\n        left join member_creations m on d.month = m.creation_date and d.work_country = m.work_country\n        left join terminations t on d.month = terminated_date and d.work_country = t.work_country\n        order by month\n    ),\n\n    running_total as (\n        select\n            work_country,\n            month,\n            COALESCE(new_emps, 0) as new_emps,\n            coalesce(terminated_emps, 0) as terminated_emps,\n            COALESCE(sum(new_emps - coalesce(terminated_emps, 0)) over (\n                partition by work_country\n                order by month\n                rows between unbounded preceding and current row\n            ), 0) as runningtotal\n        from combined\n    )\n\nselect *\nfrom running_total", "relation_name": "\"dev\".\"marketing\".\"internal_eh_employee_growth_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.485631Z", "completed_at": "2024-02-04T15:20:57.501132Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.511921Z", "completed_at": "2024-02-04T15:20:57.511935Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.037905216217041016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.sales_organic_leads", "compiled": true, "compiled_code": "\n\nwith\nconverted as (\n    select\n        organisation_id,\n        converted_at,\n        pricing_tier as first_paid_tier\n    from (\n        select\n            a.organisation_id,\n            a.created_at                                                             as converted_at,\n            s.pricing_tier,\n            row_number() over (partition by a.organisation_id order by a.created_at) as rn\n        from\n            \"dev\".\"postgres_public\".\"agreements\" as a  -- noqa: AL06\n        inner join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s on a.subscription_plan_id = s.id  -- noqa: AL06\n        where\n            not a._fivetran_deleted\n            and s.pricing_tier != 'free'\n    )\n    where rn = 1\n),\n\nsalesforce_eh_orgs as (\n    select\n        eh_org_c.id as sf_eh_org_id,\n        o.*\n    from\n        \"dev\".\"salesforce\".\"eh_org_c\"\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on eh_org_c.org_id_c = o.id  -- noqa: AL06\n    where\n        not eh_org_c.is_deleted\n),\n\nemployees as (\n    select\n        m.email,\n        m.organisation_id as org_id,\n        m.org_name,\n        m.sub_name,\n        o.created_at      as org_created_at\n    from\n        \"dev\".\"employment_hero\".\"employees\" as m  -- noqa: AL06\n    inner join \"dev\".\"postgres_public\".\"organisations\" as o on m.organisation_id = o.id and not o._fivetran_deleted and not o.is_shadow_data  -- noqa: AL06\n)\n\n\nselect distinct\n    l.id                                                                                                                                                                 as lead_id,\n    l.created_date                                                                                                                                                       as lead_created_date,\n    l.status                                                                                                                                                             as lead_status,\n    l.company                                                                                                                                                            as lead_company,\n    coalesce(l.industry_primary_c, 'Unknown')                                                                                                                            as lead_industry,\n    l.number_of_employees                                                                                                                                                as lead_num_of_employees,\n    l.country                                                                                                                                                            as lead_country,\n    l.name                                                                                                                                                               as lead_name,\n    l.email                                                                                                                                                              as lead_email,\n    l.title                                                                                                                                                              as lead_title,\n    l.lost_reason_c                                                                                                                                                      as lead_lost_reason,\n    l.lost_sub_reason_c                                                                                                                                                  as lead_lost_sub_reason,\n    l.lost_reason_detail_c                                                                                                                                               as lead_lost_reason_detail,\n    l.most_recent_conversion_c                                                                                                                                           as campaign,\n    l.date_assigned_to_owner_c                                                                                                                                           as date_assigned_to_owner,\n    l.most_recent_sales_contact_c                                                                                                                                        as most_recent_sales_contact,\n    coalesce(o.id, m.org_id)                                                                                                                                             as organisation_id,\n    case\n        when o.id is not NULL then o.name\n        when o.id is NULL and m.org_id is not NULL then m.org_name\n    end                                                                                                                                                                  as eh_organisation_name,\n    case\n        when o.id is not NULL then o.created_at\n        when o.id is NULL and m.org_id is not NULL then m.org_created_at\n    end                                                                                                                                                                  as opportunity_date,\n    case\n        when o.id is not NULL then o.sub_name\n        when o.id is NULL and m.org_id is not NULL then m.sub_name\n    end                                                                                                                                                                  as eh_subscription,\n    c.converted_at                                                                                                                                                       as conversion_date,\n    coalesce(eh_subscription ilike '%CSA%' or eh_subscription ilike '%Reseller%' or lead_lost_reason ilike '%Unqualified%' or lead_lost_reason ilike 'Authority', FALSE) as unqualified,\n    coalesce(eh_subscription ilike '%free%', FALSE)                                                                                                                      as opportunity,\n    coalesce(eh_subscription ilike '%Zuora%', FALSE)                                                                                                                     as close_won,\n    coalesce(eh_subscription is NULL, FALSE)                                                                                                                             as bad_lead\n\nfrom\n    \"dev\".\"salesforce\".\"lead\" as l  -- noqa: AL06\n-- owner must be for Organics, currently only Wylie, l.owner_id = '0055h000000ae0iAAA'\ninner join \"dev\".\"salesforce\".\"user\" as u on l.owner_id = u.id and u.market_c = 'Organic' and not u._fivetran_deleted  -- noqa: AL06\n-- if eh_org exist in salesforce, use that as it will be accurate but since its not governed, many are null\n-- so if they are null then join on the email to get the org, not the most accurate but its the only other link from leads to orgs\nleft join salesforce_eh_orgs as o on l.eh_org_c = o.sf_eh_org_id and (o.sub_name != 'Demo' or o.sub_name is NULL)  -- noqa: AL06\nleft join employees as m on l.email = m.email and (m.sub_name != 'Demo' or m.sub_name is NULL)  -- noqa: AL06\nleft join converted as c on coalesce(o.id, m.org_id) = c.organisation_id  -- noqa: AL06\nwhere\n    l.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n    and l.number_of_employees <= 10\n    and l.created_date > '2021-03-31'\norder by lead_created_date desc", "relation_name": "\"dev\".\"sales\".\"organic_leads\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.507410Z", "completed_at": "2024-02-04T15:20:57.516382Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.526531Z", "completed_at": "2024-02-04T15:20:57.526546Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.030451059341430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_monthly_onboardings_industry", "compiled": true, "compiled_code": "\n\nselect industry, date_trunc('month', ob.created_at) as onboarded_month, o.country, count(*)\nfrom \"dev\".\"employment_hero\".\"employees\" as m\njoin \"dev\".\"employment_hero\".\"organisations\" o\n    on m.organisation_id = o.id\n    and o.id not in (select id from ats.spam_organisations)  -- remove SPAM organisations\njoin \"dev\".\"postgres_public\".\"onboarding_infos\" ob\n    on ob.member_id = m.id\n    and not ob._fivetran_deleted\n    and ob.from ~ 'Onboarding|JobAdder'\nWHERE industry is not null and onboarded_month is not null\ngroup by 1, 2, 3\norder by industry, onboarded_month, o.country", "relation_name": "\"dev\".\"tableau\".\"monthly_onboardings_industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.517583Z", "completed_at": "2024-02-04T15:20:57.527668Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.539607Z", "completed_at": "2024-02-04T15:20:57.539621Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03715848922729492, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_v_org_size", "compiled": true, "compiled_code": "\n\nWITH\n    dates as (\n        select\n            dateadd(\n                'month', -generated_number::int, (date_trunc('month', add_months(current_date, 1)))\n            )::date date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 300\n    order by generated_number\n\n)\n        where date >= '2017-01-01'\n    ),\n    org_size as (\n        select\n            d.date,\n            organisation_id,\n            count(*) as total_employees,\n            case\n                when total_employees < 20\n                then '1-19'\n                when total_employees between 20 and 199\n                then '20-199'\n                when total_employees > 200\n                then '200+'\n            end as company_size\n        from dates d\n        join\n            \"dev\".\"employment_hero\".\"employees\" as e\n            on e.start_date <= d.date\n            and (e.termination_date >= d.date or e.termination_date is null)\n            and e.created_at <= d.date\n        join\n            \"dev\".\"employment_hero\".\"organisations\" as o\n            on o.id = e.organisation_id\n            and o.created_at <= d.date\n        where  -- e.active and\n            o.pricing_type != 'demo'\n        group by 1, 2\n    )\nSELECT * FROM org_size", "relation_name": "\"dev\".\"tableau\".\"v_org_size\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.532647Z", "completed_at": "2024-02-04T15:20:57.544250Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.555777Z", "completed_at": "2024-02-04T15:20:57.555791Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.034503936767578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_employees_id.e399f5d52d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"employment_hero\".\"employees\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.549342Z", "completed_at": "2024-02-04T15:20:57.558151Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.569088Z", "completed_at": "2024-02-04T15:20:57.569102Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03209042549133301, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_employees_id.87e2c53540", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"employees\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.560968Z", "completed_at": "2024-02-04T15:20:57.570274Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.578034Z", "completed_at": "2024-02-04T15:20:57.578048Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03372669219970703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_mmau", "compiled": true, "compiled_code": "select\n    date_day,\n    \n\n  to_number(to_char(date_day::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    md5(cast(coalesce(cast(platform as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(eh_user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(keypay_user_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as dim_user_sk,\n    platform,\n    eh_user_uuid,\n    keypay_user_id,\n    is_active_last_30_days\n\nfrom \"dev\".\"intermediate\".\"int_union_daily_user_signin\"", "relation_name": "\"dev\".\"mart\".\"fct_mmau\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.592422Z", "completed_at": "2024-02-04T15:20:57.596391Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.603688Z", "completed_at": "2024-02-04T15:20:57.603702Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.025189876556396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.proserv_payroll_primary_chart_of_accounts_mapped_snapshot", "compiled": true, "compiled_code": "\n\n\n\nwith journal_default_account as (\n  select \n    a.business_id\n    , a.account_type\n    , bt.country\n  from \n    \"dev\".\"keypay\".\"journal_default_account\" a\n    left join \"dev\".\"keypay\".\"business_traits\" bt on bt.id = a.business_id \n)\n\n-- description for account_type can be found in seeds/keypay/journal_default_account_type\n\n, primary_chart_completed_au as (\n  select \n    business_id\n    , true as are_default_primary_accounts_mapped\n  from (\n    select \n      business_id\n      , count(distinct account_type) as default_account_count\n    from \n      journal_default_account\n    where \n      country = 'AU'\n      and account_type in (1,2,3,5,6,7,10)\n    group by 1\n    having default_account_count = 7\n  )\n)\n\n, primary_chart_completed_uk as (\n  select \n    business_id\n    , true as are_default_primary_accounts_mapped\n  from (\n    select \n      business_id\n      , count(distinct account_type) as default_account_count\n    from \n      journal_default_account\n    where \n      country = 'GB'\n      and account_type in (1,2,6,7,10,11,12,13,14,15,24,26,27)\n    group by 1\n    having default_account_count = 13\n  )\n)\n\n, primary_chart_completed_nz as (\n  select \n    business_id\n    , true as are_default_primary_accounts_mapped\n  from (\n    select \n      business_id\n      , count(distinct account_type) as default_account_count\n    from \n      journal_default_account\n    where \n      country = 'NZ'\n      and account_type in (1,2,6,7,10,16,17,18,26)\n    group by 1\n    having  default_account_count = 9\n  )\n)\n\n, primary_chart_completed_sg as (\n  select \n    business_id\n    , true as are_default_primary_accounts_mapped\n  from (\n    select \n      business_id\n      , count(distinct account_type) as default_account_count\n    from \n      journal_default_account\n    where \n      country = 'SG'\n      and account_type in (1,2,6,7,10,19,20,21,22,23)\n    group by 1\n    having default_account_count = 10\n  )\n)\n\n, primary_chart_completed_my as (\n  select \n    business_id\n    , true as are_default_primary_accounts_mapped\n  from (\n    select \n      business_id\n      , count(distinct account_type) as default_account_count\n    from \n      journal_default_account\n    where \n      country = 'MY'\n      and account_type in (1,2,6,10,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44)\n    group by 1\n    having default_account_count = 21\n  )\n)\n\nselect * from primary_chart_completed_au\nunion\nselect * from primary_chart_completed_uk\nunion\nselect * from primary_chart_completed_nz\nunion\nselect * from primary_chart_completed_sg\nunion\nselect * from primary_chart_completed_my\n", "relation_name": "\"dev\".\"proserv\".\"payroll_primary_chart_of_accounts_mapped_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.579236Z", "completed_at": "2024-02-04T15:20:57.597823Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.604879Z", "completed_at": "2024-02-04T15:20:57.604892Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0418550968170166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_unique_combination_of_columns_int_union_daily_user_signin_date_day__platform__eh_user_uuid__keypay_user_id.07af4c98f4", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, platform, eh_user_uuid, keypay_user_id\n    from \"dev\".\"intermediate\".\"int_union_daily_user_signin\"\n    group by date_day, platform, eh_user_uuid, keypay_user_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.606036Z", "completed_at": "2024-02-04T15:20:57.618615Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.628904Z", "completed_at": "2024-02-04T15:20:57.628919Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03725290298461914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.one_platform_organisations", "compiled": true, "compiled_code": "\n\nwith keypay as (\n    select b.id\n    , b.name\n    , b.created_at\n    , coalesce(case when b.industry_id is null and b.industry_name is not null then 'Other' else i.name  end\n            , case when z.primary_industry is not null and z.primary_industry != '' then z.primary_industry else null end) as industry\n    , b.country as country\n    , b.commence_billing_from::date\n    , billing.last_billing_month\nfrom\n    \"dev\".\"keypay\".\"business_traits\" b    \n    left join \"dev\".\"keypay\".\"industry\" i on b.industry_id = i.id\n    left join \"dev\".\"keypay\".\"zoom_info\" z on b.id = z._id\n    left join (\n            select business_id, max(billing_month::date) as last_billing_month from \"dev\".\"keypay\".\"_t_pay_run_total_monthly_summary\" group by 1\n        )billing on billing.business_id = b.id      \n     )\n\nselect\n    CONCAT(case when o.id is not null then 'EH-' || o.id else '' end, case when o.id is not null and b.id is not null then '_KP-' || b.id when b.id is not null then 'KP-' || b.id else '' end) as omop_org_id\n    , o.id as eh_organisation_id\n    , b.id as kp_business_id    \n    , coalesce(o.name, b.name) as name\n    , least(o.created_at, b.created_at) as created_at\n    , coalesce(o.country, b.country) as country\n    , case \n      when coalesce(o.industry, b.industry) = 'Other' then 'Other'\n      when coalesce(o.industry, b.industry) != 'Other' and coalesce(o.industry, b.industry) is not null then i.consolidated_industry \n      else null\n    end as industry\n    , o.sub_name as eh_sub_name    \n    , o.pricing_tier as eh_pricing_tier\n    , o.is_paying_eh\n    , o.churn_date as eh_churn_date    \n    , b.commence_billing_from::date as kp_commence_billing_from    \n    , b.last_billing_month as kp_last_billing_month\nfrom\n  \"dev\".\"employment_hero\".\"organisations\" o   \n  full outer join keypay b on o.external_id = b.id and o.payroll_type = 'Keypay'   \n  left join \"dev\".\"one_platform\".\"industry\" as i on \n    regexp_replace( coalesce(o.industry, b.industry),'\\\\s','') = regexp_replace( i.eh_industry,'\\\\s','')\n    or regexp_replace( coalesce(o.industry, b.industry),'\\\\s','') = regexp_replace( i.keypay_industry,'\\\\s','')\n    or regexp_replace( coalesce(o.industry, b.industry),'\\\\s','') = regexp_replace( i.zoom_info_primary_industry,'\\\\s','')", "relation_name": "\"dev\".\"one_platform\".\"organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.624481Z", "completed_at": "2024-02-04T15:20:57.637664Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.644315Z", "completed_at": "2024-02-04T15:20:57.644333Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.031005144119262695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_au_pay_run_summary_s", "compiled": true, "compiled_code": "\n    with source as (\n\nselect * from \"dev\".\"mart__keypay\".\"au_pay_run_summary_s\"\n\n),\n\nrenamed as (\n\nselect\n            \"employee_id\",\n            \"residential_state\",\n            \"business_id\",\n            \"industry\",\n            \"business_billed_employees\",\n            \"invoice_id\",\n            \"billing_month\",\n            \"is_excluded_from_billing\",\n            \"monthly_gross_earnings\",\n            \"monthly_net_earnings\",\n            \"total_hours\",\n            \"hourly_rate\",\n            \"gender\",\n            \"age\",\n            \"employment_type\",\n            \"start_date\",\n            \"end_date\",\n            \"z_score_earnings\",\n            \"z_score_hours\",\n            \"z_score_hourly_rate\"\nfrom source\n\n)\n\nselect *\nfrom renamed", "relation_name": "\"dev\".\"keypay\".\"au_pay_run_summary_s\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.630110Z", "completed_at": "2024-02-04T15:20:57.641474Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.649615Z", "completed_at": "2024-02-04T15:20:57.649629Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.038190364837646484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mart__keypay__au_pay_run_summary_s_billing_month.c8b60b340b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect billing_month\nfrom \"dev\".\"mart__keypay\".\"au_pay_run_summary_s\"\nwhere billing_month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.650839Z", "completed_at": "2024-02-04T15:20:57.661969Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.673159Z", "completed_at": "2024-02-04T15:20:57.673174Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04239296913146973, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mart__keypay__au_pay_run_summary_s_business_id.cbb7d4956d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect business_id\nfrom \"dev\".\"mart__keypay\".\"au_pay_run_summary_s\"\nwhere business_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.666757Z", "completed_at": "2024-02-04T15:20:57.683611Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.690144Z", "completed_at": "2024-02-04T15:20:57.690157Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.034760475158691406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mart__keypay__au_pay_run_summary_s_employee_id.1d8d48d505", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect employee_id\nfrom \"dev\".\"mart__keypay\".\"au_pay_run_summary_s\"\nwhere employee_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.674423Z", "completed_at": "2024-02-04T15:20:57.687658Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.695439Z", "completed_at": "2024-02-04T15:20:57.695453Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03496551513671875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.companydash_mmau_exclu_payroll", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 3\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n           \n        and date > (select max(date) from \"dev\".\"tableau\".\"companydash_mmau_exclu_payroll\")\n          \n)\n\nselect\n      dates.date\n      , ( case\n          when lower(ee.work_country) = 'au'\n            then 'Australia'\n          when lower(ee.work_country) = 'gb'\n            then 'United Kingdom'\n          when lower(ee.work_country) = 'sg'\n            then 'Singapore'\n          when lower(ee.work_country) = 'my'\n            then 'Malaysia'\n          when lower(ee.work_country) = 'nz'\n            then 'New Zealand'\n          else 'untracked'\n        end\n      )\n      as country\n      , count(distinct coalesce(e.user_id, e.user_email)) as HR_MAU\n      , count(distinct(case when lower(mo.product_family) in ('talent management', 'talent acquisition') then coalesce(e.user_id, e.user_email) end)\n      )\n      as Talent_MAU\n      , count(distinct(case when lower(mo.product_family) in('ebenefits') then coalesce(e.user_id, e.user_email) end)\n      )\n      as eben_MAU\n      , count(distinct case when o.is_paying_eh = true then coalesce(e.user_id, e.user_email) end) as HR_MMAU\n      , count(distinct(case when lower(mo.product_family) in ('talent management', 'talent acquisition') and o.is_paying_eh = true is not null then coalesce(e.user_id, e.user_email) end)\n      )\n      as Talent_MMAU\n      , count(distinct(case when lower(mo.product_family) in('ebenefits') and o.is_paying_eh = true then coalesce(e.user_id, e.user_email) end)\n      )\n      as eben_MMAU\n    from\n      dates\n      inner join \"dev\".\"customers\".\"events\" as e on\n      e.timestamp < dateadd(day, 1, dates.date)\n      and e.timestamp >= dateadd(day, -29, dates.date)\n      left join \"dev\".\"employment_hero\".\"employees\" ee on ee.uuid = e.member_uuid \n      left join \"dev\".\"employment_hero\".\"organisations\" o on\n        ee.organisation_id = o.id\n      left join \"dev\".\"eh_product\".\"module_ownership\" mo on\n        mo.event_module = e.module\n    where\n      e.timestamp < cast( current_date as date)\n      and e.timestamp >= cast( dateadd('day',-29,current_date) as date)\n    group by\n      1\n      , 2", "relation_name": "\"dev\".\"tableau\".\"companydash_mmau_exclu_payroll\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.700559Z", "completed_at": "2024-02-04T15:20:57.717021Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.727075Z", "completed_at": "2024-02-04T15:20:57.727091Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.047593116760253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_users", "compiled": true, "compiled_code": "\n\nwith\n  first_mobile_app_date as (\n    select\n      member_id\n      , min(timestamp) as first_mobile_app_date\n    from\n      \"dev\".\"customers\".\"events\"\n    where\n      app_version_string is not null\n    group by\n      1\n  )\nselect\n  user_id\n  , m.id as member_id\n  , m.organisation_id\n  , email\n  , first_name\n  , last_name\n  , first_sign_in_at as joined_at\n  , first_mobile_app_date\n  , personal_mobile_number as mobile\n  , eh.title as job_title\n  , coalesce(o.name, ee.name) as company\n  , case\n    when subscription_plan_id in (\n      4\n      -- Startup Premium\n      , 7\n      -- Free (30 days)\n      , 11\n      -- Free\n      , 17\n      -- Demo\n      , 43\n      -- CHURN (FREE)\n      , 52\n      -- Implementations Free\n      , 53\n      -- Startup Standard\n      , 55\n      -- ANZ Free\n      , 144\n      -- International Free\n      , 145\n      -- Premium Trial\n      , 161\n      -- SUSPENDED (FREE) \n      , 162 -- SEA free\n    )\n      then 'free'\n    when subscription_plan_id in (\n      166 -- ATS Free\n    )\n      then 'free ats'\n    when subscription_plan_id in (\n      6\n      -- Standard (6)\n      , 13\n      -- Standard (8)\n      , 19\n      -- Standard (5)\n      , 35\n      -- Standard + YY (3)\n      , 36\n      -- Implementation Standard\n      , 38\n      -- CSA Standard (5)\n      , 39\n      -- CSA Standard + YY (3)\n      , 48\n      -- EOFY CSA Standard (4)\n      , 50\n      -- Implementations Standard YY\n      , 61\n      -- YY Standard (1)\n      , 63\n      -- GB Free Standard\n      , 65\n      -- AMP Standard (Free)\n      , 66\n      -- CSA Standard HeroPay 3\n      , 68\n      -- HeroPay standard 3\n      , 72\n      -- Reseller Standard\n      , 106\n      -- Standard (6n)\n      , 142\n      -- International Standard\n      , 149\n      -- Standard (6) min 99\n      , 160\n      -- Zuora Standard\n      , 164\n      -- UK Organic Standard\n      , 165 -- UK CSA Standard\n    )\n      then 'standard'\n    when subscription_plan_id in (\n      14\n      -- CSA (8)\n      , 15\n      -- Yin Yang\n      , 20\n      -- Premium (8)\n      , 21\n      -- Premium + YY (6)\n      , 22\n      -- CSA (1.37)\n      , 23\n      -- CSA (3)\n      , 24\n      -- CSA (5)\n      , 25\n      -- CSA (5.5)\n      , 26\n      -- CSA (6)\n      , 27\n      -- CSA (6.375)\n      , 28\n      -- CSA (7)\n      , 29\n      -- CSA (7.2)\n      , 30\n      -- CSA (7.5)\n      , 37\n      -- Implementation Premium\n      , 40\n      -- CSA Premium (8)\n      , 41\n      -- CSA Premium + YY (6)\n      , 44\n      -- EOFY Premium (5)\n      , 45\n      -- EOFY Premium + YY (3)\n      , 46\n      -- Premium + YY (0)\n      , 47\n      -- EOFY Premium + YY (2)\n      , 49\n      -- CSA Premium (4)\n      , 51\n      -- Implementations Premium YY\n      , 56\n      -- ANZ Premium (Free)\n      , 58\n      -- ANZ Premium (5)\n      , 60\n      -- YY Premium (4)\n      , 64\n      -- GB Free Premium\n      , 67\n      -- CSA Premium HeroPay 5\n      , 69\n      -- HeroPay Premium 5\n      , 70\n      -- AON Premium (5)\n      , 71\n      -- AON Premium (Free)\n      , 73\n      -- Reseller Premium\n      , 107\n      -- Premium (9n)\n      , 140\n      -- AMP Premium (3)\n      , 141\n      -- AON Premium (4)\n      , 143\n      -- International Premium\n      , 147\n      -- CSA Frank (9.11)\n      , 150\n      -- Premium (9) min 99\n      , 152\n      -- Premium (9n)\n      , 159 -- Zuora Premium\n    )\n      then 'premium'\n    when subscription_plan_id in (\n      146\n      -- CSA Platinum (14)\n      , 148\n      -- ANZ Platinum CSA\n      , 151\n      -- Platinum (14) min 199\n      , 153\n      -- OE Platinum CSA\n      , 154\n      -- International Platinum\n      , 158 -- Zuora Platinum\n    )\n      then 'platinum'\n    when subscription_plan_id in (\n      5\n      -- Premium (L)\n      , 9\n      -- Annual\n      , 10\n      -- Standard (L)\n      , 18\n      -- OE\n      , 163 -- Legacy\n    )\n      then 'legacy'\n  end as pricing_tier,\n  setup_mode,\n  benefits.benefits_enabled,\n  benefits.instapay_enabled,\n  addresses.country\nfrom\n  \"dev\".\"postgres_public\".\"users\" u\n  join(\n    select\n      *\n    from\n      \"dev\".\"postgres_public\".\"members\"\n    where\n      id in (\n        select\n          FIRST_VALUE(id) over(partition by user_id order by created_at desc rows between unbounded preceding and unbounded following)\n        from\n          \"dev\".\"postgres_public\".\"members\"\n        where\n          not _fivetran_deleted\n          and not is_shadow_data\n          and not system_manager\n          and not system_user\n          and not independent_contractor\n      )\n  )\n  as m on\n    m.user_id = u.id\n  left join \"dev\".\"postgres_public\".\"addresses\" on\n  m.address_id = addresses.id\n  left join first_mobile_app_date on\n    first_mobile_app_date.member_id = m.id\n  left join (\n    select\n      *\n    from\n      \"dev\".\"postgres_public\".\"employment_histories\"\n    where\n      id in (\n        select\n          FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n        from\n          \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n          not _fivetran_deleted\n      )\n  )\n  as eh on\n    m.id = eh.member_id\n  left join \"dev\".\"postgres_public\".\"organisations\" as o on\n  organisation_id = o.id\nleft join (\n  select\n    *\n  from\n    \"dev\".\"postgres_public\".\"employing_entities\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by organisation_id order by created_at asc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"postgres_public\".\"employing_entities\"\n    )\n)\nee on\n  o.id = ee.organisation_id\nleft join (\n  select\n    *\n  from\n    \"dev\".\"postgres_public\".\"agreements\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by organisation_id order by created_at desc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"postgres_public\".\"agreements\"\n      where\n        not _fivetran_deleted\n    )\n)\na on\n  o.id = a.organisation_id\nleft join (\n  select target_id as uuid, bool_and(name = 'e2p0' and name != 'E2P0 Worklife Blacklisted Orgs') as benefits_enabled, bool_and(name = 'instapay' and name != 'E2P0 Instapay Blacklisted Orgs') as instapay_enabled\n  from \"dev\".\"feature_flag_public\".\"features\" as f\n  join \"dev\".\"feature_flag_public\".\"features_target_objects\" as fto\n  on f.id = fto.feature_id\n  join \"dev\".\"feature_flag_public\".\"target_objects\" as tob\n  on fto.target_object_id = tob.id\n  where name in ('E2P0 Worklife Blacklisted Orgs', 'e2p0', 'Worklife Experiment Blacklist','instapay', 'E2P0 Instapay Blacklisted Orgs')\n    and (not fto._fivetran_deleted or fto._fivetran_deleted is null)\n    and (not tob._fivetran_deleted or tob._fivetran_deleted is null)\ngroup by 1\n) benefits\non benefits.uuid = o.uuid\nwhere\nnot u.is_shadow_data\nand email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'", "relation_name": "\"dev\".\"ebenefits\".\"users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.720092Z", "completed_at": "2024-02-04T15:20:57.728252Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.746317Z", "completed_at": "2024-02-04T15:20:57.746333Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03876185417175293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_employees_first_time_swag_app", "compiled": true, "compiled_code": "\n\nselect \n    lower(user_email) as user_email\n    , min(timestamp) as first_time_swag_app \nfrom \n    \"dev\".\"customers\".\"events\"\nwhere \n    app_version_string is not null\n    and app_version_string ~* '^[2-9].*' -- build version must be greater than 2.0.0\n    and timestamp>= '2023-02-20' -- swag app release\ngroup by 1", "relation_name": "\"dev\".\"employment_hero\".\"_v_employees_first_time_swag_app\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.729515Z", "completed_at": "2024-02-04T15:20:57.749343Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.764372Z", "completed_at": "2024-02-04T15:20:57.764389Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04869842529296875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_exports__swag_user_events", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\n\n\n\n\n\nwith renamed as (\n    select\n        event.message_id                               as event_id,\n        event.user_id                                  as user_uuid,\n        event.timestamp                                as event_time,\n        decode(\n            event.name,\n            \n                'Swag Profile - Populate from CV - Upload CV', 'candidate_cv_uploaded'\n                ,\n            \n                'SWAG CV - Complete cv profile', 'candidate_profile_completed'\n                ,\n            \n                'SWAG CV - Switched public on', 'candidate_public_profile'\n                ,\n            \n                'Click shop now in specific online offer page', 'user_cashback_clicked_shop_now'\n                \n            \n        )                                              as event_name,\n\n        nullif(event.shopnow_offer_module, ''::text)   as shopnow_offer_module,\n        nullif(event.shopnow_offer_type, ''::text)     as shopnow_offer_type,\n        nullif(event.shopnow_offer_category, ''::text) as shopnow_offer_category\n    from \"dev\".\"customers\".\"events\" as event\n    \n\n\n    -- this filter will only be applied in dev run\n    \n        where 1=1\n    \n\n        and event.name in ('Swag Profile - Populate from CV - Upload CV', 'SWAG CV - Complete cv profile', 'SWAG CV - Switched public on', 'Click shop now in specific online offer page')\n),\n\n\n\nall_events as (\n    select * from renamed\n    \n),\n\nenriched as (\n    select\n        e.*,\n        c.public_profile as public_profile_enabled\n    from all_events as e\n    left join \"dev\".\"ats\".\"candidate_profiles\" as c\n        on\n            e.user_uuid = c.user_uuid\n            and e.event_name in ('candidate_cv_uploaded', 'candidate_profile_completed', 'candidate_public_profile')\n)\n\nselect * from enriched", "relation_name": "\"dev\".\"exports\".\"int_exports__swag_user_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.755546Z", "completed_at": "2024-02-04T15:20:57.768729Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.781678Z", "completed_at": "2024-02-04T15:20:57.781693Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.037645578384399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau", "compiled": true, "compiled_code": "\n\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) as \"date\"\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        and \"date\" > (SELECT MAX(\"date\") FROM \"dev\".\"mp\".\"daumau\" ) \n          \n)                               \n      , dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          \"dev\".\"customers\".\"events\" as e          \n        where          \n        e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n          and e.timestamp > dateadd(day, 1, (select max(\"date\") from \"dev\".\"mp\".\"daumau\")) \n             \n        group by\n          1\n      )\n      , mau as (\n        select\n          dates.date\n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates join \"dev\".\"customers\".\"events\" as e on e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)          \n        where          \n          e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n        group by\n          1\n      )\n\nselect\n      m.date      \n      , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      mau m\n      left join dau d on\n        m.date = d.date", "relation_name": "\"dev\".\"mp\".\"daumau\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.773236Z", "completed_at": "2024-02-04T15:20:57.784027Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.798225Z", "completed_at": "2024-02-04T15:20:57.798239Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03672933578491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_account", "compiled": true, "compiled_code": "\n\nwith\n    dates as (\n        select dateadd('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 90\n    order by generated_number\n\n)\n        where\n            \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n             and date > (select max(date) from \"dev\".\"mp\".\"daumau_by_account\") \n    ),\n    account_events as (\n        select e.user_id, e.timestamp, u.account_list as account_id\n        from \"dev\".\"customers\".\"events\" as e\n        join \"dev\".\"customers\".\"users\" u on u.user_uuid = e.user_id\n        -- TODO: Fix circular reference with customers.accounts\n        join \"dev\".\"salesforce\".\"account\" a on u.account_list = a.id\n        where e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n    ),\n    account_dau as (\n        select date_trunc('day', e.timestamp) as \"date\", e.account_id, count(distinct e.user_id) as daily_users\n        from account_events as e\n        group by 1, 2\n    ),\n    account_mau as (\n        select dates.date, e.account_id, count(distinct e.user_id) as monthly_users\n        from dates\n        join\n            account_events as e\n            on e.timestamp < dateadd(day, 1, dates.date)\n            and e.timestamp > dateadd(day, -29, dates.date)\n        group by 1, 2\n    )\n\nselect\n    account_mau.date,\n    account_mau.account_id,\n    coalesce(daily_users, 0) as daily_users,\n    coalesce(monthly_users, 0) as monthly_users,\n    coalesce(daily_users, 0) / nullif(monthly_users, 0)::float as dau_mau\nfrom account_mau\nleft join account_dau on account_mau.date = account_dau.date and account_mau.account_id = account_dau.account_id", "relation_name": "\"dev\".\"mp\".\"daumau_by_account\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.786772Z", "completed_at": "2024-02-04T15:20:57.800826Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.813890Z", "completed_at": "2024-02-04T15:20:57.813904Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03677058219909668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_family", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"daumau_by_family\")     \n             \n)         \n                               \n, module_events as (\n        select\n          e.user_id, e.user_email, e.timestamp, e.module, mo.product_family\n        from\n          \"dev\".\"customers\".\"events\" as e          \n      \t  join \"dev\".\"eh_product\".\"module_ownership\" mo on\n            mo.event_module = e.module\n      \t\t  and mo.product_family is not null\n        where          \n          e.module != 'mobile'\n          and e.module != 'others'\n          and e.module != 'Sign In'\n          and \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n    )\n, product_family_dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , e.product_family\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          module_events as e\n        group by 1, 2\n    )\n, product_family_mau as (\n        select\n          dates.date\n          , e.product_family\n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join module_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by 1, 2\n    )\nselect\n      m.date\n      , m.product_family\n      , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      product_family_mau m\n      left join product_family_dau d on\n        m.date = d.date\n        and m.product_family = d.product_family", "relation_name": "\"dev\".\"mp\".\"daumau_by_family\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.806882Z", "completed_at": "2024-02-04T15:20:57.819446Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.832572Z", "completed_at": "2024-02-04T15:20:57.832589Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03727149963378906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_family_app_type", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n) \n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"daumau_by_family_app_type\")     \n             \n)                            \n  , module_events as (\n    select\n      e.user_id, e.user_email, e.timestamp, e.module, case when app_version_string is not null then 'mobile' else 'web' end as app_type, mo.product_family\n    from\n      \"dev\".\"customers\".\"events\" as e      \n  \t  join \"dev\".\"eh_product\".\"module_ownership\" mo on\n        mo.event_module = e.module\n  \t\tand mo.product_family is not null\n    where\n      e.module != 'mobile'\n      and e.module != 'others'\n      and e.module != 'Sign In'\n      and \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n  )\n  , product_family_app_type_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.app_type\n      , e.product_family\n      , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n    from\n      module_events as e\n    group by 1,2,3\n  )\n  , product_family_app_type_mau as (\n    select\n      dates.date\n      , e.app_type\n      , e.product_family\n      , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n    from\n      dates\n      join module_events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2,3\n  )\n\nselect\n  m.date\n  , m.app_type\n  , m.product_family\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  product_family_app_type_mau m\n  left join product_family_app_type_dau d on\n    m.date = d.date\n    and m.product_family = d.product_family\n    and m.app_type = d.app_type", "relation_name": "\"dev\".\"mp\".\"daumau_by_family_app_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.821874Z", "completed_at": "2024-02-04T15:20:57.835202Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.848882Z", "completed_at": "2024-02-04T15:20:57.848897Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03777718544006348, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_family_org", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"daumau_by_family_org\")     \n             \n)         \n  , events as (\n    select\n      \te.user_id\n        , e.user_email\n      \t, e.timestamp\n    \t, e.organisation_id\n    \t, mo.product_family\n    from\n      \"dev\".\"customers\".\"events\" as e      \n  \t  join \"dev\".\"eh_product\".\"module_ownership\" mo on\n        mo.event_module = e.module\n  \t\tand mo.product_family is not null\n    where      \n      e.organisation_id is not null\n      and e.module != 'mobile'\n      and e.module != 'others'\n      and e.module != 'Sign In'\n   \t  and \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n  )\n  , product_family_org_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.organisation_id\n      , e.product_family\n      , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n    from\n      events as e\n    group by 1,2,3\n  )\n  , product_family_org_mau as (\n    select\n      dates.date\n      , e.organisation_id\n      , e.product_family\n      , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n    from\n      dates\n      join events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2,3\n  )\n\nselect\n  m.date\n  , m.organisation_id\n  , m.product_family            \t\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  product_family_org_mau m\n  left join product_family_org_dau d on\n    m.date = d.date\n    and m.organisation_id = d.organisation_id\n    and m.product_family = d.product_family", "relation_name": "\"dev\".\"mp\".\"daumau_by_family_org\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.838423Z", "completed_at": "2024-02-04T15:20:57.851474Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.866531Z", "completed_at": "2024-02-04T15:20:57.866547Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03946375846862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_family_role", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n) \n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"daumau_by_family_role\")     \n             \n)                                                   \n  , module_events as (\n    select\n      e.user_id, e.user_email, e.timestamp, e.module, m.role, mo.product_family\n    from\n      \"dev\".\"customers\".\"events\" as e\n      join \"dev\".\"postgres_public\".\"members\" m on\n        m.id = e.member_id\n  \t  join \"dev\".\"eh_product\".\"module_ownership\" mo on\n        mo.event_module = e.module\n  \t\tand mo.product_family is not null\n    where     \n      e.module != 'mobile'\n      and e.module != 'others'\n      and e.module != 'Sign In'\n   \t  and e.timestamp>= '2021-12-01'\n      and \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n  )\n  , product_family_role_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.role\n      , e.product_family\n      , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n    from\n      module_events as e\n    group by 1,2,3\n  )\n  , product_family_role_mau as (\n    select\n      dates.date\n      , e.role\n      , e.product_family\n      , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n    from\n      dates\n      join module_events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2,3\n  )\n\nselect\n  m.date\n  , m.role\n  , m.product_family\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  product_family_role_mau m\n  left join product_family_role_dau d on\n    m.date = d.date\n    and m.product_family = d.product_family\n    and m.role = d.role", "relation_name": "\"dev\".\"mp\".\"daumau_by_family_role\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.857743Z", "completed_at": "2024-02-04T15:20:57.873051Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.890766Z", "completed_at": "2024-02-04T15:20:57.890782Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04452657699584961, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_module", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 90\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n           \n        and date > (select max(date) from \"dev\".\"mp\".\"daumau_by_module\")\n          \n)\n                               \n, module_events as (\n        select\n          e.user_id, e.timestamp, e.module\n        from\n          \"dev\".\"customers\".\"events\" as e\n          join \"dev\".\"postgres_public\".\"users\" u on\n            u.uuid = e.user_id\n          join \"dev\".\"postgres_public\".\"members\" m on\n            m.user_id = u.id\n        where\n          u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n          and not u._fivetran_deleted\n          and not u.is_shadow_data\n          and not m.system_manager\n          and not m.system_user\n          --and not m.independent_contractor\n          and not m._fivetran_deleted\n          and not m.is_shadow_data\n          and e.module != 'mobile'\n          and e.module != 'others'\n          and e.module != 'Sign In'\n          -- bandaid solution while dev effort is being made to update the MP implementation; the next two where clause should prevent double counting\n          and e.name not in ('Exit Interview - Click Use Template', 'View Custom Survey Page')\n          and e.module not in ('Custom Survey', 'Exit Interview')\n          and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        -- bandaid solution while dev effort is being made to update the MP implementation for custom survey and exit interview\n        union \n\n        select\n          e.user_id, e.timestamp, e.sub_module as module\n        from\n          \"dev\".\"customers\".\"events\" as e\n          join \"dev\".\"postgres_public\".\"users\" u on\n            u.uuid = e.user_id\n          join \"dev\".\"postgres_public\".\"members\" m on\n            m.user_id = u.id\n        where\n          u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n          and not u._fivetran_deleted\n          and not u.is_shadow_data\n          and not m.system_manager\n          and not m.system_user\n          --and not m.independent_contractor\n          and not m._fivetran_deleted\n          and not m.is_shadow_data\n          -- bandaid solution while dev effort is being made to update the MP implementation\n          and e.name in ('Exit Interview - Click Use Template', 'View Custom Survey Page')\n          and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")       \n      )\n      , module_dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , e.module\n          , count(distinct e.user_id) as daily_users\n        from\n          module_events as e\n        group by\n          1\n          , 2\n      )\n      , module_mau as (\n        select\n          dates.date\n          , e.module\n          , count(distinct e.user_id) as monthly_users\n        from\n          dates\n          join module_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1\n          , 2\n      )\n\nselect\n      m.date\n      , m.module\n      , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      module_mau m\n      left join module_dau d on\n        m.date = d.date\n        and m.module = d.module", "relation_name": "\"dev\".\"mp\".\"daumau_by_module\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.875410Z", "completed_at": "2024-02-04T15:20:57.891948Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.908425Z", "completed_at": "2024-02-04T15:20:57.908439Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.053468942642211914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_module_org", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 90\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n           \n        and date > (select max(date) from \"dev\".\"mp\".\"daumau_by_module_org\")\n          \n)\n                               \n, module_org_events as (\n        select\n          e.user_id, e.organisation_id, e.timestamp, e.module\n        from\n          \"dev\".\"customers\".\"events\" as e\n          join \"dev\".\"postgres_public\".\"users\" u on\n            u.uuid = e.user_id\n          join \"dev\".\"postgres_public\".\"members\" m on\n            m.user_id = u.id\n        where\n          u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n          and not u._fivetran_deleted\n          and not u.is_shadow_data\n          and not m.system_manager\n          and not m.system_user\n          --and not m.independent_contractor\n          and not m._fivetran_deleted\n          and not m.is_shadow_data\n          and e.module != 'mobile'\n          and e.module != 'others'\n          and e.module != 'Sign In'\n          -- bandaid solution while dev effort is being made to update the MP implementation; the next two where clause should prevent double counting\n          and e.name not in ('Exit Interview - Click Use Template', 'View Custom Survey Page')\n          and e.module not in ('Custom Survey', 'Exit Interview')\n          and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        -- bandaid solution while dev effort is being made to update the MP implementation for custom survey and exit interview\n        union \n\n        select\n          e.user_id, e.organisation_id, e.timestamp, e.sub_module as module\n        from\n          \"dev\".\"customers\".\"events\" as e\n          join \"dev\".\"postgres_public\".\"users\" u on\n            u.uuid = e.user_id\n          join \"dev\".\"postgres_public\".\"members\" m on\n            m.user_id = u.id\n        where\n          u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n          and not u._fivetran_deleted\n          and not u.is_shadow_data\n          and not m.system_manager\n          and not m.system_user\n          --and not m.independent_contractor\n          and not m._fivetran_deleted\n          and not m.is_shadow_data\n          -- bandaid solution while dev effort is being made to update the MP implementation; the next two where clause should prevent double counting\n          and e.name in ('Exit Interview - Click Use Template', 'View Custom Survey Page')\n          and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n      )\n      , module_org_dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , e.module\n          , e.organisation_id\n          , count(distinct e.user_id) as daily_users\n        from\n          module_org_events as e\n        group by\n          1, 2, 3\n      )\n      , module_org_mau as (\n        select\n          dates.date\n          , e.module\n        , e.organisation_id\n          , count(distinct e.user_id) as monthly_users\n        from\n          dates\n          join module_org_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1, 2, 3\n      )\n\nselect\n      m.date\n      , m.module\n\t, m.organisation_id\n      , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      module_org_mau m\n      left join module_org_dau d on\n        m.date = d.date \n                  and m.organisation_id = d.organisation_id\n        and m.module = d.module", "relation_name": "\"dev\".\"mp\".\"daumau_by_module_org\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.897123Z", "completed_at": "2024-02-04T15:20:57.919959Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.938336Z", "completed_at": "2024-02-04T15:20:57.938353Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05348920822143555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_org", "compiled": true, "compiled_code": "\n\nwith\ndates as (\n    select dateadd('day', -generated_number::int, (current_date + 1)) as date\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)\n    where date < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n               \n      and date > (select max(date) from \"dev\".\"mp\".\"daumau_by_org\")\n  \n),\n\nsessions as (\n    select distinct\n        date as session_date,\n        m.organisation_id,\n        m.id as member_id\n    from\n        \"dev\".\"mp\".\"daily_members\" as d\n    inner join \"dev\".\"postgres_public\".\"members\" as m\n        on\n            d.member_id = m.id\n    inner join \"dev\".\"postgres_public\".\"users\" as u\n        on\n            m.user_id = u.id\n    where\n        u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n        and not m.system_manager\n        and not m.system_user\n        and not m._fivetran_deleted\n        and not m.is_shadow_data\n        and not u.is_shadow_data\n        and date < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n),\n\ndau as (\n    select\n        d.date,\n        organisation_id,\n        count(*) as daily_users\n    from\n        dates as d\n    left join sessions as s\n        on\n            d.date = s.session_date\n    group by\n        d.date,\n        organisation_id\n),\n\nmau as (\n    select\n        d.date,\n        s.organisation_id,\n        count(distinct s.member_id) as monthly_users\n    from\n        dates as d\n    left join sessions as s\n        on\n            s.session_date < dateadd(day, 1, d.date)\n            and s.session_date > dateadd(day, -29, d.date)\n    group by\n        d.date,\n        s.organisation_id\n)\n\nselect\n    mau.date,\n    mau.organisation_id,\n    coalesce(daily_users, 0)                                   as daily_users,\n    coalesce(monthly_users, 0)                                 as monthly_users,\n    coalesce(daily_users, 0) / nullif(monthly_users, 0)::float as dau_mau\nfrom\n    mau\nleft join dau on\n    mau.date = dau.date\n    and mau.organisation_id = dau.organisation_id", "relation_name": "\"dev\".\"mp\".\"daumau_by_org\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.929533Z", "completed_at": "2024-02-04T15:20:57.945182Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.960232Z", "completed_at": "2024-02-04T15:20:57.960247Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046769142150878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_org_app_usertype", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n)  \n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from \"dev\".\"mp\".\"daumau_by_org_app_usertype\")   \n   \n)\n\n, org_app_usertype_dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"          \n          , e.organisation_id\n  \t\t  , e.user_type\n  \t\t, case when app_version_string is not null then 'mobile' else 'web' end as app_type\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          \"dev\".\"customers\".\"events\" as e  \n        where \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")      \n        group by\n          1, 2, 3, 4\n      )\n, org_app_usertype_mau as (\n        select\n          dates.date          \n        , e.organisation_id\n  \t\t, e.user_type\n  \t\t, case when app_version_string is not null then 'mobile' else 'web' end as app_type\n        , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join \"dev\".\"customers\".\"events\" as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1, 2, 3, 4        \n      )\n\nselect\n      m.date      \n\t, m.organisation_id\n\t, m.user_type\n\t, m.app_type\n    , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      org_app_usertype_mau m\n      left join org_app_usertype_dau d on\n                  m.date = d.date \n                  and m.organisation_id = d.organisation_id\n                  and m.user_type = d.user_type\n                  and m.app_type = d.app_type", "relation_name": "\"dev\".\"mp\".\"daumau_by_org_app_usertype\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.949066Z", "completed_at": "2024-02-04T15:20:57.961520Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.977727Z", "completed_at": "2024-02-04T15:20:57.977742Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04376721382141113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_org_usertype", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"daumau_by_org_usertype\")     \n             \n)\n\n, org_usertype_dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"          \n          , e.organisation_id\n  \t\t  , e.user_type\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          \"dev\".\"customers\".\"events\" as e       \n        where \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")   \n        group by\n          1, 2, 3\n      )\n, org_usertype_mau as (\n        select\n          dates.date          \n        , e.organisation_id\n  \t\t, e.user_type\n        , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join \"dev\".\"customers\".\"events\" as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1, 2, 3\n      )\n\nselect\n      m.date      \n\t, m.organisation_id\n\t, m.user_type\n    , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      org_usertype_mau m\n      left join org_usertype_dau d on\n        m.date = d.date \n                  and m.organisation_id = d.organisation_id\n        and m.user_type = d.user_type", "relation_name": "\"dev\".\"mp\".\"daumau_by_org_usertype\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.969401Z", "completed_at": "2024-02-04T15:20:57.981810Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:57.997877Z", "completed_at": "2024-02-04T15:20:57.997890Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04347991943359375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_platform", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 180\n    order by generated_number\n\n)\n        where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        and date > (select max(date) from \"dev\".\"mp\".\"daumau_by_platform\" )\n   \n)\n                               \n, platform_events as (\n        select\n          user_id, user_email, \"timestamp\", platform\n        from\n          \"dev\".\"customers\".\"events\" \n        where app_version_string is not null and platform != ''         \n        and \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n      )\n, platform_dau as (\n        select\n          DATE_TRUNC('day', timestamp) as \"date\"\n          , platform          \n          , count(distinct coalesce(user_id, user_email)) as daily_users\n        from\n          platform_events         \n        group by\n          1, 2\n      )\n      , platform_mau as (\n        select\n          dates.date\n          , e.platform        \n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join platform_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1, 2\n      )\n\nselect\n      m.date\n      , m.platform\t\n      , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      platform_mau m\n      left join platform_dau d on\n        m.date = d.date                   \n        and m.platform = d.platform", "relation_name": "\"dev\".\"mp\".\"daumau_by_platform\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:57.990782Z", "completed_at": "2024-02-04T15:20:58.004779Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.021791Z", "completed_at": "2024-02-04T15:20:58.021804Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046584367752075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_daumau_by_user_app_type", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)     \n        where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        and \"date\" > (SELECT MAX(\"date\") FROM \"dev\".\"mp\".\"daumau_by_user_app_type\" ) \n   \n)\n                               \n, user_app_events as (\n        select\n          e.user_id, \n          e.user_email,\n  \t\t\te.user_type, \n  \t\t\tcase when app_version_string is not null then 'mobile' else 'web' end as app_type, \n  \t\t e.timestamp\n        from\n          \"dev\".\"customers\".\"events\" as e          \n        where          \n          e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n      )\n      , user_app_dau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , e.user_type\n          , e.app_type    \t\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          user_app_events as e\n        where  \n        e.user_type != ''\n        and e.app_type != ''\n        group by\n          1, 2,3\n        \nunion\n\t\tselect\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , 'any' as user_type\n          , e.app_type       \t\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          user_app_events as e\n        where        \n        e.app_type != ''\n        group by\n          1, 3\n        \nunion\n\t\tselect\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , e.user_type\n          , 'any' as app_type     \t\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          user_app_events as e\n         where        \n        e.user_type != ''        \n        group by\n          1, 2\n        \nunion\n\t\tselect\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , 'any' as user_type\n          , 'any' as app_type\t\n          , count(distinct coalesce(e.user_id, e.user_email)) as daily_users\n        from\n          user_app_events as e        \n        group by\n          1\n      )\n      , user_app_mau as (\n        select\n          dates.date\n          , e.user_type\n          , e.app_type\n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join user_app_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)                \n        where        \n        e.user_type != ''\n        and e.app_type != ''        \n        group by\n          1, 2,3\nunion\n       select\n          dates.date\n          , 'any' as user_type\n          , e.app_type   \n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join user_app_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n                where       \n        e.app_type != ''      \n        group by\n          1,3\n        \nunion\n       select\n          dates.date\n          , e.user_type\n          , 'any' as app_type  \n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join user_app_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n                where        \n        e.user_type != ''        \n        group by\n          1,2\n        \nunion\n       select\n          dates.date\n          , 'any' as user_type\n          , 'any' as app_type     \n          , count(distinct coalesce(e.user_id, e.user_email)) as monthly_users\n        from\n          dates\n          join user_app_events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1\n      )\n\nselect\n      m.date\n\t, m.user_type\n\t, m.app_type \n      , coalesce(daily_users, 0) as daily_users\n      , monthly_users\n      , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\n    from\n      user_app_mau m\n      left join user_app_dau d on\n        m.date = d.date and m.user_type = d.user_type and m.app_type = d.app_type", "relation_name": "\"dev\".\"mp\".\"daumau_by_user_app_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.008494Z", "completed_at": "2024-02-04T15:20:58.022928Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.040563Z", "completed_at": "2024-02-04T15:20:58.040578Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04711771011352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_swag_daumau", "compiled": true, "compiled_code": "\n\nwith \n  dates as (\n    select\n      DATEADD('day', -generated_number::int, (current_date + 1)) date\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)\n    where \n        \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n        \n            and \"date\" > (SELECT MAX(\"date\") FROM \"dev\".\"mp\".\"swag_daumau\" ) \n                  \n  )                            \n  , swag_dau as (\n    select\n        DATE_TRUNC('day', e.timestamp) as \"date\"\n        , count(distinct e.user_email) as daily_users\n    from\n       \"dev\".\"customers\".\"events\" as e\n    where\n        e.app_version_string is not null\n        and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n        \n          and e.timestamp > dateadd(day, 1, (select max(\"date\") from \"dev\".\"mp\".\"swag_daumau\")) \n              \n    group by 1\n  )\n  , swag_mau as (\n    select\n      dates.date\n      , count(distinct e.user_email) as monthly_users\n    from\n      dates\n      join \"dev\".\"customers\".\"events\" as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n        and e.app_version_string is not null\n    where\n        e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n    group by 1\n  )\n\nselect\n  m.date\n  , coalesce(daily_users, 0) as daily_users\n  , m.monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  swag_mau m\n  left join swag_dau d on\n    m.date = d.date", "relation_name": "\"dev\".\"mp\".\"swag_daumau\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.031044Z", "completed_at": "2024-02-04T15:20:58.044703Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.061529Z", "completed_at": "2024-02-04T15:20:58.061546Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04556155204772949, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_swag_daumau_persona", "compiled": true, "compiled_code": "\n\nwith \n  dates as (\n    select\n      DATEADD('day', -generated_number::int, (current_date + 1)) date\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)\n    where \n        \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n        \n            and \"date\" > (SELECT MAX(\"date\") FROM \"dev\".\"mp\".\"swag_daumau_persona\" ) \n                  \n  )                            \n  , swag_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , persona\n      , count(distinct e.user_email) as daily_users\n    from\n      \"dev\".\"customers\".\"events\" as e\n    where\n        e.app_version_string is not null\n        and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n        \n          and e.timestamp > dateadd(day, 1, (select max(\"date\") from \"dev\".\"mp\".\"swag_daumau_persona\")) \n              \n    group by 1,2\n  )\n  , swag_mau as (\n    select\n      dates.date\n      , persona\n      , count(distinct e.user_email) as monthly_users\n    from\n      dates\n      join \"dev\".\"customers\".\"events\" as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n        and e.app_version_string is not null\n    where\n        e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n    group by 1,2\n  )\n\nselect\n  m.date\n  , m.persona\n  , coalesce(daily_users, 0) as daily_users\n  , m.monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  swag_mau m\n  left join swag_dau d on\n    m.date = d.date\n    and m.persona = d.persona", "relation_name": "\"dev\".\"mp\".\"swag_daumau_persona\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.053967Z", "completed_at": "2024-02-04T15:20:58.068211Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.083243Z", "completed_at": "2024-02-04T15:20:58.083258Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04517674446105957, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_wau", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)        \n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        and \"date\" > (SELECT MAX(\"date\") FROM \"dev\".\"mp\".\"wau\" ) \n        \n\n)                               \n     , wau as (\n        select\n          dates.date\n          , count(distinct e.user_id) as weekly_users\n        from\n          dates join \"dev\".\"customers\".\"events\" as e on e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -6, dates.date)\n          join \"dev\".\"postgres_public\".\"users\" u on\n            u.uuid = e.user_id\n          join \"dev\".\"postgres_public\".\"members\" m on\n            m.user_id = u.id\n        where\n          u.email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n          and not u._fivetran_deleted\n          and not u.is_shadow_data\n          and not m.system_manager\n          and not m.\"system_user\"\n          --and not m.independent_contractor\n          and not m._fivetran_deleted\n          and not m.is_shadow_data\n          and e.\"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")          \n        group by\n          1\n      )    \nselect\n      w.date      \n      , weekly_users      \n    from\n      wau w", "relation_name": "\"dev\".\"mp\".\"wau\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.072118Z", "completed_at": "2024-02-04T15:20:58.085573Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.099948Z", "completed_at": "2024-02-04T15:20:58.099961Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04169917106628418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_mmau_by_platform", "compiled": true, "compiled_code": "\n\nwith\n    dates as (\n        select dateadd('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 14\n    order by generated_number\n\n)\n        where\n            \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n            \n              and date > (select max(date) from \"dev\".\"tableau\".\"companydash_mmau_by_platform\" )\n            \n    )\n\nselect\n    dates.date,\n    (\n        case\n            when lower(ee.work_country) = 'au'\n            then 'Australia'\n            when lower(ee.work_country) = 'gb'\n            then 'United Kingdom'\n            when lower(ee.work_country) = 'sg'\n            then 'Singapore'\n            when lower(ee.work_country) = 'my'\n            then 'Malaysia'\n            when lower(ee.work_country) = 'nz'\n            then 'New Zealand'\n            else 'untracked'\n        end\n    ) as country,\n    count(\n        distinct case when app_version_string is not null then coalesce(e.user_id, e.user_email) end\n    ) as mobile_app_mau,\n    count(distinct case when app_version_string is null then coalesce(e.user_id, e.user_email) end) as web_browser_mau,\n    count(\n        distinct case when app_version_string is not null and o.is_paying_eh then coalesce(e.user_id, e.user_email) end\n    ) as mobile_app_mmau,\n    count(\n        distinct case when app_version_string is null and o.is_paying_eh then coalesce(e.user_id, e.user_email) end\n    ) as web_browser_mmau\nfrom dates\n\ninner join \"dev\".\"customers\".\"events\" as e \n    on e.timestamp < dateadd(day, 1, dates.date) and e.timestamp >= dateadd(day, -89, dates.date)\n\nleft join \"dev\".\"employment_hero\".\"employees\" as ee \n    on ee.uuid = e.member_uuid\n\nleft join \"dev\".\"employment_hero\".\"organisations\" as o \n    on ee.organisation_id = o.id\n\nleft join \"dev\".\"eh_product\".\"module_ownership\" as mo \n    on mo.event_module = e.module\n\ngroup by 1, 2", "relation_name": "\"dev\".\"tableau\".\"companydash_mmau_by_platform\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.092196Z", "completed_at": "2024-02-04T15:20:58.105724Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.118979Z", "completed_at": "2024-02-04T15:20:58.118994Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04165506362915039, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_registered_users", "compiled": true, "compiled_code": "\n\nwith dates as (\n    select\n          DATEADD('day', -generated_number::int, (current_date + 1)) as date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 90\n    order by generated_number\n\n)\n          where \"date\" < current_date\n          \n            and date > (select max(date) from \"dev\".\"tableau\".\"companydash_registered_users\" )\n          \n            \n)\n, employees as (\n    select user_uuid\n      , ( case\n          when lower(work_country) = 'au'\n            then 'Australia'\n          when lower(work_country) = 'gb'\n            then 'United Kingdom'\n          when lower(work_country) = 'sg'\n            then 'Singapore'\n          when lower(work_country) = 'my'\n            then 'Malaysia'\n          when lower(work_country) = 'nz'\n            then 'New Zealand'\n          else 'untracked'\n        end\n      )\n      as country\n      , min(created_at::date) as first_registered_date\n\n    from \"dev\".\"employment_hero\".\"employees\"\n\n    group by 1, 2\n)\n, app_downloads as (\n    select ee.user_uuid\n        , ( case\n          when lower(ee.work_country) = 'au'\n            then 'Australia'\n          when lower(ee.work_country) = 'gb'\n            then 'United Kingdom'\n          when lower(ee.work_country) = 'sg'\n            then 'Singapore'\n          when lower(ee.work_country) = 'my'\n            then 'Malaysia'\n          when lower(ee.work_country) = 'nz'\n            then 'New Zealand'\n          else 'untracked'\n        end\n      )\n      as country\n        , min(timestamp::date) as first_app_signin_date\n\n    from \"dev\".\"customers\".\"events\" ce\n\n    inner join \"dev\".\"employment_hero\".\"employees\" ee\n      on ee.uuid = ce.member_uuid\n\n    where name ~~* '%sign in%'\n      and platform ~~* '%mobile%'\n    \n    group by 1, 2)\n\n, registered_users as (\n    select first_registered_date\n      , country\n      , count(distinct user_uuid) as registered_users\n\n    from employees\n\n    group by 1, 2\n)\n\n, registered_app_users as (\n    select first_app_signin_date\n      , country\n      , count(distinct user_uuid) as registered_app_users\n\n    from app_downloads\n\n    group by 1, 2\n)\n, cumulative_users as (\n    select d.date\n        , country\n        , sum(registered_users) as total_registered_users\n\n    from dates d\n\n    left join registered_users e\n        on d.date >= e.first_registered_date\n\n    group by 1, 2\n\n    order by 1\n)\n, cumulative_app_users as (\n    select d.date\n        , country\n        , sum(registered_app_users) as total_registered_app_users\n\n    from dates d\n\n    left join registered_app_users a\n        on d.date >= a.first_app_signin_date\n\n    group by 1, 2\n\n    order by 1\n)\n, total as (\n  select \"date\"\n    , country\n    , 'Total' as type\n    , total_registered_users::int as users\n\n  from cumulative_users\n\n  union \n\n  select \"date\"\n    , country\n    , 'App' as type\n    , total_registered_app_users::int as users\n\n  from cumulative_app_users\n)\n\nselect date\n  , total::int as total_registered_users\n  , app::int as total_registered_app_users\n  , country\n\nfrom total\n  pivot (sum(users) for type in ('Total', 'App'))\n\norder by 1", "relation_name": "\"dev\".\"tableau\".\"companydash_registered_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.113126Z", "completed_at": "2024-02-04T15:20:58.124770Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.149648Z", "completed_at": "2024-02-04T15:20:58.149663Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.052026987075805664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_swag_inactive_users", "compiled": true, "compiled_code": "\n\n-- SELECT * FROM mp.swag_events \n-- SELECT user_email FROM customers.events WHERE persona = 'WZ User' and\n-- app_version_string is not null\n-- SELECT * FROM customers.accounts\n-- logged in users\n-- SELECT * FROM customers.events WHERE name ~* '.*(login).*' \n-- logged in not doing activities\n-- and user_email not in (select user_email FROM customers.events WHERE name !~*\n-- '.*(login).*')\nwith\n    login_events as (\n        select\n            user_email,\n            case when name ~* '.*(login).*' then 'Login' else 'Others' end as event_name,\n            date_trunc('month', timestamp) as month,\n            count(*) as login_count\n        from \"dev\".\"customers\".\"events\"\n        where event_name = 'Login' and persona = 'WZ User' and app_version_string is not null\n        group by 1, 2, 3\n        order by month, user_email\n    ),\n    other_events as (\n        select\n            user_email,\n            case when name ~* '.*(login).*' then 'Login' else 'Others' end as event_name,\n            date_trunc('month', timestamp) as month,\n            count(*)\n        from \"dev\".\"customers\".\"events\"\n        where event_name = 'Others' and persona = 'WZ User' and app_version_string is not null\n        group by 1, 2, 3\n        order by month, user_email\n    )\n\nselect le.user_email, le.event_name, le.month, login_count\nfrom login_events le\nleft join other_events oe on le.user_email = oe.user_email and le.month = oe.month\nwhere oe.event_name is null", "relation_name": "\"dev\".\"tableau\".\"swag_inactive_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.127310Z", "completed_at": "2024-02-04T15:20:58.143290Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.153304Z", "completed_at": "2024-02-04T15:20:58.153318Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0447087287902832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.marketing_users_snapshot", "compiled": true, "compiled_code": "\n\n\n\nwith \ncurrent_employment as (\n    select member_id\n    , title \n    from(\n        select * \n        from \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n        id in (\n            select\n                FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n            from \"dev\".\"postgres_public\".\"employment_histories\" \n            where not _fivetran_deleted\n        )\n    )\n)\n\n, user_info as (    \n    select\n        u.id as user_id\n        , coalesce(cc.alpha_two_letter, ui.country_code) as country_code\n        , ui.first_name\n        , ui.last_name\n        , ui.phone_number\n        , ui.state_code\n        , ui.marketing_consented_at is not null as marketing_consent\n    from \"dev\".\"postgres_public\".\"users\" u\n    left join \"dev\".\"postgres_public\".\"user_infos\" ui on not ui._fivetran_deleted and u.id = ui.user_id\n    left join \"dev\".\"workshop_public\".\"country_codes\" cc on len(ui.country_code)=3 and ui.country_code = cc.alpha_three_letter\n)\n\n, recent_member as (\n    select u.id as user_id \n    , coalesce(am.first_name, cm.first_name) as first_name\n    , coalesce(am.last_name, cm.last_name) as last_name\n    , coalesce(am.personal_mobile_number, cm.personal_mobile_number) as personal_mobile\n    , coalesce(am.date_of_birth, cm.date_of_birth) as date_of_birth\n    , case when not a._fivetran_deleted then a.state else null end as state\n    , case when not a._fivetran_deleted and a.state ~* '^[\\\\W]?nsw|act|^[\\\\W]?vic|^nt|qld|^s[.]?a[.]?$|tas|new south wales|sydney|^w[.]?a$|western aus|south australia|queensland|northern territory|australia' then 'AU'\n        else coalesce(cc3.alpha_two_letter, ccx.alpha_two_letter, case when len(a.country)<2 or len(a.country) > 3 then null else a.country end) end as country\n    , coalesce(case when not loc._fivetran_deleted then loc.country else null end, am.work_country) as working_country \n    , case when coalesce(am.role, cm.role)~ 'employer' then 'admin' else coalesce(am.role, cm.role) end as role\n    , ce.title \n    , o.name as company\n    , coalesce(am.organisation_id, cm.organisation_id) as organisation_id\n    , ic.title as industry\n    , o.setup_mode\n    , trim('Auth' from epa.type) as payroll_type\n    , json_extract_path_text(epa.data, 'kp_white_label') as white_label\n    , epa.connected_app\n    , o.sub_name\n    , o.business_account_id\n    , ba.name as business_account_name\n    , case when am.id is not null then null else t.termination_date end as termination_date\n    , oe.active_employees\n    , coalesce(am.independent_contractor, cm.independent_contractor) as independent_contractor\n    from \"dev\".\"postgres_public\".\"users\" u   \n    -- last active member         \n    left join (\n        select *      \n        from \"dev\".\"postgres_public\".\"members\"\n        where\n        id in (\n            select\n                FIRST_VALUE(m.id) over(partition by m.user_id order by m.created_at desc rows between unbounded preceding and unbounded following)\n            from \"dev\".\"postgres_public\".\"members\" m\n            join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n            where \n            not m._fivetran_deleted \n            and not m.system_manager \n            and not m.system_user \n            and not m.is_shadow_data\n            and active            \n            and o.sub_name not ilike '%demo%'\n            and (m.created_at < m.termination_date or m.termination_date is null)\n        )\n    ) am on am.user_id = u.id\n    -- last created member\n    left join (\n        select *      \n        from \"dev\".\"postgres_public\".\"members\"\n        where\n            id in (\n            select\n                FIRST_VALUE(m.id) over(partition by m.user_id order by m.created_at desc rows between unbounded preceding and unbounded following)\n            from \"dev\".\"postgres_public\".\"members\" m\n            join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n            where \n            not m._fivetran_deleted \n            and not m.system_manager \n            and not m.system_user \n            and not m.is_shadow_data\n            and o.sub_name not ilike '%demo%'\n            and (m.created_at < m.termination_date or m.termination_date is null)\n            )\n    ) cm on cm.user_id = u.id\n    left join (\n        select user_id\n        , max(termination_date) as termination_date\n        from \"dev\".\"postgres_public\".\"members\" m\n        join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n        where not m._fivetran_deleted\n        and not m.system_manager \n        and not m.system_user \n        and not m.is_shadow_data\n        and o.sub_name not ilike '%demo%'\n        group by 1    \n    ) t on t.user_id = u.id \n    left join \"dev\".\"postgres_public\".\"addresses\" a \n        on a.id = coalesce(am.address_id, cm.address_id) and not a._fivetran_deleted \n    left join \"dev\".\"workshop_public\".\"country_codes\" cc3 on len(a.country)=3 and upper(a.country) = cc3.alpha_three_letter\n    left join \"dev\".\"workshop_public\".\"country_codes\" ccx on len(a.country)>3 and upper(a.country) = upper(ccx.country)\n    left join \"dev\".\"postgres_public\".\"work_locations\" as loc     \n        on loc.id =  coalesce(am.work_location_id, cm.work_location_id) and not loc._fivetran_deleted\n    left join current_employment ce on ce.member_id = coalesce(am.id, cm.id) \n    left join \"dev\".\"employment_hero\".\"organisations\" o on coalesce(am.organisation_id, cm.organisation_id) = o.id\n    left join \"dev\".\"postgres_public\".\"business_accounts\" ba on o.business_account_id = ba.id and not ba._fivetran_deleted\n    left join \"dev\".\"postgres_public\".\"industry_categories\" as ic on o.industry_category_id = ic.id and not ic._fivetran_deleted\n    left join \"dev\".\"employment_hero\".\"_v_last_connected_payroll\" epa on o.id = epa.organisation_id    \n    left join \"dev\".\"employment_hero\".\"_v_active_employees_by_organisations\" as oe on oe.organisation_id = o.id \n    where not u._fivetran_deleted\n)\n\n, first_mobile_app_date as (  \n  select u.id as user_id, min(timestamp) as first_mobile_app_date\n  from \"dev\".\"customers\".\"events\" e\n  join \"dev\".\"postgres_public\".\"users\" u on u.uuid = e.user_id\n  where app_version_string is not null\n  group by 1\n  )\n\n, first_sign_in as (\n    select user_id, min(first_sign_in_at) as first_sign_in_at\n    from \"dev\".\"postgres_public\".\"members\" m\n    where not _fivetran_deleted \n    and not m.system_manager \n    and not m.system_user\n     and not m.is_shadow_data\n    group by 1\n)  \n\n, last_log_in_date as (  \n  select u.id as user_id, max(timestamp)::date as last_log_in_date\n  from \"dev\".\"customers\".\"events\" e \n  join \"dev\".\"postgres_public\".\"users\" u on u.uuid = e.user_id    \n  group by 1\n  )\n\n, managers as (\n    select distinct m.user_id    \n    from\n        postgres_public.member_managers mm \n        join \"dev\".\"postgres_public\".\"members\" m on m.id = mm.manager_id        \n        join  \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n        where not m.system_manager \n        and not m.system_user \n        and not m.is_shadow_data\n        and not mm._fivetran_deleted \n        and not m._fivetran_deleted \n        and not o._fivetran_deleted\n        and o.sub_name not ilike '%demo%'\n        and (m.created_at < m.termination_date or m.termination_date is null) \n)  \n\n, ei_users as (\n    select distinct m.user_id\n    from \"dev\".\"postgres_public\".\"members\" m \n    join \"dev\".\"employment_hero\".\"_v_ei_organisations\" o on m.organisation_id = o.organisation_id \n    where not m._fivetran_deleted \n    and m.active \n    and not m.system_manager \n    and not m.system_user \n    and not m.is_shadow_data    \n    and (m.created_at < m.termination_date or m.termination_date is null)  \n)\n\n, career_enabled_users as (\n    select m.user_id\n    , case when sum(case when bo.organisation_id is null then 1 else 0 end) > 0 then true else false end as career_enabled    \n    from \"dev\".\"postgres_public\".\"members\" m \n    join  \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n    left join \"dev\".\"employment_hero\".\"_v_swag_career_blacklist_organisations\" bo on m.organisation_id = bo.organisation_id \n    where not m.system_manager \n    and not m.system_user \n    and not m.is_shadow_data\n    and not m._fivetran_deleted \n    and not o._fivetran_deleted\n    and m.active\n    group by 1\n)\n\n, instapay_enabled_users as (\n    select m.user_id\n    , case when sum(case when instapay_enabled then 1 else 0 end) > 0 then true\n        when sum(case when not instapay_enabled then 1 else 0 end) > 0 then false\n        end as instapay_enabled    \n    from \"dev\".\"postgres_public\".\"members\" m \n    join  \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n    left join \"dev\".\"ebenefits\".\"_v_instapay_on_off_organisations\" io on m.organisation_id = io.organisation_id \n    where not m.system_manager \n    and not m.system_user \n    and not m.is_shadow_data\n    and not m._fivetran_deleted\n    and not o._fivetran_deleted\n    and m.active\n    group by 1\n)\n\nselect u.id as eh_platform_user_id\n, coalesce(m.first_name, ui.first_name) as first_name\n, coalesce(m.last_name, ui.last_name) as last_name\n, u.email\n, coalesce(m.personal_mobile, ui.phone_number) as personal_mobile\n, m.date_of_birth\n, coalesce(m.state, ui.state_code) as state\n, coalesce(ui.country_code, m.country) as country\n, m.working_country as eh_Platform_Employment_Location\n, m.role as EH_Platform_Role__c\n, u.created_at::date as eh_Platform_Creation_Date\n, fs.first_sign_in_at::date as eh_Platform_Join_Date\n, ma.first_mobile_app_date::date as eh_Platform_First_Mobile_Access_Date\n, m.title\n, m.organisation_id as Org_ID__c\n, m.company\n, m.industry as eh_Platform_Industry\n, m.setup_mode as eh_PLatform_SetUp_Mode\n, m.payroll_type as EH_Platform_Connected_Payroll__c\n, m.connected_app as eh_Platform_Branded_Payroll\n, m.sub_name as EH_Platform_Subscription_Level__c\n, greatest(u.last_sign_in_at::date, ll.last_log_in_date) as eh_Platform_Last_LogIn_Date\n, son.store_enabled as eh_Platform_swag_store_enabled\n, iu.instapay_enabled as eh_Platform_org_Instapay_Enabled\n, m.termination_date as Termination_Date__c\n, case when man.user_id is not null then true else false end as EH_Platform_Manager__c\n, case when eiu.user_id is not null then true else false end as Managed_by_EI__c\n, m.white_label as eh_Platform_White_labelled_Payroll\n--, m.active_employees as Number_Of_Employees\n, mon.money_enabled as eh_Platform_Money_Enabled\n, case when ceu.career_enabled is null then true else ceu.career_enabled end as eh_Platform_Career_Enabled\n, bon.benefits_enabled\n, m.independent_contractor as eh_platform_contractor\n, m.business_account_name as eh_platform_bussiness_portal_account\n, ui.marketing_consent as eh_platform_marketing_consent\nfrom \"dev\".\"postgres_public\".\"users\" u\nleft join recent_member m on m.user_id = u.id\nleft join user_info ui on u.id = ui.user_id\nleft join first_sign_in as fs on fs.user_id = u.id \nleft join first_mobile_app_date ma on ma.user_id = u.id \nleft join last_log_in_date ll on ll.user_id = u.id \nleft join managers man on man.user_id = u.id \nleft join ei_users eiu on eiu.user_id = u.id \nleft join \"dev\".\"ebenefits\".\"_v_money_pillar_on_off_users\" mon on mon.user_id = u.id \nleft join \"dev\".\"ebenefits\".\"_v_benefits_pillar_on_off_users\" bon on bon.user_id = u.id\nleft join \"dev\".\"ebenefits\".\"_v_swag_store_on_off_users\" son on son.user_id = u.id\nleft join instapay_enabled_users iu on iu.user_id = u.id \nleft join career_enabled_users ceu on ceu.user_id = u.id \nleft join \"dev\".\"ats\".\"candidate_profiles\" can on can.id = u.id\nwhere \n    u.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n \nand not u.is_shadow_data\nand not u._fivetran_deleted\nand (m.organisation_id is not null or can.id is not null)\n", "relation_name": "\"dev\".\"marketing\".\"users_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.157490Z", "completed_at": "2024-02-04T15:20:58.169243Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.182823Z", "completed_at": "2024-02-04T15:20:58.182838Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0457155704498291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_platform_uptime", "compiled": true, "compiled_code": "with downtime_payroll as (\n    select *\n\n    from \"dev\".\"intermediate\".\"int_checkly_daily_downtime\"\n),\n\ndowntime_hr as (\n    select\n        date,\n        up_time\n    from \"dev\".\"intermediate\".\"int_pingdom_check_uptime_raw\"\n)\n\nselect\n    date,\n    \n\n  to_number(to_char(date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    'Payroll'                                          as platform,\n    86400 - sum(total_net_downtime)                    as overall_platform_uptime,\n    86400 - sum(qbo_au_net_downtime)                   as qbo_au_platform_uptime,\n    86400 - sum(qbo_uk_net_downtime)                   as qbo_uk_platform_uptime\n\nfrom downtime_payroll\n\ngroup by 1, 2, 3\n\n\nunion distinct\nselect\n    date,\n    \n\n  to_number(to_char(date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    'HR'                                               as platform,\n    avg(up_time)                                       as overall_platform_uptime,\n    NULL                                               as qbo_au_platform_uptime,\n    NULL                                               as qbo_uk_platform_uptime\nfrom downtime_hr\ngroup by\n    1, 2, 3", "relation_name": "\"dev\".\"mart\".\"fct_platform_uptime\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.177933Z", "completed_at": "2024-02-04T15:20:58.194236Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.203453Z", "completed_at": "2024-02-04T15:20:58.203468Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040639638900756836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.fct_service_uptime", "compiled": true, "compiled_code": "with cleansed_service_name as (\n    select\n        dim_service_sk,\n        service_name\n    from \"dev\".\"mart\".\"dim_service\"\n),\n\ndowntime_payroll as (\n    select\n        checkly.date,\n        checkly.total_downtime,\n        srvc.dim_service_sk\n    from \"dev\".\"intermediate\".\"int_checkly_daily_downtime\" as checkly\n    left join cleansed_service_name as srvc on checkly.name = srvc.service_name\n\n),\n\n\ndowntime_hr as (\n    select\n        pingdom.date,\n        pingdom.up_time,\n        srvc.dim_service_sk\n    from \"dev\".\"intermediate\".\"int_pingdom_check_uptime_raw\" as pingdom\n    left join cleansed_service_name as srvc on pingdom.service_name = srvc.service_name\n\n)\n\nselect\n    date,\n    \n\n  to_number(to_char(date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    'Payroll'                                          as platform,\n    dim_service_sk,\n    86400 - sum(total_downtime)                        as service_uptime\nfrom downtime_payroll\n\ngroup by 1, 2, 3, 4\nunion distinct\nselect\n    date,\n    \n\n  to_number(to_char(date::DATE,'YYYYMMDD'),'99999999')\n\n as dim_date_sk,\n    'HR'                                               as platform,\n    dim_service_sk,\n    avg(up_time)                                       as service_uptime\nfrom downtime_hr\ngroup by\n    1, 2, 3, 4", "relation_name": "\"dev\".\"mart\".\"fct_service_uptime\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.185514Z", "completed_at": "2024-02-04T15:20:58.199415Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.209811Z", "completed_at": "2024-02-04T15:20:58.209824Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.047775983810424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__manager_performance", "compiled": true, "compiled_code": "with opportunity_aggregation_by_owner as (\n    \n    select *\n    from \"dev\".\"salesforce\".\"int_salesforce__opportunity_aggregation_by_owner\"\n), \n\n-- If using user_role table, the following will be included, otherwise it will not.\n\nuser_role as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user_role\"\n),\n\n\nsalesforce_user as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user\"\n\n)\n\nselect \n    coalesce(manager.user_id, 'No Manager Assigned') as manager_id,\n    coalesce(manager.user_name, 'No Manager Assigned') as manager_name,\n    manager.city as manager_city,\n    manager.state as manager_state,\n\n    -- If using user_role table, the following will be included, otherwise it will not.\n    \n    user_role.user_role_name as manager_position,\n    \n\n    count(distinct owner_id) as number_of_direct_reports,\n    coalesce(sum(bookings_amount_closed_this_month), 0) as bookings_amount_closed_this_month,\n    coalesce(sum(bookings_amount_closed_this_quarter), 0) as bookings_amount_closed_this_quarter,\n    coalesce(sum(total_number_bookings), 0) as total_number_bookings,\n    coalesce(sum(total_bookings_amount), 0) as total_bookings_amount,\n    coalesce(sum(bookings_count_closed_this_month), 0) as bookings_count_closed_this_month,\n    coalesce(sum(bookings_count_closed_this_quarter), 0) as bookings_count_closed_this_quarter,\n    coalesce(max(largest_booking), 0) as largest_booking,\n    coalesce(sum(lost_amount_this_month), 0) as lost_amount_this_month,\n    coalesce(sum(lost_amount_this_quarter), 0) as lost_amount_this_quarter,\n    coalesce(sum(total_number_lost), 0) as total_number_lost,\n    coalesce(sum(total_lost_amount), 0) as total_lost_amount,\n    coalesce(sum(lost_count_this_month), 0) as lost_count_this_month,\n    coalesce(sum(lost_count_this_quarter), 0) as lost_count_this_quarter,\n    coalesce(sum(pipeline_created_amount_this_month), 0) as pipeline_created_amount_this_month,\n    coalesce(sum(pipeline_created_amount_this_quarter), 0) as pipeline_created_amount_this_quarter,\n    coalesce(sum(pipeline_created_forecast_amount_this_month), 0) as pipeline_created_forecast_amount_this_month,\n    coalesce(sum(pipeline_created_forecast_amount_this_quarter), 0) as pipeline_created_forecast_amount_this_quarter,\n    coalesce(sum(pipeline_count_created_this_month), 0) as pipeline_count_created_this_month,\n    coalesce(sum(pipeline_count_created_this_quarter), 0) as pipeline_count_created_this_quarter,\n    coalesce(sum(total_number_pipeline), 0) as total_number_pipeline,\n    coalesce(sum(total_pipeline_amount), 0) as total_pipeline_amount,\n    coalesce(sum(total_pipeline_forecast_amount), 0) as total_pipeline_forecast_amount,\n    coalesce(max(largest_deal_in_pipeline), 0) as largest_deal_in_pipeline,\n    round(case \n        when sum(bookings_amount_closed_this_month + lost_amount_this_month) > 0 then\n        sum(bookings_amount_closed_this_month) / sum(bookings_amount_closed_this_month + lost_amount_this_month) * 100\n        else 0\n    end, 2) as win_percent_this_month,\n    round(case\n        when sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 then\n        sum(bookings_amount_closed_this_quarter) / sum(bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n        else 0\n    end, 2) as win_percent_this_quarter,\n    round(case\n        when sum(total_bookings_amount + total_lost_amount) > 0 then\n        sum(total_bookings_amount) / sum(total_bookings_amount + total_lost_amount) * 100\n        else 0\n    end, 2) as total_win_percent\n\nfrom opportunity_aggregation_by_owner\nleft join salesforce_user as manager\n    on manager.user_id = opportunity_aggregation_by_owner.manager_id\n\n-- If using user_role table, the following will be included, otherwise it will not.\n\nleft join user_role\n    on manager.user_role_id = user_role.user_role_id\n\ngroup by 1, 2, 3, 4, 5\n\n\n\nhaving count(distinct owner_id) > 0", "relation_name": "\"dev\".\"salesforce\".\"salesforce__manager_performance\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.212397Z", "completed_at": "2024-02-04T15:20:58.225238Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.240290Z", "completed_at": "2024-02-04T15:20:58.240319Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04708981513977051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.salesforce.salesforce__owner_performance", "compiled": true, "compiled_code": "with opportunity_aggregation_by_owner as (\n    \n    select *\n    from \"dev\".\"salesforce\".\"int_salesforce__opportunity_aggregation_by_owner\"  \n), \n\nsalesforce_user as (\n\n    select *\n    from \"dev\".\"salesforce\".\"stg_salesforce__user\"\n)\n\nselect \n    opportunity_aggregation_by_owner.*,\n    salesforce_user.user_name as owner_name,\n    salesforce_user.city as owner_city,\n    salesforce_user.state as owner_state,\n    case \n        when (bookings_amount_closed_this_month + lost_amount_this_month) > 0 \n            then bookings_amount_closed_this_month / (bookings_amount_closed_this_month + lost_amount_this_month) * 100\n        else 0 \n    end as win_percent_this_month,\n    case \n        when (bookings_amount_closed_this_quarter + lost_amount_this_quarter) > 0 \n            then bookings_amount_closed_this_quarter / (bookings_amount_closed_this_quarter + lost_amount_this_quarter) * 100\n        else 0 \n    end as win_percent_this_quarter,\n    case \n        when (total_bookings_amount + total_lost_amount) > 0 \n            then total_bookings_amount / (total_bookings_amount + total_lost_amount) * 100\n        else 0 \n    end as total_win_percent\nfrom opportunity_aggregation_by_owner\njoin salesforce_user \n    on salesforce_user.user_id = opportunity_aggregation_by_owner.owner_id", "relation_name": "\"dev\".\"salesforce\".\"salesforce__owner_performance\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.233200Z", "completed_at": "2024-02-04T15:20:58.247725Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.257427Z", "completed_at": "2024-02-04T15:20:58.257440Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040246009826660156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__comment_metrics", "compiled": true, "compiled_code": "with ticket_comments as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__comments_enriched\"\n),\n\ncomment_counts as (\n    select\n        ticket_id,\n        last_comment_added_at,\n        sum(case when commenter_role = 'internal_comment' and is_public = true\n            then 1\n            else 0\n                end) as count_public_agent_comments,\n        sum(case when commenter_role = 'internal_comment'\n            then 1\n            else 0\n                end) as count_agent_comments,\n        sum(case when commenter_role = 'external_comment'\n            then 1\n            else 0\n                end) as count_end_user_comments,\n        sum(case when is_public = true\n            then 1\n            else 0\n                end) as count_public_comments,\n        sum(case when is_public = false\n            then 1\n            else 0\n                end) as count_internal_comments,\n        count(*) as total_comments,\n        count(distinct case when commenter_role = 'internal_comment'\n            then user_id\n                end) as count_ticket_handoffs,\n        sum(case when commenter_role = 'internal_comment' and is_public = true and previous_commenter_role != 'first_comment'\n            then 1\n            else 0\n                end) as count_agent_replies\n    from ticket_comments\n\n    group by 1, 2\n),\n\nfinal as (\n    select\n        *,\n        count_public_agent_comments = 1 as is_one_touch_resolution,\n        count_public_agent_comments = 2 as is_two_touch_resolution\n    from comment_counts\n)\n\nselect * \nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__comment_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.243027Z", "completed_at": "2024-02-04T15:20:58.253418Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.264111Z", "completed_at": "2024-02-04T15:20:58.264125Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04017043113708496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_reply_times", "compiled": true, "compiled_code": "with ticket_public_comments as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__comments_enriched\"\n    where is_public\n\n), end_user_comments as (\n  \n  select \n    ticket_id,\n    valid_starting_at as end_user_comment_created_at,\n    ticket_created_date,\n    commenter_role,\n    previous_internal_comment_count,\n    previous_commenter_role = 'first_comment' as is_first_comment\n  from ticket_public_comments \n  where (commenter_role = 'external_comment'\n    and ticket_public_comments.previous_commenter_role != 'external_comment') -- we only care about net new end user comments\n    or previous_commenter_role = 'first_comment' -- We also want to take into consideration internal first comment replies\n\n), reply_timestamps as (  \n\n  select\n    end_user_comments.ticket_id,\n    -- If the commentor was internal, a first comment, and had previous non public internal comments then we want the ticket created date to be the end user comment created date\n    -- Otherwise we will want to end user comment created date\n    case when is_first_comment then end_user_comments.ticket_created_date else end_user_comments.end_user_comment_created_at end as end_user_comment_created_at,\n    end_user_comments.is_first_comment,\n    min(case when is_first_comment \n        and end_user_comments.commenter_role != 'external_comment' \n        and (end_user_comments.previous_internal_comment_count > 0)\n          then end_user_comments.end_user_comment_created_at \n        else agent_comments.valid_starting_at end) as agent_responded_at\n  from end_user_comments\n  left join ticket_public_comments as agent_comments\n    on agent_comments.ticket_id = end_user_comments.ticket_id\n    and agent_comments.commenter_role = 'internal_comment'\n    and agent_comments.valid_starting_at > end_user_comments.end_user_comment_created_at\n  group by 1,2,3\n\n)\n\n  select\n    *,\n    (datediff(\n        second,\n        end_user_comment_created_at,\n        agent_responded_at\n        ) / 60) as reply_time_calendar_minutes\n  from reply_timestamps\n  order by 1,2", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_reply_times\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.270657Z", "completed_at": "2024-02-04T15:20:58.298966Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.311846Z", "completed_at": "2024-02-04T15:20:58.311861Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06396269798278809, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__reply_time_business_hours", "compiled": true, "compiled_code": "\n\n-- step 3, determine when an SLA will breach for SLAs that are in business hours\n\nwith ticket_schedules as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n\n), schedule as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), sla_policy_applied as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__sla_policy_applied\"\n\n\n), schedule_business_hours as (\n\n  select \n    schedule_id,\n    sum(end_time - start_time) as total_schedule_weekly_business_minutes\n  -- referring to stg_zendesk__schedule instead of int_zendesk__schedule_spine just to calculate total minutes\n  from \"dev\".\"zendesk\".\"stg_zendesk__schedule\"\n  group by 1\n\n), ticket_sla_applied_with_schedules as (\n\n  select \n    sla_policy_applied.*,\n    ticket_schedules.schedule_id,\n    (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        sla_policy_applied.sla_applied_at\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(sla_policy_applied.sla_applied_at as timestamp)\n        ) /60\n          ) as start_time_in_minutes_from_week,\n      schedule_business_hours.total_schedule_weekly_business_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        sla_policy_applied.sla_applied_at\n        )\n\n)\n        )\n\n as date) as start_week_date\n\n  from sla_policy_applied\n  left join ticket_schedules on sla_policy_applied.ticket_id = ticket_schedules.ticket_id\n    and \n\n        dateadd(\n        second,\n        -1,\n        ticket_schedules.schedule_created_at\n        )\n\n <= sla_policy_applied.sla_applied_at\n    and \n\n        dateadd(\n        second,\n        -1,\n        ticket_schedules.schedule_invalidated_at\n        )\n\n > sla_policy_applied.sla_applied_at\n  left join schedule_business_hours \n    on ticket_schedules.schedule_id = schedule_business_hours.schedule_id\n  where sla_policy_applied.in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n  \n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_sla_applied as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_sla_applied_with_schedules.*,\n      cast(generated_number - 1 as integer) as week_number\n\n    from ticket_sla_applied_with_schedules\n    cross join weeks\n    where \n    ceiling(target/total_schedule_weekly_business_minutes)\n\n >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n    weeks_cross_ticket_sla_applied.*,\n    cast(greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time,\n    cast((7*24*60) as integer) as ticket_week_end_time\n  from weeks_cross_ticket_sla_applied\n\n), intercepted_periods as (\n\n  select \n    weekly_periods.*,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    (schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) as lapsed_business_minutes,\n    sum(schedule.end_time_utc - greatest(ticket_week_start_time,schedule.start_time_utc)) over \n      (partition by ticket_id, metric, sla_applied_at \n        order by week_number, schedule.start_time_utc\n        rows between unbounded preceding and current row) as sum_lapsed_business_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n\n), intercepted_periods_with_breach_flag as (\n  \n  select \n    *,\n    target - sum_lapsed_business_minutes as remaining_minutes,\n    case when (target - sum_lapsed_business_minutes) < 0 \n      and \n        (lag(target - sum_lapsed_business_minutes) over\n        (partition by ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) >= 0 \n        or \n        lag(target - sum_lapsed_business_minutes) over\n        (partition by ticket_id, metric, sla_applied_at order by week_number, schedule_start_time) is null) \n        then true else false end as is_breached_during_schedule -- this flags the scheduled period on which the breach took place\n  from intercepted_periods\n\n), intercepted_periods_with_breach_flag_calculated as (\n\n  select\n    *,\n    schedule_end_time + remaining_minutes as breached_at_minutes,\n    date_trunc('week', sla_applied_at) as starting_point,\n    \n\n        dateadd(\n        minute,\n        cast(((7*24*60) * week_number) + (schedule_end_time + remaining_minutes) as integer ),\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        sla_applied_at\n        )\n\n)\n        )\n\n as date) as timestamp)\n        )\n\n as sla_breach_at,\n    \n\n        dateadd(\n        minute,\n        cast(((7*24*60) * week_number) + (schedule_start_time) as integer ),\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        sla_applied_at\n        )\n\n)\n        )\n\n as date) as timestamp)\n        )\n\n as sla_schedule_start_at,\n    \n\n        dateadd(\n        minute,\n        cast(((7*24*60) * week_number) + (schedule_end_time) as integer ),\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        sla_applied_at\n        )\n\n)\n        )\n\n as date) as timestamp)\n        )\n\n as sla_schedule_end_at,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        sla_applied_at\n        )\n\n)\n        )\n\n as date)\n        )\n\n as date) as week_end_date\n  from intercepted_periods_with_breach_flag\n\n), reply_time_business_hours_sla as (\n\n  select\n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    greatest(sla_applied_at,sla_schedule_start_at) as sla_schedule_start_at,\n    sla_schedule_end_at,\n    target,\n    sum_lapsed_business_minutes,\n    in_business_hours,\n    sla_breach_at,\n    is_breached_during_schedule\n  from intercepted_periods_with_breach_flag_calculated\n\n) \n\nselect * \nfrom reply_time_business_hours_sla", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__reply_time_business_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.301481Z", "completed_at": "2024-02-04T15:20:58.313073Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.330205Z", "completed_at": "2024-02-04T15:20:58.330219Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04209327697753906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__reply_time_calendar_hours", "compiled": true, "compiled_code": "--REPLY TIME SLA\n-- step 2, figure out when the sla will breach for sla's in calendar hours. The calculation is relatively straightforward.\n\nwith sla_policy_applied as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__sla_policy_applied\"\n\n), final as (\n  select\n    *,\n    \n\n        dateadd(\n        minute,\n        cast(target as integer ),\n        sla_applied_at\n        )\n\n as sla_breach_at\n  from sla_policy_applied\n  where not in_business_hours\n    and metric in ('next_reply_time', 'first_reply_time')\n\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__reply_time_calendar_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.314316Z", "completed_at": "2024-02-04T15:20:58.327270Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.336982Z", "completed_at": "2024-02-04T15:20:58.336996Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04206991195678711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_enriched", "compiled": true, "compiled_code": "-- this model enriches the ticket table with ticket-related dimensions.  This table will not include any metrics.\n-- for metrics, see ticket_metrics!\n\nwith ticket as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_aggregates\"\n\n--If you use using_ticket_form_history this will be included, if not it will be ignored.\n\n), latest_ticket_form as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__latest_ticket_form\"\n\n\n), latest_satisfaction_ratings as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_satisfaction\"\n\n), users as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__user_aggregates\"\n\n), requester_updates as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__requester_updates\"\n\n), assignee_updates as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__assignee_updates\"\n\n), ticket_group as (\n    \n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__group\"\n\n), organization as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__organization_aggregates\"\n\n), joined as (\n\n    select \n\n        ticket.*,\n\n        --If you use using_ticket_form_history this will be included, if not it will be ignored.\n        \n        latest_ticket_form.name as ticket_form_name,\n        \n\n        latest_satisfaction_ratings.count_satisfaction_scores as ticket_total_satisfaction_scores,\n        latest_satisfaction_ratings.first_satisfaction_score as ticket_first_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_score as ticket_satisfaction_score,\n        latest_satisfaction_ratings.latest_satisfaction_comment as ticket_satisfaction_comment,\n        latest_satisfaction_ratings.latest_satisfaction_reason as ticket_satisfaction_reason,\n        latest_satisfaction_ratings.is_good_to_bad_satisfaction_score,\n        latest_satisfaction_ratings.is_bad_to_good_satisfaction_score,\n\n        --If you use using_domain_names tags this will be included, if not it will be ignored.\n        \n        organization.domain_names as ticket_organization_domain_names,\n        requester_org.domain_names as requester_organization_domain_names,\n        \n\n        requester.external_id as requester_external_id,\n        requester.created_at as requester_created_at,\n        requester.updated_at as requester_updated_at,\n        requester.role as requester_role,\n        requester.email as requester_email,\n        requester.name as requester_name,\n        requester.is_active as is_requester_active,\n        requester.locale as requester_locale,\n        requester.time_zone as requester_time_zone,\n        coalesce(requester_updates.total_updates, 0) as requester_ticket_update_count,\n        requester_updates.last_updated as requester_ticket_last_update_at,\n        requester.last_login_at as requester_last_login_at,\n        requester.organization_id as requester_organization_id,\n        requester_org.name as requester_organization_name,\n\n        --If you use organization tags this will be included, if not it will be ignored.\n        \n        requester_org.organization_tags as requester_organization_tags,\n        \n        requester_org.external_id as requester_organization_external_id,\n        requester_org.created_at as requester_organization_created_at,\n        requester_org.updated_at as requester_organization_updated_at,\n        submitter.external_id as submitter_external_id,\n        submitter.role as submitter_role,\n        case when submitter.role in ('agent','admin') \n            then true \n            else false\n                end as is_agent_submitted,\n        submitter.email as submitter_email,\n        submitter.name as submitter_name,\n        submitter.is_active as is_submitter_active,\n        submitter.locale as submitter_locale,\n        submitter.time_zone as submitter_time_zone,\n        assignee.external_id as assignee_external_id,\n        assignee.role as assignee_role,\n        assignee.email as assignee_email,\n        assignee.name as assignee_name,\n        assignee.is_active as is_assignee_active,\n        assignee.locale as assignee_locale,\n        assignee.time_zone as assignee_time_zone,\n        coalesce(assignee_updates.total_updates, 0) as assignee_ticket_update_count,\n        assignee_updates.last_updated as assignee_ticket_last_update_at,\n        assignee.last_login_at as assignee_last_login_at,\n        ticket_group.name as group_name,\n        organization.name as organization_name\n\n        --If you use using_user_tags this will be included, if not it will be ignored.\n        \n        ,requester.user_tags as requester_tag,\n        submitter.user_tags as submitter_tag,\n        assignee.user_tags as assignee_tag\n        \n\n    \n    from ticket\n\n    --Requester Joins\n    join users as requester\n        on requester.user_id = ticket.requester_id\n\n    left join organization as requester_org\n        on requester_org.organization_id = requester.organization_id\n\n    left join requester_updates\n        on requester_updates.ticket_id = ticket.ticket_id\n            and requester_updates.requester_id = ticket.requester_id\n    \n    --Submitter Joins\n    join users as submitter\n        on submitter.user_id = ticket.submitter_id\n    \n    --Assignee Joins\n    left join users as assignee\n        on assignee.user_id = ticket.assignee_id\n\n    left join assignee_updates\n        on assignee_updates.ticket_id = ticket.ticket_id\n            and assignee_updates.assignee_id = ticket.assignee_id\n\n    --Ticket, Org, and Brand Joins\n    left join ticket_group\n        on ticket_group.group_id = ticket.group_id\n\n    --If you use using_ticket_form_history this will be included, if not it will be ignored.\n    \n    left join latest_ticket_form\n        on latest_ticket_form.ticket_form_id = ticket.ticket_form_id\n    \n\n    left join organization\n        on organization.organization_id = ticket.organization_id\n\n    left join latest_satisfaction_ratings\n        on latest_satisfaction_ratings.ticket_id = ticket.ticket_id\n)\n\nselect *\nfrom joined", "relation_name": "\"dev\".\"zendesk\".\"zendesk__ticket_enriched\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.345011Z", "completed_at": "2024-02-04T15:20:58.365120Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.379207Z", "completed_at": "2024-02-04T15:20:58.379222Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.049425601959228516, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__agent_work_time_filtered_statuses", "compiled": true, "compiled_code": "with agent_work_time_sla as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__sla_policy_applied\"\n  where metric = 'agent_work_time'\n\n), ticket_historical_status as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_status\"\n    \n--This captures the statuses of the ticket while the agent work time sla was active for the ticket.\n), agent_work_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, agent_work_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      \n\n        dateadd(\n        day,\n        30,\n        getdate()\n        )\n\n ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    agent_work_time_sla.sla_applied_at,\n    agent_work_time_sla.target,    \n    agent_work_time_sla.sla_policy_name,\n    agent_work_time_sla.ticket_created_at,\n    agent_work_time_sla.in_business_hours\n  from ticket_historical_status\n  join agent_work_time_sla\n    on ticket_historical_status.ticket_id = agent_work_time_sla.ticket_id\n  where ticket_historical_status.status in ('new', 'open') -- these are the only statuses that count as \"agent work time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom agent_work_time_filtered_statuses", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__agent_work_time_filtered_statuses\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.359832Z", "completed_at": "2024-02-04T15:20:58.378078Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.387278Z", "completed_at": "2024-02-04T15:20:58.387292Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040969133377075195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_wait_time_filtered_statuses", "compiled": true, "compiled_code": "with requester_wait_time_sla as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__sla_policy_applied\"\n  where metric = 'requester_wait_time'\n\n), ticket_historical_status as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_status\"\n    \n--This captures the statuses of the ticket while the requester wait time sla was active for the ticket.\n), requester_wait_time_filtered_statuses as (\n\n  select  \n    ticket_historical_status.ticket_id,\n    greatest(ticket_historical_status.valid_starting_at, requester_wait_time_sla.sla_applied_at) as valid_starting_at,\n    coalesce(\n      ticket_historical_status.valid_ending_at, \n      \n\n        dateadd(\n        day,\n        30,\n        getdate()\n        )\n\n ) as valid_ending_at, --assumes current status continues into the future. This is necessary to predict future SLA breaches (not just past).\n    ticket_historical_status.status as ticket_status,\n    requester_wait_time_sla.sla_applied_at,\n    requester_wait_time_sla.target,\n    requester_wait_time_sla.sla_policy_name,\n    requester_wait_time_sla.ticket_created_at,\n    requester_wait_time_sla.in_business_hours\n  from ticket_historical_status\n  join requester_wait_time_sla\n    on ticket_historical_status.ticket_id = requester_wait_time_sla.ticket_id\n  where ticket_historical_status.status in ('new', 'open', 'on-hold', 'hold') -- these are the only statuses that count as \"requester wait time\"\n  and sla_applied_at < valid_ending_at\n\n)\nselect *\nfrom requester_wait_time_filtered_statuses", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_filtered_statuses\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.370084Z", "completed_at": "2024-02-04T15:20:58.384662Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.395223Z", "completed_at": "2024-02-04T15:20:58.395236Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04342460632324219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_resolution_times_calendar", "compiled": true, "compiled_code": "with historical_solved_status as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_status\"\n    where status = 'solved'\n\n), ticket as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), ticket_historical_assignee as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_assignee\"\n\n), ticket_historical_group as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_group\"\n\n), solved_times as (\n  \n  select\n  \n    ticket_id,\n    min(valid_starting_at) as first_solved_at,\n    max(valid_starting_at) as last_solved_at,\n    count(status) as solved_count \n\n  from historical_solved_status\n  group by 1\n\n)\n\n  select\n\n    ticket.ticket_id,\n    ticket.created_at,\n    solved_times.first_solved_at,\n    solved_times.last_solved_at,\n    ticket_historical_assignee.unique_assignee_count,\n    ticket_historical_assignee.assignee_stations_count,\n    ticket_historical_group.group_stations_count,\n    ticket_historical_assignee.first_assignee_id,\n    ticket_historical_assignee.last_assignee_id,\n    ticket_historical_assignee.first_agent_assignment_date,\n    ticket_historical_assignee.last_agent_assignment_date,\n    ticket_historical_assignee.ticket_unassigned_duration_calendar_minutes,\n    solved_times.solved_count as total_resolutions,\n    case when solved_times.solved_count <= 1\n      then 0\n      else solved_times.solved_count - 1 --subtracting one as the first solve is not a reopen.\n        end as count_reopens,\n\n    datediff(\n        minute,\n        ticket_historical_assignee.first_agent_assignment_date,\n        solved_times.last_solved_at\n        ) as first_assignment_to_resolution_calendar_minutes,\n    datediff(\n        minute,\n        ticket_historical_assignee.last_agent_assignment_date,\n        solved_times.last_solved_at\n        ) as last_assignment_to_resolution_calendar_minutes,\n    datediff(\n        minute,\n        ticket.created_at,\n        solved_times.first_solved_at\n        ) as first_resolution_calendar_minutes,\n    datediff(\n        minute,\n        ticket.created_at,\n        solved_times.last_solved_at\n        ) as final_resolution_calendar_minutes\n\n  from ticket\n\n  left join ticket_historical_assignee\n    using(ticket_id)\n\n  left join ticket_historical_group\n    using(ticket_id)\n\n  left join solved_times\n    using(ticket_id)", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_resolution_times_calendar\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.404533Z", "completed_at": "2024-02-04T15:20:58.428609Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.443176Z", "completed_at": "2024-02-04T15:20:58.443190Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.054566144943237305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_work_time_business", "compiled": true, "compiled_code": "\n\nwith ticket_historical_status as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_status\"\n\n), ticket_schedules as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n\n), schedule as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      ticket_historical_status.ticket_id,\n      ticket_historical_status.status as ticket_status,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as status_schedule_start,\n      least(valid_ending_at, schedule_invalidated_at) as status_schedule_end,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      ticket_historical_status.valid_starting_at as status_valid_starting_at,\n      ticket_historical_status.valid_ending_at as status_valid_ending_at\n\n    from ticket_historical_status\n    left join ticket_schedules\n      on ticket_historical_status.ticket_id = ticket_schedules.ticket_id\n      -- making sure there is indeed real overlap\n      where datediff(\n        second,\n        greatest(valid_starting_at, schedule_created_at),\n        least(valid_ending_at, schedule_invalidated_at)\n        ) > 0\n\n), ticket_full_solved_time as (\n\n    select \n      ticket_id,\n      ticket_status,\n      schedule_id,\n      status_schedule_start,\n      status_schedule_end,\n      status_valid_starting_at,\n      status_valid_ending_at,\n    (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_status_crossed_with_schedule.status_schedule_start\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(ticket_status_crossed_with_schedule.status_schedule_start as timestamp)\n        ) /60\n          ) as start_time_in_minutes_from_week,\n      (datediff(\n        second,\n        ticket_status_crossed_with_schedule.status_schedule_start,\n        ticket_status_crossed_with_schedule.status_schedule_end\n        ) /60\n            ) as raw_delta_in_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_status_crossed_with_schedule.status_schedule_start\n        )\n\n)\n        )\n\n as date) as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as integer) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_periods as (\n\n    select\n\n      weeks_cross_ticket_full_solved_time.*,\n      -- for each week, at what minute do we start counting?\n      cast(greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      cast(least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as integer) as ticket_week_end_time\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods as (\n  \n    select \n      weekly_periods.ticket_id,\n      weekly_periods.week_number,\n      weekly_periods.schedule_id,\n      weekly_periods.ticket_status,\n      weekly_periods.ticket_week_start_time,\n      weekly_periods.ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(weekly_periods.ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n    from weekly_periods\n    join schedule on \n      ticket_week_start_time <= schedule.end_time_utc \n      and ticket_week_end_time >= schedule.start_time_utc\n      and weekly_periods.schedule_id = schedule.schedule_id\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n      and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n  \n), business_minutes as (\n  \n    select \n      ticket_id,\n      ticket_status,\n      case when ticket_status in ('pending') then scheduled_minutes\n          else 0 end as agent_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold') then scheduled_minutes\n          else 0 end as requester_wait_time_in_minutes,\n      case when ticket_status in ('new', 'open', 'hold', 'pending') then scheduled_minutes\n          else 0 end as solve_time_in_minutes,\n      case when ticket_status in ('new', 'open') then scheduled_minutes\n          else 0 end as agent_work_time_in_minutes,\n      case when ticket_status in ('hold') then scheduled_minutes\n          else 0 end as on_hold_time_in_minutes,\n      case when ticket_status = 'new' then scheduled_minutes\n          else 0 end as new_status_duration_minutes,\n      case when ticket_status = 'open' then scheduled_minutes\n          else 0 end as open_status_duration_minutes\n    from intercepted_periods\n\n)\n  \n    select \n      ticket_id,\n      sum(agent_wait_time_in_minutes) as agent_wait_time_in_business_minutes,\n      sum(requester_wait_time_in_minutes) as requester_wait_time_in_business_minutes,\n      sum(solve_time_in_minutes) as solve_time_in_business_minutes,\n      sum(agent_work_time_in_minutes) as agent_work_time_in_business_minutes,\n      sum(on_hold_time_in_minutes) as on_hold_time_in_business_minutes,\n      sum(new_status_duration_minutes) as new_status_duration_in_business_minutes,\n      sum(open_status_duration_minutes) as open_status_duration_in_business_minutes\n    from business_minutes\n    group by 1", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_work_time_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.424363Z", "completed_at": "2024-02-04T15:20:58.433584Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.449763Z", "completed_at": "2024-02-04T15:20:58.449777Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05184030532836914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_work_time_calendar", "compiled": true, "compiled_code": "with ticket_historical_status as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_historical_status\"\n\n), calendar_minutes as (\n  \n    select \n        ticket_id,\n        status,\n        case when status in ('pending') then status_duration_calendar_minutes\n            else 0 end as agent_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold') then status_duration_calendar_minutes\n            else 0 end as requester_wait_time_in_minutes,\n        case when status in ('new', 'open', 'hold', 'pending') then status_duration_calendar_minutes \n            else 0 end as solve_time_in_minutes, \n        case when status in ('new', 'open') then status_duration_calendar_minutes\n            else 0 end as agent_work_time_in_minutes,\n        case when status in ('hold') then status_duration_calendar_minutes\n            else 0 end as on_hold_time_in_minutes,\n        case when status = 'new' then status_duration_calendar_minutes\n            else 0 end as new_status_duration_minutes,\n        case when status = 'open' then status_duration_calendar_minutes\n            else 0 end as open_status_duration_minutes,\n        case when status = 'deleted' then 1\n            else 0 end as ticket_deleted,\n        first_value(valid_starting_at) over (partition by ticket_id order by valid_starting_at desc, ticket_id rows unbounded preceding) as last_status_assignment_date,\n        case when lag(status) over (partition by ticket_id order by valid_starting_at) = 'deleted' and status != 'deleted'\n            then 1\n            else 0\n                end as ticket_recoveries\n\n    from ticket_historical_status\n\n)\n\nselect \n  ticket_id,\n  last_status_assignment_date,\n  sum(ticket_deleted) as ticket_deleted_count,\n  sum(agent_wait_time_in_minutes) as agent_wait_time_in_calendar_minutes,\n  sum(requester_wait_time_in_minutes) as requester_wait_time_in_calendar_minutes,\n  sum(solve_time_in_minutes) as solve_time_in_calendar_minutes,\n  sum(agent_work_time_in_minutes) as agent_work_time_in_calendar_minutes,\n  sum(on_hold_time_in_minutes) as on_hold_time_in_calendar_minutes,\n  sum(new_status_duration_minutes) as new_status_duration_in_calendar_minutes,\n  sum(open_status_duration_minutes) as open_status_duration_in_calendar_minutes,\n  sum(ticket_recoveries) as total_ticket_recoveries\nfrom calendar_minutes\ngroup by 1, 2", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_work_time_calendar\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.434763Z", "completed_at": "2024-02-04T15:20:58.446997Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.457688Z", "completed_at": "2024-02-04T15:20:58.457702Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.041646718978881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_history_enriched", "compiled": true, "compiled_code": "with ticket_field_history as (\n\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket_field_history\"\n\n), updater_info as (\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__updater_information\"\n\n), final as (\n    select\n        ticket_field_history.*\n\n          \n\n    from ticket_field_history\n\n    left join updater_info\n        on ticket_field_history.user_id = updater_info.updater_user_id\n)\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__field_history_enriched\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.469597Z", "completed_at": "2024-02-04T15:20:58.491238Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.504890Z", "completed_at": "2024-02-04T15:20:58.504906Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05025839805603027, "adapter_response": {}, "message": null, "failures": null, "unique_id": "analysis.dbt_project.eh_candidates_job_titles", "compiled": true, "compiled_code": "with\n    employment_history as (\n        select distinct c.id, h.job_title as title\n        from \n            \"dev\".\"ats\".\"candidate_profiles\" c\n            join \"dev\".\"postgres_public\".\"user_employment_histories\" h on \n                c.id = h.user_id and not h._fivetran_deleted\n    )\n    , jobs_applied as (\n        select distinct c.id, a.job_title as title\n        from \n        \"dev\".\"ats\".\"candidate_profiles\" c\n        join \"dev\".\"ats\".\"job_applications\" a on\n            c.email = a.applicant_email\n    )\n    , candidates_job_titles as (\n        select id, REGEXP_REPLACE(title, '(wanted|!|CALL RYAN 0419 625 208)', '', 1, 'i') as title\n        from (select * from employment_history union select * from jobs_applied)\n        where \n            len(title) > 2 \n            and title ~ '.*[a-zA-Z0-9].*' \n            and title not ilike 'i %'\n            and title not ilike 'No Experience Required - We Need You'\n    )\n    , t_cleansed as (\n        select title,  \n-- remove ending words   \ntrim(regexp_replace(trim(regexp_replace(trim(regexp_replace(trim(regexp_replace(         \n    trim(replace(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(replace(trim(lower(\n        -- abbreviations\n        trim(job_title_abbreviation_expand( \n            -- replace & with and\n            trim(replace(replace(\n                -- replace + with and\n                trim(replace(replace(\n                    -- 5. replace & with and\n                    trim(replace(replace(\n                        -- 4. replace ! with of\n                        trim(replace(replace(replace(replace(replace(replace(replace(\n                            -- 3. trim ending special characters\n                            trim(trim('&' from trim(trim('/' from trim(trim(':' from trim(trim('|' from trim(trim('-' from trim(trim('|' FROM ( \n                                -- 2. remove state\n                                trim(REGEXP_REPLACE(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(lower(   \n                                    -- 1. remove content inside bracket\n                                    trim(REGEXP_REPLACE(title, '\\\\([^)]*\\\\)'))\n                                ), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' '), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' ')), '-$'))\n                            )))))))))))))\n                        , ' - ', ' of '), ' : ', ' of '), ':', ' of '), ' | ', ' of '), '|', ' of '), ', ', ' of '), ',', ' of '))\n                    , ' / ', ' and '), '/', ' and '))\n                , ' + ', ' and '), '+', 'and'))\n            , ' & ', ' and '), '&', ' and '))\n        ))\n    )), ' the ', ' '), '^[-/]', ''), '[-/]$', '')), '  ', ' '))\n, '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', ''))\n as t_title, id\n        from candidates_job_titles\n    )\n    , t_common as (\n        select t.title, trim(INITCAP(coalesce(m.title_common, t.t_title))) as processed_title, id\n        from t_cleansed t \n        left join \"dev\".\"csv\".\"more_common_job_titles\" m on t.t_title = m.title_original\n    )\n    , seniority as (\n        select distinct title as original_title\n        ,  \ncase\n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i')) end\n AS processed_title\n        ,  \ncase when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when processed_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when processed_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when processed_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when processed_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when processed_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when processed_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when processed_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when processed_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when processed_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when processed_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when processed_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when processed_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when processed_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n AS seniority\n        , id    \n        from t_common\n    )\n\nselect * from seniority", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.481198Z", "completed_at": "2024-02-04T15:20:58.503690Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.513113Z", "completed_at": "2024-02-04T15:20:58.513127Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05309486389160156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_job_application_profile", "compiled": true, "compiled_code": "\n\nwith swag_job_profiles as (\n    select\n        u.id,\n        u.uuid         as user_uuid,\n        lower(u.email) as email,\n        u.created_at   as user_created_at,\n        u.updated_at   as user_updated_at,\n        ui.created_at,\n        ui.updated_at,\n        ui.first_name,\n        ui.last_name,\n        ui.user_verified_at,\n        ui.source,\n        ui.friendly_id,\n        ui.completed_profile,\n        ui.public_profile,\n        ui.last_public_profile_at,\n        ui.phone_number,\n        ui.country_code,\n        ui.city,\n        ui.state_code,\n        ui.headline,\n        ui.summary,\n        ui.marketing_consented_at\n    from\n        \"dev\".\"postgres_public\".\"users\" as u\n    inner join \"dev\".\"postgres_public\".\"user_infos\" as ui\n        on\n            u.id = ui.user_id\n            and not ui._fivetran_deleted\n    where\n        \n    u.email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n        and not u._fivetran_deleted\n        and not u.is_shadow_data\n        and ui.user_verified_at is not NULL\n        and (len(ui.country_code) is NULL or len(ui.country_code) != 3)\n),\n\nemployment_history as (\n    select\n        user_id,\n        count(*)                                                                         as employment_entries,\n        min(to_date(start_year || '-' || start_month || '-' || start_day, 'YYYY-MM-DD')) as earliest_employment_start_date\n    from\n        \"dev\".\"postgres_public\".\"user_employment_histories\"\n    where\n        not _fivetran_deleted\n    group by 1\n),\n\neducation_history as (\n    select\n        user_id,\n        count(*) as education_entries\n    from\n        \"dev\".\"postgres_public\".\"user_education_histories\"\n    where\n        not _fivetran_deleted\n    group by 1\n),\n\nresume_and_cover_letter as (\n    select\n        user_id,\n        count(case when metadata ilike '%resume%' then 1 end)       as resume_entries,\n        count(case when metadata ilike '%cover_letter%' then 1 end) as cover_letter_entries\n    from\n        \"dev\".\"postgres_public\".\"user_attachments\"\n    where\n        not _fivetran_deleted\n    group by 1\n),\n\ncandidate_hiring_phases as (\n    select\n        s.external_source_id                                                                                                                                                                         as candidate_job_id,\n        listagg(case when json_extract_path_text(c.content, 'activity_type') = 'move' then json_extract_path_text(c.content, 'full_message') else '' end, '; ') within group (order by c.created_at) as hiring_moves,\n        listagg(json_extract_path_text(c.content, 'activity_type'), '; ') within group (order by c.created_at)                                                                                       as hiring_activities,\n        count(*)                                                                                                                                                                                     as hiring_activity_count\n    from \"dev\".\"comment_public\".\"comments\" as c\n    inner join \"dev\".\"comment_public\".\"comment_sources\" as s on c.comment_source_id = s.id\n    inner join \"dev\".\"ats_public\".\"candidate_jobs\" as cj on s.external_source_id = cj.id\n    inner join \"dev\".\"ats_public\".\"jobs\" as j on cj.job_id = j.id\n    where\n        not c._fivetran_deleted\n        and not s._fivetran_deleted\n        and not cj._fivetran_deleted\n        and not j._fivetran_deleted\n        and s.type = 'AtsJobCandidate'\n        and is_valid_json(c.content)\n    group by 1\n)\n\nselect\n    cj.id                                                                                   as candidate_job_id,\n    u.user_uuid,\n    u.country_code                                                                          as candidate_country,\n    j.job_id,\n    j.trim_job_title                                                                        as job_title\n    ,  \ncase\n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i')) end\n as job_title_without_seniority\n    ,  \ncase \n        when INITCAP(job_title_seniority) in ('Associate', 'Assistant', 'Graduate', 'Apprentice', 'Trainee') then 'Junior'\n        when INITCAP(job_title_seniority) = '' or INITCAP(job_title_seniority) is null then 'Intermediate'\n        when INITCAP(job_title_seniority) in ('Principal', 'Leader') then 'Lead'\n        when INITCAP(job_title_seniority) in ('Managing') then 'Manager'\n        when INITCAP(job_title_seniority) in ('Head') then 'Head'\n        when INITCAP(job_title_seniority) in ('Vice', 'Executive') then 'Director'\n        else INITCAP(job_title_seniority) end \n as job_title_seniority,\n    j.organisation_id,\n    j.industry,\n    j.country                                                                               as job_country,\n    j.employment_type,\n    j.job_description,\n    j.candidate_location,\n    j.is_remote_job,\n    j.workplace_type,\n    cj.created_at                                                                           as applied_at,\n    cj.contacted,\n    case\n        when cj.result = 1 then 'in progress'\n        when cj.result = 2 then 'hired'\n        else 'rejected'\n    end                                                                                     as result,\n    hp.name                                                                                 as current_hiring_phase,\n    case\n        when hp.phase_type = 0 then 'new'\n        when hp.phase_type = 2 then 'in progress'\n        when hp.phase_type = 1 then 'hiried'\n        when hp.phase_type = 3 then 'rejected'\n    end                                                                                     as hiring_phase_type,\n    chp.hiring_moves,\n    chp.hiring_activities,\n    case\n        when chp.hiring_activities ilike 'reject%' then TRUE when chp.hiring_activities is not NULL and chp.hiring_activities != ''\n            then FALSE\n    end                                                                                     as is_direct_reject,\n    chp.hiring_activity_count,\n    cj.user_id,\n    lower(cj.applied_email)                                                                 as applicant_email,\n    --, case when earliest_employment_start_date <= applied_at then em.employment_entries else null end as employment_entries\n    em.employment_entries,\n    ed.education_entries,\n    r.resume_entries,\n    ars.score                                                                               as affinda_score,\n    json_extract_path_text(json_extract_path_text(ars.details, 'jobTitle'), 'score')        as affinda_job_title_score,\n    json_extract_path_text(json_extract_path_text(ars.details, 'location'), 'score')        as affinda_location_score,\n    json_extract_path_text(json_extract_path_text(ars.details, 'experience'), 'score')      as affinda_experience_score,\n    json_extract_path_text(json_extract_path_text(ars.details, 'managementLevel'), 'score') as affinda_management_level_score,\n    ars.details                                                                             as affinda_score_details,\n    --, ad.parse_data as resume_parse_data\n    mp.experience_job_titles,\n    mp.applied_job_titles,\n    mp.job_titles                                                                           as all_job_titles\nfrom \"dev\".\"ats_public\".\"candidate_jobs\" as cj\ninner join (select\n    *,\n    trim(job_title) as trim_job_title,\n    lower( \ncase when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(trim_job_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when trim_job_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when trim_job_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when trim_job_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when trim_job_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when trim_job_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when trim_job_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when trim_job_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when trim_job_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when trim_job_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when trim_job_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when trim_job_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when trim_job_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when trim_job_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n)                   as job_title_seniority\nfrom \"dev\".\"ats\".\"jobs_created\") as j on cj.job_id = j.job_id\ninner join swag_job_profiles as u on cj.user_id = u.user_uuid\ninner join \"dev\".\"employment_hero\".\"organisations\" as o on j.organisation_id = o.id\nleft join candidate_hiring_phases as chp on cj.id = chp.candidate_job_id\nleft join \"dev\".\"ats_public\".\"hiring_phases\" as hp on cj.hiring_phase_id = hp.id and not hp._fivetran_deleted\nleft join employment_history as em\n    on u.id = em.user_id\nleft join education_history as ed\n    on u.id = ed.user_id\nleft join resume_and_cover_letter as r\n    on u.id = r.user_id\nleft join \n\n(\nselect\n    *\n  from\n    \"dev\".\"ats_public\".\"affinda_resume_scores\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by candidate_job_id order by created_at desc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"ats_public\".\"affinda_resume_scores\"\n      where\n        not _fivetran_deleted\n    )\n)\n\n as ars on cj.id = ars.candidate_job_id and not ars._fivetran_deleted\nleft join \"dev\".\"ats_public\".\"affinda_documents\" as ad on ars.candidate_job_document_id = ad.id and not ad._fivetran_deleted\nleft join \"dev\".\"ats_public\".\"matching_profiles\" as mp on cj.user_id = mp.user_id and not mp._fivetran_deleted\nwhere\n    not cj._fivetran_deleted\n    and \n    applicant_email !~* '.*(employmenthero|employmentinnovations|keypay|webscale|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n\n    --and cj.job_id in (select job_id from \"dev\".\"ats\".\"job_applications\" where result = 'hired')\n    --and (em.employment_entries > 0)\n    and o.is_paying_eh\n    and j.job_title is not NULL and j.job_title !~ '^$' and len(j.job_title) != 1\n\n--select hiring_phase, sum(case when affinda_score is not null then 1 else 0 end) as having_score, avg(affinda_score) as avg_affinda_score from staging_ats.job_application_profile group by 1  where employment_entries > 0 and affinda_score is not null group by 1\n--select case when affinda_score < 0.25 then '<0.25' when affinda_score < 0.5 then '<0.5' when affinda_score < 0.75 then '<0.75' else '>= 0.75' end, count(affinda_score) from staging_ats.job_application_profile group by 1", "relation_name": "\"dev\".\"ats\".\"job_application_profile\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.498295Z", "completed_at": "2024-02-04T15:20:58.511551Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.521317Z", "completed_at": "2024-02-04T15:20:58.521331Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04706525802612305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_job_applications_id.d53404582e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ats\".\"job_applications\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.531208Z", "completed_at": "2024-02-04T15:20:58.542752Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.575117Z", "completed_at": "2024-02-04T15:20:58.575137Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06017923355102539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_job_applications_id.559e9a1fbe", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"job_applications\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.545623Z", "completed_at": "2024-02-04T15:20:58.573947Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.583275Z", "completed_at": "2024-02-04T15:20:58.583291Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.059859275817871094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_product_metrics", "compiled": true, "compiled_code": "with\n    dates as (\n        select distinct dateadd('day', - generated_number::int, current_date) as \"date\"\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 731\n    order by generated_number\n\n)\n    ),\n    -- swag wallet loaded\n    instapay_into_wallets as (\n        select\n            ht.created_at::date as date,\n            (\n                case\n                    when lower(m.work_country) = 'au'\n                    then 'Australia'\n                    when lower(m.work_country) = 'gb'\n                    then 'United Kingdom'\n                    when lower(m.work_country) = 'sg'\n                    then 'Singapore'\n                    when lower(m.work_country) = 'my'\n                    then 'Malaysia'\n                    when lower(m.work_country) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            sum(amount) as wallet_loaded\n        from \"dev\".\"heropay_db_public\".\"heropay_transactions\" as ht\n        left join \"dev\".\"heropay_db_public\".\"heropay_balances\" as hb on ht.heropay_balance_id = hb.id\n        left join \"dev\".\"heropay_db_public\".\"member_infos\" as mi on mi.heropay_balance_id = hb.id\n        left join \"dev\".\"postgres_public\".\"members\" m on m.uuid = ht.member_id\n        where ht.created_at >= dateadd('day', -750, current_date) and admin_fee = '3'\n        group by 1, 2\n        order by 1 desc\n    ),\n    -- time to hire\n    time_to_hire as (\n        select\n            hired_at::date as date,\n            (\n                case\n                    when lower(country) = 'au'\n                    then 'Australia'\n                    when lower(country) = 'gb'\n                    then 'United Kingdom'\n                    when lower(country) = 'sg'\n                    then 'Singapore'\n                    when lower(country) = 'my'\n                    then 'Malaysia'\n                    when lower(country) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            sum(time_to_hire::float) as total_time_to_hire,\n            count(time_to_hire::float) as time_to_hire_count,\n            avg(time_to_hire::float) as avg_time_to_hire\n        from \"dev\".\"ats\".\"job_applications\" as a\n        where\n            portal_name is not null\n            and time_to_hire is not null\n            and a.is_test_job = false\n            and hired_at >= dateadd('day', -750, current_date)\n        group by 1, 2\n    ),\n    -- avg applicants per job\n    avg_app_per_job as (\n        select\n            job_created_at::date as date,\n            (\n                case\n                    when lower(country) = 'au'\n                    then 'Australia'\n                    when lower(country) = 'gb'\n                    then 'United Kingdom'\n                    when lower(country) = 'sg'\n                    then 'Singapore'\n                    when lower(country) = 'my'\n                    then 'Malaysia'\n                    when lower(country) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            count(distinct job_id) total_jobs_with_app,\n            count(distinct applicant_email) total_applicants\n        from \"dev\".\"ats\".\"job_applications\" as a\n        where a.is_test_job = false and job_created_at >= dateadd('day', -750, current_date)\n        group by 1, 2\n        order by 1 desc, 2\n    ),\n    -- no. candidate applied\n    candidate_applied as (\n        select\n            ja.applied_at::date as date,\n            (\n                case\n                    when lower(cp.country_code) = 'au'\n                    then 'Australia'\n                    when lower(cp.country_code) = 'gb'\n                    then 'United Kingdom'\n                    when lower(cp.country_code) = 'sg'\n                    then 'Singapore'\n                    when lower(cp.country_code) = 'my'\n                    then 'Malaysia'\n                    when lower(cp.country_code) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            count(distinct cp.id) candidate_applied,\n            count(distinct case when ja.portal_name = 'Employment Hero Careers' then cp.id end)\n            applicants_through_swag_jobs\n        from \"dev\".\"ats\".\"candidate_profiles\" cp\n        inner join \"dev\".\"ats\".\"job_applications\" ja on cp.email = ja.applicant_email\n        where ja.applied_at >= dateadd('day', -750, current_date)\n        group by 1, 2\n    ),\n    -- no. candidate profiles\n    candidate_profiles as (\n        select\n            user_verified_at::date as date,\n            (\n                case\n                    when lower(cp.country_code) = 'au'\n                    then 'Australia'\n                    when lower(cp.country_code) = 'gb'\n                    then 'United Kingdom'\n                    when lower(cp.country_code) = 'sg'\n                    then 'Singapore'\n                    when lower(cp.country_code) = 'my'\n                    then 'Malaysia'\n                    when lower(cp.country_code) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            count(distinct cp.id) candidate_profiles\n        from \"dev\".\"ats\".\"candidate_profiles\" cp\n        where user_verified_at >= dateadd('day', -750, current_date)\n        group by 1, 2\n    ),\n    -- distinct_jobs_posted\n    distinct_job_posted as (\n        select\n            posted_at::date as date,\n            (\n                case\n                    when lower(country) = 'au'\n                    then 'Australia'\n                    when lower(country) = 'gb'\n                    then 'United Kingdom'\n                    when lower(country) = 'sg'\n                    then 'Singapore'\n                    when lower(country) = 'my'\n                    then 'Malaysia'\n                    when lower(country) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            count(distinct job_id) as jobs_posted\n        from \"dev\".\"ats\".\"jobs_posted\"\n        where is_test_job = false and posted_at >= dateadd('day', -750, current_date)\n        group by 1, 2\n    ),\n    -- accumulated_swag_profile\n    acc_swag as (\n        select distinct\n            cast(d.date as date) as date,\n            (\n                case\n                    when lower(country_code) = 'au'\n                    then 'Australia'\n                    when lower(country_code) = 'gb'\n                    then 'United Kingdom'\n                    when lower(country_code) = 'sg'\n                    then 'Singapore'\n                    when lower(country_code) = 'my'\n                    then 'Malaysia'\n                    when lower(country_code) = 'nz'\n                    then 'New Zealand'\n                    else 'untracked'\n                end\n            ) as country,\n            count(distinct case when cp.user_verified_at <= d.date then cp.id else null end) as swag_profile_acc\n        from \"dev\".\"ats\".\"candidate_profiles\" cp\n        cross join dates as d\n        group by 1, 2\n    )\n\nselect\n    cast(dates.date as date) as date,\n    c.country as country,\n    iiw.wallet_loaded,\n    tth.total_time_to_hire,\n    tth.time_to_hire_count,\n    tth.avg_time_to_hire,\n    apj.total_jobs_with_app avg_app_total_jobs,\n    apj.total_applicants avg_app_total_applicants,\n    ca.candidate_applied,\n    ca.applicants_through_swag_jobs,\n    cp.candidate_profiles,\n    jp.jobs_posted,\n    swag.swag_profile_acc\nfrom dates\ncross join\n    (\n        select 'Australia' as country\n        union\n        select 'United Kingdom' as country\n        union\n        select 'Singapore' as country\n        union\n        select 'Malaysia' as country\n        union\n        select 'New Zealand' as country\n        union\n        select 'untracked' as country\n    )\n    c\nleft join instapay_into_wallets iiw on iiw.date = dates.date and c.country = iiw.country\nleft join time_to_hire tth on tth.date = dates.date and c.country = tth.country\nleft join avg_app_per_job apj on apj.date = dates.date and c.country = apj.country\nleft join candidate_applied ca on ca.date = dates.date and c.country = ca.country\nleft join distinct_job_posted jp on jp.date = dates.date and c.country = jp.country\nleft join candidate_profiles cp on cp.date = dates.date and c.country = cp.country\nleft join acc_swag swag on swag.date = dates.date and swag.country = c.country", "relation_name": "\"dev\".\"tableau\".\"tableau_companydash_product_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.564463Z", "completed_at": "2024-02-04T15:20:58.584954Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.596555Z", "completed_at": "2024-02-04T15:20:58.596569Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.061211585998535156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_jobs_posted_job_boards_post_id.46d1906af9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect job_boards_post_id\nfrom \"dev\".\"ats\".\"jobs_posted\"\nwhere job_boards_post_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.603647Z", "completed_at": "2024-02-04T15:20:58.633910Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.641967Z", "completed_at": "2024-02-04T15:20:58.641984Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.07783889770507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_jobs_posted_job_boards_post_id.8bac8c6d6f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    job_boards_post_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"jobs_posted\"\nwhere job_boards_post_id is not null\ngroup by job_boards_post_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.616643Z", "completed_at": "2024-02-04T15:20:58.640781Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.672965Z", "completed_at": "2024-02-04T15:20:58.672981Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07944679260253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_employer_actions", "compiled": true, "compiled_code": "\n\nwith candidates_shown as (\n    select\n        org_uuid,\n        o.id        as org_id,\n        s.user_uuid,\n        s.employer_member_uuid,\n        job_matched,\n        min(s.time) as first_shown_at,\n        count(*)    as no_of_shown_actions\n    from \"dev\".\"ats\".\"smart_match_candidates_shown\" as s\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on s.org_uuid = o.uuid and o.is_paying_eh\n    group by 1, 2, 3, 4, 5\n),\n\ncandidates_previewed as (\n    select\n        org_uuid,\n        o.id        as org_id,\n        s.user_uuid,\n        s.employer_member_uuid,\n        job_matched,\n        min(s.time) as first_previewed_at,\n        count(*)    as no_of_previewed_actions\n    from \"dev\".\"ats\".\"smart_match_candidates_previewed\" as s\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on s.org_uuid = o.uuid and o.is_paying_eh\n    group by 1, 2, 3, 4, 5\n),\n\nshortlist_candidates_action as (\n    select\n        org_uuid,\n        o.id        as org_id,\n        s.user_uuid,\n        s.employer_member_uuid,\n        job_matched,\n        min(s.time) as shortlisted_at,\n        count(*)    as no_of_shortlisted_actions\n    from \"dev\".\"ats\".\"smart_match_candidates_shortlisted_actioned\" as s\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on s.org_uuid = o.uuid and o.is_paying_eh\n    group by 1, 2, 3, 4, 5\n),\n\nsaved_candidates_action as (\n    select\n        org_uuid,\n        o.id        as org_id,\n        s.user_uuid,\n        s.employer_member_uuid,\n        job_matched,\n        min(s.time) as saved_at,\n        count(*)    as no_of_saved_actions\n    from \"dev\".\"ats\".\"smart_match_candidates_saved_actioned\" as s\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on s.org_uuid = o.uuid and o.is_paying_eh\n    group by 1, 2, 3, 4, 5\n),\n\nsaved_or_shortlisted_candidates as (\n    select\n        coalesce(sc.org_uuid, sl.org_uuid)                                                                 as org_uuid,\n        coalesce(sc.org_id, sl.org_id)                                                                     as org_id,\n        coalesce(sc.user_uuid, sl.user_uuid)                                                               as user_uuid,\n        coalesce(sc.employer_member_uuid, sl.employer_member_uuid)                                         as employer_member_uuid,\n        coalesce(case when sl.job_matched = '' then NULL else sl.job_matched end, sc.job_matched)::varchar as job_matched,\n        min(sc.saved_at)                                                                                   as saved_at,\n        min(coalesce(sc.saved_at, sl.shortlisted_at))                                                      as saved_or_shortlisted_at,\n        max(sc.no_of_saved_actions)                                                                        as no_of_saved_actions,\n        min(sl.shortlisted_at)                                                                             as shortlisted_at,\n        max(sl.no_of_shortlisted_actions)                                                                  as no_of_shortlisted_actions\n    from saved_candidates_action as sc\n    full outer join shortlist_candidates_action as sl\n        on\n            sc.org_uuid = sl.org_uuid and sc.user_uuid = sl.user_uuid\n            and (sc.job_matched = sl.job_matched or sl.job_matched = '' or sc.job_matched = '')\n            and (sc.employer_member_uuid = sl.employer_member_uuid or sl.employer_member_uuid is NULL or sc.employer_member_uuid is NULL)\n            and date_trunc('day', sc.saved_at) <= date_trunc('day', sl.shortlisted_at)\n    group by 1, 2, 3, 4, 5\n),\n\npreviewed_saved_shortlisted as (\n    select\n        coalesce(s.org_uuid, p.org_uuid)                                                                as org_uuid,\n        coalesce(s.org_id, p.org_id)                                                                    as org_id,\n        coalesce(s.user_uuid, p.user_uuid)                                                              as user_uuid,\n        coalesce(s.employer_member_uuid, p.employer_member_uuid)                                        as employer_member_uuid,\n        coalesce(case when s.job_matched = '' then NULL else s.job_matched end, p.job_matched)::varchar as job_matched,\n        min(p.first_previewed_at)                                                                       as first_previewed_at,\n        sum(p.no_of_previewed_actions)                                                                  as no_of_previewed_actions,\n        min(s.saved_at)                                                                                 as saved_at,\n        sum(s.no_of_saved_actions)                                                                      as no_of_saved_actions,\n        min(s.saved_or_shortlisted_at)                                                                  as saved_or_shortlisted_at,\n        min(s.shortlisted_at)                                                                           as shortlisted_at,\n        sum(s.no_of_shortlisted_actions)                                                                as no_of_shortlisted_actions\n\n    from saved_or_shortlisted_candidates as s\n    full outer join candidates_previewed as p\n        on\n            s.org_uuid = p.org_uuid and s.user_uuid = p.user_uuid\n            and (s.job_matched = p.job_matched or s.job_matched = '' or p.job_matched = '')\n            and (s.employer_member_uuid = p.employer_member_uuid or s.employer_member_uuid is NULL or p.employer_member_uuid is NULL)\n            and date_trunc('day', p.first_previewed_at) <= date_trunc('day', s.saved_or_shortlisted_at)\n    group by 1, 2, 3, 4, 5\n),\n\nshown_previewed_saved_shortlisted as (\n    select\n        coalesce(p.org_uuid, cs.org_uuid)                                                                as org_uuid,\n        coalesce(p.org_id, cs.org_id)                                                                    as org_id,\n        coalesce(p.user_uuid, cs.user_uuid)                                                              as user_uuid,\n        coalesce(p.employer_member_uuid, cs.employer_member_uuid)                                        as employer_member_uuid,\n        coalesce(case when p.job_matched = '' then NULL else p.job_matched end, cs.job_matched)::varchar as job_matched,\n        min(cs.first_shown_at)                                                                           as first_shown_at,\n        sum(cs.no_of_shown_actions)                                                                      as no_of_shown_actions,\n        min(p.first_previewed_at)                                                                        as first_previewed_at,\n        sum(p.no_of_previewed_actions)                                                                   as no_of_previewed_actions,\n        min(p.saved_at)                                                                                  as saved_at,\n        sum(p.no_of_saved_actions)                                                                       as no_of_saved_actions,\n        min(p.saved_or_shortlisted_at)                                                                   as saved_or_shortlisted_at,\n        min(p.shortlisted_at)                                                                            as shortlisted_at,\n        sum(p.no_of_shortlisted_actions)                                                                 as no_of_shortlisted_actions\n    from previewed_saved_shortlisted as p\n    full outer join candidates_shown as cs\n        on\n            p.org_uuid = cs.org_uuid and p.user_uuid = cs.user_uuid\n            and (p.job_matched = cs.job_matched or p.job_matched = '' or cs.job_matched = '')\n            and (p.employer_member_uuid = cs.employer_member_uuid or p.employer_member_uuid is NULL or cs.employer_member_uuid is NULL)\n            and date_trunc('day', cs.first_shown_at) <= date_trunc('day', p.first_previewed_at)\n    group by 1, 2, 3, 4, 5\n),\n\nbase as (\n    select\n        x.org_uuid,\n        x.org_id,\n        x.user_uuid,\n        x.employer_member_uuid,\n        x.job_matched,\n        min(first_shown_at)            as first_shown_at,\n        sum(no_of_shown_actions)       as no_of_shown_actions,\n        min(first_previewed_at)        as first_previewed_at,\n        sum(no_of_previewed_actions)   as no_of_previewed_actions,\n        min(saved_at)                  as saved_at,\n        sum(no_of_saved_actions)       as no_of_saved_actions,\n        min(saved_or_shortlisted_at)   as saved_or_shortlisted_at,\n        min(shortlisted_at)            as shortlisted_at,\n        sum(no_of_shortlisted_actions) as no_of_shortlisted_actions\n    from shown_previewed_saved_shortlisted as x\n    left join \"dev\".\"employment_hero\".\"organisations\" as eho on x.org_id = eho.id\n    where eho.pricing_tier != 'free' and eho.pricing_tier is not NULL and eho.is_paying_eh\n    group by 1, 2, 3, 4, 5\n),\n\nuser_emails as (\n    select\n        u.id   as user_id,\n        u.uuid as user_uuid,\n        u.email\n    from \"dev\".\"postgres_public\".\"users\" as u\n    inner join \"dev\".\"employment_hero\".\"employees\" as e on u.id = e.user_id\n\n    union distinct\n\n    select distinct\n        u.id             as user_id,\n        u.uuid           as user_uuid,\n        e.personal_email as email\n    from \"dev\".\"postgres_public\".\"users\" as u\n    inner join \"dev\".\"employment_hero\".\"employees\" as e on u.id = e.user_id\n    where e.personal_email is not NULL\n),\n\nhired_from_saved_hired_at as (\n    select\n        org_uuid,\n        org_id,\n        user_uuid,\n        employer_member_uuid,\n        candidate_email,\n        min(hired_at) as hired_at\n    from (\n        select\n            j.organisation_id as org_uuid,\n            o.id              as org_id,\n            cj.applied_email  as candidate_email,\n            cj.user_id        as user_uuid,\n            ss.employer_member_uuid,\n            cj.hired_at       as hired_at\n        from \"dev\".\"ats_public\".\"candidate_jobs\" as cj\n        inner join \"dev\".\"ats_public\".\"jobs\" as j on cj.job_id = j.id\n        inner join \"dev\".\"employment_hero\".\"organisations\" as o on j.organisation_id = o.uuid\n        inner join saved_or_shortlisted_candidates as ss on j.organisation_id = ss.org_uuid and cj.user_id = ss.user_uuid and (cj.hired_at > ss.saved_or_shortlisted_at or cj.hired_at is NULL)\n        where\n            cj.user_id is not NULL\n            and is_paying_eh\n\n        union distinct\n\n        select\n            j.organisation_id as org_uuid,\n            o.id              as org_id,\n            cj.applied_email  as candidate_email,\n            cj.user_id        as user_uuid,\n            ss.employer_member_uuid,\n            cj.hired_at       as hired_at\n        from \"dev\".\"ats_public\".\"candidate_jobs\" as cj\n        inner join \"dev\".\"ats_public\".\"jobs\" as j on cj.job_id = j.id\n        inner join \"dev\".\"employment_hero\".\"organisations\" as o on j.organisation_id = o.uuid\n        inner join user_emails as ue on cj.applied_email = ue.email\n        inner join saved_or_shortlisted_candidates as ss on o.uuid = ss.org_uuid and ss.user_uuid = ue.user_uuid and (cj.hired_at > ss.saved_or_shortlisted_at or cj.hired_at is NULL)\n\n        where\n            cj.user_id is not NULL\n            and is_paying_eh\n    )\n    where hired_at is not NULL\n    group by 1, 2, 3, 4, 5\n)\n\n, user_employment_details as (\n    select\n        u.id     as user_id,\n        u.uuid   as user_uuid,\n        u.email,\n        e.organisation_id,\n        e.created_at,\n        eh.title as onboard_job_title\n    from \"dev\".\"postgres_public\".\"users\" as u\n    inner join \"dev\".\"employment_hero\".\"employees\" as e on u.id = e.user_id\n    inner join \n\n(\n    select\n        *\n    from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n    where\n        id in (\n        select\n            FIRST_VALUE(id) over(partition by member_id order by created_at asc rows between unbounded preceding and unbounded following)\n        from\n            \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n            not _fivetran_deleted\n        )\n)\n\n as eh on e.id = eh.member_id\n        and (e.created_at < e.termination_date or e.termination_date is NULL)\n),\n\nonboarded_int as (\n    select\n        o.uuid       as org_uuid,\n        o.id         as org_id,\n        e.email      as onboard_email,\n        e.onboard_job_title,\n        e.user_uuid  as user_uuid,\n        ss.employer_member_uuid,\n        e.created_at as onboarded_at\n    from user_employment_details as e\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on e.organisation_id = o.id\n    inner join saved_or_shortlisted_candidates as ss on o.uuid = ss.org_uuid and e.user_uuid = ss.user_uuid and (e.created_at > ss.saved_or_shortlisted_at or e.created_at is NULL)\n    where\n        e.user_uuid is not NULL\n        and is_paying_eh\n\n    union distinct\n\n    select\n        o.uuid       as org_uuid,\n        o.id         as org_id,\n        e.email      as onboard_email,\n        e.onboard_job_title,\n        e.user_uuid  as user_uuid,\n        ss.employer_member_uuid,\n        e.created_at as onboarded_at\n    from user_employment_details as e\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on e.organisation_id = o.id\n    inner join user_emails as ue on e.email = ue.email\n    inner join saved_or_shortlisted_candidates as ss on o.uuid = ss.org_uuid and ue.user_uuid = ss.user_uuid and (e.created_at > ss.saved_or_shortlisted_at or e.created_at is NULL)\n    where e.user_uuid is not NULL and is_paying_eh\n)\n,\nonboard_from_saved as (\n    select\n        org_uuid,\n        org_id,\n        user_uuid,\n        employer_member_uuid,\n        listagg(distinct onboard_email, ', ')     as onboard_email,\n        listagg(distinct onboard_job_title, ', ') as onboard_job_title,\n        min(onboarded_at)                         as onboarded_at\n    from onboarded_int\n    where onboarded_at is not NULL\n    group by 1, 2, 3, 4\n),\n\nowners as (\n    select distinct\n        o.country,\n        m.user_uuid,\n        m.uuid as member_uuid,\n        o.uuid as org_uuid\n    from \"dev\".\"employment_hero\".\"employees\" as m\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on m.organisation_id = o.id\n    where\n        m.role ilike 'owner'\n        and m.user_id is not NULL\n        and m.uuid is not NULL\n)\n,\nadmins as (\n    select distinct\n        o.country,\n        m.user_uuid,\n        m.uuid as member_uuid,\n        o.uuid as org_uuid\n    from \"dev\".\"employment_hero\".\"employees\" as m\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on m.organisation_id = o.id\n    where\n        m.role ilike 'employer'\n        and m.user_id is not NULL\n        and m.uuid is not NULL\n)\n,\nhiring_managers as (\n    select distinct\n        o.country,\n        m.user_uuid,\n        m.uuid as member_uuid,\n        o.uuid as org_uuid\n    from \"dev\".\"ats_public\".\"hiring_managers\" as hm\n    inner join \"dev\".\"employment_hero\".\"employees\" as m on hm.member_id = m.uuid\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on m.organisation_id = o.id\n    inner join \"dev\".\"ats\".\"jobs_created\" as j on hm.job_id = j.job_id\n    where\n        m.role not ilike 'owner'\n        and m.role not ilike 'employer'\n        and hm._fivetran_deleted = 'f'\n        and m.user_id is not NULL\n        and m.uuid is not NULL\n)\n,\npeople_managers as (\n    select distinct\n        o.country,\n        m.user_uuid,\n        m.uuid as member_uuid,\n        o.uuid as org_uuid\n    from \"dev\".\"postgres_public\".\"member_managers\" as pm\n    inner join \"dev\".\"employment_hero\".\"employees\" as m on pm.manager_id = m.id\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on m.organisation_id = o.id\n    where\n        m.role not ilike 'owner'\n        and m.role not ilike 'employer'\n        and m.user_id is not NULL\n        and not pm._fivetran_deleted\n        and m.uuid is not NULL\n)\n,\nsecurity_groups as (\n    select\n        rp.key,\n        coalesce(ra.member_id, tm.member_id) as member_id,\n        r.is_affecting_all_employees,\n        r.organisation_id\n    from \"dev\".\"postgres_public\".\"security_roles\" as r\n    inner join \"dev\".\"postgres_public\".\"security_role_assignees\" as ra on r.id = ra.security_role_id\n    inner join \"dev\".\"postgres_public\".\"security_role_permissions\" as rp on r.id = rp.security_role_id\n    inner join \"dev\".\"postgres_public\".\"team_members\" as tm on ra.team_id = tm.team_id\n    where\n        rp.key = 'security_permissions_recruitment_ats' and rp.use = 't'\n        and not r._fivetran_deleted\n        and not ra._fivetran_deleted\n        and not rp._fivetran_deleted\n        and not tm._fivetran_deleted\n)\n,\n\ntams as (\n    select distinct\n        o.country,\n        m.user_uuid,\n        m.uuid as member_uuid,\n        o.uuid as org_uuid\n    from security_groups as sg\n    inner join \"dev\".\"employment_hero\".\"employees\" as m on sg.member_id = m.id\n    inner join \"dev\".\"employment_hero\".\"organisations\" as o on m.organisation_id = o.id\n    where\n        m.role not ilike 'owner'\n        and m.role not ilike 'employer'\n        and m.user_id is not NULL\n        and m.uuid is not NULL\n),\n\nintermediate1 as (\n    select distinct\n        md5(cast(coalesce(cast(b.user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.org_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.job_matched as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.employer_member_uuid as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id,\n        case\n            when owners.member_uuid is not NULL then 'Owner'\n            when admins.member_uuid is not NULL then 'Admin'\n            when tams.member_uuid is not NULL then 'TAM'\n            when hiring_managers.member_uuid is not NULL then 'Hiring Manager'\n            when people_managers.member_uuid is not NULL then 'People Manager'\n            else 'Other'\n        end                                                                                                                                                                                                                                                                                                                                                  as user_type,\n        b.user_uuid,\n        b.employer_member_uuid,\n        b.org_uuid,\n        u.email                                                                                                                                                                                                                                                                                                                                              as candidate_email,\n        os.onboard_email,\n        b.org_id,\n        b.job_matched,\n        up.experience_job_titles,\n        b.first_shown_at,\n        b.no_of_shown_actions,\n        b.first_previewed_at,\n        b.no_of_previewed_actions,\n        b.saved_or_shortlisted_at,\n        b.saved_at,\n        b.no_of_saved_actions,\n        b.shortlisted_at,\n        b.no_of_shortlisted_actions,\n        fsha.hired_at,\n        os.onboarded_at,\n        case when os.onboarded_at is not NULL or fsha.hired_at is not NULL then 1 else 0 end                                                                                                                                                                                                                                                                 as no_of_onboarded_actions,\n        os.onboard_job_title,\n        fb.votes                                                                                                                                                                                                                                                                                                                                             as feedback_vote,\n        fb.explanations                                                                                                                                                                                                                                                                                                                                      as feedback_explanation\n    from base as b\n    left join owners on b.employer_member_uuid = owners.member_uuid and b.org_uuid = owners.org_uuid\n    left join admins on b.employer_member_uuid = admins.member_uuid and b.org_uuid = admins.org_uuid\n    left join tams on b.employer_member_uuid = tams.member_uuid and b.org_uuid = tams.org_uuid\n    left join hiring_managers on b.employer_member_uuid = hiring_managers.member_uuid and b.org_uuid = hiring_managers.org_uuid\n    left join people_managers on b.employer_member_uuid = people_managers.member_uuid and b.org_uuid = people_managers.org_uuid\n    inner join \"dev\".\"postgres_public\".\"users\" as u on b.user_uuid = u.uuid\n    left join \"dev\".\"ats_public\".\"matching_profiles\" as up on b.user_uuid = up.user_id\n    left join hired_from_saved_hired_at as fsha on b.user_uuid = fsha.user_uuid and b.org_uuid = fsha.org_uuid and (b.employer_member_uuid = fsha.employer_member_uuid or fsha.employer_member_uuid is NULL or b.employer_member_uuid is NULL)\n    left join onboard_from_saved as os on b.user_uuid = os.user_uuid and b.org_uuid = os.org_uuid and (b.employer_member_uuid = os.employer_member_uuid or os.employer_member_uuid is NULL or b.employer_member_uuid is NULL)\n    left join \"dev\".\"ats\".\"feedback\" as fb on b.user_uuid = fb.user_uuid and b.org_uuid = fb.org_uuid and (fb.matched_job_title = '' or b.job_matched = fb.matched_job_title)\n)\n\nselect\n    id,\n    user_type,\n    user_uuid,\n    employer_member_uuid,\n    org_uuid,\n    candidate_email,\n    onboard_email,\n    org_id,\n    job_matched,\n    experience_job_titles,\n    first_shown_at,\n    no_of_shown_actions,\n    first_previewed_at,\n    no_of_previewed_actions,\n    saved_or_shortlisted_at,\n    saved_at,\n    no_of_saved_actions,\n    shortlisted_at,\n    no_of_shortlisted_actions,\n    hired_at,\n    onboarded_at,\n    row_number() over (\n        partition by user_uuid, org_uuid\n        order by coalesce(hired_at, onboarded_at) nulls last\n    )                                                                                   as rn,\n    case when rn = 1 and coalesce(hired_at, onboarded_at) is not NULL then 1 else 0 end as no_of_onboarded_actions,\n    onboard_job_title,\n    feedback_vote,\n    feedback_explanation\nfrom intermediate1", "relation_name": "\"dev\".\"ats\".\"smart_match_employer_actions\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.643147Z", "completed_at": "2024-02-04T15:20:58.675504Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.686094Z", "completed_at": "2024-02-04T15:20:58.686109Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06057405471801758, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ats_smart_match_funnel", "compiled": true, "compiled_code": "\n\nwith candidates_shown as (\n  Select org_uuid\n  , o.id as org_id\n  , s.user_uuid\n  , case when raw_job_matched = '' then job_matched else raw_job_matched end as job_matched\n  , s.time as first_shown_at\nfrom \n    ( select *, row_number() OVER (PARTITION BY org_uuid, user_uuid, case when raw_job_matched = '' then job_matched else raw_job_matched end ORDER BY \"time\" ASC) as rn\n        from  \"dev\".\"ats\".\"smart_match_candidates_shown\" \n    )s\n  join \"dev\".\"employment_hero\".\"organisations\" o on s.org_uuid = o.uuid and o.is_paying_eh  \n  where s.rn = 1\n)\n\n, candidates_previewed as (\n  Select org_uuid\n  , o.id as org_id\n  , s.user_uuid\n  , case when raw_job_matched = '' then job_matched else raw_job_matched end as job_matched\n  --, e.id as first_previewed_member_id  \n  , s.time as first_previewed_at\nfrom ( \n    select *, row_number() OVER (PARTITION BY org_uuid, user_uuid, case when raw_job_matched = '' then job_matched else raw_job_matched end  ORDER BY \"time\" ASC) as rn\n    from \"dev\".\"ats\".\"smart_match_candidates_previewed\" ) s\n  join \"dev\".\"employment_hero\".\"organisations\" o on s.org_uuid = o.uuid and o.is_paying_eh\n  left join \"dev\".\"employment_hero\".\"employees\" e on e.uuid = s.employer_member_uuid\n    where s.rn = 1\n)\n\n, shortlist_candidates_action as (\n  Select org_uuid\n  , o.id as org_id\n  , s.user_uuid\n  , case when raw_job_matched = '' then job_matched else raw_job_matched end as job_matched\n  --, e.id as shortlist_member_id\n  , s.time as shortlisted_at\nfrom (\n    select *, row_number() OVER (PARTITION BY org_uuid, user_uuid, case when raw_job_matched = '' then job_matched else raw_job_matched end ORDER BY \"time\" ASC) as rn\n    from \"dev\".\"ats\".\"smart_match_candidates_shortlisted_actioned\" \n    )s\n  join \"dev\".\"employment_hero\".\"organisations\" o on s.org_uuid = o.uuid and o.is_paying_eh\n  left join \"dev\".\"employment_hero\".\"employees\" e on e.uuid = s.employer_member_uuid\n  where s.rn = 1\n)\n\n, shortlist_candidates_db_records as (\n      Select distinct j.organisation_id as org_uuid\n  , o.id as org_id\n  , cj.user_id as user_uuid\n  , coalesce(j.title, '')::varchar as job_matched\n  , min(cj.created_at) as shortlisted_at\nFrom \"dev\".\"ats_public\".\"candidate_jobs\" cj\njoin \"dev\".\"ats_public\".\"jobs\" as j on cj.job_id = j.id\njoin \"dev\".\"employment_hero\".\"organisations\" o on j.organisation_id = o.uuid\nleft Join \"dev\".\"ats_public\".\"hiring_phases\" hp on cj.hiring_phase_id = hp.id\nWhere cj.source_name = 'Shortlisted from Saved candidate'\nand is_paying_eh\ngroup by 1,2,3,4\n)\n\n, shortlisted_candidates as (\n    select distinct coalesce(a.org_uuid, d.org_uuid) as org_uuid\n    , coalesce(a.org_id, d.org_id) as org_id\n    , coalesce(a.user_uuid, d.user_uuid) as user_uuid\n    , coalesce(case when a.job_matched = '' then null else a.job_matched end, d.job_matched)::varchar as job_matched\n    , coalesce(a.shortlisted_at, d.shortlisted_at) as shortlisted_at\n    --, a.shortlist_member_id\n    from shortlist_candidates_action a \n    full outer join shortlist_candidates_db_records d \n        on d.org_uuid = a.org_uuid and d.user_uuid  = a.user_uuid \n        and (a.job_matched = d.job_matched or a.job_matched = '' or d.job_matched = '') \n        and date_trunc('day', a.shortlisted_at) <= date_trunc('day', d.shortlisted_at)\n)\n\n, saved_candidates_action as (\n  Select org_uuid\n  , o.id as org_id\n  , s.user_uuid\n  , case when raw_job_matched = '' then job_matched else raw_job_matched end as job_matched\n  --, e.id as save_member_id\n  , s.time as saved_at\nfrom (\n    select *, row_number() OVER (PARTITION BY org_uuid, user_uuid, case when raw_job_matched = '' then job_matched else raw_job_matched end ORDER BY \"time\" ASC) as rn\n    from \"dev\".\"ats\".\"smart_match_candidates_saved_actioned\" \n    )s\n  join \"dev\".\"employment_hero\".\"organisations\" o on s.org_uuid = o.uuid and o.is_paying_eh\n  left join \"dev\".\"employment_hero\".\"employees\" e on e.uuid = s.employer_member_uuid\n  where s.rn = 1\n)\n\n, saved_candidates_db_records as (\nSelect  \n  o.uuid as org_uuid\n  , o.id as org_id\n  , u.uuid as user_uuid\n  , coalesce(sc.job_saved_for, '')::varchar as job_matched\n  --, author_id as save_member_id\n  , min(sc.created_at) as saved_at\n  from \"dev\".\"postgres_public\".\"saved_candidates\" sc\n  join \"dev\".\"employment_hero\".\"organisations\" o on o.id = sc.organisation_id\n  join \"dev\".\"postgres_public\".\"users\" u on u.id = sc.user_id\n  where is_paying_eh\n    group by 1,2,3,4\n)\n\n, saved_candidates as (\n    select distinct coalesce(a.org_uuid, d.org_uuid) as org_uuid\n    , coalesce(a.org_id, d.org_id) as org_id\n    , coalesce(a.user_uuid, d.user_uuid) as user_uuid\n    , coalesce(case when a.job_matched = '' then null else a.job_matched end, d.job_matched)::varchar as job_matched\n    , coalesce(a.saved_at, d.saved_at) as saved_at\n    --, coalesce(a.save_member_id, d.save_member_id) as save_member_id\n    from saved_candidates_action a \n    full outer join saved_candidates_db_records d\n        on d.org_uuid = a.org_uuid and d.user_uuid  = a.user_uuid \n        and (a.job_matched = d.job_matched or a.job_matched = '' or d.job_matched = '') \n        and date_trunc('day', a.saved_at) <= date_trunc('day', d.saved_at)\n)\n\n, saved_or_shortlisted_candidates as (\n    select distinct\n    coalesce(sc.org_uuid, sl.org_uuid) as org_uuid\n    , coalesce(sc.org_id, sl.org_id) as org_id\n    , coalesce(sc.user_uuid, sl.user_uuid) as user_uuid\n    , coalesce(case when sl.job_matched = '' then null else sl.job_matched end, sc.job_matched)::varchar as job_matched\n    , coalesce(sc.saved_at, sl.shortlisted_at) as saved_or_shortlisted_at\n    --, sc.save_member_id\n    , sl.shortlisted_at as shortlisted_at\n    --, sl.shortlist_member_id\n    from saved_candidates sc \n    full outer join shortlisted_candidates sl \n        on sc.org_uuid = sl.org_uuid and sc.user_uuid = sl.user_uuid \n        and (sl.job_matched = sc.job_matched or sl.job_matched = '' or sc.job_matched = '')\n        and date_trunc('day', sc.saved_at) <= date_trunc('day', sl.shortlisted_at)\n)\n\n, base as (\n    select x.org_uuid\n    , x.org_id\n    , x.user_uuid\n    , x.job_matched\n    , eho.country\n    , eho.industry\n    , a.city as org_city\n    , g.latitude as org_latitude\n    , g.longitude as org_longitude\n    --, save_member_id\n    --, shortlist_member_id\n    , min(first_shown_at) as first_shown_at\n    , min(first_previewed_at) as first_previewed_at\n    , min(saved_or_shortlisted_at) as saved_or_shortlisted_at\n    , min(shortlisted_at) as shortlisted_at\n    from (\n        select coalesce(p.org_uuid, cs.org_uuid) as org_uuid\n        , coalesce(p.org_id, cs.org_id) as org_id\n        , coalesce(p.user_uuid, cs.user_uuid) as user_uuid\n        , coalesce(case when p.job_matched = '' then null else p.job_matched end, cs.job_matched)::varchar as job_matched\n        , cs.first_shown_at\n        , p.first_previewed_at\n        , p.saved_or_shortlisted_at\n        , p.shortlisted_at \n        --, p.save_member_id\n        --, p.shortlist_member_id\n        from (\n            select coalesce(s.org_uuid, p.org_uuid) as org_uuid\n            , coalesce(s.org_id, p.org_id) as org_id\n            , coalesce(s.user_uuid, p.user_uuid) as user_uuid\n            , coalesce(case when s.job_matched = '' then null else s.job_matched end, p.job_matched)::varchar as job_matched\n            , p.first_previewed_at\n            , s.saved_or_shortlisted_at\n            --, s.save_member_id            \n            , s.shortlisted_at\n            --, s.shortlist_member_id\n            from saved_or_shortlisted_candidates s\n            full outer join candidates_previewed p \n                on s.org_uuid = p.org_uuid and s.user_uuid = p.user_uuid \n                and (s.job_matched = p.job_matched or s.job_matched = '' or p.job_matched = '') \n                and date_trunc('day', p.first_previewed_at) <= date_trunc('day', s.saved_or_shortlisted_at)\n            )p\n            full outer join candidates_shown cs\n                on p.org_uuid = cs.org_uuid and p.user_uuid = cs.user_uuid \n                and (p.job_matched = cs.job_matched or p.job_matched = '' or cs.job_matched = '') \n                and date_trunc('day', cs.first_shown_at) <= date_trunc('day', p.first_previewed_at)\n    ) x\n    join \"dev\".\"employment_hero\".\"organisations\" eho on x.org_id = eho.id\n    left join \"dev\".\"postgres_public\".\"addresses\" a on eho.primary_address_id = a.id and not a._fivetran_deleted\n    left join (\n        select *\n        from \"dev\".\"postgres_public\".\"address_geolocations\"\n        where id in (\n            select FIRST_VALUE(id) over(partition by address_id order by updated_at desc rows between unbounded preceding and unbounded following)\n            from \"dev\".\"postgres_public\".\"address_geolocations\"\n            where not _fivetran_deleted\n            and latitude is not null \n            and longitude is not null\n            )\n        )g on g.address_id = a.id \n    where eho.pricing_tier != 'free' and eho.pricing_tier is not null\n    group by 1,2,3,4,5,6,7,8,9\n)\n\n-- , feedback as (\n--     select org_uuid, org_id, user_uuid, matched_job_title\n--     , listagg(distinct vote, '; ') WITHIN GROUP (order by created_at desc) as votes\n--     , listagg(distinct explanation, '; ') WITHIN GROUP (order by created_at desc) as explanations\n--     from (        \n--         select fb.id, fb.created_at, explanation, vote    \n--         , u.id as feedback_user_id\n--         , us.uuid as user_uuid\n--         , o.uuid as org_uuid\n--         , o.id as org_id\n--         , json_extract_path_text(context, 'matching_job_title')::varchar as matched_job_title\n--         from \"dev\".\"ats_public\".\"feedbacks\" fb\n--         join \"dev\".\"postgres_public\".\"users\" u on fb.user_id = u.uuid\n--         join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id\n--         join \"dev\".\"employment_hero\".\"organisations\" o on e.organisation_id = o.id \n--         join \"dev\".\"postgres_public\".\"users\" us on json_extract_path_text(context, 'user_ids') ilike '%\"' || us.uuid || '\"%'\n--         where not fb._fivetran_deleted\n--         --and explanation is not null\n--         and feature = 'candidate_recommendation'\n--         and is_paying_eh\n--     )\n--     group by 1,2,3,4\n--   )\n\n, user_emails as (\n    select u.id as user_id, u.uuid as user_uuid, u.email\n    from \"dev\".\"postgres_public\".\"users\"  u \n    join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id\n\n    union\n\n    select distinct u.id as user_id, u.uuid as user_uuid, e.personal_email as email\n    from \"dev\".\"postgres_public\".\"users\"  u \n    join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id\n    where e.personal_email is not null    \n)\n\n, hired_from_saved_hired_at as (\n    -- removed emails as some candidates can use different emails for different applications even with the same user uuid\n    select org_uuid, org_id, user_uuid\n    , min(hired_at) as hired_at\n    from (        \n        Select j.organisation_id as org_uuid\n        , o.id as org_id\n        , cj.applied_email as candidate_email\n        , cj.user_id as user_uuid  \n        , cj.hired_at as hired_at\n        From \"dev\".\"ats_public\".\"candidate_jobs\" cj\n        join  \"dev\".\"ats_public\".\"jobs\" j on cj.job_id = j.id\n        join \"dev\".\"employment_hero\".\"organisations\" o on j.organisation_id = o.uuid\n        join saved_or_shortlisted_candidates ss on ss.org_uuid = j.organisation_id and ss.user_uuid = cj.user_id and (ss.saved_or_shortlisted_at < cj.hired_at or cj.hired_at is null)\n        where --not cj._fivetran_deleted\n        --and not j._fivetran_deleted\n        --and cj.result = 2 --'hired' --hired_at is not null\n        cj.user_id is not null       \n        and is_paying_eh\n\n        union \n\n        Select j.organisation_id as org_uuid\n        , o.id as org_id\n        , cj.applied_email as candidate_email    \n        , cj.user_id as user_uuid\n        , cj.hired_at as hired_at\n        From \"dev\".\"ats_public\".\"candidate_jobs\" cj\n        join  \"dev\".\"ats_public\".\"jobs\" j on cj.job_id = j.id\n        join \"dev\".\"employment_hero\".\"organisations\" o on j.organisation_id = o.uuid\n        join user_emails ue on ue.email = cj.applied_email\n        join saved_or_shortlisted_candidates ss on ss.org_uuid = o.uuid and ss.user_uuid = ue.user_uuid and (ss.saved_or_shortlisted_at < cj.hired_at or cj.hired_at is null)\n        \n        where --not cj._fivetran_deleted\n        --and not j._fivetran_deleted\n        --and cj.result = 2 --'hired' --hired_at is not null\n        cj.user_id is not null     \n        and is_paying_eh\n    )\n    group by 1,2,3\n)\n\n,\nonboard_from_saved as (\n    select org_uuid, org_id, user_uuid\n    , listagg(distinct onboard_email, ', ') as onboard_email\n    , listagg(distinct onboard_job_title, ', ') as onboard_job_title\n    , min(onboarded_at) as onboarded_at\n    from (\n        Select o.uuid as org_uuid\n        , o.id as org_id\n        , e.email as onboard_email\n        , e.onboard_job_title\n        , e.user_uuid as user_uuid\n        , e.created_at as onboarded_at\n        From (\n            select u.id as user_id, u.uuid as user_uuid, u.email, e.organisation_id, e.created_at, eh.title as onboard_job_title\n            from \"dev\".\"postgres_public\".\"users\"  u \n            join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id\n            join \n\n(\n    select\n        *\n    from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n    where\n        id in (\n        select\n            FIRST_VALUE(id) over(partition by member_id order by created_at asc rows between unbounded preceding and unbounded following)\n        from\n            \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n            not _fivetran_deleted\n        )\n)\n\n as eh on eh.member_id = e.id  \n            and (e.created_at < e.termination_date or e.termination_date is null)\n        )e\n\n         -- on cj.job_id = j.id\n        join \"dev\".\"employment_hero\".\"organisations\" o on e.organisation_id = o.id\n        join saved_or_shortlisted_candidates ss on ss.org_uuid = o.uuid and ss.user_uuid = e.user_uuid and (ss.saved_or_shortlisted_at < e.created_at or e.created_at is null)\n        where --not cj._fivetran_deleted\n        --and not j._fivetran_deleted\n        --and cj.result = 2 --'hired' --hired_at is not null\n        e.user_uuid is not null       \n        and is_paying_eh\n\n        union \n\n        Select o.uuid as org_uuid\n        , o.id as org_id\n        , e.email as onboard_email\n        , e.onboard_job_title     \n        , e.user_uuid as user_uuid\n        , e.created_at as onboarded_at\n        From (\n            select u.id as user_id, u.uuid as user_uuid, u.email, e.organisation_id, e.created_at, eh.title as onboard_job_title\n            from \"dev\".\"postgres_public\".\"users\"  u \n            join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id \n            join \n\n(\n    select\n        *\n    from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n    where\n        id in (\n        select\n            FIRST_VALUE(id) over(partition by member_id order by created_at asc rows between unbounded preceding and unbounded following)\n        from\n            \"dev\".\"postgres_public\".\"employment_histories\"\n        where\n            not _fivetran_deleted\n        )\n)\n\n as eh on eh.member_id = e.id    \n            and (e.created_at < e.termination_date or e.termination_date is null)\n        )e\n        join \"dev\".\"employment_hero\".\"organisations\" o on e.organisation_id = o.id\n        join user_emails ue on ue.email = e.email\n        join saved_or_shortlisted_candidates ss on ss.org_uuid = o.uuid and ss.user_uuid = ue.user_uuid and (ss.saved_or_shortlisted_at < e.created_at or e.created_at is null)\n        \n\n        where --not cj._fivetran_deleted\n        --and not j._fivetran_deleted\n        --and cj.result = 2 --'hired' --hired_at is not null\n        e.user_uuid is not null     \n        and is_paying_eh\n    )\n    group by 1,2,3\n)\n-- , owners as (\n--   select distinct o.country, m.user_uuid, o.uuid as org_uuid\n--   from \"dev\".\"employment_hero\".\"employees\" m\n--   join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n--   where m.role ilike 'owner'\n--   and m.user_id is not null\n--   )\n--   ,\n--   admins as (\n--   select distinct o.country, m.user_uuid, o.uuid as org_uuid\n--   from \"dev\".\"employment_hero\".\"employees\" m\n--   join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n--   where m.role ilike 'employer'\n--   and m.user_id is not null\n--   )\n--   ,\n--   hiring_managers as (\n--   select distinct o.country, m.user_uuid, o.uuid as org_uuid\n--   from \"dev\".\"ats_public\".\"hiring_managers\" hm\n--   join \"dev\".\"employment_hero\".\"employees\" m on hm.member_id = m.uuid\n--   join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n--   join \"dev\".\"ats\".\"jobs_created\" j on hm.job_id = j.job_id\n--   where m.role not ilike 'owner'\n--   and m.role not ilike 'employer'\n--   and hm._fivetran_deleted ='f'\n--   and m.user_id is not null\n--   )\n--   ,\n--   people_managers as (\n--   select distinct o.country, m.user_uuid, o.uuid as org_uuid\n--   from \"dev\".\"postgres_public\".\"member_managers\" pm\n--   join \"dev\".\"employment_hero\".\"employees\" m on pm.manager_id = m.id\n--   join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n--   where m.role not ilike 'owner'\n--   and m.role not ilike 'employer'\n--   and m.user_id is not null\n--   and not pm._fivetran_deleted\n--   )\n--   ,\n--   security_groups as (\n--   select rp.key, coalesce(ra.member_id, tm.member_id) as member_id, r.is_affecting_all_employees, r.organisation_id\n--   from \"dev\".\"postgres_public\".\"security_roles\" r\n--   join \"dev\".\"postgres_public\".\"security_role_assignees\" ra on ra.security_role_id = r.id\n--   join \"dev\".\"postgres_public\".\"security_role_permissions\" rp on rp.security_role_id = r.id\n--   join \"dev\".\"postgres_public\".\"team_members\" tm on tm.team_id = ra.team_id\n--   where rp.key = 'security_permissions_recruitment_ats' and rp.use = 't'\n--   and not r._fivetran_deleted\n--   and not ra._fivetran_deleted\n--   and not rp._fivetran_deleted\n--   and not tm._fivetran_deleted\n--   )\n--   , \n\n--   tams as ( \n--   select distinct o.country, m.user_uuid, o.uuid as org_uuid\n--   from security_groups sg\n--   join \"dev\".\"employment_hero\".\"employees\" m on sg.member_id = m.id\n--   join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n--   where m.role not ilike 'owner'\n--   and m.role not ilike 'employer'\n--   and m.user_id is not null\n--   )\n\n\n-- select md5(cast(coalesce(cast(u.id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(e.organisation_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(e.created_at as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(eh.title as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id, u.id as user_id, u.uuid as user_uuid, u.email, e.organisation_id, e.created_at, eh.title as onboard_job_title\n--             from \"dev\".\"postgres_public\".\"users\"  u \n--             join \"dev\".\"employment_hero\".\"employees\" e on e.user_id = u.id\n--             join ehistory as eh on eh.member_id = e.id  \n--             and (e.created_at < e.termination_date or e.termination_date is null)\n-- where u.uuid = 'b0d3406e-48e4-461e-afa0-8724c1078c00'\n\n-- select md5(cast(coalesce(cast(b.user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.org_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.job_matched as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id\n-- , case when owners.user_uuid is not null then 'Owner'\n-- when admins.user_uuid is not null then 'Admin'\n-- when tams.user_uuid is not null then 'TAM'\n-- when hiring_managers.user_uuid is not null then 'Hiring Manager'\n-- when people_managers.user_uuid is not null then 'People Manager'\n-- else 'Other' end as User_Type,\n-- b.*, u.email\n-- , up.experience_job_titles\n-- , fsha.hired_at\n-- , os.onboarded_at\n-- , os.onboard_job_title\n-- , os.onboard_email\n-- from base b \n-- left join owners on b.user_uuid = owners.user_uuid and b.org_uuid = owners.org_uuid\n-- left join admins on b.user_uuid = admins.user_uuid and b.org_uuid = admins.org_uuid\n-- left join tams on b.user_uuid = tams.user_uuid and b.org_uuid = tams.org_uuid\n-- left join hiring_managers on b.user_uuid = hiring_managers.user_uuid and b.org_uuid = hiring_managers.org_uuid\n-- left join people_managers on b.user_uuid = people_managers.user_uuid and b.org_uuid = people_managers.org_uuid\n-- join \"dev\".\"postgres_public\".\"users\" u on b.user_uuid = u.uuid\n-- left join \"dev\".\"ats_public\".\"matching_profiles\" up on up.user_id = b.user_uuid\n-- left join hired_from_saved_hired_at fsha on fsha.user_uuid = b.user_uuid and fsha.org_uuid = b.org_uuid\n-- left join onboard_from_saved os on os.user_uuid = b.user_uuid and os.org_uuid = b.org_uuid\n-- where b.user_uuid = 'b0d3406e-48e4-461e-afa0-8724c1078c00'\n\nselect md5(cast(coalesce(cast(b.user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.org_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(b.job_matched as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id\n-- , case when owners.user_uuid is not null then 'Owner'\n-- when admins.user_uuid is not null then 'Admin'\n-- when tams.user_uuid is not null then 'TAM'\n-- when hiring_managers.user_uuid is not null then 'Hiring Manager'\n-- when people_managers.user_uuid is not null then 'People Manager'\n-- else 'Other' end as User_Type\n, b.user_uuid\n, b.org_uuid\n, b.country\n, b.org_city\n, b.org_latitude\n, b.org_longitude\n, b.industry\n, u.email as candidate_email\n, os.onboard_email\n, b.org_id\n, b.job_matched\n, up.experience_job_titles\n--, up.applied_job_titles \n--, up.preference_job_titles\n, b.first_shown_at\n, b.first_previewed_at\n, b.saved_or_shortlisted_at\n, b.shortlisted_at\n--, b.save_member_id\n--, b.shortlist_member_id\n, coalesce(fsha.hired_at, os.onboarded_at) as hired_at\n, os.onboarded_at\n, os.onboard_job_title\n, fb.votes as feedback_vote\n, fb.explanations as feedback_explanation\nfrom base b\n-- left join owners on b.user_uuid = owners.user_uuid and b.org_uuid = owners.org_uuid\n-- left join admins on b.user_uuid = admins.user_uuid and b.org_uuid = admins.org_uuid\n-- left join tams on b.user_uuid = tams.user_uuid and b.org_uuid = tams.org_uuid\n-- left join hiring_managers on b.user_uuid = hiring_managers.user_uuid and b.org_uuid = hiring_managers.org_uuid\n-- left join people_managers on b.user_uuid = people_managers.user_uuid and b.org_uuid = people_managers.org_uuid\njoin \"dev\".\"postgres_public\".\"users\" u on b.user_uuid = u.uuid\nleft join \"dev\".\"ats_public\".\"matching_profiles\" up on up.user_id = b.user_uuid\nleft join hired_from_saved_hired_at fsha on fsha.user_uuid = b.user_uuid and fsha.org_uuid = b.org_uuid\nleft join onboard_from_saved os on os.user_uuid = b.user_uuid and os.org_uuid = b.org_uuid\nleft join \"dev\".\"ats\".\"feedback\" fb on fb.user_uuid = b.user_uuid and fb.org_uuid = b.org_uuid and (fb.matched_job_title = '' or fb.matched_job_title = b.job_matched)", "relation_name": "\"dev\".\"ats\".\"smart_match_funnel\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.690119Z", "completed_at": "2024-02-04T15:20:58.708042Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.717406Z", "completed_at": "2024-02-04T15:20:58.717421Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04839611053466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_employees_member_id.9aa8681e36", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"ats\".\"smart_match_employees\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.702958Z", "completed_at": "2024-02-04T15:20:58.715845Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.729474Z", "completed_at": "2024-02-04T15:20:58.729488Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046247243881225586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_smart_match_employees_member_id.1d8687a39f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"smart_match_employees\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.718583Z", "completed_at": "2024-02-04T15:20:58.730664Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.741384Z", "completed_at": "2024-02-04T15:20:58.741397Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03758716583251953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_employers_org_uuid.7b8a9ac916", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect org_uuid\nfrom \"dev\".\"ats\".\"smart_match_employers\"\nwhere org_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.749755Z", "completed_at": "2024-02-04T15:20:58.765412Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.774447Z", "completed_at": "2024-02-04T15:20:58.774460Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04550647735595703, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_instapay_transactions_with_member_profile_transaction_id.0acd204cbc", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect transaction_id\nfrom \"dev\".\"ebenefits\".\"instapay_transactions_with_member_profile\"\nwhere transaction_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.759371Z", "completed_at": "2024-02-04T15:20:58.771852Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.785656Z", "completed_at": "2024-02-04T15:20:58.785669Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04570508003234863, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_instapay_transactions_with_member_profile_transaction_id.f9d2f5aecc", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    transaction_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"instapay_transactions_with_member_profile\"\nwhere transaction_id is not null\ngroup by transaction_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.775634Z", "completed_at": "2024-02-04T15:20:58.789598Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.799994Z", "completed_at": "2024-02-04T15:20:58.800008Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04316878318786621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_paysplit_members_aggregation", "compiled": true, "compiled_code": "\n\n\nselect \n    getdate()::date as date\n    , count(member_id) as paysplit_members\n    , count(case when has_wallet_account then 1 end) as paysplit_members_with_wallet\nfrom \n    \"dev\".\"ebenefits\".\"paysplit_members\"\n\n    where date >= (select max(date) from \"dev\".\"ebenefits\".\"paysplit_members_aggregation\")\n", "relation_name": "\"dev\".\"ebenefits\".\"paysplit_members_aggregation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.803936Z", "completed_at": "2024-02-04T15:20:58.814993Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.829251Z", "completed_at": "2024-02-04T15:20:58.829272Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.046965599060058594, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_paysplit_members_member_id.9e9b8fed44", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"ebenefits\".\"paysplit_members\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.816199Z", "completed_at": "2024-02-04T15:20:58.828037Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.843789Z", "completed_at": "2024-02-04T15:20:58.843805Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04901313781738281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_paysplit_members_member_id.5e7c029af4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"paysplit_members\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.832874Z", "completed_at": "2024-02-04T15:20:58.846308Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.857998Z", "completed_at": "2024-02-04T15:20:58.858011Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04494976997375488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.inclusive_job_titles", "compiled": true, "compiled_code": "with sample_count as (\n  select\n  processed_title\n  , count(distinct organisation_id) as orgs\n  , count(*) as employees\nfrom\n  \"dev\".\"salary_guide\".\"eh_paying_employee_job_titles\"\ngroup by  1\nhaving orgs > 4\nand employees > 9\n  )\n\nselect c.processed_title as base_title, c2.processed_title as prefix_title, null as suffix_title\nfrom (select processed_title from sample_count c where processed_title ilike '% %') c -- more than 1 word\njoin (select processed_title from sample_count c where processed_title ilike '% %') c2 on c2.processed_title ilike '% ' || c.processed_title || '%'\n\nunion\n\nselect c.processed_title as base_title, null as prefix_title, c2.processed_title as suffix_title\nfrom (select processed_title from sample_count c where processed_title ilike '% %') c  -- more than 1 word\njoin (select processed_title from sample_count c where processed_title ilike '% %') c2 on c2.processed_title ilike '%' || c.processed_title || ' %'\n\norder by base_title", "relation_name": "\"dev\".\"salary_guide\".\"inclusive_job_titles\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.861917Z", "completed_at": "2024-02-04T15:20:58.879657Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.886391Z", "completed_at": "2024-02-04T15:20:58.886404Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.044211626052856445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_eh_paying_employee_job_titles_member_id.6a23297546", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"salary_guide\".\"eh_paying_employee_job_titles\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.874564Z", "completed_at": "2024-02-04T15:20:58.887518Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.900945Z", "completed_at": "2024-02-04T15:20:58.900960Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04589676856994629, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_eh_paying_employee_job_titles_member_id.679b2f91bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"eh_paying_employee_job_titles\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.890168Z", "completed_at": "2024-02-04T15:20:58.902116Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.912563Z", "completed_at": "2024-02-04T15:20:58.912577Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.040949344635009766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employee_scorecard_absenteeism", "compiled": true, "compiled_code": "\n\nwith\n\tleave_details as (\n\t    select\n\t    \tlr.id\n\t      \t, lc.name as leave_name\n\t      \t, lc.organisation_id\n\t      \t, lr.member_id\n\t      \t, lr.start_date\n\t      \t, lr.end_date\n\t      \t, lr.total_units\n\t      \t, lr.unit_type\n\t      \t, case \n\t\t        when lr.unit_type = 'hours' then lr.total_units::float/8\n\t\t        when lr.unit_type = 'weeks' then lr.total_units*5\n\t\t        else lr.total_units::float\n\t\t        end as leave_days_by_units\n\t      \t, datediff(days, lr.start_date, lr.end_date)+1 as max_possible_leave\n\t      \t, case \n\t          \twhen leave_days_by_units>max_possible_leave then max_possible_leave\n\t          \telse leave_days_by_units\n\t        \tend as leave_in_days\n\t      \t, lr.comment\n\t      \t, coalesce(lr.approved, True) as approved\n\t    from\n\t      \t\"dev\".\"postgres_public\".\"leave_requests\" as lr\n\t      \tjoin \"dev\".\"postgres_public\".\"leave_categories\" as lc on\n\t        \tlr.leave_category_id = lc.id\n\t    where\n\t      \tnot lr._fivetran_deleted\n\t      \tand not lc._fivetran_deleted\n\t      \tand not lc.deleted\n\t      \tand lc.name !~* '.*(archive|Lieu|toil|DNU|Do Not Use|Maternity|Long Service Leave|holiday|voluntary|compassionate|bereavement).*'\n      \t\tand lc.name ~* '.*(sick|personal|carer|medical|emergency|absence).*'\n\t)\n\t, absent_rate as (\n\t    select\n\t      \tld.member_id\n\t      \t, case \n\t\t        when coalesce(\n\t\t        \tsum(\n\t\t        \t\tcase \n\t\t\t\t            when not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.approved then ld.leave_in_days\n\t\t\t\t            when e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.approved then ld.leave_in_days\n\t\t          \t\tend), 0)<0 then 0\n\t\t        when coalesce(\n\t\t        \tsum(\n\t\t        \t\tcase \n\t\t            \t\twhen not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.approved then ld.leave_in_days\n\t\t            \t\twhen e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.approved then ld.leave_in_days\n\t\t          \t\tend), 0)>260 then 260 \n\t\t        else coalesce(\n\t\t        \tsum(\n\t\t        \t\tcase \n\t\t            \t\twhen not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.approved then ld.leave_in_days\n\t\t           \t\t\twhen e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.approved then ld.leave_in_days\n\t\t          \t\tend), 0) end as total_leave_days_within_year\n\n\t      \t, (total_leave_days_within_year/260*100)::decimal(10,2) as absent_percentage\n\t    from \n\t      \tleave_details as ld\n\t\t    join \"dev\".\"employee_scorecard\".\"employee_scorecard_cohort\" as e on\n\t\t    \tld.member_id = e.member_id\n\t    group by 1\n\t)\n\nselect * from absent_rate", "relation_name": "\"dev\".\"employee_scorecard\".\"absenteeism\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.915201Z", "completed_at": "2024-02-04T15:20:58.927346Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.941420Z", "completed_at": "2024-02-04T15:20:58.941436Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04844975471496582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employee_scorecard_bradford_factor", "compiled": true, "compiled_code": "\n\nwith\n\tleave_details as (\n\t    select\n\t    \tlr.id\n\t      \t, lc.name as leave_name\n\t      \t, lc.organisation_id\n\t      \t, lr.member_id\n\t      \t, lr.start_date\n\t      \t, lr.end_date\n\t      \t, lr.total_units\n\t      \t, lr.unit_type\n\t      \t, case \n\t\t        when lr.unit_type = 'hours' then lr.total_units::float/8\n\t\t        when lr.unit_type = 'weeks' then lr.total_units*5\n\t\t        else lr.total_units::float\n\t\t        end as leave_days_by_units\n\t      \t, datediff(days, lr.start_date, lr.end_date)+1 as max_possible_leave\n\t      \t, case \n\t          \twhen leave_days_by_units>max_possible_leave then max_possible_leave\n\t          \telse leave_days_by_units\n\t        \tend as leave_in_days\n\t      \t, lr.comment\n\t      \t, coalesce(lr.approved, True) as approved\n\t      \t, case when (lr.approved or lr.approved is null) and leave_in_days>=0 then true else false end as leave_taken\n\t    from\n\t      \t\"dev\".\"postgres_public\".\"leave_requests\" as lr\n\t      \tjoin \"dev\".\"postgres_public\".\"leave_categories\" as lc on\n\t        \tlr.leave_category_id = lc.id\n\t    where\n\t      \tnot lr._fivetran_deleted\n\t      \tand not lc._fivetran_deleted\n\t      \tand not lc.deleted\n\t      \t-- and lc.name !~* '.*(Archive|DNU|Do Not Use).*'\n\t      \tand lc.name !~* '.*(archive|Lieu|toil|DNU|Do Not Use|Maternity|Long Service Leave|holiday|voluntary|compassionate|bereavement).*'\n      \t\tand lc.name ~* '.*(sick|personal|carer|medical|emergency|absence).*'\n\t)\n\t, bradford_score as (\n\t\tselect\n\t      \tld.member_id\n\t      \t, count(\n\t      \t\tcase\n\t            \twhen not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.leave_taken then ld.id\n\t              \twhen e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.leave_taken then ld.id\n\t            end) as frequency_within_year\n\n\t      \t, case \n\t\t        when coalesce(\n\t\t        \tsum(\n\t\t        \t\tcase \n\t\t\t\t            when not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.approved then ld.leave_in_days\n\t\t\t\t            when e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.approved then ld.leave_in_days\n\t\t          \t\tend), 0)<0 then 0\n\t\t        when coalesce(\n\t\t        \tsum(\n\t\t        \t\tcase \n\t\t            \t\twhen not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.approved then ld.leave_in_days\n\t\t            \t\twhen e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.approved then ld.leave_in_days\n\t\t          \t\tend), 0)>260 then 260 \n\t\t        else coalesce(\n\t\t        \tsum(\n\t\t        \t\tcase \n\t\t            \t\twhen not e.active and ld.start_date>=dateadd(days, -365, e.termination_date) and ld.end_date<=e.termination_date and ld.approved then ld.leave_in_days\n\t\t           \t\t\twhen e.active and ld.start_date>=dateadd(days, -365, getdate()) and ld.end_date<=getdate() and ld.approved then ld.leave_in_days\n\t\t          \t\tend), 0) end as total_leave_days_within_year\n\n\t      \t, POWER(frequency_within_year,2)*total_leave_days_within_year as bradford_score\n\t    from \n\t      \tleave_details as ld\n\t\t    join \"dev\".\"employee_scorecard\".\"employee_scorecard_cohort\" as e on\n\t\t    \tld.member_id = e.member_id\n\t    group by 1\n\t)\n\nselect * from bradford_score", "relation_name": "\"dev\".\"employee_scorecard\".\"bradford_factor\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.930133Z", "completed_at": "2024-02-04T15:20:58.942641Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.958587Z", "completed_at": "2024-02-04T15:20:58.958602Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04430222511291504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employee_scorecard_cohort_member_id.af4e9b3e4b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"employee_scorecard\".\"employee_scorecard_cohort\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.945523Z", "completed_at": "2024-02-04T15:20:58.961688Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:58.972800Z", "completed_at": "2024-02-04T15:20:58.972815Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04704713821411133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employee_scorecard_cohort_member_id.5ae1aed21c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employee_scorecard\".\"employee_scorecard_cohort\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.974068Z", "completed_at": "2024-02-04T15:20:58.986649Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.001279Z", "completed_at": "2024-02-04T15:20:59.001295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043608903884887695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_hero_v_au_fulltime_job_title_payslips", "compiled": true, "compiled_code": "with \nannual_pay as (\n    select member_id, organisation_id, industry, residential_state, avg(monthly_wages) * 12 as annual_pay\n    from (\n        select \"month\", member_id, organisation_id, industry, residential_state, monthly_wages, \n        ROW_NUMBER() OVER (PARTITION BY member_id ORDER BY \"month\") AS month_num,\n        ROW_NUMBER() OVER (PARTITION BY member_id ORDER BY \"month\" desc) AS month_desc_num\n        from  \"dev\".\"employment_hero\".\"au_employee_monthly_pay\" mp\n        where \"month\" < DATE_TRUNC('month', CURRENT_DATE)::date -- this month not complete\n        and work_country = 'AU'                                 -- only employees in AU\n    )\n    --exclude the first and last month for the employee unless it's the past month\n    where \"month\" >= DATEADD('month', -12, DATE_TRUNC('month', CURRENT_DATE))::date\n    and month_num != 1\n    and (month_desc_num != 1 or \"month\" = DATEADD('month', -1, DATE_TRUNC('month', CURRENT_DATE))::date)\n)\n\n, sample_salaries as (\n    select member_id, organisation_id, h.title, industry, residential_state, annual_pay as annual_salary\n  from annual_pay p\n  join \n      (select * from\n        \"dev\".\"postgres_public\".\"employment_histories\"\n      where\n        id in (\n          select\n            FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n          from\n            \"dev\".\"postgres_public\".\"employment_histories\"\n          where\n            not _fivetran_deleted\n        )\n    ) as h on m.id = h.member_id\n  where --active\n    --and o.pricing_tier != 'free'\n    --and (sv.currency = 'AUD' or sv.currency is null)\n    --and o.country = 'AU'\n    employment_type='Full-time'\n    and h.title is not null and h.title!~ '^$' and len(h.title) !=1\n    and annual_pay > 20000\n    and annual_pay < 1000000\n)\n\n, t_cleansed as (\n    select title,  \n-- remove ending words   \ntrim(regexp_replace(trim(regexp_replace(trim(regexp_replace(trim(regexp_replace(         \n    trim(replace(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(replace(trim(lower(\n        -- abbreviations\n        trim(job_title_abbreviation_expand( \n            -- replace & with and\n            trim(replace(replace(\n                -- replace + with and\n                trim(replace(replace(\n                    -- 5. replace & with and\n                    trim(replace(replace(\n                        -- 4. replace ! with of\n                        trim(replace(replace(replace(replace(replace(replace(replace(\n                            -- 3. trim ending special characters\n                            trim(trim('&' from trim(trim('/' from trim(trim(':' from trim(trim('|' from trim(trim('-' from trim(trim('|' FROM ( \n                                -- 2. remove state\n                                trim(REGEXP_REPLACE(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(lower(   \n                                    -- 1. remove content inside bracket\n                                    trim(REGEXP_REPLACE(title, '\\\\([^)]*\\\\)'))\n                                ), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' '), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' ')), '-$'))\n                            )))))))))))))\n                        , ' - ', ' of '), ' : ', ' of '), ':', ' of '), ' | ', ' of '), '|', ' of '), ', ', ' of '), ',', ' of '))\n                    , ' / ', ' and '), '/', ' and '))\n                , ' + ', ' and '), '+', 'and'))\n            , ' & ', ' and '), '&', ' and '))\n        ))\n    )), ' the ', ' '), '^[-/]', ''), '[-/]$', '')), '  ', ' '))\n, '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', ''))\n as t_title,\n    organisation_id, industry, residential_state, member_id, annual_salary\n    from sample_salaries\n)\n\n, t_common as (\n    select t.title, trim(INITCAP(coalesce(m.title_common, t.t_title))) as common_title,\n    organisation_id, industry, residential_state, member_id, annual_salary\n    from t_cleansed t \n    left join \"dev\".\"csv\".\"more_common_job_titles\" m on t.t_title = m.title_original\n)\n  \nselect *, \ncase when stddev(annual_salary) over (partition by common_title) !=0 then (annual_salary-avg(annual_salary) over (partition by common_title)) / (stddev(annual_salary) over (partition by common_title)) else null end as z_score_title_salary,\nntile(3) over (partition by common_title, organisation_id order by annual_salary) as ntile_3_by_org,\nntile(3) over (partition by common_title, organisation_id, residential_state order by annual_salary) as ntile_3_by_org_state\nfrom t_common", "relation_name": "\"dev\".\"salary_guide\".\"employment_hero_v_au_fulltime_job_title_payslips\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:58.989409Z", "completed_at": "2024-02-04T15:20:59.002590Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.017481Z", "completed_at": "2024-02-04T15:20:59.017497Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04387068748474121, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_eh_kp_combined_hours", "compiled": true, "compiled_code": "\n\nwith    \n    business_organisation_overlap as (\n        select distinct organisation_id, pr.business_id as kp_business_id\n        from\n            (\n                select epa.organisation_id, external_id\n                from  \"dev\".\"employment_hero\".\"_v_last_connected_payroll\" as epa\n                join \"dev\".\"postgres_public\".\"payroll_infos\" pi on payroll_info_id = pi.id\n                where epa.type = 'KeypayAuth' and not pi._fivetran_deleted\n            ) as o\n        join\n            \"dev\".\"keypay\".\"_t_pay_run_total_monthly_summary\" pr on pr.business_id = o.external_id\n    ),\n    kp_hours as (\n        select\n            month,\n            business_id,\n            employee_id,\n            residential_state,\n            gender,\n            employment_type,\n            industry,\n            total_employees,\n            age,\n            sum(monthly_hours) as monthly_hours\n        from \"dev\".\"employment_index\".\"v_median_hours_worked_kp\"\n\n        \n\n        group by 1, 2, 3, 4, 5, 6, 7, 8, 9\n    ),\n    combined_hours as (\n        select\n            month,\n            member_id,\n            organisation_id::bigint,\n            gender,\n            industry,\n            residential_state,\n            employment_type,\n            total_employees,\n            age,\n            monthly_hours\n        from \"dev\".\"employment_hero\".\"au_employee_monthly_pay\" p\n        where\n            organisation_id\n            not in (select organisation_id from business_organisation_overlap)\n            \n            \n        union\n        select\n            month,\n            employee_id as \"member_id\",\n            business_id::bigint as organisation_id,\n            gender,\n            industry,\n            residential_state,\n            employment_type,\n            total_employees,\n            age,\n            monthly_hours\n        from kp_hours\n    )\nselect *\nfrom\n    combined_hours\n    -- select month,\n    -- gender,\n    -- count(distinct organisation_id), \n    -- count(organisation_id)\n    -- from all_salary\n    -- where month >= '2019-01-01'\n    -- group by 1, 2", "relation_name": "\"dev\".\"employment_index\".\"eh_kp_combined_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.008980Z", "completed_at": "2024-02-04T15:20:59.020828Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.031643Z", "completed_at": "2024-02-04T15:20:59.031657Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.042496442794799805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_employee_status_by_org_member_id.08a4de9246", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"employment_hero\".\"employee_status_by_org\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.032848Z", "completed_at": "2024-02-04T15:20:59.045528Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.060002Z", "completed_at": "2024-02-04T15:20:59.060017Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04317522048950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_employee_status_by_org_member_id.106a690feb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"employee_status_by_org\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.048435Z", "completed_at": "2024-02-04T15:20:59.061270Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.077753Z", "completed_at": "2024-02-04T15:20:59.077769Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.044591665267944336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.proserv_guided_hr_milestones", "compiled": true, "compiled_code": "\n\nwith account as (\n    select \n    distinct a.id as account_id, \n    a.name as account_name, \n    ipc.name as professional_service_name,\n    o.org_id_c as org_id, \n    eho.sub_name as eh_org_subplan,\n    --o.name as org_name, -- some orgs on SF don't have org ID\n    opp.id as opp_id,\n    opp.close_date, \n    nullif(opp.opportunity_employees_c, 0) as opportunity_employees, \n    round(opportunity_employees_c*0.7,0) as seventy_percent_opp_emps,\n    ipc.service_offering_c,\n    ipc.project_started_date_c,\n    ipc.expected_go_live_c,\n    ipc.project_completion_date_c,\n    ipc.closed_status_c\n    --, p_2.name as product_name\n    from \"dev\".\"salesforce\".\"account\" as a\n    join \"dev\".\"salesforce\".\"implementation_project_c\" as ipc on ipc.account_c = a.id        \n    left join \"dev\".\"salesforce\".\"eh_org_c\" as o on o.professional_service_project_c is not null and ipc.id = o.professional_service_project_c and not o.is_deleted\n    left join \"dev\".\"employment_hero\".\"organisations\" as eho on o.org_id_c = eho.id\n    left join \"dev\".\"salesforce\".\"opportunity\" as opp on ipc.opportunity_c is not null and ipc.opportunity_c = opp.id and not opp.is_deleted and opp.stage_name = 'Won'\n    where not a.is_deleted\n        and not ipc.is_deleted\n        and ipc.service_offering_c ~* '(guided hr|combined journey)'\n        --and (ipc.stage_c != 'Cancelled' or ipc.stage_c is null)\n        --and (a.customer_stage_c !~ '(Churned|Lost Before Activated)' or a.customer_stage_c is null)\n)\n\n, employee_status as (\n    select organisation_id\n    , sum(1) as employees_created\n    , sum(case when invited_at is not null then 1 else 0 end) as employees_invited\n    , sum(case when activated_at is not null then 1 else 0 end) as employees_activated\n    , min(case when create_order >= seventy_percent_opp_emps then created_at end) as hr_70pc_employees_created_at\n    , min(case when invite_order >= seventy_percent_opp_emps then invited_at end) as hr_70pc_employees_invited_at\n    , min(case when activate_order >= seventy_percent_opp_emps then activated_at end) as hr_70pc_employees_activated_at\n    from account as a\n    join \"dev\".\"employment_hero\".\"employee_status_by_org\" eo on eo.organisation_id = a.org_id    \n    group by 1\n)\nselect \n    md5(cast(coalesce(cast(a.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(a.org_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(a.professional_service_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id    \n    , a.account_id\n    , a.account_name\n    , a.service_offering_c\n    , a.professional_service_name\n    , a.project_started_date_c as project_started_date\n    , a.expected_go_live_c as expected_go_live\n    , a.project_completion_date_c as project_completion_date\n    , a.closed_status_c as closed_status\n    , a.org_id as eh_org_id\n    , a.eh_org_subplan\n    , a.opportunity_employees\n    , eo.employees_created\n    , eo.employees_invited\n    , eo.employees_activated\n    , eo.hr_70pc_employees_created_at\n    , eo.hr_70pc_employees_invited_at\n    , eo.hr_70pc_employees_activated_at\n    , gmo.first_announcement_at\n    , gmo.first_company_values_created_at\n    , gmo.first_custom_survey_at\n    , gmo.first_happiness_survey_at\n    , gmo.first_document_uploaded_at\n    , gmo.first_certification_created_at\n    , gmo.first_policy_added_at\n    , gmo.first_onboarding_checklist_created_at\n    , gmo.first_performance_review_created_at\n    , gmo.first_asset_created_at\n    , gmo.first_coaching_session_created_at\n    , gmo.first_okr_created_at\n    , gmo.first_custom_security_group_created_at\nfrom account as a\nleft join employee_status eo on a.org_id is not null and eo.organisation_id = a.org_id\nleft join \"dev\".\"employment_hero\".\"guided_milestones_by_org\" gmo on a.org_id is not null and gmo.organisation_id = a.org_id", "relation_name": "\"dev\".\"proserv\".\"guided_hr_milestones\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.068872Z", "completed_at": "2024-02-04T15:20:59.081855Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.096251Z", "completed_at": "2024-02-04T15:20:59.096266Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04197430610656738, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_guided_milestones_by_org_organisation_id.99f2ea772f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organisation_id\nfrom \"dev\".\"employment_hero\".\"guided_milestones_by_org\"\nwhere organisation_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.090610Z", "completed_at": "2024-02-04T15:20:59.103342Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.116902Z", "completed_at": "2024-02-04T15:20:59.116916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04170393943786621, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_guided_milestones_by_org_organisation_id.c17025329e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    organisation_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"guided_milestones_by_org\"\nwhere organisation_id is not null\ngroup by organisation_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.107206Z", "completed_at": "2024-02-04T15:20:59.119253Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.132777Z", "completed_at": "2024-02-04T15:20:59.132791Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04069876670837402, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_v_au_fulltime_job_title_salary_member_id.b982c05d02", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"salary_guide\".\"employment_hero_v_au_fulltime_job_title_salary\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.123432Z", "completed_at": "2024-02-04T15:20:59.133926Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.144291Z", "completed_at": "2024-02-04T15:20:59.144305Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03945612907409668, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_v_au_fulltime_job_title_salary_member_id.d746535943", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"employment_hero_v_au_fulltime_job_title_salary\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.146931Z", "completed_at": "2024-02-04T15:20:59.158425Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.170347Z", "completed_at": "2024-02-04T15:20:59.170360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.043977975845336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_pca_age_group", "compiled": true, "compiled_code": "\n\nwith\n    combined_pca as (\n        select\n            month,\n            member_id,\n            organisation_id,\n            gender,\n            industry,\n            residential_state,\n            employment_type,\n            category,\n            net_earnings,\n            age,\n            case\n                when age < 18\n                then 'Under 18'\n                when age between 18 and 24\n                then '18-24 year olds'\n                when age between 25 and 64\n                then '25-64 year olds'\n                when age > 64\n                then '65+ year olds'\n            end as age_group\n        from \"dev\".\"employment_index\".\"eh_pay_category\" p\n    ),\n    age_group_net_earnings as (\n        select distinct age_group, category, month,\n        median(net_earnings) over (\n            partition by age_group, category, month\n        ) as monthly_net_earnings\n        from combined_pca\n        where age_group is not null and category is not null\n        ---group by 1, 2, 3, 4\n        order by age_group, category, month\n    ),\n    monthly_change as (\n        select\n            age_group,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings) over (\n                partition by age_group, category order by age_group, category, month\n            ) as previous_month_lag,\n            case\n                when monthly_net_earnings = 0 or previous_month_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as net_earnings_growth_monthly\n        from age_group_net_earnings\n        order by age_group, category, month\n    ),\n    quarterly_change as (\n    select\n            age_group,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 3) over (\n                partition by age_group, category order by age_group, category, month\n            ) as previous_quarter_lag,\n            case\n                when monthly_net_earnings = 0 or previous_quarter_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as net_earnings_growth_quarterly\n        from age_group_net_earnings\n        order by age_group, category, month\n    ),\n    semiannual_change as (\n    select\n            age_group,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 6) over (\n                partition by age_group, category order by age_group, category, month\n            ) as previous_semiannual_lag,\n            case\n                when monthly_net_earnings = 0 or previous_semiannual_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as net_earnings_growth_semiannual\n        from age_group_net_earnings\n        order by age_group, category, month\n    ),\n    yearly_change as (\n    select\n            age_group,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 12) over (\n                partition by age_group, category order by age_group, category, month\n            ) as previous_yearly_lag,\n            case\n                when monthly_net_earnings = 0 or previous_yearly_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as net_earnings_growth_yearly\n        from age_group_net_earnings\n        order by age_group, category, month\n    ),\n        min_sample_size as (\n        select\n            age_group,\n            month,\n            category,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_pca\n        group by 1, 2, 3\n        having business_sample > 150\n    )\nselect\n    m.age_group,\n    m.category,\n    m.month,\n    m.monthly_net_earnings,\n    previous_month_lag,\n    net_earnings_growth_monthly,\n    previous_quarter_lag,\n    net_earnings_growth_quarterly,\n    previous_semiannual_lag,\n    net_earnings_growth_semiannual,\n    previous_yearly_lag,\n    net_earnings_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on (m.month = q.month and m.age_group = q.age_group and m.category = q.category)\nleft join semiannual_change s on (m.month = s.month and m.age_group = s.age_group and m.category = s.category)\nleft join yearly_change y on (m.month = y.month and m.age_group = y.age_group and m.category = y.category)\n--join min_sample_size ms on (m.month = ms.month and m.age_group = ms.age_group and m.category = ms.category)\norder by m.age_group, m.category, m.month LIMIT 10000", "relation_name": "\"dev\".\"employment_index\".\"pca_age_group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.161063Z", "completed_at": "2024-02-04T15:20:59.171500Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.186808Z", "completed_at": "2024-02-04T15:20:59.186822Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.040451765060424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_pca_aus", "compiled": true, "compiled_code": "\n\nwith\n    combined_pca as (\n        select *\n        from \"dev\".\"employment_index\".\"eh_pay_category\" p\n    ),\n    overall_net_earnings as (\n        select distinct\n            category,\n            month,\n            median(net_earnings) over (\n                partition by category, month\n            ) as monthly_net_earnings\n        from combined_pca\n        where category is not null\n        order by category, month\n    )\nselect * from overall_net_earnings", "relation_name": "\"dev\".\"employment_index\".\"pca_aus\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.174056Z", "completed_at": "2024-02-04T15:20:59.185593Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.196152Z", "completed_at": "2024-02-04T15:20:59.196166Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0394899845123291, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_pca_company_size", "compiled": true, "compiled_code": "\n\nwith\n    combined_pca as (\n        select\n            month,\n            member_id,\n            organisation_id,\n            gender,\n            industry,\n            residential_state,\n            employment_type,\n            category,\n            net_earnings,\n            age,\n            case\n                when total_employees < 20\n                then '1-19'\n                when total_employees between 19 and 200\n                then '20-199'\n                when total_employees > 200\n                then '200+'\n            end as company_size\n        from \"dev\".\"employment_index\".\"eh_pay_category\" p\n    ),\n    company_size_net_earnings as (\n        select distinct\n            company_size,\n            category,\n            month,\n            -- sum(net_earnings) as monthly_net_earnings\n            median(net_earnings) over (\n                partition by company_size, category, month\n            ) as monthly_net_earnings\n        from combined_pca\n        where company_size is not null and category is not null\n        order by company_size, category, month\n    ),\n    monthly_change as (\n        select\n            company_size,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings) over (\n                partition by company_size, category\n                order by company_size, category, month\n            ) as previous_month_lag,\n            case\n                when monthly_net_earnings = 0 or previous_month_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as net_earnings_growth_monthly\n        from company_size_net_earnings\n        order by company_size, category, month\n    ),\n    quarterly_change as (\n        select\n\n            company_size,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 3) over (\n                partition by company_size, category\n                order by company_size, category, month\n            ) as previous_quarter_lag,\n            case\n                when monthly_net_earnings = 0 or previous_quarter_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as net_earnings_growth_quarterly\n        from company_size_net_earnings\n        order by company_size, category, month\n    ),\n    semiannual_change as (\n        select\n\n            company_size,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 6) over (\n                partition by company_size, category\n                order by company_size, category, month\n            ) as previous_semiannual_lag,\n            case\n                when monthly_net_earnings = 0 or previous_semiannual_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as net_earnings_growth_semiannual\n        from company_size_net_earnings\n        order by company_size, category, month\n    ),\n    yearly_change as (\n        select\n\n            company_size,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 12) over (\n                partition by company_size, category\n                order by company_size, category, month\n            ) as previous_yearly_lag,\n            case\n                when monthly_net_earnings = 0 or previous_yearly_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as net_earnings_growth_yearly\n        from company_size_net_earnings\n        order by company_size, category, month\n    ),\n    min_sample_size as (\n        select\n            company_size,\n            month,\n            category,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_pca\n        group by 1, 2, 3\n        having business_sample > 150\n    )\n\nselect\n    m.company_size,\n    m.category,\n    m.month,\n    m.monthly_net_earnings,\n    previous_month_lag,\n    net_earnings_growth_monthly,\n    previous_quarter_lag,\n    net_earnings_growth_quarterly,\n    previous_semiannual_lag,\n    net_earnings_growth_semiannual,\n    previous_yearly_lag,\n    net_earnings_growth_yearly\nfrom monthly_change m\nleft join\n    quarterly_change q\n    on (\n        m.month = q.month\n        and m.company_size = q.company_size\n        and m.category = q.category\n    )\nleft join\n    semiannual_change s\n    on (\n        m.month = s.month\n        and m.company_size = s.company_size\n        and m.category = s.category\n    )\nleft join\n    yearly_change y\n    on (\n        m.month = y.month\n        and m.company_size = y.company_size\n        and m.category = y.category\n    )\n-- join min_sample_size ms on (m.month = ms.month and m.company_size = ms.company_size\n-- and m.category = ms.category)\norder by m.company_size, m.category, m.month", "relation_name": "\"dev\".\"employment_index\".\"pca_company_size\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.198590Z", "completed_at": "2024-02-04T15:20:59.209057Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.222973Z", "completed_at": "2024-02-04T15:20:59.222987Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0417180061340332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_pca_industry", "compiled": true, "compiled_code": "\n\nwith\n    combined_pca as (\n        select *\n        from \"dev\".\"employment_index\".\"eh_pay_category\" p\n    ),\n    industry_net_earnings as (\n        select distinct industry, category, month, \n        median(net_earnings) over (\n            partition by industry, category, month\n        ) as monthly_net_earnings\n        from combined_pca\n        where industry is not null and category is not null\n        order by industry, category, month\n    ),\n    monthly_change as (\n        select\n            industry,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings) over (\n                partition by industry, category order by industry, category, month\n            ) as previous_month_lag,\n            case\n                when monthly_net_earnings = 0 or previous_month_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as net_earnings_growth_monthly\n        from industry_net_earnings\n        order by industry, category, month\n    ),\n    quarterly_change as (\n    select\n            industry,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 3) over (\n                partition by industry, category order by industry, category, month\n            ) as previous_quarter_lag,\n            case\n                when monthly_net_earnings = 0 or previous_quarter_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as net_earnings_growth_quarterly\n        from industry_net_earnings\n        order by industry, category, month\n    ),\n    semiannual_change as (\n    select\n            industry,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 6) over (\n                partition by industry, category order by industry, category, month\n            ) as previous_semiannual_lag,\n            case\n                when monthly_net_earnings = 0 or previous_semiannual_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as net_earnings_growth_semiannual\n        from industry_net_earnings\n        order by industry, category, month\n    ),\n    yearly_change as (\n    select\n            industry,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 12) over (\n                partition by industry, category order by industry, category, month\n            ) as previous_yearly_lag,\n            case\n                when monthly_net_earnings = 0 or previous_yearly_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as net_earnings_growth_yearly\n        from industry_net_earnings\n        order by industry, category, month\n    ),\n        min_sample_size as (\n        select\n            industry,\n            month,\n            category,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_pca\n        group by 1, 2, 3\n        having business_sample > 150\n    )\nselect\n    m.industry,\n    m.category,\n    m.month,\n    m.monthly_net_earnings,\n    previous_month_lag,\n    net_earnings_growth_monthly,\n    previous_quarter_lag,\n    net_earnings_growth_quarterly,\n    previous_semiannual_lag,\n    net_earnings_growth_semiannual,\n    previous_yearly_lag,\n    net_earnings_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on (m.month = q.month and m.industry = q.industry and m.category = q.category)\nleft join semiannual_change s on (m.month = s.month and m.industry = s.industry and m.category = s.category)\nleft join yearly_change y on (m.month = y.month and m.industry = y.industry and m.category = y.category)\n--join min_sample_size ms on (m.month = ms.month and m.industry = ms.industry and m.category = ms.category)\norder by m.industry, m.category, m.month", "relation_name": "\"dev\".\"employment_index\".\"pca_industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.216682Z", "completed_at": "2024-02-04T15:20:59.233686Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.241882Z", "completed_at": "2024-02-04T15:20:59.241896Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0405421257019043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_pca_state", "compiled": true, "compiled_code": "\n\nwith\n    business_organisation_overlap as (\n        select distinct organisation_id, pr.business_id as kp_business_id\n        from\n            (\n                select epa.organisation_id, external_id\n                from \"dev\".\"employment_hero\".\"_v_last_connected_payroll\" as epa\n                join \"dev\".\"postgres_public\".\"payroll_infos\" pi on payroll_info_id = pi.id\n                where epa.type = 'KeypayAuth' and not pi._fivetran_deleted\n            ) as o\n        join\n            \"dev\".\"keypay\".\"_t_pay_run_total_monthly_summary\" pr on pr.business_id = o.external_id\n    ),\n\n    combined_pca as (\n        select *\n        from \"dev\".\"employment_index\".\"eh_pay_category\" p\n    ),\n    residential_state_net_earnings as (\n        select distinct\n            residential_state,\n            category,\n            month,\n            median(net_earnings) over (\n                partition by residential_state, category, month\n            ) as monthly_net_earnings\n        from combined_pca\n        where residential_state is not null and category is not null\n        order by residential_state, category, month\n    ),\n    monthly_change as (\n        select\n            residential_state,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings) over (\n                partition by residential_state, category\n                order by residential_state, category, month\n            ) as previous_month_lag,\n            case\n                when monthly_net_earnings = 0 or previous_month_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as net_earnings_growth_monthly\n        from residential_state_net_earnings\n        order by residential_state, category, month\n    ),\n    quarterly_change as (\n        select\n            residential_state,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 3) over (\n                partition by residential_state, category\n                order by residential_state, category, month\n            ) as previous_quarter_lag,\n            case\n                when monthly_net_earnings = 0 or previous_quarter_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as net_earnings_growth_quarterly\n        from residential_state_net_earnings\n        order by residential_state, category, month\n    ),\n    semiannual_change as (\n        select\n            residential_state,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 6) over (\n                partition by residential_state, category\n                order by residential_state, category, month\n            ) as previous_semiannual_lag,\n            case\n                when monthly_net_earnings = 0 or previous_semiannual_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as net_earnings_growth_semiannual\n        from residential_state_net_earnings\n        order by residential_state, category, month\n    ),\n    yearly_change as (\n        select\n            residential_state,\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 12) over (\n                partition by residential_state, category\n                order by residential_state, category, month\n            ) as previous_yearly_lag,\n            case\n                when monthly_net_earnings = 0 or previous_yearly_lag = 0\n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as net_earnings_growth_yearly\n        from residential_state_net_earnings\n        order by residential_state, category, month\n    ),\n    min_sample_size as (\n        select\n            residential_state,\n            month,\n            category,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_pca\n        group by 1, 2, 3\n        having business_sample > 150\n    )\nselect\n    m.residential_state,\n    m.category,\n    m.month,\n    m.monthly_net_earnings,\n    previous_month_lag,\n    net_earnings_growth_monthly,\n    previous_quarter_lag,\n    net_earnings_growth_quarterly,\n    previous_semiannual_lag,\n    net_earnings_growth_semiannual,\n    previous_yearly_lag,\n    net_earnings_growth_yearly\nfrom monthly_change m\nleft join\n    quarterly_change q\n    on (\n        m.month = q.month\n        and m.residential_state = q.residential_state\n        and m.category = q.category\n    )\nleft join\n    semiannual_change s\n    on (\n        m.month = s.month\n        and m.residential_state = s.residential_state\n        and m.category = s.category\n    )\nleft join\n    yearly_change y\n    on (\n        m.month = y.month\n        and m.residential_state = y.residential_state\n        and m.category = y.category\n    )\n-- join min_sample_size ms on (m.month = ms.month and m.residential_state =\n-- ms.residential_state and m.category = ms.category)\norder by m.residential_state, m.category, m.month", "relation_name": "\"dev\".\"employment_index\".\"pca_state\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.225751Z", "completed_at": "2024-02-04T15:20:59.237717Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.248176Z", "completed_at": "2024-02-04T15:20:59.248189Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04482316970825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_eh_pay_category_member_id.2973d74d1a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"employment_index\".\"eh_pay_category\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.250753Z", "completed_at": "2024-02-04T15:20:59.261895Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.277260Z", "completed_at": "2024-02-04T15:20:59.277273Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.041068077087402344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_eh_pay_category_month.2da0cf97ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"dev\".\"employment_index\".\"eh_pay_category\"\nwhere month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.271532Z", "completed_at": "2024-02-04T15:20:59.287998Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.299515Z", "completed_at": "2024-02-04T15:20:59.299530Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04431653022766113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_marketing_internal_eh_employee_growth_country__work_country_month_.65da5398a6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (work_country || month)\nfrom \"dev\".\"marketing\".\"internal_eh_employee_growth_country\"\nwhere (work_country || month) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.282884Z", "completed_at": "2024-02-04T15:20:59.298344Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.313192Z", "completed_at": "2024-02-04T15:20:59.313205Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.050462961196899414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_marketing_internal_eh_employee_growth_country__work_country_month_.aa621bdcf5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (work_country || month) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"marketing\".\"internal_eh_employee_growth_country\"\nwhere (work_country || month) is not null\ngroup by (work_country || month)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.306120Z", "completed_at": "2024-02-04T15:20:59.317478Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.328382Z", "completed_at": "2024-02-04T15:20:59.328394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04140162467956543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_sales_organic_leads_lead_id.8ac769648b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect lead_id\nfrom \"dev\".\"sales\".\"organic_leads\"\nwhere lead_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.330911Z", "completed_at": "2024-02-04T15:20:59.349392Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.357141Z", "completed_at": "2024-02-04T15:20:59.357156Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04735684394836426, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_monthly_onboardings_industry__industry_onboarded_month_country_.1e836bdc57", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (industry || onboarded_month || country)\nfrom \"dev\".\"tableau\".\"monthly_onboardings_industry\"\nwhere (industry || onboarded_month || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.343815Z", "completed_at": "2024-02-04T15:20:59.354719Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.369333Z", "completed_at": "2024-02-04T15:20:59.369348Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04516911506652832, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_monthly_onboardings_industry__industry_onboarded_month_country_.6d684964a7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (industry || onboarded_month || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"monthly_onboardings_industry\"\nwhere (industry || onboarded_month || country) is not null\ngroup by (industry || onboarded_month || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:25.201282Z", "completed_at": "2024-02-04T15:20:59.359434Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.376032Z", "completed_at": "2024-02-04T15:20:59.376046Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 34.19961476325989, "adapter_response": {}, "message": null, "failures": null, "unique_id": "operation.dbt_project.dbt_project-on-run-end-9", "compiled": true, "compiled_code": "\n        \n        \n            \n            \n                \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                    \n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_marketing_users_from_snapshot_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_marketing_users_from_snapshot_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_marketing_users_snapshot_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_marketing_users_snapshot_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_swag_jobs_events_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then user_email -- Skip if current user is admin user.\n    else md5(user_email) \n  end \n    );\n                    alter masking policy dev_swag_jobs_events_user_email_character_varying_no_mask using (user_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_announcement_api_production_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_announcement_api_production_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_announcement_api_production_public_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_announcement_api_production_public_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_ats_public_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_ats_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_employee_milestones_public_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_employee_milestones_public_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_graduate_product_owners_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_graduate_product_owners_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_meeting_management_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_meeting_management_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_meeting_management_public_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_meeting_management_public_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_nominations_public_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_nominations_public_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_nominations_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_nominations_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_performance_evaluation_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_performance_evaluation_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_performance_evaluation_public_members_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_performance_evaluation_public_members_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_postgres_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_members_home_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then home_phone -- Skip if current user is admin user.\n    else md5(home_phone) \n  end \n    );\n                    alter masking policy dev_postgres_public_members_home_phone_character_varying_no_mask using (home_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_members_personal_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then personal_email -- Skip if current user is admin user.\n    else md5(personal_email) \n  end \n    );\n                    alter masking policy dev_postgres_public_members_personal_email_character_varying_no_mask using (personal_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_members_passport_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then passport_number -- Skip if current user is admin user.\n    else md5(passport_number) \n  end \n    );\n                    alter masking policy dev_postgres_public_members_passport_number_character_varying_no_mask using (passport_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_survey_services_public_members_company_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_email -- Skip if current user is admin user.\n    else md5(company_email) \n  end \n    );\n                    alter masking policy dev_survey_services_public_members_company_email_character_varying_no_mask using (company_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_archived_partner_salesforce_contact_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_archived_partner_salesforce_contact_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_archived_partner_salesforce_contact_mobile_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then mobile_phone -- Skip if current user is admin user.\n    else md5(mobile_phone) \n  end \n    );\n                    alter masking policy dev_archived_partner_salesforce_contact_mobile_phone_character_varying_no_mask using (mobile_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_archived_partner_salesforce_contact_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_archived_partner_salesforce_contact_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_mobile_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then mobile_phone -- Skip if current user is admin user.\n    else md5(mobile_phone) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_mobile_phone_character_varying_no_mask using (mobile_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_home_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then home_phone -- Skip if current user is admin user.\n    else md5(home_phone) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_home_phone_character_varying_no_mask using (home_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_address_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address_c -- Skip if current user is admin user.\n    else md5(address_c) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_address_c_character_varying_no_mask using (address_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_direct_phone_line_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then direct_phone_line_c -- Skip if current user is admin user.\n    else md5(direct_phone_line_c) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_direct_phone_line_c_character_varying_no_mask using (direct_phone_line_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_original_email_mkto_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then original_email_mkto_c -- Skip if current user is admin user.\n    else md5(original_email_mkto_c) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_original_email_mkto_c_character_varying_no_mask using (original_email_mkto_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_referee_s_email_address_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then referee_s_email_address_c -- Skip if current user is admin user.\n    else md5(referee_s_email_address_c) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_referee_s_email_address_c_character_varying_no_mask using (referee_s_email_address_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_supplementary_email_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then supplementary_email_c -- Skip if current user is admin user.\n    else md5(supplementary_email_c) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_supplementary_email_c_character_varying_no_mask using (supplementary_email_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_contact_zi_direct_phone_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then zi_direct_phone_c -- Skip if current user is admin user.\n    else md5(zi_direct_phone_c) \n  end \n    );\n                    alter masking policy dev_salesforce_contact_zi_direct_phone_c_character_varying_no_mask using (zi_direct_phone_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_contact_address_1_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address_1 -- Skip if current user is admin user.\n    else md5(address_1) \n  end \n    );\n                    alter masking policy dev_zuora_contact_address_1_character_varying_no_mask using (address_1); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_contact_address_2_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address_2 -- Skip if current user is admin user.\n    else md5(address_2) \n  end \n    );\n                    alter masking policy dev_zuora_contact_address_2_character_varying_no_mask using (address_2); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_contact_mobile_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then mobile_phone -- Skip if current user is admin user.\n    else md5(mobile_phone) \n  end \n    );\n                    alter masking policy dev_zuora_contact_mobile_phone_character_varying_no_mask using (mobile_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_contact_personal_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then personal_email -- Skip if current user is admin user.\n    else md5(personal_email) \n  end \n    );\n                    alter masking policy dev_zuora_contact_personal_email_character_varying_no_mask using (personal_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_contact_work_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then work_email -- Skip if current user is admin user.\n    else md5(work_email) \n  end \n    );\n                    alter masking policy dev_zuora_contact_work_email_character_varying_no_mask using (work_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_contact_work_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then work_phone -- Skip if current user is admin user.\n    else md5(work_phone) \n  end \n    );\n                    alter masking policy dev_zuora_contact_work_phone_character_varying_no_mask using (work_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_account_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_salesforce_account_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_account_zi_company_phone_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then zi_company_phone_c -- Skip if current user is admin user.\n    else md5(zi_company_phone_c) \n  end \n    );\n                    alter masking policy dev_salesforce_account_zi_company_phone_c_character_varying_no_mask using (zi_company_phone_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_account_seek_account_manager_email_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then seek_account_manager_email_c -- Skip if current user is admin user.\n    else md5(seek_account_manager_email_c) \n  end \n    );\n                    alter masking policy dev_salesforce_account_seek_account_manager_email_c_character_varying_no_mask using (seek_account_manager_email_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_account_additional_email_addresses_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then additional_email_addresses -- Skip if current user is admin user.\n    else md5(additional_email_addresses) \n  end \n    );\n                    alter masking policy dev_zuora_account_additional_email_addresses_character_varying_no_mask using (additional_email_addresses); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_task_opportunity_manager_email_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then opportunity_manager_email_c -- Skip if current user is admin user.\n    else md5(opportunity_manager_email_c) \n  end \n    );\n                    alter masking policy dev_salesforce_task_opportunity_manager_email_c_character_varying_no_mask using (opportunity_manager_email_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_asana_project_custom_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_email -- Skip if current user is admin user.\n    else md5(custom_email) \n  end \n    );\n                    alter masking policy dev_asana_project_custom_email_character_varying_no_mask using (custom_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_asana_project_custom_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_phone -- Skip if current user is admin user.\n    else md5(custom_phone) \n  end \n    );\n                    alter masking policy dev_asana_project_custom_phone_character_varying_no_mask using (custom_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_asana_project_custom_email_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_email_address -- Skip if current user is admin user.\n    else md5(custom_email_address) \n  end \n    );\n                    alter masking policy dev_asana_project_custom_email_address_character_varying_no_mask using (custom_email_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_asana_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_asana_user_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_jira_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_jira_user_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_salesforce_user_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_user_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_salesforce_user_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_user_mobile_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then mobile_phone -- Skip if current user is admin user.\n    else md5(mobile_phone) \n  end \n    );\n                    alter masking policy dev_salesforce_user_mobile_phone_character_varying_no_mask using (mobile_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_user_email_encoding_key_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_encoding_key -- Skip if current user is admin user.\n    else md5(email_encoding_key) \n  end \n    );\n                    alter masking policy dev_salesforce_user_email_encoding_key_character_varying_no_mask using (email_encoding_key); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_zendesk_user_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_user_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_zendesk_user_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_oct_webinar_absentees_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_ats_oct_webinar_absentees_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_webinar_attendance_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_ats_webinar_attendance_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_oct_webinar_attendees_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_ats_oct_webinar_attendees_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_organisations_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_postgres_public_organisations_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_organisations_payroll_admin_emails_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then payroll_admin_emails -- Skip if current user is admin user.\n    else md5(payroll_admin_emails) \n  end \n    );\n                    alter masking policy dev_postgres_public_organisations_payroll_admin_emails_character_varying_no_mask using (payroll_admin_emails); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_organisations_hr_champion_emails_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then hr_champion_emails -- Skip if current user is admin user.\n    else md5(hr_champion_emails) \n  end \n    );\n                    alter masking policy dev_postgres_public_organisations_hr_champion_emails_character_varying_no_mask using (hr_champion_emails); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_organisations_payroll_champion_emails_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then payroll_champion_emails -- Skip if current user is admin user.\n    else md5(payroll_champion_emails) \n  end \n    );\n                    alter masking policy dev_postgres_public_organisations_payroll_champion_emails_character_varying_no_mask using (payroll_champion_emails); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_email_threads_receiver_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then receiver_email -- Skip if current user is admin user.\n    else md5(receiver_email) \n  end \n    );\n                    alter masking policy dev_ats_public_email_threads_receiver_email_character_varying_no_mask using (receiver_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_email_threads_sender_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then sender_email -- Skip if current user is admin user.\n    else md5(sender_email) \n  end \n    );\n                    alter masking policy dev_ats_public_email_threads_sender_email_character_varying_no_mask using (sender_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_jobs_recruitment_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then recruitment_email -- Skip if current user is admin user.\n    else md5(recruitment_email) \n  end \n    );\n                    alter masking policy dev_ats_public_jobs_recruitment_email_character_varying_no_mask using (recruitment_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_mail_integrations_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_ats_public_mail_integrations_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_users_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_confluence_users_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_users_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_postgres_public_users_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_candidate_jobs_applied_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then applied_phone_number -- Skip if current user is admin user.\n    else md5(applied_phone_number) \n  end \n    );\n                    alter masking policy dev_ats_public_candidate_jobs_applied_phone_number_character_varying_no_mask using (applied_phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_candidate_jobs_applied_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then applied_email -- Skip if current user is admin user.\n    else md5(applied_email) \n  end \n    );\n                    alter masking policy dev_ats_public_candidate_jobs_applied_email_character_varying_no_mask using (applied_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_candidate_jobs_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address -- Skip if current user is admin user.\n    else md5(address) \n  end \n    );\n                    alter masking policy dev_ats_public_candidate_jobs_address_character_varying_no_mask using (address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_candidates_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_ats_public_candidates_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_ats_public_candidates_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_ats_public_candidates_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_auth_service_public_twofa_infos_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_auth_service_public_twofa_infos_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_benefits_wallet_opt_in_employers_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_benefits_wallet_opt_in_employers_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_benefits_wallet_opt_in_employers_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_benefits_wallet_opt_in_employers_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_benefits_wallet_opt_in_employers_email_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_address -- Skip if current user is admin user.\n    else md5(email_address) \n  end \n    );\n                    alter masking policy dev_benefits_wallet_opt_in_employers_email_address_character_varying_no_mask using (email_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_braze_email_event_email_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_address -- Skip if current user is admin user.\n    else md5(email_address) \n  end \n    );\n                    alter masking policy dev_braze_email_event_email_address_character_varying_no_mask using (email_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_braze_subscription_event_email_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_address -- Skip if current user is admin user.\n    else md5(email_address) \n  end \n    );\n                    alter masking policy dev_braze_subscription_event_email_address_character_varying_no_mask using (email_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_content_history_owned_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then history_owned_email -- Skip if current user is admin user.\n    else md5(history_owned_email) \n  end \n    );\n                    alter masking policy dev_confluence_content_history_owned_email_character_varying_no_mask using (history_owned_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_content_history_created_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then history_created_email -- Skip if current user is admin user.\n    else md5(history_created_email) \n  end \n    );\n                    alter masking policy dev_confluence_content_history_created_email_character_varying_no_mask using (history_created_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_content_history_last_updated_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then history_last_updated_email -- Skip if current user is admin user.\n    else md5(history_last_updated_email) \n  end \n    );\n                    alter masking policy dev_confluence_content_history_last_updated_email_character_varying_no_mask using (history_last_updated_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_content_version_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then version_email -- Skip if current user is admin user.\n    else md5(version_email) \n  end \n    );\n                    alter masking policy dev_confluence_content_version_email_character_varying_no_mask using (version_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_space_history_created_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then history_created_email -- Skip if current user is admin user.\n    else md5(history_created_email) \n  end \n    );\n                    alter masking policy dev_confluence_space_history_created_email_character_varying_no_mask using (history_created_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_group_member_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_confluence_group_member_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_content_watch_page_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_confluence_content_watch_page_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_space_permission_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_confluence_space_permission_user_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_confluence_content_watch_space_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_confluence_content_watch_space_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_delighted_ces_person_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_delighted_ces_person_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_delighted_proserv_csat_person_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_delighted_proserv_csat_person_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_delighted_sales_csat_person_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_delighted_sales_csat_person_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_eh_infra_stat_service_public_sentry_issue_actions_assigned_to_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then assigned_to_email -- Skip if current user is admin user.\n    else md5(assigned_to_email) \n  end \n    );\n                    alter masking policy dev_eh_infra_stat_service_public_sentry_issue_actions_assigned_to_email_character_varying_no_mask using (assigned_to_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_eh_infra_stat_service_public_sentry_issue_analytics_last_assigned_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then last_assigned_email -- Skip if current user is admin user.\n    else md5(last_assigned_email) \n  end \n    );\n                    alter masking policy dev_eh_infra_stat_service_public_sentry_issue_analytics_last_assigned_email_character_varying_no_mask using (last_assigned_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_eh_infra_stat_service_public_sentry_issue_analytics_assigned_to_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then assigned_to_email -- Skip if current user is admin user.\n    else md5(assigned_to_email) \n  end \n    );\n                    alter masking policy dev_eh_infra_stat_service_public_sentry_issue_analytics_assigned_to_email_character_varying_no_mask using (assigned_to_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_eh_infra_stat_service_raw_daily_report_sentry_issues_assigned_to_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then assigned_to_email -- Skip if current user is admin user.\n    else md5(assigned_to_email) \n  end \n    );\n                    alter masking policy dev_eh_infra_stat_service_raw_daily_report_sentry_issues_assigned_to_email_character_varying_no_mask using (assigned_to_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_employment_schedules_public_peo_host_activities_contact_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then contact_email -- Skip if current user is admin user.\n    else md5(contact_email) \n  end \n    );\n                    alter masking policy dev_employment_schedules_public_peo_host_activities_contact_email_character_varying_no_mask using (contact_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_employment_schedules_public_employment_proposals_reviewer_emails_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then reviewer_emails -- Skip if current user is admin user.\n    else md5(reviewer_emails) \n  end \n    );\n                    alter masking policy dev_employment_schedules_public_employment_proposals_reviewer_emails_character_varying_no_mask using (reviewer_emails); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_employment_schedules_public_employment_agreements_reviewer_emails_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then reviewer_emails -- Skip if current user is admin user.\n    else md5(reviewer_emails) \n  end \n    );\n                    alter masking policy dev_employment_schedules_public_employment_agreements_reviewer_emails_character_varying_no_mask using (reviewer_emails); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_github_commit_author_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then author_email -- Skip if current user is admin user.\n    else md5(author_email) \n  end \n    );\n                    alter masking policy dev_github_commit_author_email_character_varying_no_mask using (author_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_github_commit_committer_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then committer_email -- Skip if current user is admin user.\n    else md5(committer_email) \n  end \n    );\n                    alter masking policy dev_github_commit_committer_email_character_varying_no_mask using (committer_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_github_user_email_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_github_user_email_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_graduate_product_owners_test_orgs_owner_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then owner_email -- Skip if current user is admin user.\n    else md5(owner_email) \n  end \n    );\n                    alter masking policy dev_graduate_product_owners_test_orgs_owner_email_character_varying_no_mask using (owner_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_graduate_product_owners_test_orgs_owned_by_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then owned_by -- Skip if current user is admin user.\n    else md5(owned_by) \n  end \n    );\n                    alter masking policy dev_graduate_product_owners_test_orgs_owned_by_character_varying_no_mask using (owned_by); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_herodollar_service_public_tracking_infos_ip_addresses_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then ip_addresses -- Skip if current user is admin user.\n    else md5(ip_addresses) \n  end \n    );\n                    alter masking policy dev_herodollar_service_public_tracking_infos_ip_addresses_character_varying_no_mask using (ip_addresses); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_herodollar_service_public_tracking_infos_author_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then author_email -- Skip if current user is admin user.\n    else md5(author_email) \n  end \n    );\n                    alter masking policy dev_herodollar_service_public_tracking_infos_author_email_character_varying_no_mask using (author_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_herodollar_service_public_organisation_issuances_author_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then author_email -- Skip if current user is admin user.\n    else md5(author_email) \n  end \n    );\n                    alter masking policy dev_herodollar_service_public_organisation_issuances_author_email_character_varying_no_mask using (author_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heropay_db_public_heropay_transactions_ip_addresses_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then ip_addresses -- Skip if current user is admin user.\n    else md5(ip_addresses) \n  end \n    );\n                    alter masking policy dev_heropay_db_public_heropay_transactions_ip_addresses_character_varying_no_mask using (ip_addresses); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heropay_db_public_heropay_balances_ip_addresses_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then ip_addresses -- Skip if current user is admin user.\n    else md5(ip_addresses) \n  end \n    );\n                    alter masking policy dev_heropay_db_public_heropay_balances_ip_addresses_character_varying_no_mask using (ip_addresses); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heropay_db_public_member_infos_account_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then account_email -- Skip if current user is admin user.\n    else md5(account_email) \n  end \n    );\n                    alter masking policy dev_heropay_db_public_member_infos_account_email_character_varying_no_mask using (account_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_orders_ip_addresses_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then ip_addresses -- Skip if current user is admin user.\n    else md5(ip_addresses) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_orders_ip_addresses_character_varying_no_mask using (ip_addresses); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_billing_infos_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_billing_infos_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_billing_infos_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_billing_infos_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_member_profiles_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_member_profiles_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_survey_submissions_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_survey_submissions_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_shipping_addresses_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_shipping_addresses_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_shipping_addresses_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_shipping_addresses_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_suppliers_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_suppliers_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_mailchimp_subscriptions_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_mailchimp_subscriptions_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_heroshop_db_public_supplier_users_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_heroshop_db_public_supplier_users_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_mobile_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then mobile_phone -- Skip if current user is admin user.\n    else md5(mobile_phone) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_mobile_phone_character_varying_no_mask using (mobile_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_email_bounced_reason_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_bounced_reason -- Skip if current user is admin user.\n    else md5(email_bounced_reason) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_email_bounced_reason_character_varying_no_mask using (email_bounced_reason); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_company_phone_number_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then company_phone_number_c -- Skip if current user is admin user.\n    else md5(company_phone_number_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_company_phone_number_c_character_varying_no_mask using (company_phone_number_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_referees_email_address_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then referees_email_address_c -- Skip if current user is admin user.\n    else md5(referees_email_address_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_referees_email_address_c_character_varying_no_mask using (referees_email_address_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_supplementary_email_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then supplementary_email_c -- Skip if current user is admin user.\n    else md5(supplementary_email_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_supplementary_email_c_character_varying_no_mask using (supplementary_email_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_zi_company_phone_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then zi_company_phone_c -- Skip if current user is admin user.\n    else md5(zi_company_phone_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_zi_company_phone_c_character_varying_no_mask using (zi_company_phone_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_zi_direct_phone_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then zi_direct_phone_c -- Skip if current user is admin user.\n    else md5(zi_direct_phone_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_zi_direct_phone_c_character_varying_no_mask using (zi_direct_phone_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_original_email_mkto_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then original_email_mkto_c -- Skip if current user is admin user.\n    else md5(original_email_mkto_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_original_email_mkto_c_character_varying_no_mask using (original_email_mkto_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_lead_seek_account_manager_email_c_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then seek_account_manager_email_c -- Skip if current user is admin user.\n    else md5(seek_account_manager_email_c) \n  end \n    );\n                    alter masking policy dev_salesforce_lead_seek_account_manager_email_c_character_varying_no_mask using (seek_account_manager_email_c); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_nps_responses_user_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then user_email -- Skip if current user is admin user.\n    else md5(user_email) \n  end \n    );\n                    alter masking policy dev_nps_responses_user_email_character_varying_no_mask using (user_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_sendgrid_recipient_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_sendgrid_recipient_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_workplace_incidents_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_postgres_public_workplace_incidents_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_workplace_incidents_worker_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then worker_address -- Skip if current user is admin user.\n    else md5(worker_address) \n  end \n    );\n                    alter masking policy dev_postgres_public_workplace_incidents_worker_address_character_varying_no_mask using (worker_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_workplace_incidents_wsa_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then wsa_email -- Skip if current user is admin user.\n    else md5(wsa_email) \n  end \n    );\n                    alter masking policy dev_postgres_public_workplace_incidents_wsa_email_character_varying_no_mask using (wsa_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_tax_declarations_tax_signature_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then tax_signature -- Skip if current user is admin user.\n    else md5(tax_signature) \n  end \n    );\n                    alter masking policy dev_postgres_public_tax_declarations_tax_signature_character_varying_no_mask using (tax_signature); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_tax_declarations_tax_file_number_hash_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then tax_file_number_hash -- Skip if current user is admin user.\n    else md5(tax_file_number_hash) \n  end \n    );\n                    alter masking policy dev_postgres_public_tax_declarations_tax_file_number_hash_character_varying_no_mask using (tax_file_number_hash); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_payroll_infos_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_postgres_public_payroll_infos_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_payroll_infos_payroll_admin_emails_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then payroll_admin_emails -- Skip if current user is admin user.\n    else md5(payroll_admin_emails) \n  end \n    );\n                    alter masking policy dev_postgres_public_payroll_infos_payroll_admin_emails_character_varying_no_mask using (payroll_admin_emails); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_payroll_infos_contact_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then contact_email -- Skip if current user is admin user.\n    else md5(contact_email) \n  end \n    );\n                    alter masking policy dev_postgres_public_payroll_infos_contact_email_character_varying_no_mask using (contact_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_payslips_address_line1_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address_line1 -- Skip if current user is admin user.\n    else md5(address_line1) \n  end \n    );\n                    alter masking policy dev_postgres_public_payslips_address_line1_character_varying_no_mask using (address_line1); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_payslips_address_line2_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address_line2 -- Skip if current user is admin user.\n    else md5(address_line2) \n  end \n    );\n                    alter masking policy dev_postgres_public_payslips_address_line2_character_varying_no_mask using (address_line2); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_payslips_address_state_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address_state -- Skip if current user is admin user.\n    else md5(address_state) \n  end \n    );\n                    alter masking policy dev_postgres_public_payslips_address_state_character_varying_no_mask using (address_state); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_setup_user_infos_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_postgres_public_setup_user_infos_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_tax_lines_payslip_tax_line_id_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then payslip_tax_line_id -- Skip if current user is admin user.\n    else md5(payslip_tax_line_id) \n  end \n    );\n                    alter masking policy dev_postgres_public_tax_lines_payslip_tax_line_id_character_varying_no_mask using (payslip_tax_line_id); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_tax_lines_tax_type_name_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then tax_type_name -- Skip if current user is admin user.\n    else md5(tax_type_name) \n  end \n    );\n                    alter masking policy dev_postgres_public_tax_lines_tax_type_name_character_varying_no_mask using (tax_type_name); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_invoice_recipients_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_postgres_public_invoice_recipients_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_supplier_settings_contact_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then contact_email -- Skip if current user is admin user.\n    else md5(contact_email) \n  end \n    );\n                    alter masking policy dev_postgres_public_supplier_settings_contact_email_character_varying_no_mask using (contact_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_user_infos_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_postgres_public_user_infos_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_user_infos_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address -- Skip if current user is admin user.\n    else md5(address) \n  end \n    );\n                    alter masking policy dev_postgres_public_user_infos_address_character_varying_no_mask using (address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_job_keeper_nomination_responses_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address -- Skip if current user is admin user.\n    else md5(address) \n  end \n    );\n                    alter masking policy dev_postgres_public_job_keeper_nomination_responses_address_character_varying_no_mask using (address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_job_keeper_nomination_responses_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone_number -- Skip if current user is admin user.\n    else md5(phone_number) \n  end \n    );\n                    alter masking policy dev_postgres_public_job_keeper_nomination_responses_phone_number_character_varying_no_mask using (phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_job_keeper_nomination_responses_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_postgres_public_job_keeper_nomination_responses_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_peo_candidates_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_postgres_public_peo_candidates_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_peo_candidates_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_postgres_public_peo_candidates_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_postgres_public_home_loan_applications_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_postgres_public_home_loan_applications_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_product_releases_product_owners_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_product_releases_product_owners_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_campaign_member_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_salesforce_campaign_member_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_campaign_member_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_salesforce_campaign_member_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_case_supplied_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then supplied_email -- Skip if current user is admin user.\n    else md5(supplied_email) \n  end \n    );\n                    alter masking policy dev_salesforce_case_supplied_email_character_varying_no_mask using (supplied_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_case_contact_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then contact_phone -- Skip if current user is admin user.\n    else md5(contact_phone) \n  end \n    );\n                    alter masking policy dev_salesforce_case_contact_phone_character_varying_no_mask using (contact_phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_salesforce_case_contact_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then contact_email -- Skip if current user is admin user.\n    else md5(contact_email) \n  end \n    );\n                    alter masking policy dev_salesforce_case_contact_email_character_varying_no_mask using (contact_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_sendgrid_sender_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then address -- Skip if current user is admin user.\n    else md5(address) \n  end \n    );\n                    alter masking policy dev_sendgrid_sender_address_character_varying_no_mask using (address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_sendgrid_sender_from_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then from_email -- Skip if current user is admin user.\n    else md5(from_email) \n  end \n    );\n                    alter masking policy dev_sendgrid_sender_from_email_character_varying_no_mask using (from_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_sendgrid_sender_reply_to_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then reply_to_email -- Skip if current user is admin user.\n    else md5(reply_to_email) \n  end \n    );\n                    alter masking policy dev_sendgrid_sender_reply_to_email_character_varying_no_mask using (reply_to_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_sent_emails_to_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then to_address -- Skip if current user is admin user.\n    else md5(to_address) \n  end \n    );\n                    alter masking policy dev_workshop_public_sent_emails_to_address_character_varying_no_mask using (to_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_zoom_registrants_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_workshop_public_zoom_registrants_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_zoom_registrants_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_workshop_public_zoom_registrants_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_zoom_users_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_workshop_public_zoom_users_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_guided_hr_csat_email_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_address -- Skip if current user is admin user.\n    else md5(email_address) \n  end \n    );\n                    alter masking policy dev_workshop_public_guided_hr_csat_email_address_character_varying_no_mask using (email_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_guided_payroll_csat_email_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email_address -- Skip if current user is admin user.\n    else md5(email_address) \n  end \n    );\n                    alter masking policy dev_workshop_public_guided_payroll_csat_email_address_character_varying_no_mask using (email_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_workshop_registrants_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_workshop_public_workshop_registrants_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_workshop_public_organisations_started_free_subplan_creator_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then creator_email -- Skip if current user is admin user.\n    else md5(creator_email) \n  end \n    );\n                    alter masking policy dev_workshop_public_organisations_started_free_subplan_creator_email_character_varying_no_mask using (creator_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_custom_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_phone_number -- Skip if current user is admin user.\n    else md5(custom_phone_number) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_custom_phone_number_character_varying_no_mask using (custom_phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_via_source_to_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then via_source_to_address -- Skip if current user is admin user.\n    else md5(via_source_to_address) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_via_source_to_address_character_varying_no_mask using (via_source_to_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_system_ip_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then system_ip_address -- Skip if current user is admin user.\n    else md5(system_ip_address) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_system_ip_address_character_varying_no_mask using (system_ip_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_custom_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_email -- Skip if current user is admin user.\n    else md5(custom_email) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_custom_email_character_varying_no_mask using (custom_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_via_source_from_address_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then via_source_from_address -- Skip if current user is admin user.\n    else md5(via_source_from_address) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_via_source_from_address_character_varying_no_mask using (via_source_from_address); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_custom_requesting_customer_s_phone_number_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_requesting_customer_s_phone_number -- Skip if current user is admin user.\n    else md5(custom_requesting_customer_s_phone_number) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_custom_requesting_customer_s_phone_number_character_varying_no_mask using (custom_requesting_customer_s_phone_number); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_custom_requesting_customer_s_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_requesting_customer_s_email -- Skip if current user is admin user.\n    else md5(custom_requesting_customer_s_email) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_custom_requesting_customer_s_email_character_varying_no_mask using (custom_requesting_customer_s_email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zendesk_ticket_custom_email_used_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then custom_email_used -- Skip if current user is admin user.\n    else md5(custom_email_used) \n  end \n    );\n                    alter masking policy dev_zendesk_ticket_custom_email_used_character_varying_no_mask using (custom_email_used); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_ach_address_1_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then ach_address_1 -- Skip if current user is admin user.\n    else md5(ach_address_1) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_ach_address_1_character_varying_no_mask using (ach_address_1); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_ach_address_2_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then ach_address_2 -- Skip if current user is admin user.\n    else md5(ach_address_2) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_ach_address_2_character_varying_no_mask using (ach_address_2); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_address_1_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_address_1 -- Skip if current user is admin user.\n    else md5(credit_card_address_1) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_address_1_character_varying_no_mask using (credit_card_address_1); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_address_2_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_address_2 -- Skip if current user is admin user.\n    else md5(credit_card_address_2) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_address_2_character_varying_no_mask using (credit_card_address_2); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_city_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_city -- Skip if current user is admin user.\n    else md5(credit_card_city) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_city_character_varying_no_mask using (credit_card_city); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_country_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_country -- Skip if current user is admin user.\n    else md5(credit_card_country) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_country_character_varying_no_mask using (credit_card_country); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_holder_name_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_holder_name -- Skip if current user is admin user.\n    else md5(credit_card_holder_name) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_holder_name_character_varying_no_mask using (credit_card_holder_name); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_postal_code_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_postal_code -- Skip if current user is admin user.\n    else md5(credit_card_postal_code) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_postal_code_character_varying_no_mask using (credit_card_postal_code); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_credit_card_state_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then credit_card_state -- Skip if current user is admin user.\n    else md5(credit_card_state) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_credit_card_state_character_varying_no_mask using (credit_card_state); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_email_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then email -- Skip if current user is admin user.\n    else md5(email) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_email_character_varying_no_mask using (email); \n\n                    \n\n                    \n\n                \n                \n                \n                \n                \n                \n                \n\n                    alter masking policy dev_zuora_payment_method_phone_character_varying_public using (\n  case \n    when current_user = 'dbt_cloud'::varchar or current_user = 'masteruser'::varchar then phone -- Skip if current user is admin user.\n    else md5(phone) \n  end \n    );\n                    alter masking policy dev_zuora_payment_method_phone_character_varying_no_mask using (phone); \n\n                    \n\n                    \n\n                \n\n    \n            \n        \n    ", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.360641Z", "completed_at": "2024-02-04T15:20:59.373245Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.383375Z", "completed_at": "2024-02-04T15:20:59.383389Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04231715202331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_swag_avg_applicants", "compiled": true, "compiled_code": "\n\nwith\n    avg_applicants as (\n        select\n            date_trunc('month', posted_at) as month_posted,\n            country,\n            job_sector,\n            portal_name,\n            company_size,\n            avg(applicants_count)\n        from \"dev\".\"ats\".\"jobs_posted\" as jp\n        left join\n            \"dev\".\"tableau\".\"v_org_size\" as os\n            on (\n                jp.organisation_id = os.organisation_id\n                and date_trunc('month', posted_at) = os.date\n            )\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n    )\nselect\n    *,\n    md5(cast(coalesce(cast(month_posted as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(job_sector as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(portal_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(company_size as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key\nfrom avg_applicants", "relation_name": "\"dev\".\"tableau\".\"swag_avg_applicants\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.385999Z", "completed_at": "2024-02-04T15:20:59.404825Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.416757Z", "completed_at": "2024-02-04T15:20:59.416772Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05648016929626465, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_swag_avg_time_filled", "compiled": true, "compiled_code": "\n\nwith\n    avg_time_filled as (\n\n        select\n            date_trunc('month', posted_at) as month_posted,\n            country,\n            job_sector,\n            portal_name,\n            company_size,\n            avg(time_to_hire) as average_time_to_hire\n        from \"dev\".\"ats\".\"job_applications\" job_apps\n        left join\n            \"dev\".\"tableau\".\"v_org_size\" as os\n            on (\n                job_apps.organisation_id = os.organisation_id\n                and date_trunc('month', posted_at) = os.date\n            )\n        where result = 'hired'\n        group by 1, 2, 3, 4, 5\n        order by 1, 2, 3, 4, 5\n    )\nselect\n    *,\n    md5(cast(coalesce(cast(month_posted as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(job_sector as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(portal_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(company_size as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key\nfrom avg_time_filled", "relation_name": "\"dev\".\"tableau\".\"swag_avg_time_filled\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.399452Z", "completed_at": "2024-02-04T15:20:59.414508Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.435106Z", "completed_at": "2024-02-04T15:20:59.435118Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05461382865905762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_swag_pass_probation", "compiled": true, "compiled_code": "\n\nwith\n    pass_fail_probation as (\n        select\n            date_trunc('month', start_date) as month_start,\n            job_sector,\n            job_apps.country,\n            datediff(\n                'month', start_date, coalesce(termination_date, getdate())\n            ) as month_diff,\n            case\n                when month_diff <= 6 then 'Failed Probation' else 'Passed Probation'\n            end as probation_pass_fail,\n            emp.organisation_id,\n            portal_name\n        from \"dev\".\"employment_hero\".\"employees\" emp\n        left join\n            \"dev\".\"ats\".\"job_applications\" job_apps\n            on (\n                emp.organisation_id = job_apps.organisation_id\n                and emp.email = job_apps.applicant_email\n            )\n        where\n            emp.user_id not in (\n                select user_id\n                from employment_hero.employees emp\n                group by user_id, organisation_id\n                having count(*) > 1\n            )\n    ),\n    pass_fail_probation_table as (\n\n        select\n            month_start,\n            job_sector,\n            country,\n            portal_name,\n            company_size,\n            probation_pass_fail,\n            count(*)\n        from pass_fail_probation pfp\n        left join\n            \"dev\".\"tableau\".\"v_org_size\" as os\n            on (pfp.organisation_id = os.organisation_id and pfp.month_start = os.date)\n        where month_start >= '2021-01-01'\n        group by 1, 2, 3, 4, 5, 6\n        order by 1, 2, 3, 4, 5, 6\n    )\nselect\n    *,\n    md5(cast(coalesce(cast(month_start as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(job_sector as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(portal_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(company_size as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(probation_pass_fail as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as surrogate_key\nfrom pass_fail_probation_table", "relation_name": "\"dev\".\"tableau\".\"swag_pass_probation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.417917Z", "completed_at": "2024-02-04T15:20:59.436275Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.446641Z", "completed_at": "2024-02-04T15:20:59.446655Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.042562007904052734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_unique_combination_of_columns_fct_mmau_date_day__dim_user_sk.a698e2d043", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, dim_user_sk\n    from \"dev\".\"mart\".\"fct_mmau\"\n    group by date_day, dim_user_sk\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.424650Z", "completed_at": "2024-02-04T15:20:59.440550Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.450258Z", "completed_at": "2024-02-04T15:20:59.450271Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0488429069519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.proserv_guided_payroll_milestones", "compiled": true, "compiled_code": "\n\nwith account as (\n    select \n    distinct a.id as account_id, \n    a.name as account_name, \n    ipc.name as professional_service_name,\n    o.id_c as kp_business_id,\n    kb.country as country,\n    opp.id as opp_id,\n    opp.close_date, \n    nullif(opp.opportunity_employees_c, 0) as opportunity_employees,     \n    ipc.service_offering_c,\n    ipc.project_started_date_c,\n    ipc.expected_go_live_c,\n    ipc.project_completion_date_c,\n    ipc.closed_status_c\n    --, p_2.name as product_name\n    from \"dev\".\"salesforce\".\"account\" as a\n    join \"dev\".\"salesforce\".\"implementation_project_c\" as ipc on ipc.account_c = a.id\n    left join \"dev\".\"salesforce\".\"keypay_org_c\" as o on o.professional_service_project_c is not null and ipc.id = o.professional_service_project_c and not o.is_deleted\n    left join \"dev\".\"keypay\".\"business_traits\" as kb on o.id_c = kb.id    \n    left join \"dev\".\"salesforce\".\"opportunity\" as opp on ipc.opportunity_c is not null and ipc.opportunity_c = opp.id and not opp.is_deleted and opp.stage_name = 'Won'\n    where not a.is_deleted\n        and not ipc.is_deleted\n        and ipc.service_offering_c ~* '(guided payroll|combined journey)'\n        --and (ipc.stage_c != 'Cancelled' or ipc.stage_c is null)\n        --and (a.customer_stage_c !~ '(Churned|Lost Before Activated)' or a.customer_stage_c is null)\n)\n\n, payroll_settings_completed as (\n    select business_id, min(dbt_valid_from)::date as completed_at\n    from \"dev\".\"proserv\".\"payroll_settings_snapshot\"\n    where is_payroll_settings_completed\n    group by 1\n)\n\n, primary_chart_of_accounts as (\n    select business_id, min(dbt_valid_from)::date as completed_at\n    from \"dev\".\"proserv\".\"payroll_primary_chart_of_accounts_mapped_snapshot\"\n    where are_default_primary_accounts_mapped\n    group by 1\n)\n\n, open_balance as (\n    select business_id, min(dbt_valid_from)::date as completed_at\n    from \"dev\".\"proserv\".\"payroll_first_leave_balance_snapshot\"\n    where open_balance_imported\n    group by 1\n)\n\n, payslips_first_published as (\n    select business_id, min(Notification_Date::date) as first_published_at\n    from \"dev\".\"keypay\".\"payrun\"\n    where Notification_Date is not null \n    group by 1\n)\n\n, employees_created as (\n    select business_id\n    , count(*) as employees_created\n    from \"dev\".\"keypay_dwh\".\"employee\"\n    where (end_date::timestamp is null or end_date::timestamp > date_created::timestamp)\n    group by 1\n)\n\n, billed_employees as (    \n    select business_id\n    , billing_month as last_billing_month\n    , count(distinct employee_id) as last_billed_employees\n    from ( \n        select *\n        , rank() over (partition by business_id order by billing_month desc) as rnk\n        from \"dev\".\"keypay\".\"_t_pay_run_total_monthly_summary\"\n        where not is_excluded_from_billing\n        and billing_month = DATE_TRUNC('month', getdate())::date\n    )\n    where rnk = 1\n    group by 1,2\n)\n\n, au_stp_registered as (\nselect business_id, min(pe.date_response_received_utc::date) as stp_registered_at\nfrom \"dev\".\"keypay\".\"pay_event\" pe\njoin \"dev\".\"keypay\".\"pay_run_lodgement_data\"  ld on pe.pay_run_lodgement_data_id = ld.id and SPLIT_PART(pe._file, 'Shard', 2) = SPLIT_PART(ld._file, 'Shard', 2)\nwhere not pe.is_deleted\n--and pe.status = 8\nand ld.status = 6\nand pe.pay_run_id is not null\nand pe.date_response_received_utc::date is not null\ngroup by 1\n)\n\n, nz_ird_registered as (\n    select business_id, min(pdf.date_submitted::date) as ird_registered_at\n    from \"dev\".\"keypay\".\"pay_day_filing\" pdf    \n    where pdf.status = 4\n    and pdf.pay_run_id is not null    \n    group by 1\n)\n\n, uk_hmrc_registered as (    \n    select pr.business_id, min(pr.date_first_finalised::date) as hmrc_registered_at    \n    from \"dev\".\"keypay\".\"pay_run_lodgement_data\" pld    \n    join \"dev\".\"keypay\".\"payrun\" pr on pr.pay_run_lodgement_data_id = pld.id and SPLIT_PART(pr._file, 'Shard', 2) = SPLIT_PART(pld._file, 'Shard', 2)\n    where pld.status = 6\n    group by 1\n)\n\nselect\n    distinct  \n    md5(cast(coalesce(cast(a.account_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(a.kp_business_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(a.professional_service_name as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id\n    , a.account_id\n    , a.account_name\n    , a.service_offering_c\n    , a.professional_service_name\n    , a.project_started_date_c as project_started_date\n    , a.expected_go_live_c as expected_go_live\n    , a.project_completion_date_c as project_completion_date\n    , a.closed_status_c as closed_status\n    , a.opportunity_employees\n    , a.kp_business_id\n    , ss.completed_at as payroll_settings_completed_at\n    , ca.completed_at as primary_chart_of_accounts_mapped_at\n    , ob.completed_at as opening_balances_imported_at    \n    , ps.first_published_at as payslips_first_published_at\n    , sr.stp_registered_at\n    , ir.ird_registered_at\n    , hr.hmrc_registered_at\n    , ec.employees_created\n    , be.last_billed_employees\n    , be.last_billing_month\nfrom account a\nleft join employees_created ec on ec.business_id = a.kp_business_id\nleft join billed_employees be on be.business_id = a.kp_business_id\nleft join payslips_first_published ps on a.kp_business_id = ps.business_id\nleft join payroll_settings_completed ss on ss.business_id = a.kp_business_id\nleft join primary_chart_of_accounts ca on ca.business_id = a.kp_business_id\nleft join open_balance ob on ob.business_id = a.kp_business_id\nleft join au_stp_registered sr on sr.business_id = a.kp_business_id\nleft join nz_ird_registered ir on ir.business_id = a.kp_business_id\nleft join uk_hmrc_registered hr on hr.business_id = a.kp_business_id", "relation_name": "\"dev\".\"proserv\".\"guided_payroll_milestones\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.453358Z", "completed_at": "2024-02-04T15:20:59.467829Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.477013Z", "completed_at": "2024-02-04T15:20:59.477028Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04230451583862305, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.lost_lead", "compiled": true, "compiled_code": "with lost_organisations as (\n    select\n        id,\n        first_name,\n        last_name,\n        name,\n        title,\n        company,\n        currency_iso_code,\n        country,\n        email,\n        website,\n        description,\n        industry,\n        industry_primary_c,\n        industry_secondary_c,\n        number_of_employees,\n        annual_revenue,\n        created_date,\n        last_modified_date,\n        last_activity_date\n    from \"dev\".\"salesforce\".\"lead\"\n    where\n        is_deleted = FALSE\n        and status = 'Lost'\n),\n\ncurrent_organisations as (\n    select\n        name,\n        omop_org_id\n    from \"dev\".\"one_platform\".\"organisations\"\n    where\n        (eh_sub_name not ilike '%demo%' or eh_sub_name is NULL)\n        and eh_churn_date is NULL\n)\n\nselect\n    lo.id,\n    lo.first_name,\n    lo.last_name,\n    lo.name,\n    lo.title,\n    lo.company,\n    lo.currency_iso_code,\n    lo.country,\n    lo.email,\n    lo.website,\n    lo.description,\n    lo.industry,\n    case when lo.industry_primary_c = 'Unknown' then NULL else lo.industry_primary_c end,\n    case when lo.industry_secondary_c = 'Unknown' then NULL else lo.industry_secondary_c end,\n    lo.number_of_employees,\n    lo.annual_revenue,\n    lo.created_date,\n    lo.last_modified_date,\n    lo.last_activity_date\nfrom lost_organisations as lo\nleft join current_organisations as co on lo.company = co.name\nwhere co.omop_org_id is NULL", "relation_name": "\"dev\".\"salesforce\".\"lost_lead\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.461993Z", "completed_at": "2024-02-04T15:20:59.472974Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.486339Z", "completed_at": "2024-02-04T15:20:59.486353Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.048143625259399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.one_platform_employees", "compiled": true, "compiled_code": "\n\nwith valid_eh_members as (\n  select m.id    \n    , m.email\n    , m.first_name\n    , m.last_name\n    , case when regexp_replace(company_mobile, '[^0-9+]+', '') is not null and regexp_replace(company_mobile, '[^0-9+]+', '') != '' then regexp_replace(company_mobile, '[^0-9+]+', '')\n        else regexp_replace(personal_mobile_number, '[^0-9+]+', '') end as mobile_phone       \n    , m.organisation_id\n    , m.created_at\n    , m.work_country\n    , case when m.termination_date < getdate() then false else m.active end as active \n    , m.date_of_birth\n    , m.gender\n    , o.eh_sub_name\n    , o.eh_pricing_tier\n    , case when not m.active then false else o.is_paying_eh end as is_paying_eh\n    , o.eh_churn_date\n    , m.start_date\n    , case when o.eh_sub_name ilike '%churn%' or not m.active then coalesce(least(m.termination_date, o.eh_churn_date), m.created_at) \n        else m.termination_date end as termination_date\n    , m.user_id\n    , m.user_uuid\n    , m.external_id\n    , o.kp_business_id\n  from \"dev\".\"employment_hero\".\"employees\" as m\n  left join \"dev\".\"one_platform\".\"organisations\" as o on m.organisation_id = o.eh_organisation_id    \n  where (m.termination_date is null or m.termination_date >= m.created_at)\n)\n\n, valid_kp_employees as (\n  select e.id::integer\n    , e.email\n    , e.firstname as first_name\n    , e.surname as last_name\n    , regexp_replace(e.mobile_phone, '[^0-9+]+', '') as mobile_phone\n    , e.business_id\n    , e.date_created     \n    , cl.country as work_country\n    , e.date_of_birth\n    , case when e.gender = 'F' then 'Female' when e.gender = 'M' then 'Male' else e.gender end as gender\n    , case when (e.start_date <= getdate() or e.start_date is null) and (e.end_date is null or e.end_date > getdate()) then true else false end as active\n    , least(e.start_date, bl.first_billing_month) as start_date\n    , e.end_date\n    , bl.last_billing_month::date\n    , listagg(distinct ue.user_id, ', ') as user_ids    \n  from \"dev\".\"keypay_dwh\".\"employee\"  e \n  join \"dev\".\"keypay\".\"business_traits\" b on e.business_id = b.id \n  left join \"dev\".\"keypay_dwh\".\"suburb\" s on e.residential_suburb_id = s.id  \n  left join \"dev\".\"csv\".\"country_geo_location\" cl on s.country = cl.name\n  left join  \"dev\".\"keypay\".\"user_employee\" ue on ue.employee_id = e.id \n  left join (\n      select employee_id, max(billing_month::date) as last_billing_month, min(billing_month::date) as first_billing_month from \"dev\".\"keypay\".\"_t_pay_run_total_monthly_summary\" group by 1\n  )bl on bl.employee_id = e.id \n  where (e.end_date is null or e.end_date >= e.date_created) \n  group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n)\n\n  select \n    CONCAT(case when m.id is not null then 'EH-' || m.id else '' end, case when m.id is not null and k.id is not null then '_KP-' || k.id when k.id is not null then 'KP-' || k.id else '' end) as omop_emp_id\n    , m.id as eh_member_id\n    , k.id as kp_employee_id  \n    , coalesce(m.email, k.email) as email\n    , coalesce(m.first_name, k.first_name) as first_name\n    , coalesce(m.last_name, k.last_name) as last_name\n    , coalesce(m.date_of_birth, k.date_of_birth) as date_of_birth\n    , coalesce(m.gender, k.gender) as gender\n    , coalesce(m.mobile_phone, k.mobile_phone) as mobile_phone\n    , m.organisation_id as eh_organisation_id\n    , k.business_id as kp_business_id\n    , coalesce(m.work_country, k.work_country) as work_country\n    , least(m.created_at, k.date_created) as created_at\n    , case when m.active or k.active then true else false end as active\n    , least(m.start_date, k.start_date) as start_date\n    , case when ((m.termination_date is null and m.active) or (k.end_date is null and k.active)) then null else greatest(m.termination_date, k.end_date) end as termination_date\n    , m.eh_sub_name\n    , m.eh_pricing_tier\n    , m.is_paying_eh\n    , m.eh_churn_date\n    , k.last_billing_month as kp_last_billing_month\n    , m.user_id as eh_user_id\n    , m.user_uuid as eh_user_uuid\n    , k.user_ids as kp_user_ids      \n  from valid_eh_members m    \n    full outer join valid_kp_employees k on m.external_id = k.id and m.kp_business_id is not null", "relation_name": "\"dev\".\"one_platform\".\"employees\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.480707Z", "completed_at": "2024-02-04T15:20:59.495548Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.504932Z", "completed_at": "2024-02-04T15:20:59.504946Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04374885559082031, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_organisations", "compiled": true, "compiled_code": "select distinct\n    o.id eh_org_id,\n    o.industry,\n    o.name org_name,\n    o.zuora_account_id,\n    cast(o.created_at as date) eh_org_created_date,\n    o.payroll_type,\n    o.connected_app,\n    o.is_paying_eh,\n    o.pricing_tier,\n    o.pricing_type,\n    o.currency org_currency,\n    cast(o1.eh_churn_date as date) eh_churn_date,\n    o1.kp_business_id,\n    o1.country,\n    o1.kp_commence_billing_from,\n    o1.kp_last_billing_month\nfrom \"dev\".\"employment_hero\".\"organisations\" o\nleft join \"dev\".\"one_platform\".\"organisations\" o1 on o1.eh_organisation_id = o.id\nwhere o.is_demo = 'f' and o.is_shadow_data = 'f' and o._fivetran_deleted = 'f'", "relation_name": "\"dev\".\"tableau\".\"tableau_organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.487509Z", "completed_at": "2024-02-04T15:20:59.501234Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.515378Z", "completed_at": "2024-02-04T15:20:59.515392Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04629349708557129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_one_platform_organisations_omop_org_id.c771a48e31", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect omop_org_id\nfrom \"dev\".\"one_platform\".\"organisations\"\nwhere omop_org_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.508600Z", "completed_at": "2024-02-04T15:20:59.518989Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.533628Z", "completed_at": "2024-02-04T15:20:59.533642Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04732704162597656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_one_platform_organisations_omop_org_id.13f839706e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    omop_org_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"one_platform\".\"organisations\"\nwhere omop_org_id is not null\ngroup by omop_org_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.521843Z", "completed_at": "2024-02-04T15:20:59.534811Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.550714Z", "completed_at": "2024-02-04T15:20:59.550727Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.052742719650268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.keypay_v_au_fulltime_job_title_default_salary", "compiled": true, "compiled_code": "with\n recent_payrun as (\n  select      \n      business_id\n      , employee_id\n      , employment_type\n      , residential_state\n      , gender\n      , monthly_gross_earnings\n      , total_hours\n      , hourly_rate\n      , billing_month\n      , row_number() over (partition by business_id, employee_id order by billing_month desc) as billing_month_desc\n      --, case when payrun_monthly_hours = 0 then null else payrun_monthly_earnings/payrun_monthly_hours end as payrun_hourly_rate\n    from \"dev\".\"keypay\".\"au_pay_run_summary_s\"    \n    where\n      --employment_type = 'Full-time' and\n      billing_month < DATE_TRUNC('month', CURRENT_DATE)\n      and billing_month >= DATE_TRUNC('month', dateadd('month', -12, CURRENT_DATE))\n      and hourly_rate > 0\n)\n\n, employee_pay_category as (\n  select    \n   pd.job_title, pd.business_id\n   , cu.description as pay_category_rate_unit, eu.description as employee_rate_unit\n   , c.* \n   , pr.residential_state\n   , pr.gender      \n   , pr.monthly_gross_earnings\n   , pr.total_hours   \n   , pr.billing_month\n  from -- latest default pay\n    (\n      select * from \"dev\".\"keypay\".\"employee_pay_category\"\n        where id in\n        (\n              select\n                FIRST_VALUE(id) over (\n                  partition by \n                    employee_id\n                    order by to_date::date desc nulls first, from_date::date desc\n                    rows between unbounded\n                    preceding and unbounded following\n                 )\n              from \"dev\".\"keypay\".\"employee_pay_category\" c\n            where (c.from_date::date < getdate())\n              and (c.to_date::date is null or c.to_date = 'NULL' or c.to_date::date > DATE_TRUNC('month', dateadd('month', -13, getdate()))) \n              and (c.expiry_date::date is null or c.expiry_date = 'NULL' or c.expiry_date::date > DATE_TRUNC('month', dateadd('month', -13, CURRENT_DATE))) \n              and c.is_default  -- multiple default pay categories \n              and (standard_weekly_hours > 0 or standard_daily_hours > 0)\n          )         \n     )c\n  join \"dev\".\"keypay\".\"rate_unit\" cu on c.pay_category_rate_unit_id = cu.id \n  join \"dev\".\"keypay\".\"rate_unit\" eu on c.employee_rate_unit_id = eu.id    \n  join \"dev\".\"keypay_dwh\".\"employee\" e on c.employee_id = e.id \n  join recent_payrun pr on pr.employee_id = c.employee_id and billing_month_desc = 1  \n   join \"dev\".\"keypay\".\"payrun_default\" pd on e.pay_run_default_id = pd.id and pd.employee_id = e.id \nwhere --(e.start_date < getdate()) and (e.end_date is null or e.end_date > getdate())  -- having employee_pay_category: 210019   and\n  cu.description != 'Fixed'  --??? ignore this type, 195667\n  and pd.from_date::date < CURRENT_DATE\n  and (pd.to_date::date is null or pd.to_date::date > DATE_TRUNC('month', dateadd('month', -13, CURRENT_DATE))) \n  and pd.job_title is not null and pd.job_title !~ '^$' and len(pd.job_title) > 1\n)\n\n, employee_latest_salary as (\n  select \n  business_id\n    , employee_id\n    , billing_month as last_billing_month\n    , residential_state\n    , gender\n    , job_title    \n    , sum(estimated_pay) as estimated_annual_pay   \n    , sum(standard_weekly_hours) as weekly_hours\n    , sum(default_annual_pay) as annual_pay\n    from (\n      select *\n        , case when pc.pay_category_rate_unit = 'Annually' then pc.calculated_rate\n            when pc.pay_category_rate_unit = 'Hourly' then pc.calculated_rate * pc.standard_weekly_hours * 365/7 \n            when pc.pay_category_rate_unit = 'Monthly' then pc.calculated_rate * 12\n            --when pc.pay_category_rate_unit = 'Fixed' then pc.calculated_rate * pc.standard_weekly_hours * 365/7  -- ??? ignore this \n            when pc.pay_category_rate_unit = 'Daily' then pc.calculated_rate * pc.standard_weekly_hours * 365/7\n        end as default_annual_pay       \n      , case when pc.total_hours = 0 then null else pc.monthly_gross_earnings/pc.total_hours * pc.standard_weekly_hours * 365/7 end as estimated_pay \n      from employee_pay_category pc\n      )\n    group by 1,2,3,4,5,6\n  -- filter out the suspicious records with much higher annual pay than pay run. \n  having weekly_hours > 30  -- full time\n  and annual_pay > 0 \n  and case when estimated_annual_pay > 0 then abs(annual_pay - estimated_annual_pay) < 0.5 * annual_pay else true end\n  )\n\n, t_cleansed as (\n    select job_title,  \n-- remove ending words   \ntrim(regexp_replace(trim(regexp_replace(trim(regexp_replace(trim(regexp_replace(         \n    trim(replace(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(replace(trim(lower(\n        -- abbreviations\n        trim(job_title_abbreviation_expand( \n            -- replace & with and\n            trim(replace(replace(\n                -- replace + with and\n                trim(replace(replace(\n                    -- 5. replace & with and\n                    trim(replace(replace(\n                        -- 4. replace ! with of\n                        trim(replace(replace(replace(replace(replace(replace(replace(\n                            -- 3. trim ending special characters\n                            trim(trim('&' from trim(trim('/' from trim(trim(':' from trim(trim('|' from trim(trim('-' from trim(trim('|' FROM ( \n                                -- 2. remove state\n                                trim(REGEXP_REPLACE(TRIM(REGEXP_REPLACE(REGEXP_REPLACE(lower(   \n                                    -- 1. remove content inside bracket\n                                    trim(REGEXP_REPLACE(job_title, '\\\\([^)]*\\\\)'))\n                                ), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' '), '(^|\\\\W)(act|nsw|nt|qld|sa|tas|vic|wa|new south wales|victoria|queensland|western australia|south australia|tasmania|australian capital territory|northern territory|brisbane|canberra|darwin|hobart|melbourne|perth|sydney)(\\\\W|$)', ' ')), '-$'))\n                            )))))))))))))\n                        , ' - ', ' of '), ' : ', ' of '), ':', ' of '), ' | ', ' of '), '|', ' of '), ', ', ' of '), ',', ' of '))\n                    , ' / ', ' and '), '/', ' and '))\n                , ' + ', ' and '), '+', 'and'))\n            , ' & ', ' and '), '&', ' and '))\n        ))\n    )), ' the ', ' '), '^[-/]', ''), '[-/]$', '')), '  ', ' '))\n, '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', '')), '( of| to| \\or| \\and)$', ''))\n as t_title,\n    business_id, employee_id, residential_state, gender, annual_pay, last_billing_month\n    from employee_latest_salary\n)\n\n, t_common as (\n    select t.job_title, trim(INITCAP(coalesce(m.title_common, t.t_title))) as t_title,\n    business_id, employee_id, residential_state, gender, annual_pay, last_billing_month\n    from t_cleansed t \n    left join \"dev\".\"csv\".\"more_common_job_titles\" m on t.t_title = m.title_original\n)\n \n, business_eh_industry as (\n    select\n      m.id as business_id\n      , case \n          when m.industry = 'Other' then 'Other'\n          when m.industry != 'Other' and m.industry is not null then i.matched_eh_industry \n          else null\n        end as industry\n    from \n      (\n        select\n          b.id\n          , case\n              when b.industry_id is null and b.industry_name is not null \n                then 'Other'\n              when b.industry_id is null and b.industry_name is null \n                and z.primary_industry is not null and z.primary_industry != '' \n                then z.primary_industry\n              when b.industry_id is not null then i.name             \n              else null\n            end as industry\n        from\n          \"dev\".\"keypay_dwh\".\"business\" as b\n          left join (select id, name from \"dev\".\"keypay\".\"industry\") as i on\n            b.industry_id = i.id\n          left join (select _id, primary_industry from \"dev\".\"keypay\".\"zoom_info\") as z on\n            b.id = z._id\n      ) as m\n    left join \"dev\".\"one_platform\".\"industry\" as i on\n      regexp_replace( m.industry,'\\\\s','') = regexp_replace( i.keypay_industry,'\\\\s','')\n      or regexp_replace( m.industry,'\\\\s','') = regexp_replace( i.zoom_info_primary_industry,'\\\\s','')\n      or regexp_replace( m.industry,'\\\\s','') = regexp_replace( i.eh_industry,'\\\\s','')\n  )\n                              \nselect \n    t.job_title\n    , t.t_title as processed_title\n \t, t.business_id as organisation_id\n    , t.employee_id as member_id\n    , t.residential_state\n    , t.annual_pay as annual_salary\n    , last_billing_month\n    , i.industry\nfrom t_common t \njoin business_eh_industry i on t.business_id = i.business_id", "relation_name": "\"dev\".\"salary_guide\".\"keypay_v_au_fulltime_job_title_default_salary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.537355Z", "completed_at": "2024-02-04T15:20:59.551857Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.565059Z", "completed_at": "2024-02-04T15:20:59.565072Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04563331604003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.one_platform_growth_s", "compiled": true, "compiled_code": "\n\nwith \nmonths as (\n        select\n          DATEADD('month', -generated_number::int, (date_trunc('month', add_months(current_date, 1))) )::date date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 300\n    order by generated_number\n\n)\n        where date >= '2012-01-01'\n      ) \n      \n, business_organisation_overlap as (\n    select\n      b.id\n    from\n      (\n        select\n          epa.organisation_id\n          , external_id\n        from\n          \"dev\".\"employment_hero\".\"_v_last_connected_payroll\"\n          as epa\n          left join \"dev\".\"postgres_public\".\"payroll_infos\" on\n            payroll_info_id = payroll_infos.id\n            and not payroll_infos._fivetran_deleted\n        where\n          epa.type = 'KeypayAuth'\n      )\n      as o\n      join \"dev\".\"keypay_dwh\".\"business\" b on\n        b.id = o.external_id\n  )\n  , keypay_employees as (\n    select distinct\n      e.employee_id,\n      e.business_id,\n      case\n        when first_paid_month < start_date then first_paid_month::date\n        else start_date\n      end as employee_start_date,\n      end_date as termination_date\n    from \n      \"dev\".\"keypay\".\"au_pay_run_summary_s\" e\n      join \n        (select \n          employee_id\n          , min(billing_month) as first_paid_month\n        from\n          \"dev\".\"keypay\".\"au_pay_run_summary_s\"\n        group by 1) b \n        on e.employee_id = b.employee_id\n    where\n      e.business_id not in ( select * from business_organisation_overlap )\n    )\n\n  , business_employee_movement as (\n    select \n      m.date, \n      e.business_id,\n      count(distinct e.employee_id) as rolling_total\n    from \n      months m \n      join keypay_employees e on m.date >= employee_start_date\n        and (m.date <= e.termination_date or e.termination_date is null)\n      group by 1,2\n  )\n  , business_growth_rate as (\n    select\n      'Keypay'::text as source\n      , m.date\n      , CONCAT('K', m.business_id) as id\n      , m.business_id\n      , cast(null as integer) as organisation_id\n      , m.rolling_total\n      , case\n          when m.rolling_total < 20 then '1-19'\n          when m.rolling_total > 19 and m.rolling_total < 200 then '20-199'\n          when m.rolling_total > 199 then '200+'\n        end as size\n      , pre1.rolling_total as prev_1\n      , pre3.rolling_total as prev_3\n      , pre6.rolling_total as prev_6\n      , pre12.rolling_total as prev_12      \n      , (m.rolling_total-prev_1) / nullif(prev_1, 0 )::float as monthly_growth_rate\n      , (m.rolling_total-prev_3) / nullif(prev_3, 0 )::float as quarterly_growth_rate\n      , (m.rolling_total-prev_6) / nullif(prev_6, 0 )::float as semiannual_growth_rate\n      , (m.rolling_total-prev_12) / nullif(prev_12, 0 )::float as annual_growth_rate\n      , coalesce(industry, case when z.primary_industry is not null and z.primary_industry != '' then z.primary_industry else null end, null) as industry\n      , coalesce(state, case when z.company_state = 'South Australia' then 'SA' when z.company_state = 'Northern Territory' then 'NT' when z.company_state = 'Victoria' then 'VIC' when z.company_state = 'New South Wales' then 'NSW' when z.company_state = 'Queensland' then 'QLD' when z.company_state = 'Tasmania' then 'TAS' when z.company_state = 'Western Australia' then 'WA' when z.company_state = 'Australian Capital Territory' then 'ACT' else null end, null) as state\n    from\n      business_employee_movement as m\n      join(\n        select\n          b.id\n          --         , case\n          --             when industry_name ~* '^[0-9]+$' then null\n          --             when industry_name ~* 'null' then null\n          --             when len(industry_name)=1 then null\n          --             else initcap(industry_name)\n          --           end as industry\n          , case\n              when b.industry_id is null and b.industry_name is not null then 'Other'\n              else i.name\n            end as industry\n          , case\n              when state ~* '(South Australia|SA)' then 'SA'\n              when state ~* '(Northern Territory|NT)' then 'NT'\n              when state ~* '(Victoria|VIC)' then 'VIC'\n              when state ~* '(New South|NSW)' then 'NSW'\n              when state ~* '(Queensland|QLD)' then 'QLD'\n              when state ~* '(Tasmania|TAS)' then 'TAS'\n              when state ~* '(Western Australia|WA)' then 'WA'\n              when state ~* '(Australian Capital Territory|ACT)' then 'ACT'\n              else null\n            end as state\n          , region_id\n        from\n          \"dev\".\"keypay_dwh\".\"business\" b\n        JOIN \"dev\".\"keypay\".\"white_label\" AS wl ON b.white_label_id = wl.id       \n          left join \"dev\".\"keypay_dwh\".\"suburb\" s on\n            b.suburb_id = s.id\n          left join \"dev\".\"keypay\".\"industry\" i on\n            b.industry_id = i.id\n      ) b on\n        m.business_id = b.id\n      left join \"dev\".\"keypay\".\"zoom_info\" z on\n        m.business_id = z._id\n      left join business_employee_movement pre1 on m.business_id = pre1.business_id and m.date = dateadd('month', 1, pre1.date)\n      left join business_employee_movement pre3 on m.business_id = pre3.business_id and m.date = dateadd('month', 3, pre3.date)\n      left join business_employee_movement pre6 on m.business_id = pre6.business_id and m.date = dateadd('month', 6, pre6.date)\n      left join business_employee_movement pre12 on m.business_id = pre12.business_id and m.date = dateadd('month', 12, pre12.date)  \n    where\n      (region_id is null or region_id = 1)\n  )  \n  , organisation_employee_movement as (\n  select \n    m.date, \n    o.id as organisation_id,\n    count(distinct e.id) as rolling_total\n  from months m \n    join \"dev\".\"employment_hero\".\"employees\" e on m.date >= coalesce(e.start_date, e.created_at)\n      and (m.date <= e.termination_date or e.termination_date is null)\n   join \"dev\".\"employment_hero\".\"organisations\" o on e.organisation_id = o.id\n  where o.pricing_type != 'demo' and o.country = 'AU'\n    group by 1,2\n  )\n\n  , organisation_growth_rate as (\n    select\n      'EH'::text as source\n      , m.date\n      , CONCAT('E', m.organisation_id) as id\n      , cast(null as integer) as business_id\n      , m.organisation_id\n      , m.rolling_total\n      , case\n          when m.rolling_total < 20 then '1-19'\n          when m.rolling_total > 19 and m.rolling_total < 200 then '20-199'\n          when m.rolling_total > 199 then '200+'\n        end as size      \n      , pre1.rolling_total as prev_1\n      , pre3.rolling_total as prev_3\n      , pre6.rolling_total as prev_6\n      , pre12.rolling_total as prev_12      \n      , (m.rolling_total-prev_1) / nullif(prev_1, 0 )::float as monthly_growth_rate\n      , (m.rolling_total-prev_3) / nullif(prev_3, 0 )::float as quarterly_growth_rate\n      , (m.rolling_total-prev_6) / nullif(prev_6, 0 )::float as semiannual_growth_rate\n      , (m.rolling_total-prev_12) / nullif(prev_12, 0 )::float as annual_growth_rate    \n      , o.industry\n      , case\n          when a.state is not null\n          and a.state = '' then null\n          else a.state\n        end as state\n    from\n      organisation_employee_movement m\n      left join \"dev\".\"employment_hero\".\"organisations\" as o on\n        o.id = m.organisation_id\n      left join \"dev\".\"postgres_public\".\"addresses\" a on\n        o.primary_address_id = a.id\n        and not a._fivetran_deleted\n      left join organisation_employee_movement pre1 on m.organisation_id = pre1.organisation_id and m.date = dateadd('month', 1, pre1.date)\n      left join organisation_employee_movement pre3 on m.organisation_id = pre3.organisation_id and m.date = dateadd('month', 3, pre3.date)\n      left join organisation_employee_movement pre6 on m.organisation_id = pre6.organisation_id and m.date = dateadd('month', 6, pre6.date)\n      left join organisation_employee_movement pre12 on m.organisation_id = pre12.organisation_id and m.date = dateadd('month', 12, pre12.date)  \n  )\n\nselect \n  x.source\n  , dateadd('month', -1, x.date) as date\n  , x.id\n  , x.business_id\n  , x.organisation_id\n  , x.rolling_total\n  , x.size\n  , x.monthly_growth_rate\n  , x.quarterly_growth_rate\n  , x.semiannual_growth_rate\n  , x.annual_growth_rate  \n  , (x.monthly_growth_rate-avg(x.monthly_growth_rate) over ()) / (stddev(x.monthly_growth_rate) over ()) as z_score_monthly_growth_rate\n  , (x.quarterly_growth_rate-avg(x.quarterly_growth_rate) over ()) / (stddev(x.quarterly_growth_rate) over ()) as z_score_quarterly_growth_rate\n  , (x.semiannual_growth_rate-avg(x.semiannual_growth_rate) over ()) / (stddev(x.semiannual_growth_rate) over ()) as z_score_semiannual_growth_rate\n  , (x.annual_growth_rate-avg(x.annual_growth_rate) over ()) / (stddev(x.annual_growth_rate) over ()) as z_score_annual_growth_rate\n  , case \n      when x.industry = 'Other' then 'Other'\n      when x.industry != 'Other' and x.industry is not null then i.consolidated_industry \n      else null\n    end as industry\n  , x.state\nfrom (\n    select * from business_growth_rate\n  union all\n    select * from organisation_growth_rate\n      ) as x \n  left join \"dev\".\"one_platform\".\"industry\" as i on\n    regexp_replace( x.industry,'\\\\s','') = regexp_replace( i.eh_industry,'\\\\s','')\n    or regexp_replace( x.industry,'\\\\s','') = regexp_replace( i.keypay_industry,'\\\\s','')\n    or regexp_replace( x.industry,'\\\\s','') = regexp_replace( i.zoom_info_primary_industry,'\\\\s','')", "relation_name": "\"dev\".\"one_platform\".\"growth_s\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.553033Z", "completed_at": "2024-02-04T15:20:59.566209Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.580682Z", "completed_at": "2024-02-04T15:20:59.580696Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05884432792663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_companydash_mmau_exclu_payroll__date_country_.ecf8cccfd4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || country)\nfrom \"dev\".\"tableau\".\"companydash_mmau_exclu_payroll\"\nwhere (date || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.567517Z", "completed_at": "2024-02-04T15:20:59.578280Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.596181Z", "completed_at": "2024-02-04T15:20:59.596195Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04284191131591797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_companydash_mmau_exclu_payroll__date_country_.789be681c5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"companydash_mmau_exclu_payroll\"\nwhere (date || country) is not null\ngroup by (date || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.581995Z", "completed_at": "2024-02-04T15:20:59.598535Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.611214Z", "completed_at": "2024-02-04T15:20:59.611228Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04423975944519043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.exports_braze_users", "compiled": true, "compiled_code": "with\nuser_info as (\n    select\n        u.user_id,\n        addr.postcode,\n        initcap(replace(u.first_name, chr(92) || chr(39), chr(39))) as first_name,\n        initcap(replace(u.last_name, chr(92) || chr(39), chr(39)))  as last_name,\n        u.address_id,\n        u.country_code,\n        u.phone_number,\n        u.state_code,\n        u.marketing_consented_at,\n        coalesce(u.marketing_consented_at is not NULL, FALSE)       as is_marketing_consented,\n        u.source                                                    as user_signin_source\n    from \"dev\".\"postgres_public\".\"user_infos\" as u\n    left join \"dev\".\"postgres_public\".\"addresses\" as addr\n        on u.address_id = addr.id and not addr._fivetran_deleted\n    where u.updated_at = (\n        select max(updated_at) from \"dev\".\"postgres_public\".\"user_infos\"\n        where user_id = u.user_id\n    )\n),\n\nemployee_latest as (\n    select e1.*\n    from \"dev\".\"employment_hero\".\"employees\" as e1\n    where e1.updated_at = (\n        select max(updated_at) from \"dev\".\"employment_hero\".\"employees\" as e2\n        where e1.user_uuid = e2.user_uuid\n    )\n),\n\nemployee_address as (\n    select\n        e.user_uuid,\n        e.address_id,\n        addr.city,\n        addr.country,\n        addr.postcode,\n        addr.state\n    from employee_latest as e\n    left join \"dev\".\"postgres_public\".\"addresses\" as addr\n        on e.address_id = addr.id and not addr._fivetran_deleted\n),\n\nemployment_histories as (\n    select\n        user_id,\n        coalesce(\n            case when industry_standard_job_title = '' then NULL else industry_standard_job_title end,\n            case when job_title = '' then NULL else job_title end\n        )           as job_title,\n        current_job as still_in_position\n    from \"dev\".\"postgres_public\".\"user_employment_histories\"\n    where not _fivetran_deleted\n    qualify row_number() over (partition by user_id order by updated_at desc) = 1\n),\n\nusers as (\n    select\n        u.uuid                                              as user_uuid,\n        u.id                                                as user_id,\n        cc.alpha_two_letter,\n        coalesce(\n            case when \n    (case \n        when u.email is NULL then false\n        when not (u.email not LIKE '%_@_%._%')\n            and not (\n\t\t        u.email LIKE '.%'         -- begin with dot. eg: .abc@gmail.com\n\t\t        or u.email LIKE '%.@%'    -- email's name end with dot. eg: abc.@gmail.com\n\t        )\n\n            -- Email domain should not contain numberic characters. eg: abc@gmai.123\n\t        and split_part(u.email, '.', regexp_count(u.email, '\\\\.') + 1) !~ '^[0-9]+$'\n\n\t        -- Length should not exceed 64 characters before @.\n\t        and length(split_part(u.email, '@', 1)) <= 64 then true\n        else false\n    end)\n = TRUE then u.email end,\n            case when \n    (case \n        when e.personal_email is NULL then false\n        when not (e.personal_email not LIKE '%_@_%._%')\n            and not (\n\t\t        e.personal_email LIKE '.%'         -- begin with dot. eg: .abc@gmail.com\n\t\t        or e.personal_email LIKE '%.@%'    -- email's name end with dot. eg: abc.@gmail.com\n\t        )\n\n            -- Email domain should not contain numberic characters. eg: abc@gmai.123\n\t        and split_part(e.personal_email, '.', regexp_count(e.personal_email, '\\\\.') + 1) !~ '^[0-9]+$'\n\n\t        -- Length should not exceed 64 characters before @.\n\t        and length(split_part(e.personal_email, '@', 1)) <= 64 then true\n        else false\n    end)\n = TRUE then e.personal_email end\n        )                                                   as email,\n        u.created_at                                        as user_date_created,\n\n        case\n            when e.gender is NULL or e.gender = '' or e.gender in ('Prefer not to say', 'Unknown', 'Prefer not to answer') then 'P'\n            when e.gender in ('Non-binary', 'Other', 'Indeterminate') then 'O'\n            when e.gender in ('Female', 'Females', 'Femalee', 'Femal', 'F') then 'F'\n            when e.gender in ('Male', 'M') then 'M'\n        end                                                 as gender,\n\n        initcap(ea.city)                                    as home_city,\n\n        coalesce(ui.postcode, ea.postcode)                  as postcode,\n        coalesce(ui.address_id, ea.address_id)              as address_id,\n        coalesce(ui.country_code, ea.country, cc.country)   as country,\n        coalesce(ui.state_code, ea.state)                   as state_code,\n        ui.first_name,\n        ui.last_name,\n        coalesce(ui.phone_number, e.personal_mobile_number) as phone_number,\n\n        ui.marketing_consented_at,\n        ui.is_marketing_consented,\n        ui.user_signin_source,\n\n        eh.job_title                                        as candidate_recent_job_title\n    from \"dev\".\"postgres_public\".\"users\" as u\n    left join user_info as ui\n        on u.id = ui.user_id\n    left join \"dev\".\"workshop_public\".\"country_codes\" as cc\n        on ui.country_code = cc.alpha_two_letter or ui.country_code = cc.alpha_three_letter\n    left join employee_latest as e\n        on u.uuid = e.user_uuid\n    left join employee_address as ea\n        on u.uuid = ea.user_uuid\n    left join employment_histories as eh\n        on u.id = eh.user_id\n    where not u._fivetran_deleted\n),\n\nuser_braze_unsubscribed_lastest as (\n    select\n        user_id,\n        email_address\n    from (\n        select\n            *,\n            row_number() over (\n                partition by user_id, email_address\n                order by time desc\n            ) as rn\n        from \"dev\".\"braze\".\"subscription_event\"\n        where event_type = 'users.behaviors.subscription.GlobalStateChange'\n    )\n    where\n        rn = 1\n        and subscription_status = 'Unsubscribed'\n),\n\nuser_marketo_unsubscribed_latest as (\n    select\n        email,\n        unsubscribed\n    from\n        \"dev\".\"marketo\".\"lead\" as l\n    where\n        updated_at = (\n            select max(updated_at)\n            from \"dev\".\"marketo\".\"lead\"\n            where\n                email = l.email\n        )\n        and unsubscribed = TRUE\n),\n\nactive_employed_users as (\n    select distinct e.user_uuid\n    from \"dev\".\"employment_hero\".\"employees\" as e\n    where termination_date is NULL\n    -- User gonna quite their job but already found a new job.\n    or (\n        select max(termination_date) from \"dev\".\"employment_hero\".\"employees\"\n        where user_uuid = e.user_uuid\n    ) < (\n        select max(start_date) from \"dev\".\"employment_hero\".\"employees\"\n        where user_uuid = e.user_uuid\n    )\n),\n\nmarketo_subscription as (\n    select\n        email,\n        coalesce(whatsapp_subscribed is not NULL and whatsapp_subscribed = TRUE, FALSE) as marketo_whatsapp_opt_in,\n        coalesce(email_subscribed is not NULL and email_subscribed = FALSE, FALSE)      as marketo_email_unsubscribed,\n        coalesce(sms_subscribed is not NULL and sms_subscribed = FALSE, FALSE)          as marketo_sms_unsubscribed\n    from \"dev\".\"marketo\".\"subscription\"\n),\n\nebenefits as (\n    select\n        user_id,\n        benefits_enabled\n    from \"dev\".\"ebenefits\".\"users\"\n)\n\nselect\n    u.*,\n    nvl2(e.user_uuid, TRUE, FALSE)                                             as user_actively_employed,\n    case\n        when c.user_uuid is not NULL then TRUE\n        when u.user_signin_source = 'career_page' then TRUE\n        else FALSE\n    end                                                                        as user_is_candidate,\n    ci.format_phone_number_e164(u.phone_number, u.alpha_two_letter) as phone_number_e164,\n    marketo.marketo_whatsapp_opt_in,\n    marketo.marketo_email_unsubscribed,\n    marketo.marketo_sms_unsubscribed,\n\n    coalesce(eb.benefits_enabled, FALSE)                                       as benefits_enabled\nfrom users as u\nleft join user_braze_unsubscribed_lastest as ub\n    on u.user_uuid = ub.user_id and u.email = ub.email_address\nleft join active_employed_users as e\n    on u.user_uuid = e.user_uuid\nleft join \"dev\".\"ats\".\"candidate_profiles\" as c\n    on u.user_uuid = c.user_uuid\nleft join marketo_subscription as marketo\n    on u.email = marketo.email\nleft join ebenefits as eb\n    on u.user_id = eb.user_id\nwhere\n    1 = 1\n    -- filter out unsubscribed users from Marketo \n    and u.email not in (\n        select email from user_marketo_unsubscribed_latest\n    )\n    -- filter out unsubscribed users from Braze\n    and ub.user_id is NULL\n\n    -- filter out empty name\n    and u.first_name is not NULL and u.last_name != 'Unknown'\n    and u.last_name is not NULL and u.last_name != 'Unknown'", "relation_name": "\"dev\".\"exports\".\"exports_braze_users\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.602490Z", "completed_at": "2024-02-04T15:20:59.613600Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.627371Z", "completed_at": "2024-02-04T15:20:59.627389Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04607033729553223, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_users_user_id.9de0be77e1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"ebenefits\".\"users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.618287Z", "completed_at": "2024-02-04T15:20:59.634451Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.645599Z", "completed_at": "2024-02-04T15:20:59.645617Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04633212089538574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_users_user_id.a5a11dc292", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"users\"\nwhere user_id is not null\ngroup by user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.628636Z", "completed_at": "2024-02-04T15:20:59.643978Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.658571Z", "completed_at": "2024-02-04T15:20:59.658585Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.052942514419555664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_instapay_eligible_member_profile", "compiled": true, "compiled_code": "\n\nwith \n    payslips as (\n        select member_id      \n        , datediff('week', pay_period_starting, pay_period_ending) as weeks\n        , case\n            when weeks < 2 then 'Weekly'\n            when weeks = 2 then 'Fortnightly'\n            when weeks between 3 and 6 then 'Monthly'\n            when weeks between 12 and 13 then 'Quarterly'\n            when weeks = 26 then 'Biannually'\n            when weeks = 52 then 'Annually'\n        end pay_frequency \n        from \n            \"dev\".\"postgres_public\".\"payslips\" ps\n        where \n            not ps._fivetran_deleted\n            and id in (  \n                select\n                    FIRST_VALUE(id) over(partition by member_id order by pay_period_ending desc rows between unbounded preceding and unbounded following)\n                from\n                    \"dev\".\"postgres_public\".\"payslips\" ps\n                where\n                    not _fivetran_deleted\n                    and pay_period_ending < getdate()\n                )\n    )\n    , salary_version AS (\n        select\n            sv.*\n            , initcap(ps.frequency) as frequency\n            , case when salary_type ~* 'hour' and hours_per_week > 0 then salary * hours_per_week * 52\n                when salary_type ~* 'day' and days_per_week > 0 then salary * days_per_week * 52\n                when salary_type ~* 'fortnight' and days_per_week > 0 then salary * days_per_week * 26\n                when salary_type ~* '^month' then salary * 12 \n                when salary_type ~* 'annum' then salary\n                else 0 end as yearly_salary\n        from \n            \n\n(\nselect\n    *\n  from\n    \"dev\".\"postgres_public\".\"salary_versions\"\n  where\n    id in (\n      select\n        FIRST_VALUE(id) over(partition by member_id order by created_at desc rows between unbounded preceding and unbounded following)\n      from\n        \"dev\".\"postgres_public\".\"salary_versions\"\n      where\n        not _fivetran_deleted\n    )\n)\n\n as sv\n            left join \"dev\".\"postgres_public\".\"pay_schedules\" as ps on\n                sv.pay_schedule_id = ps.id\n        where \n            not sv.in_review\n            and (sv.effective_from <= current_date or sv.effective_from is null)\n            and not sv._fivetran_deleted\n            and not ps._fivetran_deleted\n    )\n    , unlaunched_organisations AS (\n        select\n            organisation_id\n        from\n            \"dev\".\"postgres_public\".\"sandbox_settings\"\n        where\n            organisation_id is not null\n            and not sandbox_settings._fivetran_deleted\n    )\n    , heropay_transactions_by_member AS (\n        select\n            member_id AS member_uuid\n            ,sum(coalesce(admin_fee, 0)) as total_admin_fee\n            ,count(id) as total_heropay_transactions\n            ,min(created_at) as first_created_at\n            ,max(created_at) as last_created_at\n        from\n            \"dev\".\"heropay_db_public\".\"heropay_transactions\"\n        where \n            not _fivetran_deleted or _fivetran_deleted is null\n        group by member_id\n    )\n    , instapay_members as (\n        select\n            m.id as member_id\n            , m.user_id\n            , m.user_uuid\n            , lower(m.email) as email\n            , m.created_at\n            , m.active\n            , m.start_date\n            , m.termination_date\n            , datediff('year', m.date_of_birth, getdate()) as age\n            , case when m.gender ~* '^f' then 'Female'\n                when m.gender ~* '^m' then 'Male' \n                else 'N/A' end as gender\n            , case when age < 18 THEN ' <18'\n                WHEN age >= 18 AND age <= 24 THEN '18-24'\n                WHEN age > 24 AND age <= 34 THEN '25-34'\n                WHEN age > 34 AND age <= 44 THEN '35-44'\n                WHEN age > 44 AND age <= 54 THEN '45-54'\n                WHEN age > 54 AND age <= 64 THEN '55-64'\n                WHEN age > 64 THEN '65+' end as age_bracket \n            , case\n                when ea.state ~* '(South Australia|SA)' then 'SA'\n                when ea.state ~* '(Northern Territory|NT)' then 'NT'\n                when ea.state ~* '(Victoria|VIC)' then 'VIC'\n                when ea.state ~* '(New South|NSW)' then 'NSW'\n                when ea.state ~* '(Queensland|QLD)' then 'QLD'\n                when ea.state ~* '(Tasmania|TAS)' then 'TAS'\n                when ea.state ~* '(Western Australia|WA)' then 'WA'\n                when ea.state ~* '(Australian Capital Territory|ACT)' then 'ACT'\n                else null end as residential_state\n            , m.latest_employment_type as employment_type\n            , m.organisation_id\n            , o.name as organisation_name\n            , case when os.active_employees < 20 then '1-19'\n                when os.active_employees >= 20 and os.active_employees < 200 then '20-199' \n                when os.active_employees >= 200 then '200+' end as business_size\n            , oi.consolidated_industry as industry \n            , o.payroll_type\n            , o.connected_app\n            , sv.salary_type\n            , coalesce(sv.frequency,ps.pay_frequency) as pay_frequency\n\n            , coalesce(mp.monthly_wages*12, sv.yearly_salary)as annum_salary \n            , case when annum_salary/1000 < 40 then '<40k'\n                when annum_salary/1000 >= 40 and annum_salary/1000 < 50 then '40-50k'\n                when annum_salary/1000 >= 50 and annum_salary/1000 < 70 then '50-70k'\n                when annum_salary/1000 >= 70 and annum_salary/1000 < 100 then '70-100k'\n                when annum_salary/1000 >= 100 and annum_salary/1000 < 120 then '100-120k' \n                when annum_salary/1000 >= 120 and annum_salary/1000 < 160 then '120-160k' \n                when annum_salary/1000 >= 160 then '160k+' end as income_bracket\n\n            ,hp.total_heropay_transactions\n            ,hp.total_admin_fee as revenue\n            ,hp.first_created_at::date as first_time_instapay_usage\n            ,hp.last_created_at::date as last_time_instapay_usage\n            ,sa.first_time_swag_app\n        from \n            \"dev\".\"employment_hero\".\"employees\" as m\n            join \"dev\".\"postgres_public\".\"payroll_infos\" as i on \n                i.id = m.payroll_info_id\n                and i.status = 1\n                and not i._fivetran_deleted\n            join salary_version sv on\n                m.id = sv.member_id\n                and sv.salary_type in ('Hour', 'Annum')\n            left join payslips ps on \n                ps.member_id = m.id\n            left join \n                (select distinct \n                    member_id\n                    , FIRST_VALUE(monthly_wages) over (partition by member_id order by month desc rows between unbounded preceding and unbounded following) as monthly_wages\n                from employment_hero.au_employee_monthly_pay\n                ) mp on \n                mp.member_id = m.id\n            left join \"dev\".\"postgres_public\".\"addresses\" ea on \n                m.address_id = ea.id and not ea._fivetran_deleted \n            left join heropay_transactions_by_member hp on\n                hp.member_uuid = m.uuid\n            left join \"dev\".\"employment_hero\".\"_v_employees_first_time_swag_app\" as sa on\n                lower(m.email) = sa.user_email\n            join \"dev\".\"employment_hero\".\"organisations\" o on \n                m.organisation_id = o.id\n                and o.id not in (select organisation_id from unlaunched_organisations)\n            join \"dev\".\"ebenefits\".\"_v_instapay_on_off_organisations\" ioo on \n                ioo.organisation_id = m.organisation_id\n                and ioo.instapay_enabled\n            join \"dev\".\"postgres_public\".\"menu_customisations\" as mc on \n                mc.organisation_id = o.id\n                and mc.instapay != 0\n            left join  \"dev\".\"employment_hero\".\"_v_active_employees_by_organisations\" os on \n                m.organisation_id = os.organisation_id  \n            left join  \"dev\".\"one_platform\".\"industry\" as oi on \n                regexp_replace( o.industry,'\\\\s','') = regexp_replace( oi.eh_industry,'\\\\s','')\n        where \n            -- m.work_country = 'AU'  \n            m.active\n            and m.accepted\n            and m.external_id is not null\n            and m.synced_status != 1\n            and m.sync_with_payroll\n            and coalesce(m.termination_date, cast(json_extract_path_text(m.termination_info, 'termination_date') as date)) is null\n    )\n\nselect * from instapay_members", "relation_name": "\"dev\".\"ebenefits\".\"instapay_eligible_member_profile\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.646924Z", "completed_at": "2024-02-04T15:20:59.657433Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.670528Z", "completed_at": "2024-02-04T15:20:59.670542Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03805661201477051, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_hero_v_employees_first_time_swag_app_user_email.3f5b4a27aa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_email\nfrom \"dev\".\"employment_hero\".\"_v_employees_first_time_swag_app\"\nwhere user_email is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.660971Z", "completed_at": "2024-02-04T15:20:59.673004Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.687076Z", "completed_at": "2024-02-04T15:20:59.687090Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04600667953491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_hero_v_employees_first_time_swag_app_user_email.1176eb5941", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_email as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_hero\".\"_v_employees_first_time_swag_app\"\nwhere user_email is not null\ngroup by user_email\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.679524Z", "completed_at": "2024-02-04T15:20:59.689766Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.724501Z", "completed_at": "2024-02-04T15:20:59.724517Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.08456730842590332, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_daumau_date.09ff0b451e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"mp\".\"daumau\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.690916Z", "completed_at": "2024-02-04T15:20:59.702982Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.757379Z", "completed_at": "2024-02-04T15:20:59.757393Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.08976340293884277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_mp_daumau_date.8a49ce1a74", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mp\".\"daumau\"\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.704137Z", "completed_at": "2024-02-04T15:20:59.756180Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.769978Z", "completed_at": "2024-02-04T15:20:59.769991Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0871424674987793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customers_accounts", "compiled": true, "compiled_code": "\n\nwith\n    eh_hr_accounts as (\n        -- this view gets all accounts that were or are being billed for EH HR Software\n        select distinct (sa.id) as external_id, sa.name\n        from \"dev\".\"zuora\".\"account\" za\n        inner join \"dev\".\"salesforce\".\"account\" sa on za.crm_id = sa.id\n        inner join \"dev\".\"zuora\".\"subscription\" zs on zs.account_id = za.id\n        left join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on zs.id = zrpc.subscription_id\n        left join \"dev\".\"zuora\".\"product_rate_plan\" zprp on zrpc.product_rate_plan_id = zprp.id\n        left join \"dev\".\"zuora\".\"product\" zp on zprp.product_id = zp.id\n        where\n            -- test accounts must be hard coded out of this view\n            -- hardcode is the best way to do this so accounts with 'test' within the name is not accidentally\n            -- removed, ie. contest\n            za.batch != 'Batch50'\n            and sa.id not in ('0010o00002p39mUAAQ', '0010o00002WeuIWAAZ')\n            and not za._fivetran_deleted\n            and not sa.is_deleted\n            and not zs._fivetran_deleted\n            and not zp._fivetran_deleted\n            and not zprp._fivetran_deleted\n            and not zrpc._fivetran_deleted\n    ),\n    paying_eh_orgs as (\n        select o.*\n        from \"dev\".\"postgres_public\".\"organisations\" o\n        join\n            (\n                select *\n                from \"dev\".\"postgres_public\".\"agreements\"\n                where\n                    id in (\n                        select\n                            first_value(id) over (\n                                partition by organisation_id\n                                order by created_at desc\n                                rows between unbounded preceding and current row\n                            )\n                        from \"dev\".\"postgres_public\".\"agreements\"\n                        where not cancelled\n                    )\n            ) a\n            on o.id = a.organisation_id\n        where\n            not a._fivetran_deleted\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n            and a.subscription_plan_id not in (  -- free\n                4,  -- Startup Premium\n                7,  -- Free (30 days)\n                11,  -- Free\n                17,  -- Demo\n                43,  -- CHURN (FREE)\n                52,  -- Implementations Free\n                53,  -- Startup Standard\n                55,  -- ANZ Free\n                144,  -- International Free\n                145,  -- Premium Trial\n                161,  -- SUSPENDED (FREE) \n                162,  -- SEA free  \n                166  -- ATS Free\n            )\n    ),\n    stage_churn as (\n        -- view with churn account details, ie.is_churn=0 means account churned\n        select\n            eh.external_id,\n            eh.name,\n            '[' || listagg(distinct '\"' || za.id || '\"', ', ') || ']' as zuora_id,\n            '[' || listagg(distinct '\"' || o.id || '\"', ', ') || ']' as org_id,\n            '[' || listagg(distinct '\"' || ba.name || '\"', ', ') || ']' as business_account_name,\n            count(case when (zs.status = 'Active' or zs.status = 'Suspended') then 1 else null end) as is_churn\n        from \"dev\".\"zuora\".\"account\" za\n        inner join eh_hr_accounts eh on za.crm_id = eh.external_id\n        inner join \"dev\".\"zuora\".\"subscription\" zs on zs.account_id = za.id\n        left join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on zs.id = zrpc.subscription_id\n        left join \"dev\".\"zuora\".\"product_rate_plan\" zprp on zrpc.product_rate_plan_id = zprp.id\n        left join \"dev\".\"zuora\".\"product\" zp on zprp.product_id = zp.id\n        left join\n            \"dev\".\"postgres_public\".\"organisations\" o\n            on za.id = o.zuora_account_id\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n        left join\n            \"dev\".\"postgres_public\".\"business_accounts\" ba\n            on o.business_account_id = ba.id\n            and not ba._fivetran_deleted\n        where\n            not za._fivetran_deleted\n            and not zs._fivetran_deleted\n            and not zp._fivetran_deleted\n            and not zprp._fivetran_deleted\n            and not zrpc._fivetran_deleted\n            -- and zp.name ilike '%Software%'\n            and zp.name ~* '(Software|Add-On Products)'\n        group by eh.external_id, eh.name\n    ),\n    churn_date_field as (\n        -- view with churn account date\n        select\n            scn.external_id,\n            scn.name,\n            -- , sa.churn_date_c, sa.downgrade_to_churn_date_c, zs.subscription_end_date, zs.cancelled_date,\n            -- zs.term_end_date, sa.churn_request_date_c\n            max(coalesce(zs.cancelled_date, zs.subscription_end_date, zs.term_end_date)) as churn_date\n        from stage_churn as scn\n        inner join \"dev\".\"salesforce\".\"account\" sa on sa.id = scn.external_id\n        inner join \"dev\".\"zuora\".\"account\" za on za.crm_id = sa.id\n        inner join \"dev\".\"zuora\".\"subscription\" zs on zs.account_id = za.id\n        join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on zs.id = zrpc.subscription_id\n        join \"dev\".\"zuora\".\"product_rate_plan\" zprp on zrpc.product_rate_plan_id = zprp.id\n        join \"dev\".\"zuora\".\"product\" zp on zprp.product_id = zp.id\n        inner join\n            (\n                -- get the last version of a subscription\n                select s.account_id, s.name as sub_name, max(s.version) as version\n                from \"dev\".\"zuora\".\"subscription\" s\n                join \"dev\".\"zuora\".\"account\" a on s.account_id = a.id\n                where not a._fivetran_deleted and not s._fivetran_deleted\n                group by 1, 2\n            ) cs\n            on cs.sub_name = zs.name\n            and zs.account_id = cs.account_id\n            and cs.version = zs.version\n        where\n            scn.is_churn = 0\n            and not sa.is_deleted\n            and not za._fivetran_deleted\n            and not zs._fivetran_deleted\n            and not zrpc._fivetran_deleted\n            and not zprp._fivetran_deleted\n            and not zp._fivetran_deleted\n            and zp.name ilike '%Software%'\n        group by 1, 2\n    ),\n    stage_implementation as (\n        -- churned accounts have already been filtered out.\n        -- if account has 1 or more projects that are not completed, it is DEFINATELY under implementation\n        -- (is_implementation is greater than 0)\n        select\n            scn.external_id,\n            scn.name,\n            '[' || listagg(distinct '\"' || o.id || '\"', ', ') || ']' as org_id,\n            count(\n                case\n                    when\n                        ipc_hr.id is not null\n                        and (\n                            coalesce(\n                                ipc_hr.project_completion_date_c,\n                                ipc_hr.go_live_date_c,\n                                ipc_hr.actual_finish_date_c,\n                                ipc_hr.completed_date_c\n                            )\n                            is null\n                            or (\n                                (\n                                    ipc_hr.stage_c not in ('Go Live', 'Post Go Live', 'Cancelled', 'Expired', 'Closed')\n                                    and ipc_hr.stage_c is not null\n                                )\n                                or (ipc_hr.status_c not in ('Completed', 'Closed') and ipc_hr.status_c is not null)\n                            )\n                        )\n                        or ipc_pr.id is not null\n                        and (\n                            coalesce(\n                                ipc_pr.project_completion_date_c,\n                                ipc_pr.go_live_date_c,\n                                ipc_pr.actual_finish_date_c,\n                                ipc_pr.completed_date_c\n                            )\n                            is null\n                            or (\n                                -- ipc_pr.project_completion_date_c is null      or \n                                (\n                                    ipc_pr.stage_c not in ('Go Live', 'Post Go Live', 'Cancelled', 'Expired', 'Closed')\n                                    and ipc_pr.stage_c is not null\n                                )\n                                or (ipc_pr.status_c not in ('Completed', 'Closed') and ipc_pr.status_c is not null)\n                            )\n                        )\n                    then 1  -- else null\n                end\n            ) as is_implementation\n\n        from stage_churn as scn\n        left join\n            \"dev\".\"salesforce\".\"implementation_project_c\" ipc_hr\n            on scn.external_id = ipc_hr.account_c\n            and not ipc_hr.is_deleted\n            and (ipc_hr.service_offering_c ilike '%hr%' or ipc_hr.service_offering_c ilike '%combined journey%')\n        left join\n            \"dev\".\"salesforce\".\"implementation_project_c\" ipc_pr\n            on scn.external_id = ipc_pr.account_c\n            and not ipc_pr.is_deleted\n            and (ipc_pr.service_offering_c ilike '%payroll%' or ipc_hr.service_offering_c ilike '%combined journey%')\n        left join\n            \"dev\".\"postgres_public\".\"organisations\" o\n            on scn.zuora_id = o.zuora_account_id\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n        where scn.is_churn != 0\n        group by scn.external_id, scn.name\n    ),\n    stage_completed as (\n        -- accounts passed by the stage_implementation filter goes through a last filter to identify if:\n        -- 1. there is an org_id (or multiple). if none then it will be in review. if there is then look at ALL the\n        -- setup_mode for that account\n        -- 2. in those orgs, how many setup_mode switched on is there. Greater than 0 means that it will be in the\n        -- implementation stage\n        -- there're some edge cases when customers leave setup_mode on permanently and use EH as a filing system\n        -- without inviting their emps\n        select\n            si.external_id,\n            si.name,\n            '[' || listagg(\n                distinct '\"'\n                || case when not o._fivetran_deleted and not o.is_shadow_data then o.id else null end\n                || '\"',\n                ', '\n            )\n            || ']' as org_id,\n            '['\n            || listagg(distinct '\"' || case when not kp.is_deleted then kp.id_c else null end || '\"', ', ')\n            || ']' as payroll_org_id,\n            '[' || listagg(\n                distinct '\"' || case when o.setup_mode and not o._fivetran_deleted then o.id else null end || '\"', ', '\n            )\n            || ']' as setup_mode_org_id\n        from stage_implementation si\n        inner join \"dev\".\"zuora\".\"account\" za on za.crm_id = si.external_id\n        left join paying_eh_orgs o on za.id = o.zuora_account_id\n        left join \"dev\".\"salesforce\".\"keypay_org_c\" kp on si.external_id = kp.linked_account_c\n        where si.is_implementation = 0\n        group by si.external_id, si.name\n    ),\n    account_stages as (\n        -- this view puts the churn, implementation and completed view together to segregate the accounts\n        -- an extra 'in review' stage is used for accounts that do not have a single org id attached\n        select\n            scn.external_id,\n            scn.name,\n            case\n                when is_churn = 0 and getdate() >= cdf.churn_date\n                then 'Churned'\n                when sa.customer_stage_c = 'Offboarding' or (is_churn = 0 and getdate() < cdf.churn_date)\n                then 'Offboarding'\n                when is_implementation > 0\n                then 'Implementation'\n                -- when is_implementation = 0 and org_id is null then 'Live' -- maybe payroll-only\n                when is_implementation = 0 and scm.org_id is null and scm.payroll_org_id is null\n                then 'Implementation'  -- no HR and Payroll org\n                when is_implementation = 0 and scm.org_id is null and scm.payroll_org_id is not null\n                then 'Live'  -- maybe payroll-only  \n                when is_implementation = 0 and scm.org_id is not null\n                then 'Live'\n            end as account_stage,\n            cdf.churn_date,\n            coalesce(scn.org_id, si.org_id, scm.org_id) as hr_org_id,\n            business_account_name\n        from stage_churn scn\n        left join \"dev\".\"salesforce\".\"account\" sa on scn.external_id = sa.id and not sa.is_deleted\n        left join stage_implementation si on scn.external_id = si.external_id\n        left join stage_completed scm on scn.external_id = scm.external_id\n        left join churn_date_field cdf on scn.external_id = cdf.external_id\n    ),\n    account_basic_details as (\n        select\n            sa.id as external_id,\n            listagg(za.id, ', ') as billing_account_id,\n            '[' || listagg(distinct '\"' || za.account_number || '\"', ', ') || ']' billing_account_number,\n            '[' || listagg(distinct '\"' || za.geo_code_c || '\"', ', ') || ']' as zuora_geo,\n            sa.name,\n            sa.industry_primary_c as industry,  -- industry_primary_c field has data for more accounts compared to industry \n            -- za.currency,\n            -- , sa.geo_code_c as sf_geo\n            -- these 2 geo_code are the same\n            convert_timezone('Australia/Sydney', sa.created_date) as created_date\n        from \"dev\".\"zuora\".\"account\" za\n        join \"dev\".\"salesforce\".\"account\" sa on za.crm_id = sa.id\n        where not za._fivetran_deleted and not sa.is_deleted\n        group by 1, 5, 6, 7\n    ),\n    subscription as (\n        select\n            eh.external_id,\n            '['\n            || listagg(distinct '\"' || p.name || ' - ' || prp.name || '\"', ', ') within group (order by p.name)\n            || ']' subscription\n        from eh_hr_accounts eh\n        join \"dev\".\"zuora\".\"account\" a on a.crm_id = eh.external_id\n        join \"dev\".\"zuora\".\"subscription\" s on s.account_id = a.id\n        join \"dev\".\"zuora\".\"rate_plan_charge\" rpc on rpc.subscription_id = s.id\n        join \"dev\".\"zuora\".\"product_rate_plan\" prp on rpc.product_rate_plan_id = prp.id\n        join \"dev\".\"zuora\".\"product\" p on p.id = prp.product_id\n        where\n            not p._fivetran_deleted\n            and not prp._fivetran_deleted\n            and not rpc._fivetran_deleted\n            and not a._fivetran_deleted\n            and not s._fivetran_deleted\n            and a.status = 'Active'\n            and s.status != 'Expired'\n            and s.status != 'Cancelled'\n        group by 1\n    ),\n    account_contract_details as (\n        select external_id, service_activation_date, term_end_date\n        from\n            (\n                select\n                    sa.id as external_id,\n                    zp.name as product,\n                    row_number() over (partition by sa.id order by sa.id, zp.name asc) as rn,\n                    min(zs.service_activation_date) as service_activation_date,\n                    max(zs.term_end_date) as term_end_date\n                from \"dev\".\"salesforce\".\"account\" sa\n                join \"dev\".\"zuora\".\"account\" za on za.crm_id = sa.id\n                join \"dev\".\"zuora\".\"subscription\" zs on zs.account_id = za.id\n                join \"dev\".\"zuora\".\"rate_plan_charge\" zrpc on zrpc.subscription_id = zs.id\n                join \"dev\".\"zuora\".\"product_rate_plan\" zprp on zrpc.product_rate_plan_id = zprp.id\n                join \"dev\".\"zuora\".\"product\" zp on zp.id = zprp.product_id\n                where\n                    not za._fivetran_deleted\n                    and not zs._fivetran_deleted\n                    and not zrpc._fivetran_deleted\n                    and not zprp._fivetran_deleted\n                    and not zp._fivetran_deleted\n                    and zp.name in ('EH HR Software', 'EH Payroll Software')\n                group by 1, 2\n            )\n        where rn = 1\n    ),\n    account_finance as (\n        select distinct\n            st.external_id,\n            a.currency,\n            sum(case when p.name = 'EH HR Software' then rpc.mrr end) as total_mrr_hr,\n            sum(case when p.name = 'EH HR Software' then rpc.quantity end) as estimated_minimum_users_hr,\n            round(total_mrr_hr / nullif(estimated_minimum_users_hr, 0), 2) list_price_per_unit_hr,\n            sum(\n                case\n                    when p.name = 'EH HR Software' and rpc.mrr / nullif(rpc.quantity, 0) + 10 > prpct.price\n                    then prpct.price - round(rpc.mrr / nullif(rpc.quantity, 0), 2)\n                end\n            ) as discount_price_per_unit_hr,\n            sum(case when p.name = 'EH Payroll Software' then rpc.mrr end) as total_mrr_payroll,\n            sum(case when p.name = 'EH Payroll Software' then rpc.quantity end) as estimated_minimum_users_payroll,\n            round(total_mrr_payroll / nullif(estimated_minimum_users_payroll, 0), 2) list_price_per_unit_payroll,\n            sum(\n                case\n                    when p.name = 'EH Payroll Software' and rpc.mrr / nullif(rpc.quantity, 0) + 10 > prpct.price\n                    then prpct.price - round(rpc.mrr / nullif(rpc.quantity, 0), 2)\n                end\n            ) as discount_price_per_unit_payroll,\n            sum(\n                case when p.name != 'EH HR Software' and p.name != 'EH Payroll Software' then rpc.mrr end\n            ) as total_mrr_addon,\n            sum(\n                case when p.name != 'EH HR Software' and p.name != 'EH Payroll Software' then rpc.quantity end\n            ) as estimated_minimum_users_addon,\n            round(total_mrr_addon / nullif(estimated_minimum_users_addon, 0), 2) list_price_per_unit_addon,\n            sum(\n                case\n                    when\n                        p.name != 'EH HR Software'\n                        and p.name != 'EH Payroll Software'\n                        and rpc.mrr / nullif(rpc.quantity, 0) + 10 > prpct.price\n                    then prpct.price - round(rpc.mrr / nullif(rpc.quantity, 0), 2)\n                end\n            ) as discount_price_per_unit_addon\n        from eh_hr_accounts st\n        join \"dev\".\"zuora\".\"account\" a on st.external_id = a.crm_id\n        join \"dev\".\"zuora\".\"rate_plan_charge\" rpc on a.id = rpc.account_id\n        join\n            (\n                select a.id as account_id, s.name as subscription, max(s.version) as version\n                from \"dev\".\"zuora\".\"subscription\" s\n                join \"dev\".\"zuora\".\"account\" a on s.account_id = a.id\n                where\n                    not a._fivetran_deleted\n                    and a.status = 'Active'\n                    and s.status != 'Expired'\n                    and s.status != 'Cancelled'\n                    and (s.subscription_end_date >= getdate() or s.subscription_end_date is null)\n                    and not s._fivetran_deleted\n                group by a.id, s.name\n            ) za\n            -- rpc.subscription_id = za.subscription_id\n            on rpc.version = za.version\n            and rpc.account_id = za.account_id\n        join \"dev\".\"zuora\".\"product_rate_plan\" prp on rpc.product_rate_plan_id = prp.id\n        join \"dev\".\"zuora\".\"product_rate_plan_charge\" prpc on prp.id = prpc.product_rate_plan_id\n        join \"dev\".\"zuora\".\"product\" p on prp.product_id = p.id\n        join\n            \"dev\".\"zuora\".\"product_rate_plan_charge_tier\" prpct\n            on prpc.id = prpct.product_rate_plan_charge_id\n            and not prpct._fivetran_deleted\n            and prpct.active\n            and a.currency = prpct.currency\n            and rpc.quantity between round(prpct.starting_unit) and coalesce(round(prpct.ending_unit) - 1, 999)\n            and prp.product_id = prpct.product_id\n        where\n            rpc.effective_start_date <= getdate()\n            and (rpc.effective_end_date > getdate() or rpc.effective_end_date is null)\n            and not rpc._fivetran_deleted\n            and rpc.name like 'Contracted%'\n            and not prp._fivetran_deleted\n            and not prpc._fivetran_deleted\n            and not p._fivetran_deleted\n        group by 1, 2\n    ),\n    account_cmrr as (\n        select\n            sa.id as external_id, sum(za.balance::decimal(9, 2)) outstanding_balance, sum(za.mrr::decimal(9, 2)) as cmrr\n        from \"dev\".\"zuora\".\"account\" za\n        join \"dev\".\"salesforce\".\"account\" sa on za.crm_id = sa.id\n        where not za._fivetran_deleted and not sa.is_deleted\n        group by 1\n    ),\n    account_mrr as (\n        select external_id, invoice_month, invoice_amount as mrr\n        from\n            (\n                select\n                    account.crm_id as external_id,\n                    dateadd(month, 1, date_trunc('month', invoice.invoice_date) - '1 day'::interval) as invoice_month,\n                    sum(invoice_item.charge_amount)::decimal(9, 2) as invoice_amount,\n                    row_number() over (partition by account.crm_id order by invoice_month desc) as rn\n                from \"dev\".\"zuora\".\"account\"\n                join \"dev\".\"zuora\".\"invoice\" on account.id = invoice.account_id\n                join \"dev\".\"zuora\".\"invoice_item\" on invoice.id = invoice_item.invoice_id\n                join \"dev\".\"zuora\".\"product\" zp on invoice_item.product_id = zp.id\n                where\n                    not account._fivetran_deleted\n                    and not invoice._fivetran_deleted\n                    and not invoice_item._fivetran_deleted\n                    and invoice.status = 'Posted'\n                    and zp.name != 'Services'\n                    and not zp._fivetran_deleted\n                group by account.crm_id, invoice_month\n            )\n        where rn = 1\n    ),\n    account_employees as (\n        select\n            sa.id as external_id,\n            count(\n                distinct(case when m.active and m.accepted and not m.independent_contractor then u.uuid else null end)\n            ) as active_employees,\n            count(\n                distinct(\n                    case when m.active and not m.accepted and not m.independent_contractor then u.uuid else null end\n                )\n            ) as pending_employees,\n            (active_employees + pending_employees) as active_and_pending_employees,\n            count(\n                distinct(case when m.active and m.independent_contractor then u.uuid else null end)\n            ) as independent_contractors,\n            count(\n                distinct(case when not m.active and m.termination_date is not null then u.uuid else null end)\n            ) as terminated_employees\n        from \"dev\".\"salesforce\".\"account\" sa\n        join \"dev\".\"zuora\".\"account\" za on za.crm_id = sa.id\n        left join paying_eh_orgs o on za.id = o.zuora_account_id\n        left join \"dev\".\"postgres_public\".\"members\" m on o.id = m.organisation_id\n        inner join \"dev\".\"postgres_public\".\"users\" u on u.id = m.user_id\n        where\n            not sa.is_deleted\n            and not za._fivetran_deleted\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n            and not m._fivetran_deleted\n            and not m.is_shadow_data\n            and u.email\n            !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n            and not u.is_shadow_data\n            and not m.system_manager\n            and not m.system_user\n        group by 1\n    ),\n    -- all opportunities\n    account_opp_item as (\n        select distinct\n            opp.account_id as external_id,\n            opp.id as opportunity_id,\n            opp.name as opportunity,\n            opp.stage_name,\n            coalesce(\n                convert_timezone('Australia/Sydney', opp.demo_sat_date_c),\n                convert_timezone('Australia/Sydney', opp.date_demo_booked_c)\n            ) demo_date,\n            convert_timezone('Australia/Sydney', cast(opp.close_date as date)) as close_date,\n            su.name as opp_owner,\n            convert_timezone('Australia/Sydney', cast(opp.created_date as date)) as created_date,\n            oppl.name as opp_item,\n            opp.opportunity_employees_c as opportunity_employees,\n            oppl.quantity as item_quantity,\n            opp.offer_c\n        from \"dev\".\"salesforce\".\"opportunity\" opp\n        left join \"dev\".\"salesforce\".\"opportunity_line_item\" oppl on opp.id = oppl.opportunity_id\n        left join \"dev\".\"salesforce\".\"user\" su on opp.owner_id = su.id\n        where not opp.is_deleted and not oppl.is_deleted\n        order by opp.account_id, opp.created_date desc\n    ),\n    -- all won opportunities\n    account_won_opp_item as (\n        select\n            external_id,\n            opportunity,\n            opportunity_id,\n            opp_item,\n            demo_date,\n            close_date,\n            opp_owner,\n            created_date,\n            opportunity_employees,\n            item_quantity,\n            offer_c,\n            row_number() over (partition by external_id order by close_date desc) rn\n        from account_opp_item\n        where stage_name = 'Won'\n    ),\n    account_won_opp_item_list as (\n        select\n            external_id,\n            len(regexp_replace(listagg(distinct opportunity_id, ','), '[^,]', '')) + 1 as won_opp_count,\n            -- workaround: count(distinct opportunity_id) as won_opp_count\n            '[' || listagg(\n                distinct '\"'\n                || 'Created at '\n                || created_date::date\n                || ': '\n                || opportunity\n                || ', owner: '\n                || opp_owner\n                || ', closed at '\n                || close_date\n                || ', opportunity employees: '\n                || opportunity_employees\n                || '\"',\n                ', '\n            )\n            || ']' as won_opportunities,\n            '[' || listagg(distinct '\"' || opp_owner || '\"', ', ') || ']' opp_owner,\n            max(case when rn = 1 then opportunity_employees end) as opportunity_employees,\n            max(case when opp_item ilike '%hr%' then item_quantity end) as opp_hr_quantity,\n            max(case when opp_item ilike '%payroll%' then item_quantity end) as opp_payroll_quantity,\n            '[' || listagg(distinct '\"' || offer_c || '\"', ', ') || ']' discounts_offered\n        from account_won_opp_item\n        -- where       opp_item ilike '%software%'\n        -- hr software, payroll software, add-on product, implementation, etc\n        group by 1\n    ),\n    -- most recent opportunity won\n    implementation_info as (\n        select\n            sa.id as external_id,\n            sa.name,\n            ipc.service_offering_c,\n            su.name as project_owner,\n            ipc.name as project_name,\n            coalesce(ipc.project_started_date_c, ipc.start_date_c, ipc.created_date) as kicked_off_at,\n            o.close_date as opp_close_date,\n            coalesce(ipc.project_completion_date_c, ipc.go_live_date_c, ipc.actual_finish_date_c) as completed_date,\n            datediff(\n                day, o.close_date, coalesce(ipc.project_started_date_c, ipc.start_date_c, ipc.created_date)\n            ) close_to_start,\n            datediff(\n                day,\n                coalesce(ipc.project_started_date_c, ipc.start_date_c, ipc.created_date),\n                coalesce(ipc.project_completion_date_c, ipc.go_live_date_c, ipc.actual_finish_date_c)\n            ) as start_to_complete\n        from \"dev\".\"salesforce\".\"implementation_project_c\" ipc\n        join \"dev\".\"salesforce\".\"account\" sa on sa.id = ipc.account_c\n        left join account_won_opp_item_list woil on woil.external_id = sa.id and woil.won_opp_count = 1\n        left join\n            account_won_opp_item woi\n            on woi.external_id = woil.external_id\n            and (\n                woi.close_date <= coalesce(ipc.project_started_date_c, ipc.start_date_c, ipc.created_date)\n                or coalesce(ipc.project_started_date_c, ipc.start_date_c, ipc.created_date) is null\n            )\n        left join\n            \"dev\".\"salesforce\".\"opportunity\" o\n            on case when ipc.opportunity_c is not null then ipc.opportunity_c = o.id else woi.opportunity_id = o.id end\n        left join \"dev\".\"salesforce\".\"user\" su on ipc.project_owner_c = su.id\n        where not sa.is_deleted and not ipc.is_deleted and (ipc.stage_c != 'Cancelled' or ipc.stage_c is null)\n    ),\n    latest_completed_imp as (\n        select external_id, start_to_complete as recent_start_to_complete\n        from\n            (\n                select\n                    external_id,\n                    start_to_complete,\n                    row_number() over (partition by external_id order by completed_date desc) rn\n                from implementation_info\n                where completed_date is not null\n            )\n        where rn = 1\n    ),\n    latest_started_imp as (\n        select external_id, close_to_start as recent_close_to_start\n        from\n            (\n                select\n                    external_id,\n                    close_to_start,\n                    row_number() over (partition by external_id order by kicked_off_at desc) rn\n                from implementation_info\n                where kicked_off_at is not null and opp_close_date is not null\n            )\n        where rn = 1\n    ),\n    account_implementation as (\n        select\n            external_id,\n            name,\n            '[' || listagg(distinct '\"' || service_offering_c || '\"', ', ') || ']' as implementation,\n            '[' || listagg(distinct '\"' || project_owner || '\"', ', ') || ']' as project_owner,\n            '[' || listagg(\n                distinct '\"'\n                || '('\n                || case when project_owner is null then 'unknown' else project_owner end\n                || ')'\n                || project_name\n                || (\n                    case when kicked_off_at is null then 'not started' else ' kicked off on ' || kicked_off_at::date end\n                )\n                || ', '\n                || (\n                    case\n                        when opp_close_date is null\n                        then 'unknown days from close date, '\n                        when kicked_off_at is null\n                        then ' '\n                        else close_to_start::varchar || ' days from close date, '\n                    end\n                )\n                || (\n                    case\n                        when kicked_off_at is null\n                        then ' '\n                        when completed_date is null\n                        then 'not completed'\n                        else 'completed in ' || start_to_complete || ' days'\n                    end\n                )\n                || '\"',\n                ', '\n            ) within group (order by coalesce(kicked_off_at, getdate()) desc)\n            || ']' as imp_projects,\n            max(completed_date) as most_recent_project_completion_date,\n            min(completed_date) as earliest_project_completion_date\n        from implementation_info\n        group by 1, 2\n    ),\n    account_imps_hr_projects as (\n        select\n            ipc.account_c as external_id,\n            eh.org_id_c as hr_org,\n            coalesce(\n                ipc.project_completion_date_c, ipc.go_live_date_c, ipc.actual_finish_date_c\n            ) as hr_project_completion_date\n        from \"dev\".\"salesforce\".\"implementation_project_c\" ipc\n        join \"dev\".\"salesforce\".\"eh_org_c\" eh on ipc.id = eh.professional_service_project_c\n        where\n            not ipc.is_deleted\n            and not eh.is_deleted\n            and (ipc.service_offering_c ilike '%hr%' or ipc.service_offering_c ilike '%combined journey%')\n            and (ipc.stage_c != 'Cancelled' or ipc.stage_c is null)\n    ),\n    account_imps_payroll_projects as (\n        select\n            ipc.account_c as external_id,\n            py.id_c as payroll_external_id,\n            epa.organisation_id as linked_hr_org,\n            coalesce(\n                ipc.project_completion_date_c, ipc.go_live_date_c, ipc.actual_finish_date_c\n            ) as payroll_project_completion_date\n        from \"dev\".\"salesforce\".\"implementation_project_c\" ipc\n        join \"dev\".\"salesforce\".\"keypay_org_c\" py on ipc.id = py.professional_service_project_c\n        left join\n            \"dev\".\"postgres_public\".\"payroll_infos\" pi on py.id_c = pi.external_id and not pi._fivetran_deleted\n        left join \"dev\".\"employment_hero\".\"_v_connected_payrolls\" epa on pi.id = epa.payroll_info_id\n        where\n            not ipc.is_deleted\n            and not py.is_deleted\n            and (ipc.service_offering_c ilike '%payroll%' or ipc.service_offering_c ilike '%combined journey%')\n            and (ipc.stage_c != 'Cancelled' or ipc.stage_c is null)\n    ),\n    account_demo_to_close_days as (\n        select external_id, opportunity, demo_date, close_date, datediff(d, demo_date, close_date) demo_to_close_days\n        from account_won_opp_item\n        where rn = 1\n    ),\n    -- list of lost opportunities sorted by most recent close date\n    account_lost_opps as (\n        select\n            external_id,\n            '['\n            || listagg(distinct '\"' || 'Closed at ' || close_date || ': ' || opportunity || '\"', ', ') within group (\n                order by close_date desc\n            )\n            || ']' as lost_opportunities\n        from account_opp_item\n        where stage_name = 'Lost'\n        group by external_id\n    ),\n    account_support_tickets as (\n        select\n            t.id,\n            za.crm_id external_id,\n            datediff(\n                h, t.created_at, case when t.status = 'closed' then t.updated_at else null::date end\n            ) resolution_time_hrs,\n            t.created_at as ticket_created_at,\n            case when t.status = 'closed' then t.updated_at else null::date end as ticket_closed,\n            t.custom_product,\n            u.name as agent,\n            po.id as org_id,\n            listagg(distinct '\"' || replace(f.name, '::', ' > ') || '\"', ', ') as ticket_tag\n        from \"dev\".\"zendesk\".\"ticket\" t\n        join \"dev\".\"zendesk\".\"group\" g on t.group_id = g.id\n        join \"dev\".\"zendesk\".\"user\" u on t.assignee_id = u.id\n        join \"dev\".\"zendesk\".\"organization\" o on t.organization_id = o.id\n        join\n            \"dev\".\"postgres_public\".\"organisations\" po\n            on o.custom_organisation_id = po.id\n            and not po._fivetran_deleted\n            and not po.is_shadow_data\n        join \"dev\".\"zuora\".\"account\" za on po.zuora_account_id = za.id\n        -- updated to left join as some tickets don't seem to have the custom field populated\n        left join\n            zendesk.ticket_field_option f\n            on t.custom_hr_platform_enquiry_location = f.value\n            or t.custom_employment_hero_payroll_platform_product_categories = f.value\n        where\n            not g._fivetran_deleted\n            and t.status != 'deleted'\n            and g.name ~* '^support'\n            -- the below conditions exclude anything that has the word support but shouldn't be included in the ticket\n            -- count\n            and g.name !~* 'archived|level|keypay|manager'\n        group by 1, 2, 3, 4, 5, 6, 7, 8\n        order by ticket_created_at desc\n    ),\n    account_ticket_agents_tags_product as (\n        select\n            external_id,\n            -- ticket tags\n            '[' || listagg(distinct ticket_tag, ', ') || ']' as ticket_tags,\n            -- agents and resolution time\n            '[' || listagg(distinct '\"' || agent || '\"', ', ') within group (order by agent) || ']' agents,\n            avg(resolution_time_hrs) avg_resolution_time_hrs,\n            -- product\n            count(id) total_support_tickets,\n            sum(case when custom_product = 'employment_hero_hr_platform' then 1 else 0 end) as hr_tickets,\n            sum(case when custom_product = 'employment_hero_payroll_platform' then 1 else 0 end) as payroll_tickets,\n            sum(\n                case\n                    when\n                        (\n                            custom_product != 'employment_hero_hr_platform'\n                            and custom_product != 'employment_hero_payroll_platform'\n                        )\n                        or custom_product is null\n                        or custom_product = ''\n                    then 1\n                    else 0\n                end\n            ) as untagged_tickets\n        from account_support_tickets\n        group by external_id\n    ),\n    account_imps_support_tickets as (\n        select\n            st.external_id,\n            '['\n            || listagg(distinct '\"' || hr.hr_org || '\"', ', ') within group (order by st.external_id)\n            || ']' as hr_imps_org_id,\n            '[' || listagg(\n                distinct '\"' || datediff(\n                    d, case when t.product = 'hr' then hr.hr_project_completion_date end, first_support_ticket_raised\n                )\n                || '\"',\n                ', '\n            ) within group (order by st.external_id)\n            || ']' as first_hr_support_ticket_from_proj_completion,\n            '['\n            || listagg(distinct '\"' || py.payroll_external_id || '\"', ', ') within group (order by st.external_id)\n            || ']' as payroll_imps_ext_id,\n            '[' || listagg(\n                distinct '\"' || datediff(\n                    d,\n                    case when t.product = 'payroll' then py.payroll_project_completion_date end,\n                    first_support_ticket_raised\n                )\n                || '\"',\n                ', '\n            ) within group (order by st.external_id)\n            || ']' as first_payroll_support_ticket_from_proj_completion\n        from eh_hr_accounts st\n        join\n            (\n                select\n                    external_id,\n                    org_id,\n                    case\n                        when custom_product ilike '%hr%' then 'hr' when custom_product ilike '%payroll%' then 'payroll'\n                    end as product,\n                    min(ticket_created_at) as first_support_ticket_raised\n                from account_support_tickets\n                group by 1, 2, 3\n            )\n            t on st.external_id = t.external_id\n        left join account_imps_hr_projects hr on st.external_id = hr.external_id and t.org_id = hr.hr_org\n        left join account_imps_payroll_projects py on st.external_id = py.external_id and t.org_id = py.linked_hr_org\n        group by 1\n    ),\n    account_support_csat as (\n        select\n            t.external_id,\n            sum(case when r.score = 'good' then 1 else 0 end) as ticket_csat_good,\n            sum(case when r.score = 'bad' then 1 else 0 end) as ticket_csat_bad,\n            '[' || listagg(\n                distinct '\"'\n                || case when r.reason != 'No reason provided' then r.ticket_id || ' - ' || r.reason end\n                || '\"',\n                ','\n            )\n            || ']' as ticket_csat_reason\n        from account_support_tickets t\n        join\n            (\n                select\n                    ticket_id, score, reason, row_number() over (partition by ticket_id order by created_at desc) as rn\n                from zendesk.satisfaction_rating\n                where score not ilike 'offered'\n            ) r\n            on t.id = r.ticket_id\n        where r.rn = 1\n        group by 1\n    ),\n    account_feature_requests as (\n        select\n            t.external_id,\n            count(tl.id) as total_feature_requests,\n            '['\n            || listagg('\"' || 'Ticket: ' || tl.ticket_id || ', FR: ' || i.key || '\"', ', ') within group (order by i.id)\n            || ']' as feature_requests\n        from account_support_tickets t\n        join \"dev\".\"zendesk\".\"ticket_link\" tl on t.id = tl.ticket_id\n        join \"dev\".\"jira\".\"issue\" i on tl.issue_id = i.id\n        where not tl._fivetran_deleted and not i._fivetran_deleted\n        group by t.external_id\n    ),\n    account_primary_contact as (\n        select\n            c.account_id as external_id,\n            '[' || listagg(distinct '\"' || c.id || '\"', ', ') within group (order by c.email) || ']' as sf_contact_id,\n            '['\n            || listagg(distinct '\"' || u.uuid || '\"', ', ') within group (order by c.email)\n            || ']' as sf_contact_user_uuid,\n            '['\n            || listagg(distinct '\"' || c.first_name || ' ' || c.last_name || '\"', ', ') within group (order by c.email)\n            || ']' as primary_contact,\n            '[' || listagg(distinct '\"' || c.email || '\"', ', ') within group (order by c.email) || ']' as sf_email\n        from \"dev\".\"salesforce\".\"contact\" c\n        join \"dev\".\"zuora\".\"account\" za on c.account_id = za.crm_id\n        join \"dev\".\"postgres_public\".\"organisations\" o on za.id = o.zuora_account_id\n        join \"dev\".\"postgres_public\".\"members\" m on o.id = m.organisation_id\n        join \"dev\".\"postgres_public\".\"users\" u on m.user_id = u.id\n        where\n            not c.is_deleted\n            and c.primary_contact_c\n            and not c.no_longer_with_company_c\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n            and not u._fivetran_deleted\n            and not u.is_shadow_data\n            and not za._fivetran_deleted\n            and not m._fivetran_deleted\n            and not m.is_shadow_data\n            and c.email = u.email\n            and u.email\n            !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n            and not m.system_manager\n            and not m.system_user\n            and not m.independent_contractor\n        group by c.account_id\n    ),\n    account_billing_contact as (\n        select\n            account_id as external_id,\n            '[' || listagg(distinct '\"' || id || '\"', ', ') within group (order by email) || ']' as sf_contact_id,\n            '['\n            || listagg(distinct '\"' || first_name || ' ' || last_name || '\"', ', ') within group (order by email)\n            || ']' as billing_contact,\n            '[' || listagg(distinct '\"' || email || '\"', ', ') within group (order by email) || ']' as sf_email\n        from \"dev\".\"salesforce\".\"contact\"\n        where not is_deleted and billing_contact_c and not no_longer_with_company_c\n        group by account_id\n    ),\n    account_benefits as (\n        select sa.id as external_id, sum(savings) as employee_savings\n        from \"dev\".\"salesforce\".\"account\" sa\n        join \"dev\".\"zuora\".\"account\" za on za.crm_id = sa.id\n        left join\n            \"dev\".\"postgres_public\".\"organisations\" o\n            on za.id = o.zuora_account_id\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n        left join\n            -- [heroshop_orders as ho]\n            (\n                with\n                    product_variants2 as (\n                        select\n                            *,\n                            (\n                                case\n                                    when supplier_price is not null\n                                    then supplier_price\n                                    when variant_code ~* '-50'\n                                    then 47.37\n                                    when variant_code !~* 'EMOVIE|ESAVER'\n                                    then 94.74\n                                    when variant_code = 'ESAVER_CHILD'\n                                    then 10.5\n                                    when variant_code = 'EMOVIE_ADULT'\n                                    then 15.5\n                                    when variant_code = 'ESAVER_ADULT'\n                                    then 12.5\n                                    when variant_code = 'EMOVIE_CHILD'\n                                    then 12.5\n                                    else 0\n                                end\n                            ) as supplier_cost\n                        from \"dev\".\"heroshop_db_public\".\"product_variants\"\n                    )\n\n                select\n                    od.id,\n                    od.created_at,\n                    m.id as member_id,\n                    m.user_id as user_id,\n                    m.organisation_id,\n                    case\n                        when t.payment_method = 1\n                        then 'Instapay'\n                        when t.payment_method = 2\n                        then 'HeroDollars'\n                        else 'Credit Card'\n                    end as payment_method,\n                    p.name,\n                    pc.name as product_category,\n                    od.quantity,\n                    pv.variant_code,\n                    pv.supplier_cost * quantity as supplier_price,\n                    od.price * quantity as price,\n                    od.discount,\n                    od.transaction_fee,\n                    od.freight_cost,\n                    od.billable_amount,\n                    od.discount - od.transaction_fee as savings,\n                    od.billable_amount - (quantity * pv.supplier_cost) - od.freight_cost - od.transaction_fee as margin,\n                    od.status\n                from \"dev\".\"heroshop_db_public\".\"order_details\" od\n                join product_variants2 pv on pv.id = od.product_variant_id\n                join \"dev\".\"heroshop_db_public\".\"orders\" o on od.order_id = o.id\n                join \"dev\".\"heroshop_db_public\".\"products\" p on p.id = pv.product_id\n                join\n                    \"dev\".\"postgres_public\".\"members\" m\n                    on m.uuid = o.member_id\n                    and not m._fivetran_deleted\n                    and not m.is_shadow_data\n                join\n                    \"dev\".\"postgres_public\".\"organisations\" org\n                    on m.organisation_id = org.id\n                    and not org._fivetran_deleted\n                    and not org.is_shadow_data\n                join \"dev\".\"heroshop_db_public\".\"transactions\" t on o.id = t.order_id\n                join \"dev\".\"heroshop_db_public\".\"product_categories\" pc on p.product_category_id = pc.id\n                where org.name !~* 'Winterfell Trading Name|KevTest' and od.status !~* 'cancel|refund|declined|failed'\n                order by created_at desc\n            ) ho\n            on ho.organisation_id = o.id\n        group by 1\n    ),\n    account_herodollar_balance as (\n        select sa.id as external_id, sum(hd_quantity) as herodollar_balance\n        from \"dev\".\"salesforce\".\"account\" sa\n        join \"dev\".\"zuora\".\"account\" za on za.crm_id = sa.id\n        left join\n            \"dev\".\"postgres_public\".\"organisations\" o\n            on za.id = o.zuora_account_id\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n        left join\n            -- [corporate_herodollars as cho]\n            (\n                with\n                    imps_incentive as (\n                        select transactable_id\n                        from \"dev\".\"herodollar_service_public\".\"hero_dollar_transactions\"\n                        join\n                            \"dev\".\"herodollar_service_public\".\"tracking_infos\"\n                            on hero_dollar_transactions.id = tracking_infos.hero_dollar_transaction_id\n                        where\n                            hero_dollar_transactions.transactable_type = 'Organisation'\n                            and tracking_infos.reason_type = 3\n                    )\n                select distinct org_id, hd_quantity\n                from\n                    (\n                        select o.id as org_id, sum(t.amount) as hd_quantity\n                        from \"dev\".\"herodollar_service_public\".\"hero_dollar_transactions\" t\n                        join\n                            \"dev\".\"postgres_public\".\"organisations\" o\n                            on t.transactable_id = o.uuid\n                            and not o._fivetran_deleted\n                            and not o.is_shadow_data\n                        where t.transactable_type = 'Organisation'\n                        group by o.id\n                    ) h\n            ) cho\n            on cho.org_id = o.id\n        group by 1\n    ),\n    account_imps_payroll_days as (\n        select distinct\n            imp.account_c as external_id,\n            '[' || listagg(\n                distinct '\"' || case\n                    when imp.service_offering_c ~* '(Guided Payroll|combined journey)'\n                    then datediff(d, t.completed_at, pr.completed_at)\n                end\n                || '\"',\n                ', '\n            )\n            || ']' as gp_kickoff_to_project_completed,\n            '[' || listagg(\n                distinct '\"' || case\n                    when imp.service_offering_c ilike '%Managed Payroll%'\n                    then datediff(d, t.completed_at, pr.completed_at)\n                end\n                || '\"',\n                ', '\n            )\n            || ']' as mp_kickoff_to_live_payrun\n        from \"dev\".\"asana\".\"task\" t\n        join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n        join\n            \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" ap\n            on pt.project_id = ap.asana_public_asana_project_id_c\n        join \"dev\".\"salesforce\".\"implementation_project_c\" imp on ap.asana_public_object_id_c = imp.id\n        join\n            (\n                select pt.project_id, t.completed_at\n                from \"dev\".\"asana\".\"task\" t\n                join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n                where\n                    not t._fivetran_deleted\n                    and t.completed\n                    and (t.name = 'Project Complete - GP' or t.name = 'Support live pay run')\n            ) pr\n            on pt.project_id = pr.project_id\n        where\n            not imp.is_deleted\n            and not t._fivetran_deleted\n            and (t.name = 'Kick off email - GP' or t.name = 'Conduct Kick-off call')\n            and t.completed\n        group by imp.account_c\n    ),\n    accounts_zuora_payments as (\n        select\n            external_id,\n            count(case when payment_status = 'Processed' then payment_id end) as total_paid_invoices,\n            avg(days_to_make_payments) avg_days_to_make_payments,\n            count(case when payment_status = 'Error' then payment_id end) as total_late_payments\n        from\n            (\n                select distinct\n                    a.crm_id as external_id,\n                    p.id as payment_id,\n                    p.status as payment_status,\n                    case\n                        when p.effective_date >= i.posted_date and p.status = 'Processed'\n                        then datediff(d, i.posted_date, p.effective_date)\n                        when p.effective_date < i.posted_date and p.status = 'Processed'\n                        then datediff(d, i.invoice_date, p.effective_date)\n                    end as days_to_make_payments\n                from \"dev\".\"zuora\".\"account\" a\n                join \"dev\".\"zuora\".\"invoice\" i on a.id = i.account_id\n                join \"dev\".\"zuora\".\"payment_application\" pa on i.id = pa.invoice_id\n                join \"dev\".\"zuora\".\"payment\" p on pa.payment_id = p.id\n                where\n                    not a._fivetran_deleted\n                    and not i._fivetran_deleted\n                    and i.status = 'Posted'\n                    and not pa._fivetran_deleted\n                    and not p._fivetran_deleted\n                order by p.effective_date desc, i.posted_date desc\n            )\n        where external_id is not null\n        group by 1\n    ),\n    ipc_org as (\n        select\n            ipc.id as project_id,\n            ipc.account_c as external_id,\n            so.org_id_c as org_id,\n            listagg(o.id, ',') as account_orgs,\n            count(o.id) as org_count\n        from \"dev\".\"salesforce\".\"implementation_project_c\" ipc\n        join \"dev\".\"zuora\".\"account\" za on za.crm_id = ipc.account_c\n        left join\n            \"dev\".\"salesforce\".\"eh_org_c\" so\n            on so.professional_service_project_c = ipc.id\n            and not so.is_deleted\n        left join\n            \"dev\".\"postgres_public\".\"organisations\" o\n            on za.id = o.zuora_account_id\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n        where not ipc.is_deleted and not za._fivetran_deleted\n        group by 1, 2, 3\n    ),\n    happiness_surveys as (\n        select h.organisation_id, ipc_org.project_id, min(h.updated_at) as happiness_survey_at\n        from \"dev\".\"survey_services_public\".\"happiness_surveys\" as h\n        left join\n            \"dev\".\"postgres_public\".\"organisations\" o\n            on h.organisation_id = o.uuid\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n        left join ipc_org on ipc_org.org_id = o.id or (ipc_org.org_count = 1 and ipc_org.account_orgs = o.id)\n        where not h._fivetran_deleted\n        group by 1, 2\n    ),\n    account_managed_hr_milestones as (\n        select distinct\n            imp.account_c as external_id,\n            '['\n            || listagg(distinct '\"' || t.name || '\"', ', ')\n            || (case when hs.happiness_survey_at is not null then ', \"Happiness survey\"' else '' end)\n            || ']' as completed_managed_hr_milestones\n        from \"dev\".\"asana\".\"task\" t\n        join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n        join\n            \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" ap\n            on pt.project_id = ap.asana_public_asana_project_id_c\n        join \"dev\".\"salesforce\".\"implementation_project_c\" imp on ap.asana_public_object_id_c = imp.id\n        left join happiness_surveys hs on hs.project_id = imp.id\n        where\n            not imp.is_deleted\n            and imp.service_offering_c ilike '%Managed HR%'\n            and not t._fivetran_deleted\n            and (\n                t.name = 'HR - System Integration (if applicable)'\n                or t.name = 'HR - Customer 1:1'\n                or t.name = 'Setup Company Values and Branding'\n                or t.name = 'Import Employee Data'\n                or t.name = 'Setup Licences and Certifications'\n                or t.name = 'Build Policies'\n                or t.name = 'Setup Onboarding Checklists'\n            )\n            -- t.name ~* '(HR - System Integration (if applicable)|HR - Customer 1:1|Setup Company Values and\n            -- Branding|Import Employee Data|Setup Licences and Certifications|Build Policies|Setup Onboarding\n            -- Checklists)'\n            and t.completed\n        group by 1, hs.happiness_survey_at\n    ),\n    account_guided_hr_milestones as (\n        select distinct\n            imp.account_c as external_id,\n            '['\n            || listagg(distinct '\"' || t.custom_feature || '\"', ', ')\n            || listagg(distinct case when hs.happiness_survey_at is not null then ', \"Happiness survey\"' else '' end)\n            || ']' as completed_guided_hr_milestones\n        from \"dev\".\"asana\".\"task\" t\n        join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n        join\n            \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" ap\n            on pt.project_id = ap.asana_public_asana_project_id_c\n        join \"dev\".\"salesforce\".\"implementation_project_c\" imp on ap.asana_public_object_id_c = imp.id\n        left join happiness_surveys hs on hs.project_id = imp.id\n        where\n            not imp.is_deleted\n            and imp.service_offering_c ~* '(Guided HR|combined journey)'\n            and not t._fivetran_deleted\n            and t.name like 'Recommended Milestone %'\n            -- only check the first 4 milestones for eligibility\n            and t.completed\n        group by 1\n    ),\n    account_guided_hr_milestones_addons as (\n        select\n            imp.account_c as external_id,\n            listagg(\n                datediff(d, convert_timezone('Australia/Sydney', t.completed_at), i.invitation_date), ', '\n            ) as ghr_kickoff_to_invitation,\n            listagg(\n                datediff(d, convert_timezone('Australia/Sydney', t.completed_at), i.live_date), ', '\n            ) as ghr_kickoff_to_live_date\n        from \"dev\".\"asana\".\"task\" t\n        join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n        join\n            \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" ap\n            on pt.project_id = ap.asana_public_asana_project_id_c\n        join \"dev\".\"salesforce\".\"implementation_project_c\" imp on ap.asana_public_object_id_c = imp.id\n        join\n            (\n                select\n                    pt.project_id,\n                    case\n                        when t.name = 'Invite Employees' then convert_timezone('Australia/Sydney', t.completed_at)\n                    end invitation_date,\n                    case when t.name = 'HR-Live' then convert_timezone('Australia/Sydney', t.completed_at) end live_date\n                from \"dev\".\"asana\".\"task\" t\n                join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n                where not t._fivetran_deleted and t.completed and t.name in ('Invite Employees', 'HR-Live')\n            ) i\n            on pt.project_id = i.project_id\n        where\n            not imp.is_deleted\n            and imp.service_offering_c ~* '%(Guided HR|combined journey)%'\n            and not t._fivetran_deleted\n            and t.completed\n            and t.name = 'Kick off email - HR'\n        group by 1\n    ),\n    account_payroll_milestones as (\n        select distinct\n            imp.account_c as external_id,\n            '[' || listagg(\n                distinct '\"' || case\n                    when\n                        imp.service_offering_c ~* '(Guided Payroll|combined journey)' and t.name = 'Kick off email - GP'\n                    then 'Project kicked-off'\n                    when\n                        imp.service_offering_c ~* '(Guided Payroll|combined journey)'\n                        and t.name = 'Project Complete - GP'\n                    then 'Project completed'\n                end\n                || '\"',\n                ', '\n            ) within group (order by t.completed_at)\n            || ']' as completed_guided_payroll_milestones,\n            '[' || listagg(\n                distinct '\"' || case\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Import Employee Data'\n                    then 'Employee data imported'\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Conduct Scenario UAT'\n                    then 'Scenario testing signed off'\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Conduct platform walkthrough'\n                    then 'System walkthrough completed'\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Conduct systems sync'\n                    then 'Systems synced'\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Schedule live pay run'\n                    then 'Scheduled live pay run'\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Customer Testing complete'\n                    then 'Client testing completed'\n                    when imp.service_offering_c ilike '%Managed Payroll%' and t.name = 'Support live pay run'\n                    then 'Support live pay run completed'\n                end\n                || '\"',\n                ', '\n            ) within group (order by t.completed_at)\n            || ']' as completed_managed_payroll_milestones\n        from \"dev\".\"asana\".\"task\" t\n        join \"dev\".\"asana\".\"project_task\" pt on t.id = pt.task_id\n        join\n            \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" ap\n            on pt.project_id = ap.asana_public_asana_project_id_c\n        join \"dev\".\"salesforce\".\"implementation_project_c\" imp on ap.asana_public_object_id_c = imp.id\n        where\n            not imp.is_deleted\n            and not t._fivetran_deleted\n            -- guided payroll\n            and (\n                t.name = 'Kick off email - GP'\n                or t.name = 'Project Complete - GP'\n                -- managed payroll\n                or t.name = 'Import Employee Data'\n                or t.name = 'Conduct Scenario UAT'\n                or t.name = 'Conduct platform walkthrough'\n                or t.name = 'Conduct systems sync'\n                or t.name = 'Schedule live pay run'\n                or t.name = 'Customer Testing complete'\n                or t.name = 'Support live pay run'\n            )\n            and t.completed\n        group by 1\n    ),\n    account_payroll_platform as (\n        select\n            za.crm_id as external_id,\n            '[' || listagg(\n                distinct '\"'\n                || coalesce(epa.connected_app, substring(epa.type, 1, charindex('Auth', epa.type) - 1))\n                || '\"',\n                ', '\n            )\n            || ']' as payroll_platform,\n            '['\n            || listagg('\"' || pi.id || '\"', ', ') within group (order by epa.created_at)\n            || ']' as payroll_external_id,\n            '[' || listagg(\n                distinct '\"' || case\n                    when json_extract_path_text(epa.data, 'kp_white_label') != ''\n                    then json_extract_path_text(epa.data, 'kp_white_label')\n                end\n                || '\"',\n                ', '\n            )\n            || ']' as white_label\n        from \"dev\".\"zuora\".\"account\" za\n        join \"dev\".\"postgres_public\".\"organisations\" o on za.id = o.zuora_account_id\n        join \"dev\".\"employment_hero\".\"_v_connected_payrolls\" epa on o.id = epa.organisation_id\n        join \"dev\".\"postgres_public\".\"payroll_infos\" pi on epa.payroll_info_id = pi.id\n        where\n            not za._fivetran_deleted\n            and not o._fivetran_deleted\n            and not o.is_shadow_data\n            and not epa._fivetran_deleted\n            and not pi._fivetran_deleted\n            and pi.status = 1\n        group by 1\n    ),\n    account_proserv_csat as (\n        select\n            external_id,\n            max(proserv_csat_kick_off_hr) as proserv_csat_kick_off_hr,\n            max(proserv_csat_kick_off_payroll) as proserv_csat_kick_off_payroll,\n            max(proserv_csat_midway_hr) as proserv_csat_midway_hr,\n            max(proserv_csat_midway_payroll) as proserv_csat_midway_payroll,\n            max(proserv_csat_completion_hr) as proserv_csat_completion_hr,\n            max(proserv_csat_completion_payroll) as proserv_csat_completion_payroll\n        from\n            (\n                select\n                    implementation_project_c.account_c as external_id,\n                    kick_off_hr.score as proserv_csat_kick_off_hr,\n                    kick_off_payroll.score as proserv_csat_kick_off_payroll,\n                    midway_hr.score as proserv_csat_midway_hr,\n                    midway_payroll.score as proserv_csat_midway_payroll,\n                    completion_hr.score as proserv_csat_completion_hr,\n                    completion_payroll.score as proserv_csat_completion_payroll,\n                    case\n                        when\n                            coalesce(\n                                kick_off_hr.properties_service,\n                                midway_hr.properties_service,\n                                completion_hr.properties_service\n                            )\n                            ilike '%hr%'\n                        then 'hr'\n                        else 'payroll'\n                    end as service_offering,\n                    coalesce(\n                        kick_off_hr.created_at,\n                        kick_off_payroll.created_at,\n                        midway_hr.created_at,\n                        midway_payroll.created_at,\n                        completion_hr.created_at,\n                        completion_payroll.created_at\n                    ) as response_created_at,\n                    -- get the most recent score based on SF account, CSAT phase and HR/Payroll\n                    row_number() over (\n                        partition by\n                            external_id,\n                            coalesce(\n                                kick_off_hr.properties_phase,\n                                midway_hr.properties_phase,\n                                completion_hr.properties_phase,\n                                kick_off_payroll.properties_phase,\n                                midway_payroll.properties_phase,\n                                completion_payroll.properties_phase\n                            ),\n                            service_offering\n                        order by response_created_at desc\n                    ) as rn,\n                    coalesce(\n                        kick_off_hr.permalink,\n                        kick_off_payroll.permalink,\n                        midway_hr.permalink,\n                        midway_payroll.permalink,\n                        completion_hr.permalink,\n                        completion_payroll.permalink\n                    ) as permalink\n                from \"dev\".\"salesforce\".\"implementation_project_c\"\n                join\n                    \"dev\".\"salesforce\".\"asana_public_asana_projects_relation_c\" ap\n                    on ap.asana_public_object_id_c = implementation_project_c.id\n                left join\n                    \"dev\".\"delighted_proserv_csat\".\"response\" as kick_off_hr\n                    on kick_off_hr.properties_phase = 'Kick-off'\n                    and kick_off_hr.properties_service ilike '%hr%'\n                    and kick_off_hr.properties_project_id = ap.asana_public_asana_project_id_c\n                left join\n                    \"dev\".\"delighted_proserv_csat\".\"response\" as kick_off_payroll\n                    on kick_off_payroll.properties_phase = 'Kick-off'\n                    and kick_off_payroll.properties_service ilike '%payroll%'\n                    and kick_off_payroll.properties_project_id = ap.asana_public_asana_project_id_c\n                left join\n                    \"dev\".\"delighted_proserv_csat\".\"response\" as midway_hr\n                    on midway_hr.properties_phase = 'Midway'\n                    and midway_hr.properties_service ilike '%hr%'\n                    and midway_hr.properties_project_id = ap.asana_public_asana_project_id_c\n                left join\n                    \"dev\".\"delighted_proserv_csat\".\"response\" as midway_payroll\n                    on midway_payroll.properties_phase = 'Midway'\n                    and midway_payroll.properties_service ilike '%payroll%'\n                    and midway_payroll.properties_project_id = ap.asana_public_asana_project_id_c\n                left join\n                    \"dev\".\"delighted_proserv_csat\".\"response\" as completion_hr\n                    on completion_hr.properties_phase = 'Completion'\n                    and completion_hr.properties_service ilike '%hr%'\n                    and completion_hr.properties_project_id = ap.asana_public_asana_project_id_c\n                left join\n                    \"dev\".\"delighted_proserv_csat\".\"response\" as completion_payroll\n                    on completion_payroll.properties_phase = 'Completion'\n                    and completion_payroll.properties_service ilike '%payroll%'\n                    and completion_payroll.properties_project_id = ap.asana_public_asana_project_id_c\n                where\n                    not ap.is_deleted\n                    and not implementation_project_c.is_deleted\n                    and coalesce(\n                        kick_off_hr.properties_delighted_source,\n                        midway_hr.properties_delighted_source,\n                        completion_hr.properties_delighted_source,\n                        kick_off_payroll.properties_delighted_source,\n                        midway_payroll.properties_delighted_source,\n                        completion_payroll.properties_delighted_source\n                    )\n                    = 'Email'\n            )\n        where rn = 1\n        group by 1\n    ),\n    account_owner as (\n        select external_id, user_uuid\n        from\n            (\n                select\n                    za.crm_id as external_id,\n                    m.organisation_id,\n                    m.role,\n                    m.first_name || ' ' || m.last_name as name,\n                    u.email,\n                    u.uuid as user_uuid\n                from \"dev\".\"postgres_public\".\"members\" as m\n                join \"dev\".\"postgres_public\".\"users\" as u on u.id = m.user_id\n                join \"dev\".\"postgres_public\".\"organisations\" as org on m.organisation_id = org.id\n                join \"dev\".\"zuora\".\"account\" as za on org.zuora_account_id = za.id\n                where\n                    m.id in (\n                        select\n                            first_value(m.id) over (\n                                partition by za.crm_id\n                                order by m.role desc, m.created_at asc\n                                rows between unbounded preceding and current row\n                            )\n                        from \"dev\".\"postgres_public\".\"members\" as m\n                        join \"dev\".\"postgres_public\".\"users\" as u on u.id = m.user_id\n                        join \"dev\".\"postgres_public\".\"organisations\" as org on m.organisation_id = org.id\n                        join \"dev\".\"zuora\".\"account\" as za on org.zuora_account_id = za.id\n                        where\n                            m.role != 'employee'\n                            and m.active\n                            and m.accepted\n                            and u.email\n                            !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n                            and not u._fivetran_deleted\n                            and not u.is_shadow_data\n                            and not m.system_manager\n                            and not m.system_user\n                            and not m.independent_contractor\n                            and not m._fivetran_deleted\n                            and not m.is_shadow_data\n                            and not org._fivetran_deleted\n                            and not org.is_shadow_data\n                            and not za._fivetran_deleted\n                    )\n                    and not m._fivetran_deleted\n                    and not m.is_shadow_data\n                    and not u._fivetran_deleted\n                    and not u.is_shadow_data\n                    and not org._fivetran_deleted\n                    and not org.is_shadow_data\n                    and not za._fivetran_deleted\n            )\n        where external_id is not null\n    ),\n    account_sales_csat as (\n        select opp.account_id as external_id, response.score as sales_csat_score\n        from \"dev\".\"delighted_sales_csat\".\"response\"\n        join \"dev\".\"salesforce\".\"opportunity\" as opp on response.properties_opportunity_id = opp.id\n        where\n            not opp.is_deleted\n            and response.id in (\n                select\n                    first_value(r.id) over (\n                        partition by opp.account_id\n                        order by created_at desc\n                        rows between unbounded preceding and unbounded following\n                    )\n                from \"dev\".\"delighted_sales_csat\".\"response\" r\n                join \"dev\".\"salesforce\".\"opportunity\" as opp on r.properties_opportunity_id = opp.id\n            )\n    )\n\nselect distinct\n    st.external_id,\n    st.name,\n    st.account_stage,\n    st.churn_date,\n    st.hr_org_id,\n    case\n        when pp.payroll_platform is null and po.payroll_org_id is not null\n        then 'Employment Hero Payroll'\n        else pp.payroll_platform\n    end as payroll_platform,\n    pp.white_label,\n    nvl(pp.payroll_external_id, po.payroll_org_id) as payroll_external_id,\n    bd.billing_account_number,\n    bd.zuora_geo as country,\n    bd.created_date,\n    bd.industry,\n    em.active_employees,\n    em.pending_employees,\n    em.active_and_pending_employees,\n    em.independent_contractors,\n    em.terminated_employees,\n    s.subscription,\n    cd.service_activation_date,\n    cd.term_end_date,\n    cmr.cmrr,\n    mr.mrr,\n    cmr.outstanding_balance,\n    t.total_support_tickets as support_total_tickets,\n    t.total_support_tickets / nullif(em.active_employees, 0) as support_ticket_active_employee_ratio,\n    t.hr_tickets as support_hr_tickets,\n    t.payroll_tickets as support_payroll_tickets,\n    t.untagged_tickets as support_untagged_tickets,\n    t.ticket_tags as support_ticket_tags,\n    t.avg_resolution_time_hrs as support_avg_resolution_time_hrs,\n    t.agents as support_agents,\n    demo.opportunity as most_recent_won_opp,\n    demo.demo_date,\n    demo.close_date,\n    demo.demo_to_close_days,\n    lost.lost_opportunities,\n    wol.won_opportunities,\n    wol.opportunity_employees,\n    wol.opp_owner,\n    wol.opp_hr_quantity,\n    wol.opp_payroll_quantity,\n    im.implementation,\n    im.imp_projects,\n    im.project_owner,\n    im.earliest_project_completion_date as earliest_go_live_date,\n    im.most_recent_project_completion_date as latest_go_live_date,\n    lsi.recent_close_to_start,\n    lci.recent_start_to_complete,\n    dma.daily_users as dau,\n    dma.monthly_users as mau,\n    dma.dau_mau,\n    fr.total_feature_requests,\n    fr.feature_requests,\n    pc.sf_contact_user_uuid as primary_contact_uuid,\n    pc.primary_contact,\n    pc.sf_email as primary_contact_email,\n    bc.billing_contact,\n    bc.sf_email as billing_contact_email,\n    ab.employee_savings,\n    hb.herodollar_balance,\n    wol.discounts_offered,\n    af.currency as billing_currency,\n    af.estimated_minimum_users_hr,\n    af.list_price_per_unit_hr,\n    af.discount_price_per_unit_hr,\n    af.estimated_minimum_users_payroll,\n    af.list_price_per_unit_payroll,\n    af.discount_price_per_unit_payroll,\n    af.estimated_minimum_users_addon,\n    af.list_price_per_unit_addon,\n    af.discount_price_per_unit_addon,\n    zp.avg_days_to_make_payments,\n    zp.total_late_payments,\n    amhm.completed_managed_hr_milestones,\n    aghm.completed_guided_hr_milestones,\n    aghma.ghr_kickoff_to_invitation,\n    aghma.ghr_kickoff_to_live_date,\n    ipd.mp_kickoff_to_live_payrun,\n    pm.completed_managed_payroll_milestones,\n    ipd.gp_kickoff_to_project_completed,\n    pm.completed_guided_payroll_milestones,\n    ist.hr_imps_org_id,\n    ist.first_hr_support_ticket_from_proj_completion,\n    ist.payroll_imps_ext_id,\n    ist.first_payroll_support_ticket_from_proj_completion,\n    sc.ticket_csat_good,\n    sc.ticket_csat_bad,\n    sc.ticket_csat_reason,\n    proserv.proserv_csat_kick_off_hr,\n    proserv.proserv_csat_kick_off_payroll,\n    proserv.proserv_csat_midway_hr,\n    proserv.proserv_csat_midway_payroll,\n    proserv.proserv_csat_completion_hr,\n    proserv.proserv_csat_completion_payroll,\n    convert_timezone('Australia/Sydney', getdate()) as _fivetran_transformed,\n    mr.invoice_month,\n    ao.user_uuid,\n    sales.sales_csat_score,\n    po.setup_mode_org_id,\n    st.business_account_name\nfrom account_stages st\nleft join account_basic_details bd on st.external_id = bd.external_id\nleft join account_implementation im on st.external_id = im.external_id\nleft join latest_started_imp lsi on st.external_id = lsi.external_id\nleft join latest_completed_imp lci on st.external_id = lci.external_id\nleft join account_cmrr cmr on st.external_id = cmr.external_id\nleft join account_mrr mr on st.external_id = mr.external_id\nleft join subscription s on st.external_id = s.external_id\nleft join account_finance af on st.external_id = af.external_id\nleft join account_employees em on st.external_id = em.external_id\nleft join account_demo_to_close_days demo on st.external_id = demo.external_id\nleft join account_lost_opps lost on st.external_id = lost.external_id  -- left join account_benefits ab on\nleft join account_ticket_agents_tags_product t on st.external_id = t.external_id\nleft join account_won_opp_item_list wol on st.external_id = wol.external_id\nleft join account_feature_requests fr on st.external_id = fr.external_id\nleft join account_primary_contact pc on st.external_id = pc.external_id\nleft join account_billing_contact bc on st.external_id = bc.external_id\nleft join account_benefits ab on st.external_id = ab.external_id\nleft join account_herodollar_balance hb on st.external_id = hb.external_id\nleft join accounts_zuora_payments zp on st.external_id = zp.external_id\nleft join account_managed_hr_milestones amhm on st.external_id = amhm.external_id\nleft join account_guided_hr_milestones aghm on st.external_id = aghm.external_id\nleft join account_guided_hr_milestones_addons aghma on st.external_id = aghma.external_id\nleft join account_payroll_milestones pm on st.external_id = pm.external_id\nleft join account_imps_payroll_days ipd on st.external_id = ipd.external_id\nleft join account_imps_support_tickets ist on st.external_id = ist.external_id\nleft join account_support_csat sc on st.external_id = sc.external_id\nleft join\n    \"dev\".\"mp\".\"daumau_by_account\" dma\n    on dma.account_id = st.external_id\n    and dma.date = (select max(date) from \"dev\".\"mp\".\"daumau_by_account\")\nleft join account_payroll_platform pp on st.external_id = pp.external_id\nleft join stage_completed po on st.external_id = po.external_id  -- payroll only orgs\nleft join account_contract_details cd on st.external_id = cd.external_id\nleft join account_proserv_csat proserv on st.external_id = proserv.external_id\nleft join account_owner ao on st.external_id = ao.external_id\nleft join account_sales_csat as sales on st.external_id = sales.external_id", "relation_name": "\"dev\".\"customers\".\"accounts\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.759690Z", "completed_at": "2024-02-04T15:20:59.773719Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.788772Z", "completed_at": "2024-02-04T15:20:59.788786Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0477452278137207, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_daumau_by_account_account_id.167e610caa", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"dev\".\"mp\".\"daumau_by_account\"\nwhere account_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.779286Z", "completed_at": "2024-02-04T15:20:59.796751Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.821520Z", "completed_at": "2024-02-04T15:20:59.821537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.057442426681518555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_daumau_by_account_date.e19de49dd8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"mp\".\"daumau_by_account\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.791616Z", "completed_at": "2024-02-04T15:20:59.808417Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.828025Z", "completed_at": "2024-02-04T15:20:59.828039Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06140756607055664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_mp_daumau_by_account__date_account_id_.524a00d1a2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || account_id ) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mp\".\"daumau_by_account\"\nwhere (date || account_id ) is not null\ngroup by (date || account_id )\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.803327Z", "completed_at": "2024-02-04T15:20:59.830404Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.846834Z", "completed_at": "2024-02-04T15:20:59.846848Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.06611895561218262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.organics_organisations", "compiled": true, "compiled_code": "\n\nwith \n  org_creator as (\n  select\n    organisation_id\n    , member_id\n    , user_email\n  from\n    (\n      select\n      m.organisation_id\n      , m.id as member_id\n      , u.email as user_email\n      , row_number() over (partition by m.organisation_id order by m.created_at) as rn\n      from\n        \"dev\".\"postgres_public\".\"members\" as m\n      join \"dev\".\"postgres_public\".\"users\" as u on\n        m.user_id = u.id\n      where\n        not m._fivetran_deleted        \n        and not u._fivetran_deleted\n        and not m.is_shadow_data\n        and not u.is_shadow_data\n      )\n  where rn = 1 \n    )\n  , organics_activated as (\n    select\n      organisation_id\n      ,convert_timezone('Australia/Sydney', completed_at) as activated_at\n    from\n      \"dev\".\"postgres_public\".\"organisation_guides\" og\n      join \"dev\".\"postgres_public\".\"guides\" g on\n        og.guide_id = g.id\n    where\n      not og._fivetran_deleted\n      and not g._fivetran_deleted\n      and g.type = 'SetupGuide'\n      and g.name = 'launch'\n  )\n  , playground as (\n    select\n      organisation_id\n      ,min(time) as first_playground_activity\n      ,max(time) as last_playground_activity\n      ,count(event_name) as num_playground_activity\n    from\n      (\n      select\n        pa.*\n        ,m.organisation_id\n        ,convert_timezone('Australia/Sydney', o.created_at) as org_created_at \n      from \n        \"dev\".\"mp\".\"playground_activities\" pa\n        join \"dev\".\"postgres_public\".\"members\" m\n          on pa.user_id = m.user_id\n        join \"dev\".\"postgres_public\".\"users\" u\n          on m.user_id = u.id\n        join \"dev\".\"postgres_public\".\"organisations\" o \n          on m.organisation_id = o.id\n      where\n        email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'\n        and not m.system_manager\n        and not m.system_user\n        and not m.independent_contractor\n        and not m._fivetran_deleted\n        and not o._fivetran_deleted\n        and not u._fivetran_deleted\n        and not m.is_shadow_data\n        and not u.is_shadow_data\n        and not o.is_shadow_data\n        -- playground open for only 14 days from creation date\n        and pa.time >= org_created_at\n        and pa.time <= dateadd(days, 14, org_created_at)\n        )\n    group by 1\n  )\n  , platinum_trial as (\n    select\n      a.organisation_id\n      , convert_timezone('Australia/Sydney', trials.created_at) as platinum_trial_created_at\n    from\n      (\n        select *\n        from \"dev\".\"postgres_public\".\"agreements\"\n        where id in (\n          select\n            FIRST_VALUE(id) over (partition by organisation_id order by created_at asc rows between unbounded preceding and current row)\n          from\n            \"dev\".\"postgres_public\".\"agreements\"\n        )\n      ) as a\n      join (\n        select *\n        from \"dev\".\"postgres_public\".\"trial_opt_ins\"\n        where id in (\n          select\n            FIRST_VALUE(id) over (partition by agreement_id order by created_at asc rows between unbounded preceding and current row)\n          from\n            \"dev\".\"postgres_public\".\"trial_opt_ins\"\n        )\n      ) as trials on\n        a.id = trials.agreement_id\n      join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s on\n        trials.subscription_plan_id = s.id\n    where\n      not a._fivetran_deleted\n      and not trials._fivetran_deleted\n      and s.pricing_tier = 'platinum'\n  )\n  , guides as (\n    select \n      organisation_id\n      ,min(guide_completed_at) earliest_guide_completed_at\n      ,max(guide_completed_at) most_recent_guide_completed_at\n      ,count(distinct (case when guide_completed_at is not null then organisation_guides_id end)) as number_of_guides_completed\n    from \n      \"dev\".\"employment_hero\".\"guides\"\n    group by 1\n  )  \n  , company_setup_wizards as (\n    -- Generally each org should only have 1 record each in this table. However, there are 199 organisations with multiple records so we're using the earliest created record\n    select organisation_id\n      , created_at\n      , updated_at\n\n    from (\n      select organisation_id\n        , created_at\n        , updated_at\n        , row_number() over (partition by organisation_id order by created_at) as rn\n\n      from \"dev\".\"postgres_public\".\"company_setup_wizards\"\n\n      where not _fivetran_deleted)\n\n    where rn = 1\n  )\n  , converted as (\n    -- updated to include a flag on whether the org is converted in demo or real org account\n    -- logic is provided by @Long Nguyen https://employmenthero.slack.com/archives/C066X19E11S/p1700705904036499 (Kevin's Slack account)\n    select\n      c.organisation_id      \n      , c.converted_at\n      , (csw.updated_at is not null and c.converted_at < csw.updated_at and datediff('second', csw.created_at, csw.updated_at) > 3) as converted_in_demo_account\n      , c.pricing_tier as first_paid_tier\n    from (\n        select a.organisation_id      \n        , convert_timezone('Australia/Sydney', a.created_at) as converted_at\n        , s.pricing_tier \n        , row_number() over (partition by a.organisation_id ORDER BY a.created_at) rn       \n        from \n        \"dev\".\"postgres_public\".\"agreements\" a \n        join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s on\n          a.subscription_plan_id = s.id\n        where\n          not a._fivetran_deleted\n          and s.pricing_tier != 'free'        \n      ) c\n    left join company_setup_wizards as csw\n      on csw.organisation_id = c.organisation_id\n    where c.rn = 1\n  )\n  , platinum_trial_signup_journey as (\n    -- Platinum trial sign up flow per https://employmenthero.atlassian.net/wiki/spaces/FP/pages/2755658978/2023-11+Selected+Business+goal+in+sign+up+journeys\n    select osa.id\n      , osa.member_id\n      , m.organisation_id\n      , osa.user_id\n      , json_parse(osa.details) as details\n      , osa.created_at\n      , osa.updated_at\n    \n    from \"dev\".\"postgres_public\".\"onboarding_survey_answers\" osa\n    \n    inner join \"dev\".\"postgres_public\".\"members\" m\n      on m.id = osa.member_id\n    \n    where not osa._fivetran_deleted\n      and not m._fivetran_deleted\n      and not m._fivetran_deleted\n      and not m.is_shadow_data\n  )\n  , goal as (\n    select *\n\n    from (\n      select *\n        , row_number() over (partition by organisation_id order by goal_answer_created_at) as rn         \n      from (\n        -- Basic sign up flow per https://employmenthero.atlassian.net/wiki/spaces/FP/pages/2755658978/2023-11+Selected+Business+goal+in+sign+up+journeys\n        select o.id as organisation_id\n        , q.question_text\n        , cc.value as goal_on_signup\n        , a.created_at as goal_answer_created_at\n        from      \n          \"dev\".\"survey_services_public\".\"single_choice_answer_contents\" scac     \n          join \"dev\".\"survey_services_public\".\"choice_contents\" cc on cc.id = scac.choice_content_id\n          join \"dev\".\"survey_services_public\".\"answer_details\" ad on scac.id = ad.content_id and ad.content_type = 'SingleChoiceAnswerContent'\n          join \"dev\".\"survey_services_public\".\"answers\" a on a.id = ad.answer_id\n          join \"dev\".\"survey_services_public\".\"surveys\" s on a.survey_id = s.id\n          join \"dev\".\"survey_services_public\".\"questions\" q on q.id = ad.question_id\n          join \"dev\".\"survey_services_public\".\"onboarding_surveys\" os on os.survey_id = s.id\n          join \"dev\".\"survey_services_public\".\"members\" as m on m.id = a.member_id      \n          join \"dev\".\"postgres_public\".\"organisations\" as o on m.organisation_id = o.uuid      \n        where q.question_text = 'What do you want to get from Employment Hero?'\n          and not scac._fivetran_deleted\n          and not cc._fivetran_deleted\n          and not ad._fivetran_deleted\n          and not a._fivetran_deleted\n          and not s._fivetran_deleted\n          and not q._fivetran_deleted\n          and not os._fivetran_deleted\n          and not m._fivetran_deleted\n          and not o._fivetran_deleted\n          and not o.is_shadow_data\n        --where (cc.value = 'Reduce administration time' or  cc.value = 'Simplify and use one platform' or  cc.value = 'Organise my employee data' or cc.value = 'Keep remote employees engaged' or  cc.value = 'Engage my employees' or cc.value = 'Get my bussiness up and running' or cc.value ='Get access to Policies & Contracts') \n\n        union \n\n        -- Platinum trial sign up flow per https://employmenthero.atlassian.net/wiki/spaces/FP/pages/2755658978/2023-11+Selected+Business+goal+in+sign+up+journeys\n        select pt.organisation_id\n          , array.question::varchar as question_text\n          , regexp_replace(json_serialize(array.answers), '\"|\\\\[|\\\\]', '') as goal_on_signup\n          , pt.created_at as goal_answer_created_at\n\n        from platinum_trial_signup_journey pt\n          , pt.details as array\n        )\n    )\n    where rn = 1\n  )\n  , payroll_platform_currently_using as (\n  select * \n  from \n    (\n    select\n--       m.id as member_id\n      o.id as organisation_id\n--       , a.created_at\n      , cc.value as payroll_on_signup\n      , row_number() over (partition by o.id order by a.created_at) as rn\n    from \n      \"dev\".\"survey_services_public\".\"onboarding_surveys\" os\n      join \"dev\".\"survey_services_public\".\"questions\" q\n        on os.survey_id = q.survey_id\n      join \"dev\".\"survey_services_public\".\"answers\" a\n        on q.survey_id = a.survey_id\n      join \"dev\".\"survey_services_public\".\"answer_details\" ad\n        on a.id = ad.answer_id and q.id=ad.question_id\n      join \"dev\".\"survey_services_public\".\"single_choice_answer_contents\" scac\n        on ad.content_id = scac.id\n      join \"dev\".\"survey_services_public\".\"choice_contents\" cc \n        on cc.id = scac.choice_content_id\n      join \"dev\".\"survey_services_public\".\"members\" m \n        on m.id = a.member_id      \n      join \"dev\".\"postgres_public\".\"organisations\" o \n        on m.organisation_id = o.uuid\n    where\n      (q.question_text = 'What payroll platform are you currently using?' \n      or q.question_text = 'What payroll do you want to connect to?')\n      and cc.value in ('Employment Hero Payroll', 'KeyPay', 'QuickBooks Online', 'Xero', 'MYOB', 'Other')\n--       and os.status = 'active'\n      and not os._fivetran_deleted\n      and not q._fivetran_deleted\n      and not a._fivetran_deleted\n      and not ad._fivetran_deleted\n      and not scac._fivetran_deleted\n      and not cc._fivetran_deleted\n      and not o.is_shadow_data\n  --     and not m._fivetran_deleted\n  --     and not o._fivetran_deleted\n    )\n  where rn=1  \n  )\n  , emp_count as (\n  select \n    organisation_id\n    , count(*) as number_of_active_members\n  from \"dev\".\"employment_hero\".\"employees\"\n  where active\n  group by 1\n  )\n  , upsold as (\n    select * from (\n      select\n        *\n        , row_number() over (partition by organisation_id order by upsold_at) as rn\n      from\n        (\n          select\n            o.id as organisation_id\n            , convert_timezone('Australia/Sydney', a.created_at) as upsold_at\n            , s.name as subscription\n            , s.pricing_tier \n            , s.pricing_type\n            , s.pricing_hierarchy\n            , lag(s.name)over (partition by o.id order by a.created_at asc) as prev_subscription\n            , lag(s.pricing_hierarchy) over (partition by o.id order by a.created_at asc) as prev_pricing_hierarchy\n            , s.pricing_hierarchy - prev_pricing_hierarchy as change_pricing_hierarchy\n          from\n            \"dev\".\"postgres_public\".\"organisations\" as o\n            join \"dev\".\"postgres_public\".\"agreements\" as a on\n              a.organisation_id = o.id\n            join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s on\n              a.subscription_plan_id = s.id\n          where\n            not o._fivetran_deleted\n            and not o.is_shadow_data\n            and not a._fivetran_deleted\n            and s.pricing_hierarchy != 0\n          )\n      where change_pricing_hierarchy>0\n      )\n    where rn=1\n  )\n\nselect \n  o.id\n  --, o.uuid\n  , o.name as org_name\n  , ic.title as industry\n--  , case    when o.name is null    or o.name = ''      then e.name    else o.name  end as org_name\n  , convert_timezone('Australia/Sydney', o.created_at) as created_at\n  , oc.user_email as creator_email\n  , o.setup_mode\n  , o.estimated_number_of_employees\n  , ec.number_of_active_members\n  --, s.id as current_sub_id\n  , s.name as current_subscription\n  , s.pricing_tier as current_pricing_tier\n  --, a.created_at as subscribed_at\n  , s.pricing_type\n  , za.id as zuora_account_id\n  , za.account_number as zuora_account_number\n  , za.batch as zuora_batch\n  , pr.having_payroll_not_from_sign_up \n  , o.country\n  , dc.partner_name as discount_partner\n  , pg.first_playground_activity\n  , pt.platinum_trial_created_at\n  , act.activated_at\n  , gs.earliest_guide_completed_at\n  , gs.most_recent_guide_completed_at\n  , c.converted_at\n  , c.converted_in_demo_account\n  , c.first_paid_tier\n  , csw.updated_at > csw.created_at as activated_real_org\n  , u.upsold_at as first_upsold_at\n  , g.goal_on_signup\n  , pp.payroll_on_signup\n  , gs.number_of_guides_completed\n  , daumau.monthly_users\nfrom\n  \"dev\".\"postgres_public\".\"organisations\" as o\n  join (\n        select *\n          from \"dev\".\"postgres_public\".\"agreements\"\n          where id in (\n            select\n              FIRST_VALUE(id) over (partition by organisation_id order by created_at desc rows between unbounded preceding and current row)\n            from\n              \"dev\".\"postgres_public\".\"agreements\"\n            where not _fivetran_deleted\n          )\n      ) as a on\n    o.id = a.organisation_id\n  join \"dev\".\"employment_hero\".\"_v_sub_plan_grouping\" as s on\n    a.subscription_plan_id = s.id\n  join org_creator oc on \n    oc.organisation_id = o.id\n  left join \"dev\".\"postgres_public\".\"industry_categories\" as ic\n    on o.industry_category_id = ic.id\n  left join emp_count as ec on ec.organisation_id = o.id\n  left join \"dev\".\"zuora\".\"account\" za on za.id = o.zuora_account_id and not za._fivetran_deleted \n  left join \"dev\".\"postgres_public\".\"discount_codes\" dc on \n    dc.id = o.discount_code_id and not dc._fivetran_deleted\n  left join (select organisation_id, case when sum(case when not connect_through_sign_up then 1 else 0 end)>0 then true else false end as having_payroll_not_from_sign_up \n             from \"dev\".\"postgres_public\".\"external_payroll_auths\" \n             where not _fivetran_deleted \n             group by 1) pr on pr.organisation_id = o.id\n  left join organics_activated act on\n    o.id = act.organisation_id\n  left join playground pg on\n    o.id = pg.organisation_id\n  left join platinum_trial pt on \n    o.id = pt.organisation_id\n  left join guides gs on\n    o.id = gs.organisation_id\n  left join converted c on \n    o.id = c.organisation_id\n  left join upsold u on\n    o.id = u.organisation_id\n  left join goal g on g.organisation_id = o.id\n  left join payroll_platform_currently_using pp on o.id = pp.organisation_id\n  left join \"dev\".\"mp\".\"daumau_by_org\" daumau on daumau.organisation_id = o.id and daumau.date::date = getdate()::date\n  left join company_setup_wizards csw\n    on csw.organisation_id = o.id\nwhere\n  not o._fivetran_deleted\n  and not o.is_shadow_data\n  and\n(\n  (s.pricing_type = 'organic' \n   and o.zuora_account_id is not null \n   and o.business_account_id is null \n   and s.name not ilike '%reseller%')\n  or \n    ( --s.id = 11 -- free sub plan \n      s.pricing_tier = 'free'\n      and s.name not in ('SUSPENDED (FREE)','CHURN (FREE)')\n      and o.estimated_number_of_employees < 10)\n)\nand ( o.discount_code_id is null or dc.partner_name != 'tester' )\nand creator_email !~* '.*(employmenthero|employmentinnovations|thinkei|p2m|power2motivate|test|demo|exacc|sandbox|\\\\+).*'", "relation_name": "\"dev\".\"organics\".\"organisations\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.831556Z", "completed_at": "2024-02-04T15:20:59.844547Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.858568Z", "completed_at": "2024-02-04T15:20:59.858582Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04539346694946289, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_org_module_mapping", "compiled": true, "compiled_code": "select distinct\n    date(d.month) as date,\n    mo.organisation_id,\n    aa.name as zuora_account_name,\n    aa.account_id as zuora_account_id,\n    aa.geo_code_c zuora_account_geo_code,\n    aa.hr_billed_revenue,\n    aa.payroll_billed_revenue,\n    o.subscription_id,\n    o.name org_name,\n    o.created_at org_created_at,\n    o.subscription_renewal org_subscription_renewal,\n    o.calendar_year_type org_calendar_year_type,\n    o.superannuation_fund_id org_superannuation_fund_id,\n    o.number_of_employees,\n    o.super_selection_timestamp,\n    o.country as org_country,\n    o.estimated_number_of_employees,\n    o.currency,\n    o.locale,\n    o.time_zone,\n    o.launched,\n    o.industry,\n    o.connected_app,\n    o.pricing_type,\n    o.pricing_tier,\n    o.is_paying_eh,\n    o.churn_date,\n    o.is_demo,\n    mo.module,\n    mow.product_family,\n    mo.monthly_users,\n    dbo.monthly_users as total_monthly_users\nfrom\n    -- create month ends\n    (\n        select dateadd('day', -1, dateadd('month', 1 - generated_number::int, date_trunc('month', getdate()))) as month\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 25\n    order by generated_number\n\n)\n    )\n    d\n-- join for daumau by orgs / modules\ninner join\n    \"dev\".\"mp\".\"daumau_by_module_org\" mo\n    on date(mo.date) = date(d.month)\n    and mo.organisation_id is not null\n    and mo.date >= dateadd('month', -24, current_date)\n-- join for org info\ninner join \"dev\".\"employment_hero\".\"organisations\" o on o.id = mo.organisation_id\n-- join for zuora billed revenue and zuora account info\nleft join\n    (\n        select distinct\n            account_id,\n            geo_code_c,\n            name,\n            date_trunc('month', invoice_date) as month,\n            sum(case when product_name like '%HR%' then charge_amount else 0 end) as hr_billed_revenue,\n            sum(case when lower(product_name) like '%payroll%' then charge_amount else 0 end) as payroll_billed_revenue\n        from\n            (\n                select distinct\n                    a.id account_id,\n                    a.geo_code_c,\n                    a.name,\n                    invoice_item.id,\n                    invoice.invoice_date,\n                    invoice_item.charge_amount,\n                    p.name as product_name\n                from \"dev\".\"zuora\".\"account\" a\n                inner join \"dev\".\"zuora\".\"invoice\" on a.id = invoice.account_id\n                inner join \"dev\".\"zuora\".\"invoice_item\" on invoice.id = invoice_item.invoice_id\n                inner join \"dev\".\"zuora\".\"subscription\" on invoice_item.subscription_id = subscription.id\n                inner join \"dev\".\"zuora\".\"rate_plan_charge\" rpc on rpc.id = invoice_item.rate_plan_charge_id\n                inner join \"dev\".\"zuora\".\"product_rate_plan\" prp on rpc.product_rate_plan_id = prp.id\n                inner join \"dev\".\"zuora\".\"product\" p on p.id = prp.product_id\n                where\n                    not a._fivetran_deleted\n                    and not invoice._fivetran_deleted\n                    and not invoice_item._fivetran_deleted\n                    and not p._fivetran_deleted\n                    and not prp._fivetran_deleted\n                    and not rpc._fivetran_deleted\n                    and invoice.status = 'Posted'\n                    and invoice.posted_date <= current_date\n                    and invoice.posted_date >= dateadd('month', -26, current_date)\n            )\n        group by 1, 2, 3, 4\n    )\n    aa on aa.account_id = o.zuora_account_id and aa.month = date_trunc('month', d.month)\n-- join for product family \nleft join \"dev\".\"eh_product\".\"module_ownership\" mow on mow.event_module = mo.module\n-- join for TOTAL org mau\nleft join\n    (\n        select distinct date, organisation_id, monthly_users\n        from \"dev\".\"mp\".\"daumau_by_org\"\n        where date >= dateadd('month', -24, current_date)\n    )\n    dbo on mo.organisation_id = dbo.organisation_id and date(d.month) = date(dbo.date)", "relation_name": "\"dev\".\"tableau\".\"tableau_org_module_mapping\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.850500Z", "completed_at": "2024-02-04T15:20:59.861196Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.875763Z", "completed_at": "2024-02-04T15:20:59.875777Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04327058792114258, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_swag_daumau_date.4b1c8caff4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"mp\".\"swag_daumau\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.862399Z", "completed_at": "2024-02-04T15:20:59.873408Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.886185Z", "completed_at": "2024-02-04T15:20:59.886199Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.047391653060913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_mp_swag_daumau_date.39fac81102", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mp\".\"swag_daumau\"\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.879425Z", "completed_at": "2024-02-04T15:20:59.893822Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.901746Z", "completed_at": "2024-02-04T15:20:59.901760Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04294157028198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_swag_mau", "compiled": true, "compiled_code": "select date, persona, monthly_users as swag_mau\nfrom \"dev\".\"mp\".\"swag_daumau_persona\"\nwhere swag_mau is not null\norder by 1", "relation_name": "\"dev\".\"tableau\".\"tableau_swag_mau\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.888741Z", "completed_at": "2024-02-04T15:20:59.902879Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.918286Z", "completed_at": "2024-02-04T15:20:59.918298Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05018973350524902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_wau_date.b66721d2de", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"mp\".\"wau\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.905405Z", "completed_at": "2024-02-04T15:20:59.917137Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.930915Z", "completed_at": "2024-02-04T15:20:59.930928Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04390215873718262, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_mp_wau_date.4516eef13c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mp\".\"wau\"\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.919406Z", "completed_at": "2024-02-04T15:20:59.929762Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.943326Z", "completed_at": "2024-02-04T15:20:59.943342Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0444178581237793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_swag_inactive_users__user_email_month_.9294e6f60c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (user_email || month)\nfrom \"dev\".\"tableau\".\"swag_inactive_users\"\nwhere (user_email || month) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.933715Z", "completed_at": "2024-02-04T15:20:59.945790Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.958756Z", "completed_at": "2024-02-04T15:20:59.958770Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04368257522583008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_swag_inactive_users__user_email_month_.dd5ec0d11b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (user_email || month) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"swag_inactive_users\"\nwhere (user_email || month) is not null\ngroup by (user_email || month)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.952182Z", "completed_at": "2024-02-04T15:20:59.961496Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.981578Z", "completed_at": "2024-02-04T15:20:59.981592Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.043715715408325195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.marketing_users_from_snapshot", "compiled": true, "compiled_code": "\n\nselect eh_platform_user_id\n, first_name\n, last_name\n, email\n, personal_mobile\n, date_of_birth\n, state\n, country\n, eh_Platform_Employment_Location\n, EH_Platform_Role__c\n, eh_Platform_Creation_Date\n, eh_Platform_Join_Date\n, eh_Platform_First_Mobile_Access_Date\n, title\n, Org_ID__c\n, company\n, eh_Platform_Industry\n, eh_PLatform_SetUp_Mode\n, EH_Platform_Connected_Payroll__c\n, eh_Platform_Branded_Payroll\n, EH_Platform_Subscription_Level__c\n, eh_Platform_Last_LogIn_Date\n, eh_Platform_swag_store_enabled\n, eh_Platform_org_Instapay_Enabled\n, Termination_Date__c\n, EH_Platform_Manager__c\n, Managed_by_EI__c\n, eh_Platform_White_labelled_Payroll\n--, Number_Of_Employees\n, eh_Platform_Money_Enabled\n, eh_Platform_Career_Enabled\n, benefits_enabled\n, eh_platform_contractor\n, eh_platform_bussiness_portal_account\n, eh_platform_marketing_consent\n, dbt_updated_at as last_updated_date\n, case when dbt_valid_to is not null then true else false end as is_deleted\nfrom \"dev\".\"marketing\".\"users_snapshot\"", "relation_name": "\"dev\".\"marketing\".\"users_from_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.962645Z", "completed_at": "2024-02-04T15:20:59.980376Z"}, {"name": "execute", "started_at": "2024-02-04T15:20:59.989245Z", "completed_at": "2024-02-04T15:20:59.989258Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.048883676528930664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_fct_service_uptime_dim_service_sk.5811c15cef", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dim_service_sk\nfrom \"dev\".\"mart\".\"fct_service_uptime\"\nwhere dim_service_sk is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.975146Z", "completed_at": "2024-02-04T15:20:59.986840Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.001426Z", "completed_at": "2024-02-04T15:21:00.001441Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.046720266342163086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.not_null_salesforce__manager_performance_manager_id.67d21c2781", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect manager_id\nfrom \"dev\".\"salesforce\".\"salesforce__manager_performance\"\nwhere manager_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:20:59.992990Z", "completed_at": "2024-02-04T15:21:00.005240Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.020300Z", "completed_at": "2024-02-04T15:21:00.020324Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0470728874206543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.unique_salesforce__manager_performance_manager_id.4adc491650", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    manager_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"salesforce__manager_performance\"\nwhere manager_id is not null\ngroup by manager_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.009457Z", "completed_at": "2024-02-04T15:21:00.021575Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.035656Z", "completed_at": "2024-02-04T15:21:00.035672Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.052266836166381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.not_null_salesforce__owner_performance_owner_id.d39bad3ef7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect owner_id\nfrom \"dev\".\"salesforce\".\"salesforce__owner_performance\"\nwhere owner_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.024060Z", "completed_at": "2024-02-04T15:21:00.036874Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.058391Z", "completed_at": "2024-02-04T15:21:00.058407Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05909132957458496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.salesforce.unique_salesforce__owner_performance_owner_id.b4050dc6e7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    owner_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salesforce\".\"salesforce__owner_performance\"\nwhere owner_id is not null\ngroup by owner_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.038089Z", "completed_at": "2024-02-04T15:21:00.057094Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.070877Z", "completed_at": "2024-02-04T15:21:00.070891Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06058669090270996, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_first_reply_time_business", "compiled": true, "compiled_code": "\n\nwith ticket_reply_times as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_reply_times\"\n\n), ticket_schedules as (\n\n    select \n      *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n\n), schedule as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), first_reply_time as (\n\n    select\n      ticket_id,\n      end_user_comment_created_at,\n      agent_responded_at\n\n    from ticket_reply_times\n    where is_first_comment\n\n), ticket_first_reply_time as (\n\n  select \n    first_reply_time.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(first_reply_time.agent_responded_at) as agent_responded_at,\n\n    (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_schedules.schedule_created_at\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(ticket_schedules.schedule_created_at as timestamp)\n        ) /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        datediff(\n        second,\n        ticket_schedules.schedule_created_at,\n        least(ticket_schedules.schedule_invalidated_at, min(first_reply_time.agent_responded_at))\n        )/60\n        )) as raw_delta_in_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_schedules.schedule_created_at\n        )\n\n)\n        )\n\n as date) as start_week_date\n  \n  from first_reply_time\n  join ticket_schedules on first_reply_time.ticket_id = ticket_schedules.ticket_id\n  group by 1, 2, 3, 4\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_reply as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_reply_time.*,\n      cast(generated_number - 1 as integer) as week_number\n\n    from ticket_first_reply_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n    select \n      weeks_cross_ticket_first_reply.*, \n      -- for each week, at what minute do we start counting?\n      cast(greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time,\n      -- for each week, at what minute do we stop counting?\n      cast(least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as integer) as ticket_week_end_time\n    from weeks_cross_ticket_first_reply\n\n), intercepted_periods as (\n\n  select ticket_id,\n      week_number,\n      weekly_periods.schedule_id,\n      ticket_week_start_time,\n      ticket_week_end_time,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n      \n)\n\n  select ticket_id,\n         sum(scheduled_minutes) as first_reply_time_business_minutes\n  from intercepted_periods\n  group by 1", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_first_reply_time_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.059661Z", "completed_at": "2024-02-04T15:21:00.069732Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.086172Z", "completed_at": "2024-02-04T15:21:00.086186Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04121541976928711, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_reply_times_calendar", "compiled": true, "compiled_code": "with ticket as (\n\n  select *\n  from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), ticket_reply_times as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_reply_times\"\n\n)\n\nselect\n\n  ticket.ticket_id,\n  sum(case when is_first_comment then reply_time_calendar_minutes\n    else null end) as first_reply_time_calendar_minutes,\n  sum(reply_time_calendar_minutes) as total_reply_time_calendar_minutes --total combined time the customer waits for internal response\n  \nfrom ticket\nleft join ticket_reply_times\n  using (ticket_id)\n\ngroup by 1", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_reply_times_calendar\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.073332Z", "completed_at": "2024-02-04T15:21:00.088615Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.104096Z", "completed_at": "2024-02-04T15:21:00.104113Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04990959167480469, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__reply_time_combined", "compiled": true, "compiled_code": "with reply_time_calendar_hours_sla as (\n  \n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__reply_time_calendar_hours\"\n\n\n\n), reply_time_business_hours_sla as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__reply_time_business_hours\"\n\n\n\n), ticket_updates as (\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__updates\"\n\n), users as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__user_aggregates\"\n\n), reply_time_breached_at as (\n\n  select \n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_applied_at as sla_schedule_start_at,\n    cast(null as timestamp) as sla_schedule_end_at,\n    cast(null as numeric(28,6)) as sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_at\n  from reply_time_calendar_hours_sla\n\n\n\n  union all\n\n  select \n    ticket_id,\n    sla_policy_name,\n    metric,\n    ticket_created_at,\n    sla_applied_at,\n    sla_schedule_start_at,\n    sla_schedule_end_at,\n    sum_lapsed_business_minutes,\n    target,\n    in_business_hours,\n    sla_breach_at\n  from reply_time_business_hours_sla\n\n\n-- Now that we have the breach time, see when the first reply after the sla policy was applied took place.\n), ticket_solved_times as (\n  select\n    ticket_id,\n    valid_starting_at as solved_at\n  from ticket_updates\n  where field_name = 'status'\n  and value in ('solved','closed')\n\n), reply_time as (\n  select \n    ticket_comment.ticket_id,\n    ticket_comment.valid_starting_at as reply_at,\n    commenter.role\n  from ticket_updates as ticket_comment\n  join users as commenter\n    on commenter.user_id = ticket_comment.user_id\n  where field_name = 'comment' \n    and ticket_comment.is_public\n    and commenter.role in ('agent','admin')\n\n), reply_time_breached_at_with_next_reply_timestamp as (\n\n  select \n    reply_time_breached_at.ticket_id,\n    reply_time_breached_at.sla_policy_name,\n    reply_time_breached_at.metric,\n    reply_time_breached_at.ticket_created_at,\n    reply_time_breached_at.sla_applied_at,\n    reply_time_breached_at.sum_lapsed_business_minutes,\n    reply_time_breached_at.target,\n    reply_time_breached_at.in_business_hours,\n    min(reply_time_breached_at.sla_schedule_start_at) as sla_schedule_start_at,\n    min(reply_time_breached_at.sla_schedule_end_at) as sla_schedule_end_at,\n    min(sla_breach_at) as sla_breach_at,\n    min(reply_at) as agent_reply_at,\n    min(solved_at) as next_solved_at\n  from reply_time_breached_at\n  left join reply_time\n    on reply_time.ticket_id = reply_time_breached_at.ticket_id\n    and reply_time.reply_at > reply_time_breached_at.sla_applied_at\n  left join ticket_solved_times\n    on reply_time_breached_at.ticket_id = ticket_solved_times.ticket_id\n    and ticket_solved_times.solved_at > reply_time_breached_at.sla_applied_at\n  group by 1,2,3,4,5,6,7,8\n\n), lagging_time_block as (\n  select\n    *,\n    lead(sla_schedule_start_at) over (partition by ticket_id, sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at) as next_schedule_start,\n    min(sla_breach_at) over (partition by sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at rows unbounded preceding) as first_sla_breach_at,\n\t\tcoalesce(lag(sum_lapsed_business_minutes) over (partition by sla_policy_name, metric, sla_applied_at order by sla_schedule_start_at), 0) as sum_lapsed_business_minutes_new\n  from reply_time_breached_at_with_next_reply_timestamp\n\n), filtered_reply_times as (\n  select\n    *\n  from lagging_time_block\n  where (\n    in_business_hours\n      and ((\n        agent_reply_at >= sla_schedule_start_at and agent_reply_at <= sla_schedule_end_at) -- ticket is replied to between a schedule window\n        or (agent_reply_at < sla_schedule_start_at and sum_lapsed_business_minutes_new = 0 and sla_breach_at = first_sla_breach_at) -- ticket is replied to before a schedule window and no business minutes have been spent on it\n        or (agent_reply_at is null and getdate() >= sla_schedule_start_at and getdate() < next_schedule_start) -- ticket is not replied to and therefore active. But only bring through the active SLA record that is most recent (after the last SLA schedule starts but before the next)  \n      ))\n    or not in_business_hours\n\n), reply_time_breached_at_remove_old_sla as (\n  select\n    *,\n    getdate() as current_time_check,\n    lead(sla_applied_at) over (partition by ticket_id, metric, in_business_hours order by sla_applied_at) as updated_sla_policy_starts_at,\n    case when \n      lead(sla_applied_at) over (partition by ticket_id, metric, in_business_hours order by sla_applied_at) --updated sla policy start at time\n      < sla_breach_at then true else false end as is_stale_sla_policy,\n    case when (sla_breach_at < agent_reply_at and sla_breach_at < next_solved_at)\n                or (sla_breach_at < agent_reply_at and next_solved_at is null)\n                or (agent_reply_at is null and sla_breach_at < next_solved_at)\n                or (agent_reply_at is null and next_solved_at is null)\n      then true\n      else false\n        end as is_sla_breached\n  from filtered_reply_times\n  \n), reply_time_breach as (\n  select \n    *,\n    case when datediff(\n        minute,\n        sla_schedule_start_at,\n        agent_reply_at\n        ) < 0 \n      then 0 \n      else sum_lapsed_business_minutes_new + datediff(\n        minute,\n        sla_schedule_start_at,\n        coalesce(agent_reply_at, current_time_check)\n        ) \n    end as sla_elapsed_time\n  from reply_time_breached_at_remove_old_sla\n)\n\nselect *\nfrom reply_time_breach", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__reply_time_combined\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.095627Z", "completed_at": "2024-02-04T15:21:00.115560Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.138031Z", "completed_at": "2024-02-04T15:21:00.138046Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05721235275268555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.not_null_zendesk__ticket_enriched_ticket_id.e3efc5bf0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom \"dev\".\"zendesk\".\"zendesk__ticket_enriched\"\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.106931Z", "completed_at": "2024-02-04T15:21:00.120349Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.143096Z", "completed_at": "2024-02-04T15:21:00.143111Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.059670448303222656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.unique_zendesk__ticket_enriched_ticket_id.7c3c6ca9ef", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"zendesk__ticket_enriched\"\nwhere ticket_id is not null\ngroup by ticket_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.121582Z", "completed_at": "2024-02-04T15:21:00.151066Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.160039Z", "completed_at": "2024-02-04T15:21:00.160051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.07314252853393555, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__agent_work_time_business_hours", "compiled": true, "compiled_code": "\n\n-- AGENT WORK TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new' or 'open' status.\n\n-- Additionally, for business hours, only 'new' or 'open' status hours are counted if they are also during business hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__agent_work_time_filtered_statuses\"\n  where in_business_hours\n\n), schedule as (\n\n  select * \n  from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), ticket_schedules as (\n\n  select * \n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      agent_work_time_filtered_statuses.ticket_id,\n      agent_work_time_filtered_statuses.sla_applied_at,\n      agent_work_time_filtered_statuses.target,    \n      agent_work_time_filtered_statuses.sla_policy_name,    \n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      valid_starting_at as status_valid_starting_at,\n      valid_ending_at as status_valid_ending_at\n\n    from agent_work_time_filtered_statuses\n    left join ticket_schedules\n      on agent_work_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n    where datediff(\n        second,\n        greatest(valid_starting_at, schedule_created_at),\n        least(valid_ending_at, schedule_invalidated_at)\n        ) > 0\n\n), ticket_full_solved_time as (\n\n    select \n      ticket_id,\n      sla_applied_at,\n      target,    \n      sla_policy_name,    \n      schedule_id,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_status_crossed_with_schedule.valid_starting_at\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp)\n        ) /60\n            ) as valid_starting_at_in_minutes_from_week,\n        (datediff(\n        second,\n        ticket_status_crossed_with_schedule.valid_starting_at,\n        ticket_status_crossed_with_schedule.valid_ending_at\n        ) /60\n              ) as raw_delta_in_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_status_crossed_with_schedule.valid_starting_at\n        )\n\n)\n        )\n\n as date) as start_week_date\n              \n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8,9,10\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as integer) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_agent_work_time as (\n\n    select \n\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      target,\n      sla_policy_name,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      start_week_date,\n      cast(greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time_minute,\n      cast(least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as integer) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_agent_work_time.ticket_id,\n      weekly_period_agent_work_time.sla_applied_at,\n      weekly_period_agent_work_time.target,\n      weekly_period_agent_work_time.sla_policy_name,\n      weekly_period_agent_work_time.valid_starting_at,\n      weekly_period_agent_work_time.valid_ending_at,\n      weekly_period_agent_work_time.week_number,\n      weekly_period_agent_work_time.ticket_week_start_time_minute,\n      weekly_period_agent_work_time.ticket_week_end_time_minute,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time_minute, schedule.end_time_utc) - greatest(weekly_period_agent_work_time.ticket_week_start_time_minute, schedule.start_time_utc) as scheduled_minutes\n    from weekly_period_agent_work_time\n    join schedule on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_agent_work_time.schedule_id = schedule.schedule_id\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time_minute,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n      and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time_minute,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n\n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) as lag_check,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n       when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n  \n), agent_work_business_breach as (\n  \n  select \n    *,\n    \n\n        dateadd(\n        minute,\n        cast(((7*24*60) * week_number) + breach_minutes_from_week as integer ),\n        date_trunc('week', valid_starting_at)\n        )\n\n as sla_breach_at\n  from intercepted_periods_agent_filtered\n\n)\n\nselect * \nfrom agent_work_business_breach", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__agent_work_time_business_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.144271Z", "completed_at": "2024-02-04T15:21:00.156590Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.179970Z", "completed_at": "2024-02-04T15:21:00.179996Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05215907096862793, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__agent_work_time_calendar_hours", "compiled": true, "compiled_code": "-- Calculate breach time for agent work time, calendar hours\nwith agent_work_time_filtered_statuses as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__agent_work_time_filtered_statuses\"\n  where not in_business_hours\n\n), agent_work_time_calendar_minutes as (\n\n  select \n    *,\n    datediff(\n        minute,\n        valid_starting_at,\n        valid_ending_at\n        ) as calendar_minutes,\n    sum(datediff(\n        minute,\n        valid_starting_at,\n        valid_ending_at\n        ) ) \n      over (partition by ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from agent_work_time_filtered_statuses\n\n), agent_work_time_calendar_minutes_flagged as (\n\nselect \n  agent_work_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  agent_work_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    \n\n        dateadd(\n        minute,\n        (remaining_target_minutes + calendar_minutes),\n        valid_starting_at\n        )\n\n as sla_breach_at\n  from agent_work_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__agent_work_time_calendar_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.163687Z", "completed_at": "2024-02-04T15:21:00.185188Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.199034Z", "completed_at": "2024-02-04T15:21:00.199047Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.06160855293273926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_wait_time_business_hours", "compiled": true, "compiled_code": "\n\n-- REQUESTER WAIT TIME\n-- This is complicated, as SLAs minutes are only counted while the ticket is in 'new', 'open', and 'on-hold' status.\n\n-- Additionally, for business hours, only 'new', 'open', and 'on-hold' status hours are counted if they are also during business hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_filtered_statuses\"\n  where in_business_hours\n\n), schedule as (\n\n  select * \n  from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), ticket_schedules as (\n\n  select * \n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n  \n-- cross schedules with work time\n), ticket_status_crossed_with_schedule as (\n  \n    select\n      requester_wait_time_filtered_statuses.ticket_id,\n      requester_wait_time_filtered_statuses.sla_applied_at,\n      requester_wait_time_filtered_statuses.target,\n      requester_wait_time_filtered_statuses.sla_policy_name,\n      ticket_schedules.schedule_id,\n\n      -- take the intersection of the intervals in which the status and the schedule were both active, for calculating the business minutes spent working on the ticket\n      greatest(valid_starting_at, schedule_created_at) as valid_starting_at,\n      least(valid_ending_at, schedule_invalidated_at) as valid_ending_at,\n\n      -- bringing the following in the determine which schedule (Daylight Savings vs Standard time) to use\n      valid_starting_at as status_valid_starting_at,\n      valid_ending_at as status_valid_ending_at\n\n    from requester_wait_time_filtered_statuses\n    left join ticket_schedules\n      on requester_wait_time_filtered_statuses.ticket_id = ticket_schedules.ticket_id\n    where datediff(\n        second,\n        greatest(valid_starting_at, schedule_created_at),\n        least(valid_ending_at, schedule_invalidated_at)\n        ) > 0\n\n), ticket_full_solved_time as (\n\n    select \n      ticket_id,\n      sla_applied_at,\n      target,\n      sla_policy_name,\n      schedule_id,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_status_crossed_with_schedule.valid_starting_at\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(ticket_status_crossed_with_schedule.valid_starting_at as timestamp)\n        ) /60\n          ) as valid_starting_at_in_minutes_from_week,\n      (datediff(\n        second,\n        ticket_status_crossed_with_schedule.valid_starting_at,\n        ticket_status_crossed_with_schedule.valid_ending_at\n        ) /60\n            ) as raw_delta_in_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_status_crossed_with_schedule.valid_starting_at\n        )\n\n)\n        )\n\n as date) as start_week_date\n\n    from ticket_status_crossed_with_schedule\n    group by 1,2,3,4,5,6,7,8,9,10\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_solved_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n      ticket_full_solved_time.*,\n      cast(generated_number - 1 as integer) as week_number\n    from ticket_full_solved_time\n    cross join weeks\n    where floor((valid_starting_at_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number -1\n\n), weekly_period_requester_wait_time as (\n\n    select \n\n      ticket_id,\n      sla_applied_at,\n      valid_starting_at,\n      valid_ending_at,\n      status_valid_starting_at,\n      status_valid_ending_at,\n      target,\n      sla_policy_name,\n      valid_starting_at_in_minutes_from_week,\n      raw_delta_in_minutes,\n      week_number,\n      schedule_id,\n      start_week_date,\n      cast(greatest(0, valid_starting_at_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time_minute,\n      cast(least(valid_starting_at_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as integer) as ticket_week_end_time_minute\n    \n    from weeks_cross_ticket_full_solved_time\n\n), intercepted_periods_agent as (\n  \n    select \n      weekly_period_requester_wait_time.ticket_id,\n      weekly_period_requester_wait_time.sla_applied_at,\n      weekly_period_requester_wait_time.target,\n      weekly_period_requester_wait_time.sla_policy_name,\n      weekly_period_requester_wait_time.valid_starting_at,\n      weekly_period_requester_wait_time.valid_ending_at,\n      weekly_period_requester_wait_time.week_number,\n      weekly_period_requester_wait_time.ticket_week_start_time_minute,\n      weekly_period_requester_wait_time.ticket_week_end_time_minute,\n      schedule.start_time_utc as schedule_start_time,\n      schedule.end_time_utc as schedule_end_time,\n      least(ticket_week_end_time_minute, schedule.end_time_utc) - greatest(weekly_period_requester_wait_time.ticket_week_start_time_minute, schedule.start_time_utc) as scheduled_minutes\n    from weekly_period_requester_wait_time\n    join schedule on ticket_week_start_time_minute <= schedule.end_time_utc \n      and ticket_week_end_time_minute >= schedule.start_time_utc\n      and weekly_period_requester_wait_time.schedule_id = schedule.schedule_id\n      -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n      -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n      and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time_minute,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n      and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time_minute,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n  \n), intercepted_periods_with_running_total as (\n  \n    select \n      *,\n      sum(scheduled_minutes) over \n        (partition by ticket_id, sla_applied_at \n          order by valid_starting_at, week_number, schedule_end_time\n          rows between unbounded preceding and current row)\n        as running_total_scheduled_minutes\n\n    from intercepted_periods_agent\n\n\n), intercepted_periods_agent_with_breach_flag as (\n  select \n    intercepted_periods_with_running_total.*,\n    target - running_total_scheduled_minutes as remaining_target_minutes,\n    lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) as lag_check,\n    case when (target - running_total_scheduled_minutes) = 0 then true\n       when (target - running_total_scheduled_minutes) < 0 \n        and \n          (lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) > 0 \n          or \n          lag(target - running_total_scheduled_minutes) over\n          (partition by ticket_id, sla_applied_at order by valid_starting_at, week_number, schedule_end_time) is null) \n          then true else false end as is_breached_during_schedule\n          \n  from  intercepted_periods_with_running_total\n\n), intercepted_periods_agent_filtered as (\n\n  select\n    *,\n    (remaining_target_minutes + scheduled_minutes) as breach_minutes,\n    greatest(ticket_week_start_time_minute, schedule_start_time) + (remaining_target_minutes + scheduled_minutes) as breach_minutes_from_week\n  from intercepted_periods_agent_with_breach_flag\n\n), requester_wait_business_breach as (\n  \n  select \n    *,\n    \n\n        dateadd(\n        minute,\n        cast(((7*24*60) * week_number) + breach_minutes_from_week as integer ),\n        date_trunc('week', valid_starting_at)\n        )\n\n as sla_breach_at\n  from intercepted_periods_agent_filtered\n\n)\n\nselect * \nfrom requester_wait_business_breach", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_business_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.186348Z", "completed_at": "2024-02-04T15:21:00.197848Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.230466Z", "completed_at": "2024-02-04T15:21:00.230486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07424235343933105, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__requester_wait_time_calendar_hours", "compiled": true, "compiled_code": "-- Calculate breach time for requester wait time, calendar hours\nwith requester_wait_time_filtered_statuses as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_filtered_statuses\"\n  where not in_business_hours\n\n), requester_wait_time_calendar_minutes as (\n\n  select \n    *,\n    datediff(\n        minute,\n        valid_starting_at,\n        valid_ending_at\n        ) as calendar_minutes,\n    sum(datediff(\n        minute,\n        valid_starting_at,\n        valid_ending_at\n        ) ) \n      over (partition by ticket_id, sla_applied_at order by valid_starting_at rows between unbounded preceding and current row) as running_total_calendar_minutes\n  from requester_wait_time_filtered_statuses\n\n), requester_wait_time_calendar_minutes_flagged as (\n\nselect \n  requester_wait_time_calendar_minutes.*,\n  target - running_total_calendar_minutes as remaining_target_minutes,\n  case when (target - running_total_calendar_minutes) < 0 \n      and \n        (lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) >= 0 \n        or \n        lag(target - running_total_calendar_minutes) over\n        (partition by ticket_id, sla_applied_at order by valid_starting_at) is null) \n        then true else false end as is_breached_during_schedule\n        \nfrom  requester_wait_time_calendar_minutes\n\n), final as (\n  select\n    *,\n    (remaining_target_minutes + calendar_minutes) as breach_minutes,\n    \n\n        dateadd(\n        minute,\n        (remaining_target_minutes + calendar_minutes),\n        valid_starting_at\n        )\n\n as sla_breach_at\n  from requester_wait_time_calendar_minutes_flagged\n\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_calendar_hours\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.200173Z", "completed_at": "2024-02-04T15:21:00.229295Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.239205Z", "completed_at": "2024-02-04T15:21:00.239219Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05242180824279785, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_first_resolution_time_business", "compiled": true, "compiled_code": "\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_resolution_times_calendar\"\n\n), ticket_schedules as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n\n), schedule as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), ticket_first_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.first_solved_at) as first_solved_at,\n\n    (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_schedules.schedule_created_at\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(ticket_schedules.schedule_created_at as timestamp)\n        ) /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        datediff(\n        second,\n        ticket_schedules.schedule_created_at,\n        least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.first_solved_at))\n        )/60\n        )) as raw_delta_in_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_schedules.schedule_created_at\n        )\n\n)\n        )\n\n as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n  group by 1, 2, 3, 4\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_first_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_first_resolution_time.*,\n      cast(generated_number - 1 as integer) as week_number\n\n    from ticket_first_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n\n), weekly_periods as (\n  \n    select \n\n      weeks_cross_ticket_first_resolution_time.*,\n      cast(greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time,\n      cast(least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as integer) as ticket_week_end_time\n    \n    from weeks_cross_ticket_first_resolution_time\n\n), intercepted_periods as (\n\n  select ticket_id,\n         week_number,\n         weekly_periods.schedule_id,\n         ticket_week_start_time,\n         ticket_week_end_time,\n         schedule.start_time_utc as schedule_start_time,\n         schedule.end_time_utc as schedule_end_time,\n         least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n\n)\n\n  select \n    ticket_id,\n    sum(scheduled_minutes) as first_resolution_business_minutes\n  from intercepted_periods\n  group by 1", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_first_resolution_time_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.217129Z", "completed_at": "2024-02-04T15:21:00.235134Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.245569Z", "completed_at": "2024-02-04T15:21:00.245583Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.06607413291931152, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__ticket_full_resolution_time_business", "compiled": true, "compiled_code": "\n\nwith ticket_resolution_times_calendar as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_resolution_times_calendar\"\n\n), ticket_schedules as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__ticket_schedules\"\n\n), schedule as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__schedule_spine\"\n\n), ticket_full_resolution_time as (\n\n  select \n    ticket_resolution_times_calendar.ticket_id,\n    ticket_schedules.schedule_created_at,\n    ticket_schedules.schedule_invalidated_at,\n    ticket_schedules.schedule_id,\n\n    -- bringing this in the determine which schedule (Daylight Savings vs Standard time) to use\n    min(ticket_resolution_times_calendar.last_solved_at) as last_solved_at,\n    (datediff(\n        second,\n        cast(-- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_schedules.schedule_created_at\n        )\n\n)\n        )\n\n as date)as timestamp),\n        cast(ticket_schedules.schedule_created_at as timestamp)\n        ) /60\n          ) as start_time_in_minutes_from_week,\n    greatest(0,\n      (\n        datediff(\n        second,\n        ticket_schedules.schedule_created_at,\n        least(ticket_schedules.schedule_invalidated_at, min(ticket_resolution_times_calendar.last_solved_at))\n        )/60\n        )) as raw_delta_in_minutes,\n    -- Sunday as week start date\ncast(\n\n    dateadd(\n        day,\n        -1,\n        date_trunc('week', \n\n    dateadd(\n        day,\n        1,\n        ticket_schedules.schedule_created_at\n        )\n\n)\n        )\n\n as date) as start_week_date\n      \n  from ticket_resolution_times_calendar\n  join ticket_schedules on ticket_resolution_times_calendar.ticket_id = ticket_schedules.ticket_id\n  group by 1, 2, 3, 4\n\n), weeks as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 208\n    order by generated_number\n\n\n\n), weeks_cross_ticket_full_resolution_time as (\n    -- because time is reported in minutes since the beginning of the week, we have to split up time spent on the ticket into calendar weeks\n    select \n\n      ticket_full_resolution_time.*,\n      cast(generated_number - 1 as integer) as week_number\n\n    from ticket_full_resolution_time\n    cross join weeks\n    where floor((start_time_in_minutes_from_week + raw_delta_in_minutes) / (7*24*60)) >= generated_number - 1\n\n), weekly_periods as (\n  \n  select \n\n    weeks_cross_ticket_full_resolution_time.*,\n    cast(greatest(0, start_time_in_minutes_from_week - week_number * (7*24*60)) as integer) as ticket_week_start_time,\n    cast(least(start_time_in_minutes_from_week + raw_delta_in_minutes - week_number * (7*24*60), (7*24*60)) as integer) as ticket_week_end_time\n  \n  from weeks_cross_ticket_full_resolution_time\n\n), intercepted_periods as (\n\n  select \n    ticket_id,\n    week_number,\n    weekly_periods.schedule_id,\n    ticket_week_start_time,\n    ticket_week_end_time,\n    schedule.start_time_utc as schedule_start_time,\n    schedule.end_time_utc as schedule_end_time,\n    least(ticket_week_end_time, schedule.end_time_utc) - greatest(ticket_week_start_time, schedule.start_time_utc) as scheduled_minutes\n  from weekly_periods\n  join schedule on ticket_week_start_time <= schedule.end_time_utc \n    and ticket_week_end_time >= schedule.start_time_utc\n    and weekly_periods.schedule_id = schedule.schedule_id\n    -- this chooses the Daylight Savings Time or Standard Time version of the schedule\n    -- We have everything calculated within a week, so take us to the appropriate week first by adding the week_number * minutes-in-a-week to the minute-mark where we start and stop counting for the week\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_end_time,\n        start_week_date\n        )\n\n as timestamp) > cast(schedule.valid_from as timestamp)\n    and cast( \n\n    dateadd(\n        minute,\n        week_number * (7*24*60) + ticket_week_start_time,\n        start_week_date\n        )\n\n as timestamp) < cast(schedule.valid_until as timestamp)\n  \n)\n\n  select \n    ticket_id,\n    sum(scheduled_minutes) as full_resolution_business_minutes\n  from intercepted_periods\n  group by 1", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__ticket_full_resolution_time_business\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.268610Z", "completed_at": "2024-02-04T15:21:00.284124Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.301387Z", "completed_at": "2024-02-04T15:21:00.301405Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06178903579711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_job_application_profile_candidate_job_id.58f8e8141b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect candidate_job_id\nfrom \"dev\".\"ats\".\"job_application_profile\"\nwhere candidate_job_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.279064Z", "completed_at": "2024-02-04T15:21:00.288898Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.310988Z", "completed_at": "2024-02-04T15:21:00.311002Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.049031972885131836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_job_application_profile_candidate_job_id.549a30be72", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    candidate_job_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"job_application_profile\"\nwhere candidate_job_id is not null\ngroup by candidate_job_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.290043Z", "completed_at": "2024-02-04T15:21:00.309887Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.317962Z", "completed_at": "2024-02-04T15:21:00.317975Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04558706283569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_companydash_product_metrics__date_country_.a06aeabef7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || country)\nfrom \"dev\".\"tableau\".\"tableau_companydash_product_metrics\"\nwhere (date || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.324383Z", "completed_at": "2024-02-04T15:21:00.343041Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.352766Z", "completed_at": "2024-02-04T15:21:00.352780Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03896450996398926, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_companydash_product_metrics__date_country_.047eedeec3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"tableau_companydash_product_metrics\"\nwhere (date || country) is not null\ngroup by (date || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.335070Z", "completed_at": "2024-02-04T15:21:00.346440Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.356834Z", "completed_at": "2024-02-04T15:21:00.356846Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.037793636322021484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_smartmatch_conversion_funnel_dim", "compiled": true, "compiled_code": "\n\n\nwith owners as (\n  select distinct o.country, m.user_uuid, m.uuid as member_uuid, o.uuid as org_uuid\n  from \"dev\".\"employment_hero\".\"employees\" m\n  join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n  where m.role ilike 'owner'\n  and m.user_id is not null\n  and m.uuid is not null\n  )\n  ,\n  admins as (\n  select distinct o.country, m.user_uuid, m.uuid as member_uuid, o.uuid as org_uuid\n  from \"dev\".\"employment_hero\".\"employees\" m\n  join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id \n  where m.role ilike 'employer'\n  and m.user_id is not null\n  and m.uuid is not null\n  )\n  ,\n  hiring_managers as (\n  select distinct o.country, m.user_uuid, m.uuid as member_uuid, o.uuid as org_uuid\n  from \"dev\".\"ats_public\".\"hiring_managers\" hm\n  join \"dev\".\"employment_hero\".\"employees\" m on hm.member_id = m.uuid\n  join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n  join \"dev\".\"ats\".\"jobs_created\" j on hm.job_id = j.job_id\n  where m.role not ilike 'owner'\n  and m.role not ilike 'employer'\n  and hm._fivetran_deleted ='f'\n  and m.user_id is not null\n  and m.uuid is not null\n  )\n  ,\n  people_managers as (\n  select distinct o.country, m.user_uuid, m.uuid as member_uuid, o.uuid as org_uuid\n  from \"dev\".\"postgres_public\".\"member_managers\" pm\n  join \"dev\".\"employment_hero\".\"employees\" m on pm.manager_id = m.id\n  join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n  where m.role not ilike 'owner'\n  and m.role not ilike 'employer'\n  and m.user_id is not null\n  and not pm._fivetran_deleted\n  and m.uuid is not null\n  )\n  ,\n  security_groups as (\n  select rp.key, coalesce(ra.member_id, tm.member_id) as member_id, r.is_affecting_all_employees, r.organisation_id\n  from \"dev\".\"postgres_public\".\"security_roles\" r\n  join \"dev\".\"postgres_public\".\"security_role_assignees\" ra on ra.security_role_id = r.id\n  join \"dev\".\"postgres_public\".\"security_role_permissions\" rp on rp.security_role_id = r.id\n  join \"dev\".\"postgres_public\".\"team_members\" tm on tm.team_id = ra.team_id\n  where rp.key = 'security_permissions_recruitment_ats' and rp.use = 't'\n  and not r._fivetran_deleted\n  and not ra._fivetran_deleted\n  and not rp._fivetran_deleted\n  and not tm._fivetran_deleted\n  )\n  , \n\n  tams as ( \n  select distinct o.country, m.user_uuid, m.uuid as member_uuid, o.uuid as org_uuid\n  from security_groups sg\n  join \"dev\".\"employment_hero\".\"employees\" m on sg.member_id = m.id\n  join \"dev\".\"employment_hero\".\"organisations\" o on m.organisation_id = o.id\n  where m.role not ilike 'owner'\n  and m.role not ilike 'employer'\n  and m.user_id is not null\n  and m.uuid is not null\n  )\n\n  ,\n\n  user_list as (\n  select distinct employer_member_uuid, org_uuid from \"dev\".\"ats\".\"smart_match_employer_actions\" where employer_member_uuid is not null and org_uuid is not null)\n\n  select \n  a.employer_member_uuid\n  , a.org_uuid\n  , case when owners.member_uuid is not null then 'Owner'\n    when admins.member_uuid is not null then 'Admin'\n    when tams.member_uuid is not null then 'TAM'\n    when hiring_managers.member_uuid is not null then 'Hiring Manager'\n    when people_managers.member_uuid is not null then 'People Manager'\n    else 'Other' end as User_Type\n  , eho.country\n  , eho.industry\n  from user_list a\n  left join owners on a.employer_member_uuid = owners.member_uuid and a.org_uuid = owners.org_uuid\n  left join admins on a.employer_member_uuid = admins.member_uuid and a.org_uuid = admins.org_uuid\n  left join tams on a.employer_member_uuid = tams.member_uuid and a.org_uuid = tams.org_uuid\n  left join hiring_managers on a.employer_member_uuid = hiring_managers.member_uuid and a.org_uuid = hiring_managers.org_uuid\n  left join people_managers on a.employer_member_uuid = people_managers.member_uuid and a.org_uuid = people_managers.org_uuid\n  left join \"dev\".\"employment_hero\".\"organisations\" eho on a.org_uuid = eho.uuid", "relation_name": "\"dev\".\"tableau\".\"smartmatch_conversion_funnel_dim\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.347654Z", "completed_at": "2024-02-04T15:21:00.358016Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.365908Z", "completed_at": "2024-02-04T15:21:00.365923Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03648829460144043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_smartmatch_conversion_funnel_fct", "compiled": true, "compiled_code": "\n\nwith shown as\n\n(\nselect \nemployer_member_uuid\n, user_uuid\n, org_uuid\n, job_matched\n, 'Shown' as Funnel_Stage\n, min(CAST(COALESCE(first_shown_at, first_previewed_at, saved_or_shortlisted_at, hired_at, onboarded_at) as DATE)) as Action_Date\n, sum(No_Of_Shown_Actions) as No_Of_Actions\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere COALESCE(first_shown_at, first_previewed_at, saved_or_shortlisted_at, hired_at, onboarded_at) is not null\ngroup by 1, 2, 3, 4, 5\n)\n,\n\npreviewed as\n\n(\nselect \nemployer_member_uuid\n, user_uuid\n, org_uuid\n, job_matched\n, 'Previewed' as Funnel_Stage\n, min(CAST(COALESCE(first_previewed_at, saved_or_shortlisted_at, hired_at, onboarded_at) as DATE)) as Action_Date\n, sum(No_Of_Previewed_Actions) as No_Of_Actions\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere COALESCE(first_previewed_at, saved_or_shortlisted_at, hired_at, onboarded_at) is not null\ngroup by 1, 2, 3, 4, 5\n)\n,\nsaved as\n\n(\nselect \nemployer_member_uuid\n, user_uuid\n, org_uuid\n, job_matched\n, 'Saved' as Funnel_Stage\n, min(CAST(COALESCE(saved_or_shortlisted_at, hired_at, onboarded_at) as DATE)) as Action_Date\n, sum(No_Of_Saved_Actions) as No_Of_Actions\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere COALESCE(saved_or_shortlisted_at, hired_at, onboarded_at) is not null\ngroup by 1, 2, 3, 4, 5\n)\n,\n\nshortlisted as\n\n(\nselect \nemployer_member_uuid\n, user_uuid\n, org_uuid\n, job_matched\n, 'Shortlisted' as Funnel_Stage\n, min(CAST(COALESCE(shortlisted_at, hired_at, onboarded_at) as DATE)) as Action_Date\n, sum(No_Of_Shortlisted_Actions) as No_Of_Actions\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere COALESCE(shortlisted_at, hired_at, onboarded_at) is not null\ngroup by 1, 2, 3, 4, 5\n)\n,\n\nonboarded as\n\n(\nselect \nemployer_member_uuid\n, user_uuid\n, org_uuid\n, job_matched\n, 'Onboarded' as Funnel_Stage\n, min(CAST(COALESCE(hired_at, onboarded_at) as DATE)) as Action_Date\n, sum(No_Of_Onboarded_Actions) as No_Of_Actions\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere COALESCE(hired_at, onboarded_at) is not null\ngroup by 1, 2, 3, 4, 5\n)\n\nselect\na.employer_member_uuid\n, a.user_uuid\n, a.org_uuid\n, a.job_matched\n, a.Funnel_Stage\n, a.Action_Date\n, a.No_Of_Actions\nfrom\n(select * from shown\n union\n select * from previewed\n union\n select * from saved\n union\n select * from shortlisted\n union\n select * from onboarded) a", "relation_name": "\"dev\".\"tableau\".\"smartmatch_conversion_funnel_fct\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.371438Z", "completed_at": "2024-02-04T15:21:00.384378Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.390338Z", "completed_at": "2024-02-04T15:21:00.390351Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03490138053894043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_employer_actions_id.e04bece6ae", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.379222Z", "completed_at": "2024-02-04T15:21:00.388079Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.399406Z", "completed_at": "2024-02-04T15:21:00.399420Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.034897804260253906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_smart_match_employer_actions_id.80e1afa23c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"smart_match_employer_actions\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.392534Z", "completed_at": "2024-02-04T15:21:00.401957Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.409446Z", "completed_at": "2024-02-04T15:21:00.409460Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03335404396057129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ats_smart_match_funnel_id.294a1f4056", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"ats\".\"smart_match_funnel\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.411917Z", "completed_at": "2024-02-04T15:21:00.429915Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.437085Z", "completed_at": "2024-02-04T15:21:00.437100Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.041075944900512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ats_smart_match_funnel_id.b410541e4d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ats\".\"smart_match_funnel\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.422711Z", "completed_at": "2024-02-04T15:21:00.434852Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.447180Z", "completed_at": "2024-02-04T15:21:00.447201Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.042283058166503906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_paysplit_members_aggregation_date.1b83d8a1e4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"ebenefits\".\"paysplit_members_aggregation\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.438416Z", "completed_at": "2024-02-04T15:21:00.449423Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.459877Z", "completed_at": "2024-02-04T15:21:00.459890Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.033967018127441406, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_paysplit_members_aggregation_date.165e6d0565", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"paysplit_members_aggregation\"\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.466351Z", "completed_at": "2024-02-04T15:21:00.481867Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.491311Z", "completed_at": "2024-02-04T15:21:00.491329Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03765106201171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employee_scorecard_absenteeism_member_id.4d9f56c0ce", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"employee_scorecard\".\"absenteeism\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.475081Z", "completed_at": "2024-02-04T15:21:00.485363Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.495245Z", "completed_at": "2024-02-04T15:21:00.495258Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03683304786682129, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employee_scorecard_absenteeism_member_id.dba6cca4da", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employee_scorecard\".\"absenteeism\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.486536Z", "completed_at": "2024-02-04T15:21:00.496350Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.504046Z", "completed_at": "2024-02-04T15:21:00.504061Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0275421142578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employee_scorecard_sickness", "compiled": true, "compiled_code": "\n\nwith\n    cohort_w_attributes as (\n        select \n            e.*\n            ,coalesce(bf.bradford_score, 0) as bradford_factor\n            ,case \n                when bradford_factor<=50 then 1\n                when bradford_factor>50 and bradford_factor<=100 then 2\n                when bradford_factor>100 and bradford_factor<=200 then 3\n                when bradford_factor>200 and bradford_factor<=500 then 4\n                when bradford_factor>500 then 5\n            end as bradford_rating\n            ,coalesce(ab.absent_percentage, 0) as absent_rate\n            ,case\n                when absent_rate<=1.5 then 1\n                when absent_rate>1.5 and absent_rate<=3 then 2\n                when absent_rate>3 and absent_rate<=4 then 3\n                when absent_rate>4 and absent_rate<=5 then 4\n                when absent_rate>5 then 5\n            end as absence_rating\n        from \n            \"dev\".\"employee_scorecard\".\"employee_scorecard_cohort\" as e\n            left join \"dev\".\"employee_scorecard\".\"bradford_factor\" as bf on\n                e.member_id = bf.member_id\n            left join \"dev\".\"employee_scorecard\".\"absenteeism\" as ab on\n                e.member_id = ab.member_id\n    )\n    , median_bradford_factor as (\n        select\n            organisation_id\n            , median(bradford_factor) as bradford_factor_organisation_median\n        from\n            cohort_w_attributes\n        group by 1\n    )\n    , median_absent_rate as (\n        select\n            organisation_id\n            , median(absent_rate) as absent_rate_organisation_median\n        from\n            cohort_w_attributes\n        group by 1\n    )\n\nselect\n    c.*\n    , mbf.bradford_factor_organisation_median\n    , mar.absent_rate_organisation_median\nfrom \n    cohort_w_attributes c\n    join median_bradford_factor mbf on\n        c.organisation_id = mbf.organisation_id\n    join median_absent_rate mar on\n        c.organisation_id = mar.organisation_id", "relation_name": "\"dev\".\"employee_scorecard\".\"sickness_scorecard\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.509325Z", "completed_at": "2024-02-04T15:21:00.523693Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.531063Z", "completed_at": "2024-02-04T15:21:00.531083Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03802180290222168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employee_scorecard_bradford_factor_member_id.c086551cc9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"employee_scorecard\".\"bradford_factor\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.518638Z", "completed_at": "2024-02-04T15:21:00.528577Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.541836Z", "completed_at": "2024-02-04T15:21:00.541850Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.040547847747802734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employee_scorecard_bradford_factor_member_id.00eaab50da", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employee_scorecard\".\"bradford_factor\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.534406Z", "completed_at": "2024-02-04T15:21:00.545431Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.553330Z", "completed_at": "2024-02-04T15:21:00.553343Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.035180091857910156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_age_group", "compiled": true, "compiled_code": "\n\nwith\n    combined_platform_aus as (\n        select * from \"dev\".\"employment_index\".\"eh_kp_combined_hours\"\n    ),\n    age_group_binned as (\n        select\n            month,\n            member_id,\n            organisation_id,\n            gender,\n            industry,\n            residential_state,\n            employment_type,\n            monthly_hours,\n            age,\n            case\n                when age < 18\n                then 'Under 18'\n                when age between 18 and 24\n                then '18-24 year olds'\n                when age between 25 and 64\n                then '25-64 year olds'\n                when age > 64\n                then '65+ year olds'\n            end as age_group\n        from combined_platform_aus\n    ),\n    med_hours_worked as (\n        select distinct\n            age_group,\n            month,\n            median(monthly_hours) over (\n                partition by age_group, month\n            ) as median_hours_worked\n        from age_group_binned\n        where age_group is not null\n        order by age_group, month\n    ),\n    monthly_change as (\n        select\n            age_group,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked) over (\n                partition by age_group order by age_group, month\n            ) as previous_month_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_month_lag)\n                        /  previous_month_lag,\n                        3\n                    )\n            end as hours_worked_growth_monthly\n        from med_hours_worked\n        where age_group is not null\n        order by age_group, month\n    ),\n    quarterly_change as (\n        select\n            age_group,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 3) over (\n                partition by age_group order by age_group, month\n            ) as previous_quarter_lag,\n            round(\n                (median_hours_worked - previous_quarter_lag) / previous_quarter_lag, 3\n            ) as hours_worked_growth_quarterly\n        from med_hours_worked\n        where age_group is not null\n        order by age_group, month\n    ),\n    semiannual_change as (\n        select\n            age_group,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 6) over (\n                partition by age_group order by age_group, month\n            ) as previous_semiannual_lag,\n            round(\n                (median_hours_worked - previous_semiannual_lag) / previous_semiannual_lag, 3\n            ) as hours_worked_growth_semiannual\n        from med_hours_worked\n        where age_group is not null\n        order by age_group, month\n    ),\n    yearly_change as (\n        select\n            age_group,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 12) over (\n                partition by age_group order by age_group, month\n            ) as previous_yearly_lag,\n            round(\n                (median_hours_worked - previous_yearly_lag) / previous_yearly_lag, 3\n            ) as hours_worked_growth_yearly\n        from med_hours_worked\n        where age_group is not null\n        order by age_group, month\n    ),\n    min_sample_size as (\n        select\n            age_group,\n            month,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from age_group_binned\n        group by 1, 2\n        having business_sample > 150\n    )\n\nselect\n    m.age_group,\n    m.month,\n    m.median_hours_worked,\n    previous_month_lag,\n    hours_worked_growth_monthly,\n    previous_quarter_lag,\n    hours_worked_growth_quarterly,\n    previous_semiannual_lag,\n    hours_worked_growth_semiannual,\n    previous_yearly_lag,\n    hours_worked_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on (m.month = q.month and m.age_group = q.age_group)\nleft join semiannual_change s on (m.month = s.month and m.age_group = s.age_group)\nleft join yearly_change y on (m.month = y.month and m.age_group = y.age_group)\njoin min_sample_size ms on (m.month = ms.month and m.age_group = ms.age_group)\norder by m.age_group, m.month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_age_group\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.555802Z", "completed_at": "2024-02-04T15:21:00.568960Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.575116Z", "completed_at": "2024-02-04T15:21:00.575130Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.033766746520996094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_aus", "compiled": true, "compiled_code": "\n\nwith\n    combined_platform_aus as (\n        select * from \"dev\".\"employment_index\".\"eh_kp_combined_hours\"\n    )\nselect distinct\n    month, median(monthly_hours) over (partition by month) as median_hours_worked\nfrom combined_platform_aus\norder by month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_aus\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.564036Z", "completed_at": "2024-02-04T15:21:00.572898Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.583471Z", "completed_at": "2024-02-04T15:21:00.583485Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03191661834716797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_company_size", "compiled": true, "compiled_code": "\n\nwith\n    combined_platform_aus as (\n        select * from \"dev\".\"employment_index\".\"eh_kp_combined_hours\"\n    ),\n    company_size_binned as (\n        select\n            month,\n            member_id,\n            organisation_id,\n            gender,\n            industry,\n            residential_state,\n            employment_type,\n            monthly_hours,\n            age,\n            case\n                when total_employees < 20\n                then '1-19'\n                when total_employees between 19 and 200\n                then '20-199'\n                when total_employees > 200\n                then '200+'\n            end as company_size\n        from combined_platform_aus\n    ),\n    med_hours_worked as (\n        select distinct\n            company_size,\n            month,\n            median(monthly_hours) over (\n                partition by company_size, month\n            ) as median_hours_worked\n        from company_size_binned\n        where company_size is not null\n        order by company_size, month\n    ),\n    monthly_change as (\n        select\n            company_size,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked) over (\n                partition by company_size order by company_size, month\n            ) as previous_month_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as hours_worked_growth_monthly\n        from med_hours_worked\n        order by company_size, month\n    ),\n    quarterly_change as (\n        select\n            company_size,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 3) over (\n                partition by company_size order by company_size, month\n            ) as previous_quarter_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as hours_worked_growth_quarterly\n        from med_hours_worked\n        order by company_size, month\n    ),\n    semiannual_change as (\n        select\n            company_size,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 6) over (\n                partition by company_size order by company_size, month\n            ) as previous_semiannual_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as hours_worked_growth_semiannual\n        from med_hours_worked\n        order by company_size, month\n    ),\n    yearly_change as (\n        select\n            company_size,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 12) over (\n                partition by company_size order by company_size, month\n            ) as previous_yearly_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as hours_worked_growth_yearly\n        from med_hours_worked\n        order by company_size, month\n    ),\n    min_sample_size as (\n        select\n            company_size,\n            month,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from company_size_binned\n        group by 1, 2\n        having business_sample > 150\n    )\n\nselect\n    m.company_size,\n    m.month,\n    m.median_hours_worked,\n    previous_month_lag,\n    hours_worked_growth_monthly,\n    previous_quarter_lag,\n    hours_worked_growth_quarterly,\n    previous_semiannual_lag,\n    hours_worked_growth_semiannual,\n    previous_yearly_lag,\n    hours_worked_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on (m.month = q.month and m.company_size = q.company_size)\nleft join semiannual_change s on (m.month = s.month and m.company_size = s.company_size)\nleft join yearly_change y on (m.month = y.month and m.company_size = y.company_size)\njoin min_sample_size ms on (m.month = ms.month and m.company_size = ms.company_size)\norder by m.company_size, m.month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_company_size\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.577353Z", "completed_at": "2024-02-04T15:21:00.587645Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.595133Z", "completed_at": "2024-02-04T15:21:00.595147Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.031786203384399414, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_employment_type", "compiled": true, "compiled_code": "\n\nwith\n    combined_platform_aus as (\n        select * from \"dev\".\"employment_index\".\"eh_kp_combined_hours\"\n    ),\n    med_hours_worked as (\n        select distinct\n            employment_type,\n            month,\n            median(monthly_hours) over (\n                partition by employment_type, month\n            ) as median_hours_worked\n        from combined_platform_aus\n        where employment_type is not null\n        order by employment_type, month\n    ),\n    monthly_change as (\n        select\n            employment_type,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked) over (\n                partition by employment_type order by employment_type, month\n            ) as previous_month_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as hours_worked_growth_monthly\n        from med_hours_worked\n        order by employment_type, month\n    ),\n\n    quarterly_change as (\n        select\n            employment_type,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 3) over (\n                partition by employment_type order by employment_type, month\n            ) as previous_quarter_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as hours_worked_growth_quarterly\n        from med_hours_worked\n        order by employment_type, month\n    ),\n    semiannual_change as (\n        select\n            employment_type,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 6) over (\n                partition by employment_type order by employment_type, month\n            ) as previous_semiannual_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as hours_worked_growth_semiannual\n        from med_hours_worked\n        order by employment_type, month\n    ),\n    yearly_change as (\n        select\n            employment_type,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 12) over (\n                partition by employment_type order by employment_type, month\n            ) as previous_yearly_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as hours_worked_growth_yearly\n        from med_hours_worked\n        order by employment_type, month\n    ),\n    min_sample_size as (\n        select\n            employment_type,\n            month,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_platform_aus\n        group by 1, 2\n        having business_sample > 150\n    )\n\nselect\n    m.employment_type,\n    m.month,\n    m.median_hours_worked,\n    previous_month_lag,\n    hours_worked_growth_monthly,\n    previous_quarter_lag,\n    hours_worked_growth_quarterly,\n    previous_semiannual_lag,\n    hours_worked_growth_semiannual,\n    previous_yearly_lag,\n    hours_worked_growth_yearly\nfrom monthly_change m\nleft join\n    quarterly_change q on (m.month = q.month and m.employment_type = q.employment_type)\nleft join\n    semiannual_change s on (m.month = s.month and m.employment_type = s.employment_type)\nleft join\n    yearly_change y on (m.month = y.month and m.employment_type = y.employment_type)\njoin\n    min_sample_size ms\n    on (m.month = ms.month and m.employment_type = ms.employment_type)\norder by m.employment_type, m.month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_employment_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.596290Z", "completed_at": "2024-02-04T15:21:00.611118Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.618473Z", "completed_at": "2024-02-04T15:21:00.618486Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03660726547241211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_industry", "compiled": true, "compiled_code": "\n\nwith\n    combined_platform_aus as (\n        select * from \"dev\".\"employment_index\".\"eh_kp_combined_hours\"\n    ),\n    med_hours_worked as (\n        select distinct\n            industry,\n            month,\n            median(monthly_hours) over (\n                partition by industry, month\n            ) as median_hours_worked\n        from combined_platform_aus\n        where industry is not null\n        order by industry, month\n    ),\n    monthly_change as (\n        select\n            industry,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked) over (\n                partition by industry order by industry, month\n            ) as previous_month_lag,\n            case\n                when median_hours_worked = 0 or previous_month_lag = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as hours_worked_growth_monthly\n        from med_hours_worked\n        order by industry, month\n    ),\n\n    quarterly_change as (\n        select\n            industry,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 3) over (\n                partition by industry order by industry, month\n            ) as previous_quarter_lag,\n            case\n                when median_hours_worked = 0 or previous_quarter_lag = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as hours_worked_growth_quarterly\n        from med_hours_worked\n        order by industry, month\n    ),\n    semiannual_change as (\n        select\n            industry,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 6) over (\n                partition by industry order by industry, month\n            ) as previous_semiannual_lag,\n            case\n                when median_hours_worked = 0 or previous_semiannual_lag = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as hours_worked_growth_semiannual\n        from med_hours_worked\n        order by industry, month\n    ),\n    yearly_change as (\n        select\n            industry,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 12) over (\n                partition by industry order by industry, month\n            ) as previous_yearly_lag,\n            case\n                when median_hours_worked = 0 or previous_yearly_lag = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as hours_worked_growth_yearly\n        from med_hours_worked\n        order by industry, month\n    ),\n    min_sample_size as (\n        select\n            industry,\n            month,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_platform_aus\n        group by 1, 2\n        having business_sample > 150\n    )\n\nselect\n    m.industry,\n    m.month,\n    m.median_hours_worked,\n    previous_month_lag,\n    hours_worked_growth_monthly,\n    previous_quarter_lag,\n    hours_worked_growth_quarterly,\n    previous_semiannual_lag,\n    hours_worked_growth_semiannual,\n    previous_yearly_lag,\n    hours_worked_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on (m.month = q.month and m.industry = q.industry)\nleft join semiannual_change s on (m.month = s.month and m.industry = s.industry)\nleft join yearly_change y on (m.month = y.month and m.industry = y.industry)\njoin min_sample_size ms on (m.month = ms.month and m.industry = ms.industry)\norder by m.industry, m.month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_industry\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.603432Z", "completed_at": "2024-02-04T15:21:00.613933Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.624040Z", "completed_at": "2024-02-04T15:21:00.624054Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03342628479003906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_state", "compiled": true, "compiled_code": "\n\nwith\n    combined_platform_aus as (\n        select * from \"dev\".\"employment_index\".\"eh_kp_combined_hours\"\n    ),\n    med_hours_worked as (\n        select distinct\n            residential_state,\n            month,\n            median(monthly_hours) over (\n                partition by residential_state, month\n            ) as median_hours_worked\n        from combined_platform_aus\n        where residential_state is not null\n        order by residential_state, month\n    ),\n    monthly_change as (\n        select\n            residential_state,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked) over (\n                partition by residential_state order by residential_state, month\n            ) as previous_month_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as hours_worked_growth_monthly\n        from med_hours_worked\n        order by residential_state, month\n    ),\n    quarterly_change as (\n        select\n            residential_state,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 3) over (\n                partition by residential_state order by residential_state, month\n            ) as previous_quarter_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as hours_worked_growth_quarterly\n        from med_hours_worked\n        order by residential_state, month\n    ),\n    semiannual_change as (\n        select\n            residential_state,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 6) over (\n                partition by residential_state order by residential_state, month\n            ) as previous_semiannual_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as hours_worked_growth_semiannual\n        from med_hours_worked\n        order by residential_state, month\n    ),\n    yearly_change as (\n        select\n            residential_state,\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 12) over (\n                partition by residential_state order by residential_state, month\n            ) as previous_yearly_lag,\n            round(\n                (median_hours_worked - previous_yearly_lag) / previous_yearly_lag, 3\n            ) as hours_worked_growth_yearly\n        from med_hours_worked\n        order by residential_state, month\n    ),\n    min_sample_size as (\n        select\n            residential_state,\n            month,\n            count(distinct organisation_id) as business_sample,\n            count(distinct member_id) as employee_sample\n        from combined_platform_aus\n        group by 1, 2\n        having business_sample > 150\n    )\n\nselect\n    m.residential_state,\n    m.month,\n    m.median_hours_worked,\n    previous_month_lag,\n    hours_worked_growth_monthly,\n    previous_quarter_lag,\n    hours_worked_growth_quarterly,\n    previous_semiannual_lag,\n    hours_worked_growth_semiannual,\n    previous_yearly_lag,\n    hours_worked_growth_yearly\nfrom monthly_change m\nleft join\n    quarterly_change q\n    on (m.month = q.month and m.residential_state = q.residential_state)\nleft join\n    semiannual_change s\n    on (m.month = s.month and m.residential_state = s.residential_state)\nleft join\n    yearly_change y on (m.month = y.month and m.residential_state = y.residential_state)\njoin\n    min_sample_size ms\n    on (m.month = ms.month and m.residential_state = ms.residential_state)\norder by m.residential_state, m.month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_state\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.619816Z", "completed_at": "2024-02-04T15:21:00.628668Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.636290Z", "completed_at": "2024-02-04T15:21:00.636304Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0273134708404541, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.salesforce_hr_milestone_export", "compiled": true, "compiled_code": "\n\nselect\n  account_name                                 as sf_account_name,\n  professional_service_name                    as sf_professional_service_name,\n  project_started_date                         as sf_project_started_date,\n  expected_go_live                             as sf_expected_go_live,\n  project_completion_date                      as sf_project_completion_date,\n  closed_status                                as sf_closed_status,\n  eh_org_id                                    as sf_org_id,\n  eh_org_subplan,\n  opportunity_employees                        as sf_opportunity_employees,\n  employees_created                            as hr_platform_employees_created,\n  employees_invited                            as hr_platform_employees_invited,\n  employees_activated                          as hr_platform_employees_activated,\n  hr_70pc_employees_created_at::date,\n  hr_70pc_employees_invited_at::date,\n  hr_70pc_employees_activated_at::date,\n  first_announcement_at::date                  as hr_platform_first_announcement_at,\n  first_company_values_created_at::date        as hr_platform_first_company_values_created_at,\n  first_custom_survey_at::date                 as hr_platform_first_custom_survey_at,\n  first_happiness_survey_at::date              as hr_platform_first_happiness_survey_at,\n  first_document_uploaded_at::date             as hr_platform_first_document_uploaded_at,\n  first_certification_created_at::date         as hr_platform_first_certification_created_at,\n  first_policy_added_at::date                  as hr_platform_first_policy_added_at,\n  first_onboarding_checklist_created_at::date  as hr_platform_first_onboarding_checklist_created_at,\n  first_performance_review_created_at::date    as hr_platform_first_performance_review_created_at,\n  first_asset_created_at::date                 as hr_platform_first_asset_created_at,\n  first_coaching_session_created_at::date      as hr_platform_first_coaching_session_created_at,\n  first_okr_created_at::date                   as hr_platform_first_okr_created_at,\n  first_custom_security_group_created_at::date as hr_platform_first_custom_security_group_created_at\nfrom \"dev\".\"proserv\".\"guided_hr_milestones\"\nwhere\n  eh_org_id is not null\n  and sf_org_id is not null", "relation_name": "\"dev\".\"exports\".\"salesforce_hr_milestone_export\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.646669Z", "completed_at": "2024-02-04T15:21:00.654772Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.665905Z", "completed_at": "2024-02-04T15:21:00.665919Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.034002065658569336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_proserv_guided_hr_milestones_id.327c0a0c06", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"proserv\".\"guided_hr_milestones\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.641244Z", "completed_at": "2024-02-04T15:21:00.655932Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.667116Z", "completed_at": "2024-02-04T15:21:00.667130Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03813600540161133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_proserv_guided_hr_milestones_id.9d59644409", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"proserv\".\"guided_hr_milestones\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.660397Z", "completed_at": "2024-02-04T15:21:00.670325Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.677969Z", "completed_at": "2024-02-04T15:21:00.677983Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0284879207611084, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_pca_age_group__category_month_age_group_.b401cffd20", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (category || month || age_group)\nfrom \"dev\".\"employment_index\".\"pca_age_group\"\nwhere (category || month || age_group) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.684147Z", "completed_at": "2024-02-04T15:21:00.696807Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.709120Z", "completed_at": "2024-02-04T15:21:00.709135Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03651070594787598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_pca_age_group__category_month_age_group_.498f577ed6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (category || month || age_group) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"pca_age_group\"\nwhere (category || month || age_group) is not null\ngroup by (category || month || age_group)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.690684Z", "completed_at": "2024-02-04T15:21:00.699032Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.710394Z", "completed_at": "2024-02-04T15:21:00.710407Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03554129600524902, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_pca_monthly_change", "compiled": true, "compiled_code": "\n\nwith\n    pca_aus as (\n        select * from \"dev\".\"employment_index\".\"pca_aus\"\n    ),\n monthly_change as (\n        select\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings) over (\n                partition by category order by category, month\n            ) as previous_month_lag,\n            case\n                when monthly_net_earnings = 0 or previous_month_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as net_earnings_growth_monthly\n        from pca_aus\n        order by category, month\n    ),\n    quarterly_change as (\n        select\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 3) over (\n                partition by category order by category, month\n            ) as previous_quarterly_lag,\n            case\n                when monthly_net_earnings = 0 or previous_quarterly_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_quarterly_lag)\n                        / previous_quarterly_lag,\n                        3\n                    )\n            end as net_earnings_growth_quarterly\n        from pca_aus\n        order by category, month\n    ),\n        semiannual_change as (\n        select\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 6) over (\n                partition by category order by category, month\n            ) as previous_semiannual_lag,\n            case\n                when monthly_net_earnings = 0 or previous_semiannual_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as net_earnings_growth_semiannual\n        from pca_aus\n        order by category, month\n    ),\n        yearly_change as (\n        select\n            category,\n            month,\n            monthly_net_earnings,\n            lag(monthly_net_earnings, 12) over (\n                partition by category order by category, month\n            ) as previous_yearly_lag,\n            case\n                when monthly_net_earnings = 0 or previous_yearly_lag = 0 \n                then 0\n                else\n                    round(\n                        (monthly_net_earnings - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as net_earnings_growth_yearly\n        from pca_aus\n        order by category, month\n    )\n\nselect\n    m.category,\n    m.month,\n    m.monthly_net_earnings,\n    previous_month_lag,\n    net_earnings_growth_monthly,\n    previous_quarterly_lag,\n    net_earnings_growth_quarterly,\n    previous_semiannual_lag,\n    net_earnings_growth_semiannual,\n    previous_yearly_lag,\n    net_earnings_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on (m.month = q.month and m.category = q.category)\nleft join semiannual_change s on (m.month = s.month and m.category = s.category)\nleft join yearly_change y on (m.month = y.month and m.category = y.category)\norder by m.category, m.month", "relation_name": "\"dev\".\"employment_index\".\"pca_monthly_change\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.701289Z", "completed_at": "2024-02-04T15:21:00.711599Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.719616Z", "completed_at": "2024-02-04T15:21:00.719629Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.028598546981811523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_pca_aus__month_category_.b592e9af0e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (month || category)\nfrom \"dev\".\"employment_index\".\"pca_aus\"\nwhere (month || category) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.738690Z", "completed_at": "2024-02-04T15:21:00.752225Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.754722Z", "completed_at": "2024-02-04T15:21:00.754734Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03407931327819824, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_pca_company_size__category_month_company_size_.2b134daa1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (category || month || company_size)\nfrom \"dev\".\"employment_index\".\"pca_company_size\"\nwhere (category || month || company_size) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.746716Z", "completed_at": "2024-02-04T15:21:00.757531Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.766447Z", "completed_at": "2024-02-04T15:21:00.766464Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.026632070541381836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_pca_company_size__category_month_company_size_.e612a52a42", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (category || month || company_size) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"pca_company_size\"\nwhere (category || month || company_size) is not null\ngroup by (category || month || company_size)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.729621Z", "completed_at": "2024-02-04T15:21:00.759888Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.769146Z", "completed_at": "2024-02-04T15:21:00.769161Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.056943416595458984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_pca_aus__month_category_.2725cce196", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (month || category) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"pca_aus\"\nwhere (month || category) is not null\ngroup by (month || category)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.771940Z", "completed_at": "2024-02-04T15:21:00.781739Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.789031Z", "completed_at": "2024-02-04T15:21:00.789046Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04078984260559082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_pca_industry__industry_category_month_.afbc9860a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (industry || category || month)\nfrom \"dev\".\"employment_index\".\"pca_industry\"\nwhere (industry || category || month) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.790195Z", "completed_at": "2024-02-04T15:21:00.809841Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.822846Z", "completed_at": "2024-02-04T15:21:00.822861Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04327511787414551, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_pca_industry__industry_category_month_.e8ae4395b9", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (industry || category || month) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"pca_industry\"\nwhere (industry || category || month) is not null\ngroup by (industry || category || month)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.795363Z", "completed_at": "2024-02-04T15:21:00.811071Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.824261Z", "completed_at": "2024-02-04T15:21:00.824282Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04407477378845215, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_pca_state__residential_state_category_month_.b10fe3a5bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (residential_state || category || month)\nfrom \"dev\".\"employment_index\".\"pca_state\"\nwhere (residential_state || category || month) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.816982Z", "completed_at": "2024-02-04T15:21:00.830635Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.839197Z", "completed_at": "2024-02-04T15:21:00.839212Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.035588741302490234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_pca_state__residential_state_category_month_.802b9a65c8", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (residential_state || category || month) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"pca_state\"\nwhere (residential_state || category || month) is not null\ngroup by (residential_state || category || month)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.844249Z", "completed_at": "2024-02-04T15:21:00.858252Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.869161Z", "completed_at": "2024-02-04T15:21:00.869176Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03552508354187012, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_swag_avg_applicants_surrogate_key.1e10411d19", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom \"dev\".\"tableau\".\"swag_avg_applicants\"\nwhere surrogate_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.849920Z", "completed_at": "2024-02-04T15:21:00.859454Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.870339Z", "completed_at": "2024-02-04T15:21:00.870353Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0357816219329834, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_swag_avg_applicants_surrogate_key.62cb05b09e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"swag_avg_applicants\"\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.863913Z", "completed_at": "2024-02-04T15:21:00.874820Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.882576Z", "completed_at": "2024-02-04T15:21:00.882588Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.029434919357299805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_swag_avg_time_filled_surrogate_key.756e8306f5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom \"dev\".\"tableau\".\"swag_avg_time_filled\"\nwhere surrogate_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.887586Z", "completed_at": "2024-02-04T15:21:00.902627Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.913328Z", "completed_at": "2024-02-04T15:21:00.913342Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.036252737045288086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_swag_avg_time_filled_surrogate_key.b498c53e55", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"swag_avg_time_filled\"\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.892982Z", "completed_at": "2024-02-04T15:21:00.904881Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.914574Z", "completed_at": "2024-02-04T15:21:00.914588Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03764939308166504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_swag_pass_probation_surrogate_key.8b4504cfd8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect surrogate_key\nfrom \"dev\".\"tableau\".\"swag_pass_probation\"\nwhere surrogate_key is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.907085Z", "completed_at": "2024-02-04T15:21:00.917365Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.925093Z", "completed_at": "2024-02-04T15:21:00.925107Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.02776050567626953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_swag_pass_probation_surrogate_key.da359dc503", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"swag_pass_probation\"\nwhere surrogate_key is not null\ngroup by surrogate_key\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.931646Z", "completed_at": "2024-02-04T15:21:00.944346Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.961217Z", "completed_at": "2024-02-04T15:21:00.961236Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0403289794921875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_proserv_guided_payroll_milestones_id.4d17f520f2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"proserv\".\"guided_payroll_milestones\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.937851Z", "completed_at": "2024-02-04T15:21:00.946795Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.962512Z", "completed_at": "2024-02-04T15:21:00.962525Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.040670156478881836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_proserv_guided_payroll_milestones_id.d5e9b67315", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"proserv\".\"guided_payroll_milestones\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.949090Z", "completed_at": "2024-02-04T15:21:00.965446Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:00.973102Z", "completed_at": "2024-02-04T15:21:00.973116Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03408622741699219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_companydash_revenue_metrics", "compiled": true, "compiled_code": "--billed revenue\nwith\nfx as (\n    select distinct\n\n        case\n            when r.currency_code = 'GBP'\n                then 'UK'\n            when r.currency_code = 'MYR'\n                then 'MY'\n            when r.currency_code = 'NZD'\n                then 'NZ'\n            when r.currency_code = 'SGD'\n                then 'SG'\n            when r.currency_code = 'AUD'\n                then 'AU'\n        end\n\n        as country,\n        cast(r.data_timestamps as date) as date,\n        (\n            case\n                when r.rate = 0\n                    then 0\n                else aud.rate / r.rate\n            end\n        )\n        as fx_rate\n    from\n        \"dev\".\"exchange_rates\".\"rate\" as r\n    left join (\n        select distinct\n            cast(data_timestamps as date) as date,\n            rate\n        from\n            exchange_rates.rate\n        where\n            currency_code = 'AUD'\n            and _fivetran_deleted = false\n    )\n    as aud\n        on\n            aud.date = cast(r.data_timestamps as date)\n    where\n        currency_code in (\n            'GBP',\n            'MYR',\n            'NZD',\n            'SGD',\n            'AUD'\n        )\n        and _fivetran_deleted = false\n),\n\nbilled_revenue as (\n    select\n        invoice_date,\n        country,\n        sum(\n            case\n                when\n                    product_name like '%HR%'\n                    and charge_amount > 0\n                    and lower(charge_name) not like '%sms%'\n                    and lower(charge_name) not like '%super%'\n                    and lower(charge_name) not like '%hour%'\n                    then quantity\n                else 0\n            end\n        )\n        as hr_invoiced_emps,\n        sum(\n            case\n                when\n                    lower(product_name) like '%payroll%'\n                    and kp_legacy = false\n                    and charge_amount > 0\n                    and lower(charge_name) not like '%sms%'\n                    and lower(charge_name) not like '%super%'\n                    and lower(charge_name) not like '%hour%'\n                    then quantity\n                else 0\n            end\n        )\n        as payroll_invoiced_emps,\n        sum(\n            case\n                when\n                    lower(product_name) like '%payroll%'\n                    and kp_legacy = true\n                    and charge_amount > 0\n                    and lower(charge_name) not like '%sms%'\n                    and lower(charge_name) not like '%super%'\n                    and lower(charge_name) not like '%hour%'\n                    then quantity\n                else 0\n            end\n        )\n        as payroll_invoiced_emps_kp_direct,\n        sum(\n            case\n                when product_name like '%HR%'\n                    then charge_amount\n                else 0\n            end\n        )\n        as hr_billed_revenue,\n        sum(\n            case\n                when\n                    lower(product_name) like '%payroll%'\n                    and kp_legacy = false\n                    then charge_amount\n                else 0\n            end\n        )\n        as payroll_billed_revenue,\n        sum(\n            case\n                when\n                    lower(product_name) like '%payroll%'\n                    and kp_legacy = true\n                    then charge_amount\n                else 0\n            end\n        )\n        as payroll_billed_revenue_kp_direct,\n        sum(\n            case\n                when\n                    lower(product_name) not like '%payroll%'\n                    and (\n                        product_name\n                    )\n                    not like '%HR%'\n                    then charge_amount\n                else 0\n            end\n        )\n        as other_revenue,\n        sum(\n            case\n                when product_name like '%HR%'\n                    then charge_amount_aud\n                else 0\n            end\n        )\n        as hr_billed_revenue_aud,\n        sum(\n            case\n                when\n                    lower(product_name) like '%payroll%'\n                    and kp_legacy = false\n                    then charge_amount_aud\n                else 0\n            end\n        )\n        as payroll_billed_revenue_aud,\n        sum(\n            case\n                when\n                    lower(product_name) like '%payroll%'\n                    and kp_legacy = true\n                    then charge_amount_aud\n                else 0\n            end\n        )\n        as payroll_billed_revenue_kp_direct_aud,\n        sum(\n            case\n                when\n                    lower(product_name) not like '%payroll%'\n                    and (\n                        product_name\n                    )\n                    not like '%HR%'\n                    then charge_amount_aud\n                else 0\n            end\n        )\n        as other_revenue_aud\n    from\n        (\n            select distinct\n                invoice_item.id,\n                invoice.invoice_date,\n                invoice_item.quantity,\n                invoice_item.charge_name,\n                (\n                    coalesce(a.legacy_account_id_c like 'B%', false)\n                )\n                as kp_legacy,\n                (\n                    case\n                        when fx.fx_rate is not null\n                            then invoice_item.charge_amount * fx.fx_rate\n                        -- since fx table only tracks from Jul 23 onwards, we will keep past records with a static rate\n                        when lower(a.geo_code_c) = 'au'\n                            then invoice_item.charge_amount * 1\n                        when lower(a.geo_code_c) = 'nz'\n                            then invoice_item.charge_amount * 0.92\n                        when\n                            lower(a.geo_code_c) = 'uk'\n                            or lower(a.geo_code_c) = 'gb'\n                            then invoice_item.charge_amount * 1.92\n                        when lower(a.geo_code_c) = 'sg'\n                            then invoice_item.charge_amount * 1.14\n                        when lower(a.geo_code_c) = 'my'\n                            then invoice_item.charge_amount * 0.33\n                        -- might have orgs without account countries (just in case)\n                        when lower(o.country) = 'au'\n                            then invoice_item.charge_amount * 1\n                        when lower(o.country) = 'nz'\n                            then invoice_item.charge_amount * 0.92\n                        when\n                            lower(o.country) = 'uk'\n                            or lower(o.country) = 'gb'\n                            then invoice_item.charge_amount * 1.92\n                        when lower(o.country) = 'sg'\n                            then invoice_item.charge_amount * 1.14\n                        when lower(o.country) = 'my'\n                            then invoice_item.charge_amount * 0.33\n                    end\n                )\n                as charge_amount_aud,\n                invoice_item.charge_amount,\n                p.name as product_name,\n                case\n                    --check acc country first\n                    when lower(a.geo_code_c) = 'au'\n                        then 'Australia'\n                    when lower(a.geo_code_c) = 'uk'\n                        then 'United Kingdom'\n                    when lower(a.geo_code_c) = 'nz'\n                        then 'New Zealand'\n                    when lower(a.geo_code_c) = 'my'\n                        then 'Malaysia'\n                    when lower(a.geo_code_c) = 'sg'\n                        then 'Singapore'\n                    -- then org level country just in case\n                     when lower(o.country) = 'au'\n                        then 'Australia'\n                    when\n                        lower(o.country) = 'gb'\n                        or lower(o.country) = 'uk'\n                        then 'United Kingdom'\n                    when lower(o.country) = 'nz'\n                        then 'New Zealand'\n                    when lower(o.country) = 'my'\n                        then 'Malaysia'\n                    when lower(o.country) = 'sg'\n                        then 'Singapore'\n                    else 'untracked'\n                end    as country\n            from\n                \"dev\".\"zuora\".\"account\" as a\n            inner join \"dev\".\"zuora\".\"invoice\"\n                on\n                    a.id = invoice.account_id\n            inner join \"dev\".\"zuora\".\"invoice_item\"\n                on\n                    invoice.id = invoice_item.invoice_id\n            inner join \"dev\".\"zuora\".\"subscription\"\n                on\n                    invoice_item.subscription_id = subscription.id\n            inner join \"dev\".\"zuora\".\"rate_plan_charge\" as rpc\n                on\n                    rpc.id = invoice_item.rate_plan_charge_id\n            inner join \"dev\".\"zuora\".\"product_rate_plan\" as prp\n                on\n                    rpc.product_rate_plan_id = prp.id\n            inner join \"dev\".\"zuora\".\"product\" as p\n                on\n                    prp.product_id = p.id\n            left join \"dev\".\"employment_hero\".\"organisations\" as o\n                on\n                    o.zuora_account_id = invoice.account_id\n            left join fx\n                on\n                    fx.date = cast(invoice_date as date)\n                    and o.country = fx.country\n            where\n                not a._fivetran_deleted\n                and not invoice._fivetran_deleted\n                and not invoice_item._fivetran_deleted\n                and not p._fivetran_deleted\n                and not prp._fivetran_deleted\n                and not rpc._fivetran_deleted\n                and invoice.status = 'Posted'\n                and invoice.posted_date <= current_date\n        )\n    group by\n        1,\n        2\n),\n\n--active employees\nemployee_creations as (\n    select\n        cast(e.created_at as date) as created_date,\n        case\n            when lower(za.geo_code_c) = 'au'\n                then 'Australia'\n            when lower(za.geo_code_c) = 'uk'\n                then 'United Kingdom'\n            when lower(za.geo_code_c) = 'nz'\n                then 'New Zealand'\n            when lower(za.geo_code_c) = 'my'\n                then 'Malaysia'\n            when lower(za.geo_code_c) = 'sg'\n                then 'Singapore'\n            when lower(o2.country) = 'au'\n                then 'Australia'\n            when lower(o2.country) = 'gb'\n                then 'United Kingdom'\n            when lower(o2.country) = 'nz'\n                then 'New Zealand'\n            when lower(o2.country) = 'my'\n                then 'Malaysia'\n            when lower(o2.country) = 'sg'\n                then 'Singapore'\n            else 'untracked'\n        end                        as country,\n        case\n            when\n                e.eh_member_id is not null\n                and e.kp_employee_id is not null\n                then 'overlap'\n            when e.eh_member_id is not null\n                then 'eh'\n            when e.kp_employee_id is not null\n                then 'keypay'\n        end                        as source,\n        count(e.*)                 as new_employees,\n        count(\n            case\n                when e.is_paying_eh\n                    then e.is_paying_eh\n            end\n        )\n        as new_billed_employees\n    from\n        \"dev\".\"one_platform\".\"employees\" as e\n    left join \"dev\".\"employment_hero\".\"organisations\" as o1\n        on\n            e.eh_organisation_id = o1.id\n            and e.eh_member_id is not null\n    left join \"dev\".\"one_platform\".\"organisations\" as o2\n        on\n            e.kp_business_id = o2.kp_business_id\n            and e.eh_member_id is null\n            and e.kp_employee_id is not null\n    left join \"dev\".\"zuora\".\"account\" as za\n        on\n            o1.zuora_account_id = za.id\n    where\n        (\n            (e.eh_sub_name not ilike '%demo%' and e.eh_sub_name not ilike '%churn%')\n            or e.eh_sub_name is null\n        )\n        and (\n            e.created_at <= e.termination_date\n            or e.termination_date is null\n        )\n    group by\n        1,\n        2,\n        3\n    order by\n        created_date desc\n),\n\nemployee_terminations as (\n    select\n        cast(e.termination_date as date) as termination_date,\n        case\n            when\n                za.geo_code_c is not null\n                and lower(za.geo_code_c) = 'au'\n                then 'Australia'\n            when\n                za.geo_code_c is not null\n                and lower(za.geo_code_c) = 'uk'\n                then 'United Kingdom'\n            when\n                za.geo_code_c is not null\n                and lower(za.geo_code_c) = 'nz'\n                then 'New Zealand'\n            when\n                za.geo_code_c is not null\n                and lower(za.geo_code_c) = 'my'\n                then 'Malaysia'\n            when\n                za.geo_code_c is not null\n                and lower(za.geo_code_c) = 'sg'\n                then 'Singapore'\n            when\n                o2.country is not null\n                and lower(o2.country) = 'au'\n                then 'Australia'\n            when\n                o2.country is not null\n                and lower(o2.country) = 'gb'\n                then 'United Kingdom'\n            when\n                o2.country is not null\n                and lower(o2.country) = 'nz'\n                then 'New Zealand'\n            when\n                o2.country is not null\n                and lower(o2.country) = 'my'\n                then 'Malaysia'\n            when\n                o2.country is not null\n                and lower(o2.country) = 'sg'\n                then 'Singapore'\n            else 'untracked'\n        end                              as country,\n        case\n            when\n                e.eh_member_id is not null\n                and e.kp_employee_id is not null\n                then 'overlap'\n            when e.eh_member_id is not null\n                then 'eh'\n            when e.kp_employee_id is not null\n                then 'keypay'\n        end                              as source,\n        count(e.*)                       as terminations,\n        count(\n            case\n                when e.is_paying_eh\n                    then e.is_paying_eh\n            end\n        )\n        as billed_terminations\n    from\n        \"dev\".\"one_platform\".\"employees\" as e\n    left join \"dev\".\"employment_hero\".\"organisations\" as o1\n        on\n            e.eh_organisation_id = o1.id\n            and e.eh_member_id is not null\n    left join \"dev\".\"one_platform\".\"organisations\" as o2\n        on\n            e.kp_business_id = o2.kp_business_id\n            and e.eh_member_id is null\n            and e.kp_employee_id is not null\n    left join \"dev\".\"zuora\".\"account\" as za\n        on\n            o1.zuora_account_id = za.id\n    where\n        (\n            (e.eh_sub_name not ilike '%demo%' and e.eh_sub_name not ilike '%churn%')\n            or e.eh_sub_name is null\n        )\n        and (\n            e.created_at <= e.termination_date\n            or e.termination_date is null\n        )\n        and (\n            e.termination_date is not null\n            and e.termination_date <= getdate()\n        )\n    group by\n        1,\n        2,\n        3\n),\n\naccumulation as (\n    select\n        cast(d.date as date)                                                                                                                     as date,\n        s.source,\n        country.country,\n        sum(new_employees) over (partition by s.source, country.country order by d.date rows between unbounded preceding and current row)        as total_employees,\n        sum(terminations) over (partition by s.source, country.country order by d.date rows between unbounded preceding and current row)         as terminated_employees,\n        sum(new_billed_employees) over (partition by s.source, country.country order by d.date rows between unbounded preceding and current row) as billed_total_employees,\n        sum(billed_terminations) over (partition by s.source, country.country order by d.date rows between unbounded preceding and current row)  as billed_terminated_employees,\n        coalesce(total_employees, 0) - coalesce(terminated_employees, 0)                                                                         as active_employees,\n        coalesce(billed_total_employees, 0) - coalesce(billed_terminated_employees, 0)                                                           as billed_active_employees\n    from\n        (\n            select 'eh' as source\n            union distinct\n            select 'keypay' as source\n            union distinct\n            select 'overlap' as source\n        )\n        as s\n    cross join (\n        select 'Australia' as country\n        union distinct\n        select 'United Kingdom' as country\n        union distinct\n        select 'New Zealand' as country\n        union distinct\n        select 'Malaysia' as country\n        union distinct\n        select 'Singapore' as country\n        union distinct\n        select 'untracked' as country\n    )\n    as country\n    cross join (\n        select dateadd('day', 1 - generated_number::int, current_date) as date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n     + \n    \n    p12.generated_number * power(2, 12)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n     cross join \n    \n    p as p12\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 7300\n    order by generated_number\n\n) -- 365 * 20\n    )\n    as d\n    full outer join employee_creations as c\n        on\n            s.source = c.source\n            and d.date = c.created_date\n            and country.country = c.country\n    full outer join employee_terminations as t on\n        d.date = t.termination_date\n        and s.source = t.source\n        and country.country = t.country\n),\n\n-- billed orgs\naccumulation_org as (\n    select distinct\n        cast(d.month as date)                                                                                                                                                                                                                                                                                     as date,\n        case\n            when\n                eh_organisation_id is not null\n                and kp_business_id is not null\n                then 'overlap'\n            when eh_organisation_id is not null\n                then 'eh'\n            when kp_business_id is not null\n                then 'keypay'\n        end                                                                                                                                                                                                                                                                                                       as source,\n        (\n            case\n                when\n                    country is not null\n                    and lower(country) = 'au'\n                    then 'Australia'\n                when\n                    country is not null\n                    and lower(country) = 'gb'\n                    then 'United Kingdom'\n                when\n                    country is not null\n                    and lower(country) = 'nz'\n                    then 'New Zealand'\n                when\n                    country is not null\n                    and lower(country) = 'my'\n                    then 'Malaysia'\n                when\n                    country is not null\n                    and lower(country) = 'sg'\n                    then 'Singapore'\n                else 'untracked'\n            end\n        )\n        as country,\n        count(case when cast(date_trunc('month', created_at) as date) <= cast(d.month as date) and (cast(date_trunc('month', eh_churn_date) as date) >= cast(d.month as date) or eh_churn_date is null) then coalesce(cast(eh_organisation_id as varchar), cast(kp_business_id as varchar)) end)                  as active_orgs,\n        count(case when cast(date_trunc('month', created_at) as date) <= cast(d.month as date) and (cast(date_trunc('month', eh_churn_date) as date) >= cast(d.month as date) or eh_churn_date is null) and is_paying_eh then coalesce(cast(eh_organisation_id as varchar), cast(kp_business_id as varchar)) end)\n        as active_billed_orgs\n    from\n        \"dev\".\"one_platform\".\"organisations\"\n    cross join (\n        select dateadd('month', 1 - generated_number::int, date_trunc('month', getdate())) as month\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 30\n    order by generated_number\n\n)\n    )\n    as d\n    where\n        (\n            (eh_sub_name not ilike '%demo%')\n            or eh_sub_name is null\n        )\n    group by\n        1,\n        2,\n        3\n)\n\nselect distinct\n    a.date,\n    a.country,\n    b.hr_billed_revenue,\n    b.payroll_billed_revenue,\n    b.payroll_billed_revenue_kp_direct,\n    b.other_revenue,\n    b.hr_billed_revenue_aud,\n    b.payroll_billed_revenue_aud,\n    b.payroll_billed_revenue_kp_direct_aud,\n    b.other_revenue_aud,\n    b.hr_invoiced_emps,\n    b.payroll_invoiced_emps,\n    b.payroll_invoiced_emps_kp_direct,\n    sum(\n        case\n            when\n                a.source = 'keypay'\n                or a.source = 'overlap'\n                then a.active_employees\n            else 0\n        end\n    )\n    as payroll_employees,\n    sum(\n        case\n            when\n                a.source = 'eh'\n                or a.source = 'overlap'\n                then a.active_employees\n            else 0\n        end\n    )\n    as hr_employees,\n    sum(\n        case\n            when\n                a.source = 'keypay'\n                or a.source = 'overlap'\n                then a.billed_active_employees\n            else 0\n        end\n    )\n    as billed_payroll_employees,\n    sum(\n        case\n            when\n                a.source = 'eh'\n                or a.source = 'overlap'\n                then a.billed_active_employees\n            else 0\n        end\n    )\n    as billed_hr_employees,\n    sum(\n        case\n            when\n                o.source = 'keypay'\n                or o.source = 'overlap'\n                then o.active_orgs\n            else 0\n        end\n    )\n    as payroll_organisations,\n    sum(\n        case\n            when\n                o.source = 'eh'\n                or o.source = 'overlap'\n                then o.active_orgs\n            else 0\n        end\n    )\n    as hr_organisations,\n    sum(\n        case\n            when\n                o.source = 'keypay'\n                or o.source = 'overlap'\n                then o.active_billed_orgs\n            else 0\n        end\n    )\n    as billed_payroll_organisations,\n    sum(\n        case\n            when\n                o.source = 'eh'\n                or o.source = 'overlap'\n                then o.active_billed_orgs\n            else 0\n        end\n    )\n    as billed_hr_organisations,\n    sum(o.active_billed_orgs) as billed_total_organisations,\n    sum(o.active_orgs)        as total_organisations\nfrom\n    accumulation as a\nleft join billed_revenue as b\n    on\n        a.date = b.invoice_date\n        and a.country = b.country\nleft join accumulation_org as o\n    on\n        a.date = o.date\n        and a.country = o.country\n        and a.source = o.source\nwhere\n    total_employees is not null\n    and a.date >= cast('2020-06-01' as date)\ngroup by\n    1,\n    2,\n    3,\n    4,\n    5,\n    6,\n    7,\n    8,\n    9,\n    10,\n    11,\n    12,\n    13\norder by\n    a.date desc", "relation_name": "\"dev\".\"tableau\".\"tableau_companydash_revenue_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.979616Z", "completed_at": "2024-02-04T15:21:00.993144Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.004717Z", "completed_at": "2024-02-04T15:21:01.004738Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03582644462585449, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_one_platform_employees_omop_emp_id.86a62001fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect omop_emp_id\nfrom \"dev\".\"one_platform\".\"employees\"\nwhere omop_emp_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.986168Z", "completed_at": "2024-02-04T15:21:00.996543Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.010023Z", "completed_at": "2024-02-04T15:21:01.010037Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03969144821166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_one_platform_employees_omop_emp_id.6c81afbdd6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    omop_emp_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"one_platform\".\"employees\"\nwhere omop_emp_id is not null\ngroup by omop_emp_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.997777Z", "completed_at": "2024-02-04T15:21:01.008849Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.016572Z", "completed_at": "2024-02-04T15:21:01.016585Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.028731584548950195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.one_platform_v_au_fulltime_job_title_salary", "compiled": true, "compiled_code": "\n\nwith overlap as (\n    select eh_member_id, kp_employee_id \n    from \"dev\".\"one_platform\".\"employees\"\n    where eh_member_id is not null \n        and kp_employee_id is not null\n)\n\n, all_jobs as (\n    select \n    kps.job_title\n    , processed_title\n    , CONCAT('K', organisation_id) as op_org_id \n    , industry\n    , residential_state\n    , CONCAT('K', member_id) as op_member_id\n    , annual_salary\n    from \"dev\".\"salary_guide\".\"keypay_v_au_fulltime_job_title_default_salary\" as kps \n    where member_id not in (select kp_employee_id from overlap)\nunion all\n    select \n    ehs.job_title\n    , processed_title\n    , CONCAT('E', organisation_id) as op_org_id  \n    , industry\n    , residential_state\n    , CONCAT('E', member_id) as op_member_id  \n    , annual_salary\n    from \"dev\".\"salary_guide\".\"employment_hero_v_au_fulltime_job_title_salary\" as ehs\n)\n\nselect \n    -- Extract the seniority from the job title\n    job_title\n    ,  \ncase\n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~* 'assistant accountant' \n        then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Graduate |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )(of |to |\\or |\\and )'\n        and regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Chief |Executive |Lead ).*(officer|assistant|generator).*'\n    then INITCAP(trim(regexp_replace(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Graduate |Trainee |Associate |Assistant |Apprentice |Junior |Intermediate |Senior |Lead |Principal |Chief |Head |Executive |Vice |Managing )', '', 1, 'i'))) \n    else INITCAP(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i')) end\n AS processed_title\n    ,  \ncase when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') ~ '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )' \n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Apprentice |Graduate |Trainee |Junior |Intermediate |Senior |Managing |Lead |Leader |Head |Vice |Manager |Director |Chief )', 1, 1, 'i'))        \n    when regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i') !~* '^(Associate |Assistant |Principal |Executive )(of |to )'\n        and trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i')) != ''\n        then trim(regexp_substr(regexp_replace(processed_title, '^(Deputy |Casual )', '', 1, 'i'), '^(Associate |Assistant |Principal |Executive )', 1, 1, 'i'))\n    when processed_title ~ '(^|\\\\W)Apprentice(\\\\W|$)' then 'Apprentice'\n    when processed_title ~ '(^|\\\\W)Graduate(\\\\W|$)' then 'Graduate'\n    when processed_title ~ '(^|\\\\W)Junior(\\\\W|$)' then 'Junior'\n    when processed_title ~ '(^|\\\\W)Intermediate(\\\\W|$)' then 'Intermediate'\n    when processed_title ~ '(^|\\\\W)Senior(\\\\W|$)' then 'Senior'    \n    when processed_title ~ '(^|\\\\W)Managing(\\\\W|$)' then 'Managing'\n    when processed_title ~ '(^|\\\\W)(Lead|Leader)(\\\\W|$)' then 'Lead'\n    when processed_title ~ '(^|\\\\W)Trainee(\\\\W|$)' then 'Trainee'\n    when processed_title ~ '(^|\\\\W)Head(\\\\W|$)' then 'Head'\n    when processed_title ~ '(^|\\\\W)Vice(\\\\W|$)' then 'Vice'\n    when processed_title ~ '(^|\\\\W)Manager(\\\\W|$)' then 'Manager'\n    when processed_title ~ '(^|\\\\W)Director(\\\\W|$)' then 'Director'\n    when processed_title ~ '(^|\\\\W)Chief(\\\\W|$)' then 'Chief'\n    else null end\n AS seniority\n    , op_org_id\n    , industry\n    , residential_state\n    , op_member_id  \n    , annual_salary\nfrom all_jobs", "relation_name": "\"dev\".\"salary_guide\".\"one_platform_v_au_fulltime_job_title_salary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.023069Z", "completed_at": "2024-02-04T15:21:01.038220Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.050238Z", "completed_at": "2024-02-04T15:21:01.050256Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.039315223693847656, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_keypay_v_au_fulltime_job_title_default_salary__organisation_id_member_id_.c016caccc8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (organisation_id || member_id)\nfrom \"dev\".\"salary_guide\".\"keypay_v_au_fulltime_job_title_default_salary\"\nwhere (organisation_id || member_id) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.033127Z", "completed_at": "2024-02-04T15:21:01.048865Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.056887Z", "completed_at": "2024-02-04T15:21:01.056901Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03922152519226074, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_keypay_v_au_fulltime_job_title_default_salary__organisation_id_member_id_.e8f0260487", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (organisation_id || member_id) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"keypay_v_au_fulltime_job_title_default_salary\"\nwhere (organisation_id || member_id) is not null\ngroup by (organisation_id || member_id)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.041961Z", "completed_at": "2024-02-04T15:21:01.052865Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.062337Z", "completed_at": "2024-02-04T15:21:01.062352Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.03486371040344238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.int_exports__sign_in_app_events", "compiled": true, "compiled_code": "\nwith eben_users as (\n  select\n    (\n      case\n        when\n          json_extract_path_text(detail, 'ehUUId') = ''\n          then null\n        else json_extract_path_text(detail, 'ehUUId')\n      end\n    )         as eh_user_uuid,\n    max(time) as event_time\n  from \"dev\".\"ebenefits\".\"user_created\"\n  group by 1\n),\n\nlatest_devices as (\n  select distinct\n    user_uuid,\n    first_value(device)\n      ignore nulls over (\n        partition by user_uuid\n        order by\n          \"timestamp\" desc\n        rows between unbounded preceding and unbounded following\n      )\n    as device\n  from\n    \"dev\".\"customers\".\"int_events\"\n  where\n    device is not null\n),\n\nfinal as (\n  select\n    u1.eh_user_uuid                        as user_uuid,\n    cast('first_signed_in_app' as varchar) as event_name,\n    u1.event_time,\n    device\n  from eben_users as u1\n  inner join \"dev\".\"exports\".\"exports_braze_users\" as u2\n    on u1.eh_user_uuid = u2.user_uuid\n  left join latest_devices as d\n    on u1.eh_user_uuid = d.user_uuid\n)\n\nselect\n  md5(cast(coalesce(cast(user_uuid as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(event_time as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as event_id,\n  *\nfrom final", "relation_name": "\"dev\".\"exports\".\"int_exports__sign_in_app_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.071406Z", "completed_at": "2024-02-04T15:21:01.075143Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.086289Z", "completed_at": "2024-02-04T15:21:01.086302Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.030926227569580078, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.exports_braze_users_snapshot", "compiled": true, "compiled_code": "\n\n    \n\n    select * from \"dev\".\"exports\".\"exports_braze_users\"\n", "relation_name": "\"dev\".\"snapshots\".\"exports_braze_users_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.080057Z", "completed_at": "2024-02-04T15:21:01.095709Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.101970Z", "completed_at": "2024-02-04T15:21:01.101984Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03670048713684082, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.accepted_values_exports_braze_users_gender__P__O__F__M.ac3132d62f", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        gender as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"exports\".\"exports_braze_users\"\n    group by gender\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'P','O','F','M'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.087529Z", "completed_at": "2024-02-04T15:21:01.100804Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.123488Z", "completed_at": "2024-02-04T15:21:01.123502Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04985809326171875, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.assert_user_actively_employed", "compiled": true, "compiled_code": "with check_actively_employed_true as (\n  select user_uuid\n  from \"dev\".\"exports\".\"exports_braze_users\"\n  -- when user_actively_employed = true user_uuid should exist on employees table\n  where\n    user_actively_employed = true\n    and user_uuid not in (select distinct user_uuid from \"dev\".\"employment_hero\".\"employees\")\n),\n\ncheck_actively_employed_false as (\n  select b.user_uuid\n  from \"dev\".\"exports\".\"exports_braze_users\" b\n  -- when user_actively_employed = false, that user must not have a job\n  where\n    b.user_actively_employed = false\n    and b.user_uuid in (\n      select distinct user_uuid\n      from \"dev\".\"employment_hero\".\"employees\" e\n      where\n        1 = 1\n        and termination_date is null\n        -- User gonna quite their job but already found a new job.\n        or (\n          select max(termination_date) from \"dev\".\"employment_hero\".\"employees\"\n          where user_uuid = e.user_uuid\n        ) < (\n          select max(start_date) from \"dev\".\"employment_hero\".\"employees\"\n          where user_uuid = e.user_uuid\n        )\n    )\n)\n\nselect user_uuid from check_actively_employed_true\nunion all\nselect user_uuid from check_actively_employed_false", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.160540Z", "completed_at": "2024-02-04T15:21:01.762843Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.765264Z", "completed_at": "2024-02-04T15:21:01.765281Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6590557098388672, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_users_home_city.4195dfa8dc", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('HOME_CITY' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.106835Z", "completed_at": "2024-02-04T15:21:01.982416Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:01.984722Z", "completed_at": "2024-02-04T15:21:01.984738Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.9208469390869141, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_users_candidate_recent_job_title.3d9453aed8", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('CANDIDATE_RECENT_JOB_TITLE' as TEXT) as column_name,\n            17 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.025401Z", "completed_at": "2024-02-04T15:21:02.032014Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.035317Z", "completed_at": "2024-02-04T15:21:02.035337Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01411128044128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_country__is_not_null.d1efcd95b5", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_users\" where alpha_two_letter is not null) dbt_subquery\n\nwhere not(country is not null)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.042743Z", "completed_at": "2024-02-04T15:21:02.049316Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.052913Z", "completed_at": "2024-02-04T15:21:02.052927Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01762533187866211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_email__is_not_null.f153bfdf0d", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_users\" where user_actively_employed is true) dbt_subquery\n\nwhere not(email is not null)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.065122Z", "completed_at": "2024-02-04T15:21:02.074202Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.076529Z", "completed_at": "2024-02-04T15:21:02.076541Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017963647842407227, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_first_name__is_not_null.38ea310b74", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_users\" where user_actively_employed is true) dbt_subquery\n\nwhere not(first_name is not null)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.082939Z", "completed_at": "2024-02-04T15:21:02.088714Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.090825Z", "completed_at": "2024-02-04T15:21:02.090837Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01171255111694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_is_marketing_consented___false.d1a6231efa", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_users\" where marketing_consented_at is null) dbt_subquery\n\nwhere not(is_marketing_consented  = false)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.097188Z", "completed_at": "2024-02-04T15:21:02.102834Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.104999Z", "completed_at": "2024-02-04T15:21:02.105011Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011803150177001953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_last_name__is_not_null.ad4c311432", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_users\" where user_actively_employed is true) dbt_subquery\n\nwhere not(last_name is not null)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.111390Z", "completed_at": "2024-02-04T15:21:02.117111Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.119296Z", "completed_at": "2024-02-04T15:21:02.119309Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.011958837509155273, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_phone_number_e164__not_like_610_.bc8f946bb1", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dev\".\"exports\".\"exports_braze_users\"\n\nwhere not(phone_number_e164 not like '+610%')\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.136961Z", "completed_at": "2024-02-04T15:21:02.061578Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.071710Z", "completed_at": "2024-02-04T15:21:02.071726Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.0072822570800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_users_gender.bf38adc619", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('GENDER' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.127656Z", "completed_at": "2024-02-04T15:21:02.141460Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.150932Z", "completed_at": "2024-02-04T15:21:02.150946Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0290377140045166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_strpos_first_name_chr_92_chr_39_0.f9ceaa0bea", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dev\".\"exports\".\"exports_braze_users\"\n\nwhere not(strpos(first_name, chr(92) || chr(39)) = 0)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.142759Z", "completed_at": "2024-02-04T15:21:02.156290Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.166895Z", "completed_at": "2024-02-04T15:21:02.166910Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.029593706130981445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_strpos_last_name_chr_92_chr_39_0.c0a51c6c40", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom \"dev\".\"exports\".\"exports_braze_users\"\n\nwhere not(strpos(last_name, chr(92) || chr(39)) = 0)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.161151Z", "completed_at": "2024-02-04T15:21:02.173712Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.184372Z", "completed_at": "2024-02-04T15:21:02.184386Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.043273210525512695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_users_user_is_candidate__is_true.e2d9c2b525", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_users\" where user_signin_source = 'career_page') dbt_subquery\n\nwhere not(user_is_candidate is true)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.174903Z", "completed_at": "2024-02-04T15:21:02.185625Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.202116Z", "completed_at": "2024-02-04T15:21:02.202131Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03526186943054199, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_fewer_rows_than_exports_v_braze_email_unsubscriptions_ref_exports_braze_users_.113ae444f6", "compiled": true, "compiled_code": "\n\n\n\n\n\n\n\nwith a as (\n\n    select \n      \n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from \"dev\".\"exports\".\"exports_v_braze_email_unsubscriptions\"\n    group by id_dbtutils_test_fewer_rows_than\n\n),\nb as (\n\n    select \n      \n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from \"dev\".\"exports\".\"exports_braze_users\"\n    group by id_dbtutils_test_fewer_rows_than\n\n),\ncounts as (\n\n    select\n\n        a.id_dbtutils_test_fewer_rows_than as id_dbtutils_test_fewer_rows_than_a,\n          b.id_dbtutils_test_fewer_rows_than as id_dbtutils_test_fewer_rows_than_b,\n        \n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    \n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:00.248027Z", "completed_at": "2024-02-04T15:21:02.203275Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.211118Z", "completed_at": "2024-02-04T15:21:02.211133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.993265151977539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_history_pivot", "compiled": true, "compiled_code": "-- depends_on: \"dev\".\"zendesk\".\"ticket_field_history\"\n\n\n\n\n    \nwith field_history as (\n\n    select\n        ticket_id,\n        field_name,\n        valid_ending_at,\n        valid_starting_at\n\n        --Only runs if the user passes updater fields through the final ticket field history model\n        \n\n        -- doing this to figure out what values are actually null and what needs to be backfilled in zendesk__ticket_field_history\n        ,case when value is null then 'is_null' else value end as value\n\n    from \"dev\".\"zendesk\".\"int_zendesk__field_history_enriched\"\n    \n\n), event_order as (\n\n    select \n        *,\n        row_number() over (\n            partition by cast(valid_starting_at as date), ticket_id, field_name\n            order by valid_starting_at desc\n            ) as row_num\n    from field_history\n\n), filtered as (\n\n    -- Find the last event that occurs on each day for each ticket\n\n    select *\n    from event_order\n    where row_num = 1\n\n), pivots as (\n\n    -- For each column that is in both the ticket_field_history_columns variable and the field_history table,\n    -- pivot out the value into it's own column. This will feed the daily slowly changing dimension model.\n\n    select \n        ticket_id,\n        cast(date_trunc('day', valid_starting_at) as date) as date_day\n\n        \n            \n            ,min(case when lower(field_name) = 'assignee_id' then filtered.value end) as assignee_id\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            \n        \n            \n            ,min(case when lower(field_name) = 'priority' then filtered.value end) as priority\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            \n        \n            \n            ,min(case when lower(field_name) = 'status' then filtered.value end) as status\n\n            --Only runs if the user passes updater fields through the final ticket field history model\n            \n        \n    \n    from filtered\n    group by 1,2\n\n), surrogate_key as (\n\n    select \n        *,\n        md5(cast(coalesce(cast(ticket_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as ticket_day_id\n    from pivots\n\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__field_history_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.212344Z", "completed_at": "2024-02-04T15:21:02.223252Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.236584Z", "completed_at": "2024-02-04T15:21:02.236614Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03759264945983887, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_not_constant_exports_braze_users_candidate_recent_job_title.7f7f13571b", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct candidate_recent_job_title) as filler_column\n\nfrom \"dev\".\"exports\".\"exports_braze_users\"\n\n  \n\nhaving count(distinct candidate_recent_job_title) = 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.224436Z", "completed_at": "2024-02-04T15:21:02.238181Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.247577Z", "completed_at": "2024-02-04T15:21:02.247590Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03644728660583496, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_not_constant_exports_braze_users_user_actively_employed.4fa4b587b3", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct user_actively_employed) as filler_column\n\nfrom \"dev\".\"exports\".\"exports_braze_users\"\n\n  \n\nhaving count(distinct user_actively_employed) = 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.248823Z", "completed_at": "2024-02-04T15:21:02.259573Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.271051Z", "completed_at": "2024-02-04T15:21:02.271065Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03935503959655762, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_not_constant_exports_braze_users_user_is_candidate.4f85cf3474", "compiled": true, "compiled_code": "\n\n\n\n\nselect\n    \n    \n    \n    count(distinct user_is_candidate) as filler_column\n\nfrom \"dev\".\"exports\".\"exports_braze_users\"\n\n  \n\nhaving count(distinct user_is_candidate) = 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.260854Z", "completed_at": "2024-02-04T15:21:02.272287Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.284402Z", "completed_at": "2024-02-04T15:21:02.284415Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03421449661254883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_relationships_where_exports_braze_users_user_id__user_id__candidate_recent_job_title_is_not_NULL__source_postgres_public_user_employment_histories___job_title_is_not_NULL_or_industry_standard_job_title_is_not_NULL.4846535ae7", "compiled": true, "compiled_code": "\n\n\n\n\nwith left_table as (\n\n  select\n    user_id as id\n\n  from \"dev\".\"exports\".\"exports_braze_users\"\n\n  where user_id is not null\n    and candidate_recent_job_title is not NULL\n\n),\n\nright_table as (\n\n  select\n    user_id as id\n\n  from \"dev\".\"postgres_public\".\"user_employment_histories\"\n\n  where user_id is not null\n    and job_title is not NULL or industry_standard_job_title is not NULL\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.273495Z", "completed_at": "2024-02-04T15:21:02.283174Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.290870Z", "completed_at": "2024-02-04T15:21:02.290884Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03184652328491211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_users_benefits_enabled.158b6db2fd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect benefits_enabled\nfrom \"dev\".\"exports\".\"exports_braze_users\"\nwhere benefits_enabled is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.293345Z", "completed_at": "2024-02-04T15:21:02.304212Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.316047Z", "completed_at": "2024-02-04T15:21:02.316061Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03833150863647461, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_users_email.91818ad7c9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email\nfrom \"dev\".\"exports\".\"exports_braze_users\"\nwhere email is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.306725Z", "completed_at": "2024-02-04T15:21:02.317327Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.328605Z", "completed_at": "2024-02-04T15:21:02.328651Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03346705436706543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_users_user_id.beae46e523", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_id\nfrom \"dev\".\"exports\".\"exports_braze_users\"\nwhere user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.318476Z", "completed_at": "2024-02-04T15:21:02.330293Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.339308Z", "completed_at": "2024-02-04T15:21:02.339321Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.043302059173583984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_users_user_uuid.67a757f354", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"exports\".\"exports_braze_users\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.340788Z", "completed_at": "2024-02-04T15:21:02.352439Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.363484Z", "completed_at": "2024-02-04T15:21:02.363503Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.039431095123291016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_exports_braze_users_user_uuid.6e8f1966c1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    user_uuid as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"exports\".\"exports_braze_users\"\nwhere user_uuid is not null\ngroup by user_uuid\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.353689Z", "completed_at": "2024-02-04T15:21:02.364669Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.375090Z", "completed_at": "2024-02-04T15:21:02.375104Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.032259225845336914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.ebenefits_instapay_members_aggregation", "compiled": true, "compiled_code": "\n\n\nselect \n    getdate()::date as date\n    , count(member_id) as instapay_members\n    , count(case when first_time_swag_app is not null then 1 end) as instapay_members_using_swagapp\nfrom \n    \"dev\".\"ebenefits\".\"instapay_eligible_member_profile\"\n\n    where date >= (select max(date) from \"dev\".\"ebenefits\".\"instapay_members_aggregation\")\n", "relation_name": "\"dev\".\"ebenefits\".\"instapay_members_aggregation\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.365868Z", "completed_at": "2024-02-04T15:21:02.376316Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.385362Z", "completed_at": "2024-02-04T15:21:02.385375Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03693890571594238, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_instapay_eligible_member_profile_member_id.7a7169f667", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"ebenefits\".\"instapay_eligible_member_profile\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.386641Z", "completed_at": "2024-02-04T15:21:02.401743Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.418238Z", "completed_at": "2024-02-04T15:21:02.418251Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0570216178894043, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_instapay_eligible_member_profile_member_id.bd1b4effa0", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"instapay_eligible_member_profile\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.402877Z", "completed_at": "2024-02-04T15:21:02.415898Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.436031Z", "completed_at": "2024-02-04T15:21:02.436051Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.046280860900878906, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.customers_mdaumau", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)   \n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n\n        and \"date\" > (select max(\"date\") from \"dev\".\"customers\".\"mdaumau\")\n\n)\n                               \n, events as (\n        select\n          e.user_id, e.timestamp\n        from\n          \"dev\".\"customers\".\"events\" as e \n  \t\t  join \"dev\".\"customers\".\"users\" u on e.user_id = u.user_uuid\n\t\tjoin \"dev\".\"customers\".\"accounts\" a on u.account_list = a.external_id\n        where a.account_stage != 'Churned'\n        and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n      )\n      , mdau as (\n        select\n          DATE_TRUNC('day', e.timestamp) as \"date\"\n          , count(distinct e.user_id) as daily_users\n        from\n          events as e   \n             \n        where e.timestamp > dateadd('day', 1, (select max(\"date\") from \"dev\".\"customers\".\"mdaumau\"))\n        \n        group by\n          1\n      )\n      , mmau as (\n        select\n          dates.date\n          , count(distinct e.user_id) as monthly_users\n        from\n          dates\n          join events as e on\n          e.timestamp < dateadd(day, 1, dates.date)\n          and e.timestamp > dateadd(day, -29, dates.date)\n        group by\n          1\n      )\n\nselect\n      m.date\n      , coalesce(daily_users, 0) as mdau\n      , monthly_users as mmau\n      , coalesce(mdau, 0) / mmau :: float as mdau_mau\n    from\n     mmau m\n      left join mdau d on\n        m.date = d.date", "relation_name": "\"dev\".\"customers\".\"mdaumau\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.419397Z", "completed_at": "2024-02-04T15:21:02.437758Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.446887Z", "completed_at": "2024-02-04T15:21:02.446903Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.03981637954711914, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_mdaumau_by_app_type", "compiled": true, "compiled_code": "\n\nwith\n  dates as (\n    select\n      DATEADD('day', -generated_number::int, (current_date + 1)) date\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)\n      where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n           \n      and date > (select max(date) from \"dev\".\"mp\".\"mdaumau_by_app_type\")\n  \n  )\n\n  , module_events as (\n    select\n      e.user_id\n      , e.timestamp\n   \t  , case when app_version_string is not null then 'mobile' else 'web' end as app_type\n    from\n      \"dev\".\"customers\".\"events\" as e\n      join \"dev\".\"customers\".\"users\" us on \n          e.user_id = us.user_uuid\n      join \"dev\".\"customers\".\"accounts\" a on \n          us.account_list = a.external_id\n          and a.account_stage != 'Churned'\n    where \n      e.module != 'mobile'\n      and e.module != 'others'\n      and e.module != 'Sign In'\n      and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")      \n  )\n  , app_type_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.app_type\n      , count(distinct e.user_id) as daily_users\n    from\n      module_events as e\n    group by 1,2\n  )\n  , app_type_mau as (\n    select\n      dates.date\n      , e.app_type\n      , count(distinct e.user_id) as monthly_users\n    from\n      dates\n      join module_events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2\n  )\n\nselect\n  m.date\n  , m.app_type\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  app_type_mau m\n  left join app_type_dau d on\n    m.date = d.date\n    and m.app_type = d.app_type", "relation_name": "\"dev\".\"mp\".\"mdaumau_by_app_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:01.799706Z", "completed_at": "2024-02-04T15:21:02.400479Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.417087Z", "completed_at": "2024-02-04T15:21:02.417101Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.6794288158416748, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_users_postcode.40611a945e", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('POSTCODE' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.452273Z", "completed_at": "2024-02-04T15:21:02.472784Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.484928Z", "completed_at": "2024-02-04T15:21:02.484943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.046065330505371094, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_mdaumau_by_family_app_type", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"mdaumau_by_family_app_type\")     \n             \n)       \n  , module_events as (\n    select\n      e.user_id\n        , e.timestamp\n        , e.module\n        , mo.product_family\n        , case when app_version_string is not null then 'mobile' else 'web' end as app_type\n    from\n      \"dev\".\"customers\".\"events\" as e\n      join \"dev\".\"customers\".\"users\" us on \n          e.user_id = us.user_uuid\n      join \"dev\".\"customers\".\"accounts\" a on \n          us.account_list = a.external_id\n          and a.account_stage != 'Churned'\n      join \"dev\".\"eh_product\".\"module_ownership\" mo on\n          mo.event_module = e.module\n          and mo.product_family is not null    \n    where \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n      and e.module != 'mobile'\n      and e.module != 'others'\n      and e.module != 'Sign In'\n  )\n  , product_family_app_type_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.app_type\n      , e.product_family\n      , count(distinct e.user_id) as daily_users\n    from\n      module_events as e\n    group by 1,2,3\n  )\n  , product_family_app_type_mau as (\n    select\n      dates.date\n      , e.app_type\n      , e.product_family\n      , count(distinct e.user_id) as monthly_users\n    from\n      dates\n      join module_events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2,3\n  )\n\nselect\n  m.date\n  , m.app_type\n  , m.product_family\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  product_family_app_type_mau m\n  left join product_family_app_type_dau d on\n    m.date = d.date\n    and m.product_family = d.product_family\n    and m.app_type = d.app_type", "relation_name": "\"dev\".\"mp\".\"mdaumau_by_family_app_type\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.462495Z", "completed_at": "2024-02-04T15:21:02.483704Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.492858Z", "completed_at": "2024-02-04T15:21:02.492872Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.048456668853759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_mdaumau_by_family_country", "compiled": true, "compiled_code": "\n\nwith dates as (\nselect\n          DATEADD('day', -generated_number::int, (current_date + 1)) date\n        from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 600\n    order by generated_number\n\n)\n          where \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n          \n          and date > (select max(date) from  \"dev\".\"mp\".\"mdaumau_by_family_country\")     \n             \n)                         \n  , module_events as (\n    select\n      e.user_id\n        , e.timestamp\n        , e.module\n        , mo.product_family\n        , e.organisation_id\n        , o.country\n    from\n      \"dev\".\"customers\".\"events\" as e\n        join \"dev\".\"customers\".\"users\" us on \n          e.user_id = us.user_uuid\n      join \"dev\".\"customers\".\"accounts\" a on \n            us.account_list = a.external_id\n            and a.account_stage != 'Churned'\n      join \"dev\".\"eh_product\".\"module_ownership\" mo on\n            mo.event_module = e.module\n          and mo.product_family is not null\n      join \"dev\".\"employment_hero\".\"organisations\" o on\n            e.organisation_id = o.id\n            and o.pricing_tier != 'free'\n    where \"timestamp\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")         \n      and e.module != 'mobile'\n      and e.module != 'others'\n      and e.module != 'Sign In'\n  )\n  , product_family_country_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.country\n      , e.product_family\n      , count(distinct e.user_id) as daily_users\n    from\n      module_events as e\n    group by 1,2,3\n  )\n  , product_family_country_mau as (\n    select\n      dates.date\n      , e.country\n      , e.product_family\n      , count(distinct e.user_id) as monthly_users\n    from\n      dates\n      join module_events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2,3\n  )\n\nselect\n  m.date\n  , m.country\n  , m.product_family\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  product_family_country_mau m\n  left join product_family_country_dau d on\n    m.date = d.date\n    and m.product_family = d.product_family\n    and m.country = d.country", "relation_name": "\"dev\".\"mp\".\"mdaumau_by_family_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.478052Z", "completed_at": "2024-02-04T15:21:02.488672Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.499103Z", "completed_at": "2024-02-04T15:21:02.499116Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04149937629699707, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customers_accounts_external_id.f195fa6b6e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect external_id\nfrom \"dev\".\"customers\".\"accounts\"\nwhere external_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.501689Z", "completed_at": "2024-02-04T15:21:02.514409Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.534826Z", "completed_at": "2024-02-04T15:21:02.534841Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.053318023681640625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customers_accounts_external_id.53cd7c425e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    external_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customers\".\"accounts\"\nwhere external_id is not null\ngroup by external_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.515590Z", "completed_at": "2024-02-04T15:21:02.533472Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.547226Z", "completed_at": "2024-02-04T15:21:02.547240Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05200839042663574, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_organics_organisations_id.b282891159", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"organics\".\"organisations\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.524743Z", "completed_at": "2024-02-04T15:21:02.541504Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.550794Z", "completed_at": "2024-02-04T15:21:02.550807Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04475855827331543, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_organics_organisations_id.9546aa953b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"organics\".\"organisations\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.536107Z", "completed_at": "2024-02-04T15:21:02.548350Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.559120Z", "completed_at": "2024-02-04T15:21:02.559134Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04227852821350098, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_org_module_mapping__date_organisation_id_module_.a7f052b3cd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || organisation_id || module)\nfrom \"dev\".\"tableau\".\"tableau_org_module_mapping\"\nwhere (date || organisation_id || module) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.565722Z", "completed_at": "2024-02-04T15:21:02.576686Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.595638Z", "completed_at": "2024-02-04T15:21:02.595655Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05012989044189453, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_org_module_mapping__date_organisation_id_module_.8ca1d34ef5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || organisation_id || module) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"tableau_org_module_mapping\"\nwhere (date || organisation_id || module) is not null\ngroup by (date || organisation_id || module)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.577861Z", "completed_at": "2024-02-04T15:21:02.594434Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.607358Z", "completed_at": "2024-02-04T15:21:02.607372Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0497894287109375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.mp_swag_daumau_country", "compiled": true, "compiled_code": "\n\nwith \n  dates as (\n    select\n      DATEADD('day', -generated_number::int, (current_date + 1)) date\n    from (\n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 365\n    order by generated_number\n\n)\n    where\n        \"date\" < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n        \n            and \"date\" > (SELECT MAX(\"date\") FROM \"dev\".\"mp\".\"swag_daumau_country\" ) \n           \n  )\n  , user_country as (\n    select\n        mu.eh_platform_user_id\n        ,u.uuid\n        ,coalesce(mu.country, mu.eh_platform_employment_location) as country\n    from \n        \"dev\".\"marketing\".\"users_from_snapshot\" mu\n        left join \"dev\".\"postgres_public\".\"users\" u on\n            mu.eh_platform_user_id = u.id\n  )\n  , swag_events as ( \n    select e.user_id, e.user_email, e.timestamp, uc.country\n    from \n      \"dev\".\"customers\".\"events\" e\n      left join user_country uc on\n        e.user_id = uc.uuid\n    where \n      e.app_version_string is not null\n      and e.timestamp < (select date_trunc('day', max(\"timestamp\")) from \"dev\".\"customers\".\"events\")\n    \n  )\n  , swag_country_dau as (\n    select\n      DATE_TRUNC('day', e.timestamp) as \"date\"\n      , e.country\n      , count(distinct e.user_email) as daily_users\n    from\n      swag_events as e\n    group by 1,2\n  )\n  , swag_country_mau as (\n    select\n      dates.date\n      , e.country\n      , count(distinct e.user_email) as monthly_users\n    from\n      dates\n      join swag_events as e on\n        e.timestamp < dateadd(day, 1, dates.date)\n        and e.timestamp > dateadd(day, -29, dates.date)\n    group by 1,2\n  )\n\nselect\n  m.date\n  , m.country\n  , coalesce(daily_users, 0) as daily_users\n  , monthly_users\n  , coalesce(daily_users, 0) / monthly_users :: float as dau_mau\nfrom\n  swag_country_mau m\n  left join swag_country_dau d on\n    m.date = d.date\n    and m.country = d.country", "relation_name": "\"dev\".\"mp\".\"swag_daumau_country\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.586646Z", "completed_at": "2024-02-04T15:21:02.596888Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.611007Z", "completed_at": "2024-02-04T15:21:02.611022Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.045301198959350586, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_marketing_users_from_snapshot_eh_platform_user_id.c33e84e225", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect eh_platform_user_id\nfrom \"dev\".\"marketing\".\"users_from_snapshot\"\nwhere eh_platform_user_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.598066Z", "completed_at": "2024-02-04T15:21:02.609727Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.620371Z", "completed_at": "2024-02-04T15:21:02.620385Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04977750778198242, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_marketing_users_from_snapshot_eh_platform_user_id.06ab53d66f", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    eh_platform_user_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"marketing\".\"users_from_snapshot\"\nwhere eh_platform_user_id is not null\ngroup by eh_platform_user_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.624498Z", "completed_at": "2024-02-04T15:21:02.645190Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.668253Z", "completed_at": "2024-02-04T15:21:02.668269Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.06367325782775879, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__sla_policies", "compiled": true, "compiled_code": "--final step where we union together all of the reply time, agent work time, and requester wait time sla's\n\nwith reply_time_sla as (\n\n  select * \n  from \"dev\".\"zendesk\".\"int_zendesk__reply_time_combined\"\n\n), agent_work_calendar_sla as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__agent_work_time_calendar_hours\"\n\n), requester_wait_calendar_sla as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_calendar_hours\"\n\n\n\n), agent_work_business_sla as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__agent_work_time_business_hours\"\n\n), requester_wait_business_sla as (\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__requester_wait_time_business_hours\"\n\n\n\n), all_slas_unioned as (\n  select\n    ticket_id,\n    sla_policy_name,\n    metric,\n    sla_applied_at,\n    target,\n    in_business_hours,\n    sla_breach_at,\n    sla_elapsed_time,\n    is_sla_breached\n  from reply_time_sla\n\nunion all\n\n  select\n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    \n\n    bool_or( is_breached_during_schedule )\n\n\n  from agent_work_calendar_sla\n\n  group by 1, 2, 3, 4, 5, 6\n\nunion all\n\n  select\n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    false as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_calendar_minutes) as sla_elapsed_time,\n    \n\n    bool_or( is_breached_during_schedule )\n\n\n  from requester_wait_calendar_sla\n\n  group by 1, 2, 3, 4, 5, 6\n\n\n\n\nunion all \n\n  select \n    ticket_id,\n    sla_policy_name,\n    'agent_work_time' as metric,\n    sla_applied_at,\n    target,\n    true as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_scheduled_minutes) as sla_elapsed_time,\n    \n\n    bool_or( is_breached_during_schedule )\n\n\n  from agent_work_business_sla\n  \n  group by 1, 2, 3, 4, 5, 6\n\nunion all \n\n  select \n    ticket_id,\n    sla_policy_name,\n    'requester_wait_time' as metric,\n    sla_applied_at,\n    target,\n    true as in_business_hours,\n    max(sla_breach_at) as sla_breach_at,\n    max(running_total_scheduled_minutes) as sla_elapsed_time,\n    \n\n    bool_or( is_breached_during_schedule )\n\n\n    \n  from requester_wait_business_sla\n  \n  group by 1, 2, 3, 4, 5, 6\n\n\n\n)\n\nselect \n  md5(cast(coalesce(cast(ticket_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(metric as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(sla_applied_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as sla_event_id,\n  ticket_id,\n  sla_policy_name,\n  metric,\n  sla_applied_at,\n  target,\n  in_business_hours,\n  sla_breach_at,\n  case when sla_elapsed_time is null\n    then datediff(\n        minute,\n        sla_applied_at,\n        getdate()\n        )  --This will create an entry for active sla's\n    else sla_elapsed_time\n      end as sla_elapsed_time,\n  sla_breach_at > current_timestamp as is_active_sla,\n  case when (sla_breach_at > getdate())\n    then null\n    else is_sla_breached\n      end as is_sla_breach\nfrom all_slas_unioned", "relation_name": "\"dev\".\"zendesk\".\"zendesk__sla_policies\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.646336Z", "completed_at": "2024-02-04T15:21:02.666991Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.680059Z", "completed_at": "2024-02-04T15:21:02.680073Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0625152587890625, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_metrics", "compiled": true, "compiled_code": "with ticket_enriched as (\n\n  select *\n  from \"dev\".\"zendesk\".\"zendesk__ticket_enriched\"\n\n), ticket_resolution_times_calendar as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_resolution_times_calendar\"\n\n), ticket_reply_times_calendar as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_reply_times_calendar\"\n\n), ticket_comments as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__comment_metrics\"\n\n), ticket_work_time_calendar as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_work_time_calendar\"\n\n-- business hour CTEs\n\n\n), ticket_first_resolution_time_business as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_first_resolution_time_business\"\n\n), ticket_full_resolution_time_business as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_full_resolution_time_business\"\n\n), ticket_work_time_business as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_work_time_business\"\n\n), ticket_first_reply_time_business as (\n\n  select *\n  from \"dev\".\"zendesk\".\"int_zendesk__ticket_first_reply_time_business\"\n\n\n-- end business hour CTEs\n\n), calendar_hour_metrics as (\n\nselect\n  ticket_enriched.*,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else ticket_reply_times_calendar.first_reply_time_calendar_minutes\n      end as first_reply_time_calendar_minutes,\n  case when coalesce(ticket_comments.count_public_agent_comments, 0) = 0\n    then null\n    else ticket_reply_times_calendar.total_reply_time_calendar_minutes\n      end as total_reply_time_calendar_minutes,\n  coalesce(ticket_comments.count_agent_comments, 0) as count_agent_comments,\n  coalesce(ticket_comments.count_public_agent_comments, 0) as count_public_agent_comments,\n  coalesce(ticket_comments.count_end_user_comments, 0) as count_end_user_comments,\n  coalesce(ticket_comments.count_public_comments, 0) as count_public_comments,\n  coalesce(ticket_comments.count_internal_comments, 0) as count_internal_comments,\n  coalesce(ticket_comments.total_comments, 0) as total_comments,\n  coalesce(ticket_comments.count_ticket_handoffs, 0) as count_ticket_handoffs, -- the number of distinct internal users who commented on the ticket\n  ticket_comments.last_comment_added_at as ticket_last_comment_date,\n  ticket_resolution_times_calendar.unique_assignee_count,\n  ticket_resolution_times_calendar.assignee_stations_count,\n  ticket_resolution_times_calendar.group_stations_count,\n  ticket_resolution_times_calendar.first_assignee_id,\n  ticket_resolution_times_calendar.last_assignee_id,\n  ticket_resolution_times_calendar.first_agent_assignment_date,\n  ticket_resolution_times_calendar.last_agent_assignment_date,\n  ticket_resolution_times_calendar.first_solved_at,\n  ticket_resolution_times_calendar.last_solved_at,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.first_assignment_to_resolution_calendar_minutes\n    else null\n      end as first_assignment_to_resolution_calendar_minutes,\n  case when ticket_enriched.status in ('solved', 'closed')\n    then ticket_resolution_times_calendar.last_assignment_to_resolution_calendar_minutes\n    else null\n      end as last_assignment_to_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.ticket_unassigned_duration_calendar_minutes,\n  ticket_resolution_times_calendar.first_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.final_resolution_calendar_minutes,\n  ticket_resolution_times_calendar.total_resolutions as count_resolutions,\n  ticket_resolution_times_calendar.count_reopens,\n  ticket_work_time_calendar.ticket_deleted_count,\n  ticket_work_time_calendar.total_ticket_recoveries,\n  ticket_work_time_calendar.last_status_assignment_date,\n  ticket_work_time_calendar.new_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.open_status_duration_in_calendar_minutes,\n  ticket_work_time_calendar.agent_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.requester_wait_time_in_calendar_minutes,\n  ticket_work_time_calendar.solve_time_in_calendar_minutes,\n  ticket_work_time_calendar.agent_work_time_in_calendar_minutes,\n  ticket_work_time_calendar.on_hold_time_in_calendar_minutes,\n  coalesce(ticket_comments.count_agent_replies, 0) as total_agent_replies,\n  \n  case when ticket_enriched.is_requester_active = true and ticket_enriched.requester_last_login_at is not null\n    then (datediff(\n        second,\n        ticket_enriched.requester_last_login_at,\n        getdate()\n        ) /60)\n      end as requester_last_login_age_minutes,\n  case when ticket_enriched.is_assignee_active = true and ticket_enriched.assignee_last_login_at is not null\n    then (datediff(\n        second,\n        ticket_enriched.assignee_last_login_at,\n        getdate()\n        ) /60)\n      end as assignee_last_login_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then (datediff(\n        second,\n        ticket_enriched.created_at,\n        getdate()\n        ) /60)\n      end as unsolved_ticket_age_minutes,\n  case when lower(ticket_enriched.status) not in ('solved','closed')\n    then (datediff(\n        second,\n        ticket_enriched.updated_at,\n        getdate()\n        ) /60)\n      end as unsolved_ticket_age_since_update_minutes,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_one_touch_resolution \n    then true\n    else false\n      end as is_one_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_two_touch_resolution,\n  case when lower(ticket_enriched.status) in ('solved','closed') and not ticket_comments.is_one_touch_resolution\n      and not ticket_comments.is_two_touch_resolution \n    then true\n    else false \n      end as is_multi_touch_resolution\n\n\nfrom ticket_enriched\n\nleft join ticket_reply_times_calendar\n  using (ticket_id)\n\nleft join ticket_resolution_times_calendar\n  using (ticket_id)\n\nleft join ticket_work_time_calendar\n  using (ticket_id)\n\nleft join ticket_comments\n  using(ticket_id)\n\n\n\n), business_hour_metrics as (\n\n  select \n    ticket_enriched.ticket_id,\n    ticket_first_resolution_time_business.first_resolution_business_minutes,\n    ticket_full_resolution_time_business.full_resolution_business_minutes,\n    ticket_first_reply_time_business.first_reply_time_business_minutes,\n    ticket_work_time_business.agent_wait_time_in_business_minutes,\n    ticket_work_time_business.requester_wait_time_in_business_minutes,\n    ticket_work_time_business.solve_time_in_business_minutes,\n    ticket_work_time_business.agent_work_time_in_business_minutes,\n    ticket_work_time_business.on_hold_time_in_business_minutes,\n    ticket_work_time_business.new_status_duration_in_business_minutes,\n    ticket_work_time_business.open_status_duration_in_business_minutes\n\n  from ticket_enriched\n\n  left join ticket_first_resolution_time_business\n    using (ticket_id)\n\n  left join ticket_full_resolution_time_business\n    using (ticket_id)\n  \n  left join ticket_first_reply_time_business\n    using (ticket_id)  \n  \n  left join ticket_work_time_business\n    using (ticket_id)\n\n)\n\nselect\n  calendar_hour_metrics.*,\n  case when calendar_hour_metrics.status in ('solved', 'closed')\n    then coalesce(business_hour_metrics.first_resolution_business_minutes,0)\n    else null\n      end as first_resolution_business_minutes,\n  case when calendar_hour_metrics.status in ('solved', 'closed')\n    then coalesce(business_hour_metrics.full_resolution_business_minutes,0)\n    else null\n      end as full_resolution_business_minutes,\n  case when coalesce(calendar_hour_metrics.count_public_agent_comments, 0) = 0\n    then null\n    else coalesce(business_hour_metrics.first_reply_time_business_minutes,0)\n      end as first_reply_time_business_minutes,\n  coalesce(business_hour_metrics.agent_wait_time_in_business_minutes,0) as agent_wait_time_in_business_minutes,\n  coalesce(business_hour_metrics.requester_wait_time_in_business_minutes,0) as requester_wait_time_in_business_minutes,\n  coalesce(business_hour_metrics.solve_time_in_business_minutes,0) as solve_time_in_business_minutes,\n  coalesce(business_hour_metrics.agent_work_time_in_business_minutes,0) as agent_work_time_in_business_minutes,\n  coalesce(business_hour_metrics.on_hold_time_in_business_minutes,0) as on_hold_time_in_business_minutes,\n  coalesce(business_hour_metrics.new_status_duration_in_business_minutes,0) as new_status_duration_in_business_minutes,\n  coalesce(business_hour_metrics.open_status_duration_in_business_minutes,0) as open_status_duration_in_business_minutes\n\nfrom calendar_hour_metrics\n\nleft join business_hour_metrics \n  using (ticket_id)\n\n", "relation_name": "\"dev\".\"zendesk\".\"zendesk__ticket_metrics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.658399Z", "completed_at": "2024-02-04T15:21:02.669486Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.683928Z", "completed_at": "2024-02-04T15:21:02.683943Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.051119327545166016, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employee_scorecard_sickness_member_id.64da23b128", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"employee_scorecard\".\"sickness_scorecard\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.670667Z", "completed_at": "2024-02-04T15:21:02.681501Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.692234Z", "completed_at": "2024-02-04T15:21:02.692248Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04059338569641113, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employee_scorecard_sickness_member_id.d6bfebb967", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    member_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employee_scorecard\".\"sickness_scorecard\"\nwhere member_id is not null\ngroup by member_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.698873Z", "completed_at": "2024-02-04T15:21:02.714994Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.727908Z", "completed_at": "2024-02-04T15:21:02.727923Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05054879188537598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_age_group__month_age_group_.a053aa3e4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (month || age_group)\nfrom \"dev\".\"employment_index\".\"median_hours_worked_age_group\"\nwhere (month || age_group) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.709931Z", "completed_at": "2024-02-04T15:21:02.726693Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.742715Z", "completed_at": "2024-02-04T15:21:02.742736Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.054375410079956055, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_age_group__month_age_group_.9be3ba763c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (month || age_group) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_age_group\"\nwhere (month || age_group) is not null\ngroup by (month || age_group)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.718103Z", "completed_at": "2024-02-04T15:21:02.729170Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.747689Z", "completed_at": "2024-02-04T15:21:02.747710Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0506894588470459, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.employment_index_median_hours_worked_monthly_change", "compiled": true, "compiled_code": "\n\nwith\n    med_hours_worked as (\n        select * from \"dev\".\"employment_index\".\"median_hours_worked_aus\"\n    ),\n    monthly_change as (\n        select\n            month,\n            median_hours_worked,\n            lag(median_hours_worked) over (order by month) as previous_month_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_month_lag)\n                        / previous_month_lag,\n                        3\n                    )\n            end as hours_worked_growth_monthly\n        from med_hours_worked\n        order by month\n    ),\n    quarterly_change as (\n        select\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 3) over (order by month) as previous_quarter_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_quarter_lag)\n                        / previous_quarter_lag,\n                        3\n                    )\n            end as hours_worked_growth_quarterly\n        from med_hours_worked\n        order by month\n    ),\n    semiannual_change as (\n        select\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 6) over (\n                order by month\n            ) as previous_semiannual_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_semiannual_lag)\n                        / previous_semiannual_lag,\n                        3\n                    )\n            end as hours_worked_growth_semiannual\n        from med_hours_worked\n        order by month\n    ),\n    yearly_change as (\n        select\n            month,\n            median_hours_worked,\n            lag(median_hours_worked, 12) over (order by month) as previous_yearly_lag,\n            case\n                when median_hours_worked = 0\n                then 0\n                else\n                    round(\n                        (median_hours_worked - previous_yearly_lag)\n                        / previous_yearly_lag,\n                        3\n                    )\n            end as hours_worked_growth_yearly\n        from med_hours_worked\n        order by month\n    )\n\nselect\n    m.month,\n    m.median_hours_worked,\n    previous_month_lag,\n    hours_worked_growth_monthly,\n    previous_quarter_lag,\n    hours_worked_growth_quarterly,\n    previous_semiannual_lag,\n    hours_worked_growth_semiannual,\n    previous_yearly_lag,\n    hours_worked_growth_yearly\nfrom monthly_change m\nleft join quarterly_change q on m.month = q.month\nleft join semiannual_change s on m.month = s.month\nleft join yearly_change y on m.month = y.month\norder by m.month", "relation_name": "\"dev\".\"employment_index\".\"median_hours_worked_monthly_change\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.730309Z", "completed_at": "2024-02-04T15:21:02.744231Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.759364Z", "completed_at": "2024-02-04T15:21:02.759387Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.051200151443481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_aus_month.8a0fcfcddb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"dev\".\"employment_index\".\"median_hours_worked_aus\"\nwhere month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.770225Z", "completed_at": "2024-02-04T15:21:02.789026Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.802632Z", "completed_at": "2024-02-04T15:21:02.802649Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05844402313232422, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_aus_month.b45090d345", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    month as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_aus\"\nwhere month is not null\ngroup by month\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.783947Z", "completed_at": "2024-02-04T15:21:02.803778Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.818307Z", "completed_at": "2024-02-04T15:21:02.818322Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0575714111328125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_company_size__month_company_size_.65534a0378", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (month || company_size)\nfrom \"dev\".\"employment_index\".\"median_hours_worked_company_size\"\nwhere (month || company_size) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.793534Z", "completed_at": "2024-02-04T15:21:02.805056Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.819523Z", "completed_at": "2024-02-04T15:21:02.819537Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.04894590377807617, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_company_size__month_company_size_.6c8e617063", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (month || company_size) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_company_size\"\nwhere (month || company_size) is not null\ngroup by (month || company_size)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.806185Z", "completed_at": "2024-02-04T15:21:02.817140Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.827563Z", "completed_at": "2024-02-04T15:21:02.827582Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04607748985290527, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_employment_type__month_employment_type_.068ac3e8ec", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (month || employment_type)\nfrom \"dev\".\"employment_index\".\"median_hours_worked_employment_type\"\nwhere (month || employment_type) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.831292Z", "completed_at": "2024-02-04T15:21:02.844723Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.862406Z", "completed_at": "2024-02-04T15:21:02.862423Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.048925161361694336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_employment_type__month_employment_type_.eef47a7530", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (month || employment_type) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_employment_type\"\nwhere (month || employment_type) is not null\ngroup by (month || employment_type)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.855917Z", "completed_at": "2024-02-04T15:21:02.871048Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.879825Z", "completed_at": "2024-02-04T15:21:02.879840Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.044957637786865234, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_industry__month_industry_.a4ba4baf1d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (month || industry) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_industry\"\nwhere (month || industry) is not null\ngroup by (month || industry)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.850520Z", "completed_at": "2024-02-04T15:21:02.872220Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.881031Z", "completed_at": "2024-02-04T15:21:02.881045Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04799222946166992, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_industry__month_industry_.7866701a5f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (month || industry)\nfrom \"dev\".\"employment_index\".\"median_hours_worked_industry\"\nwhere (month || industry) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.863788Z", "completed_at": "2024-02-04T15:21:02.877270Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.887734Z", "completed_at": "2024-02-04T15:21:02.887747Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.049187660217285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_state__month_residential_state_.52d86530cb", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (month || residential_state)\nfrom \"dev\".\"employment_index\".\"median_hours_worked_state\"\nwhere (month || residential_state) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.888916Z", "completed_at": "2024-02-04T15:21:02.901431Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.919343Z", "completed_at": "2024-02-04T15:21:02.919358Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.0437016487121582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_state__month_residential_state_.74e189959a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (month || residential_state) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_state\"\nwhere (month || residential_state) is not null\ngroup by (month || residential_state)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.914100Z", "completed_at": "2024-02-04T15:21:02.928710Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.939039Z", "completed_at": "2024-02-04T15:21:02.939056Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04400014877319336, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_pca_monthly_change__category_month_.d8af283cb4", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (category || month) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"pca_monthly_change\"\nwhere (category || month) is not null\ngroup by (category || month)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.908496Z", "completed_at": "2024-02-04T15:21:02.931709Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.940292Z", "completed_at": "2024-02-04T15:21:02.940316Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.047043561935424805, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_pca_monthly_change__category_month_.dcd1a616c5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (category || month)\nfrom \"dev\".\"employment_index\".\"pca_monthly_change\"\nwhere (category || month) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.923480Z", "completed_at": "2024-02-04T15:21:02.936416Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.946946Z", "completed_at": "2024-02-04T15:21:02.946959Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.04881596565246582, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_companydash_revenue_metrics__date_country_.fd653b6389", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (date || country)\nfrom \"dev\".\"tableau\".\"tableau_companydash_revenue_metrics\"\nwhere (date || country) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.948124Z", "completed_at": "2024-02-04T15:21:02.960294Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.978006Z", "completed_at": "2024-02-04T15:21:02.978021Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04325461387634277, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_companydash_revenue_metrics__date_country_.08da64715d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || country) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"tableau_companydash_revenue_metrics\"\nwhere (date || country) is not null\ngroup by (date || country)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.972536Z", "completed_at": "2024-02-04T15:21:02.982350Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.995164Z", "completed_at": "2024-02-04T15:21:02.995179Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.041135311126708984, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_one_platform_v_au_fulltime_job_title_salary__op_org_id_op_member_id_.36492e0b95", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect (op_org_id || op_member_id)\nfrom \"dev\".\"salary_guide\".\"one_platform_v_au_fulltime_job_title_salary\"\nwhere (op_org_id || op_member_id) is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.967736Z", "completed_at": "2024-02-04T15:21:02.983494Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:02.996349Z", "completed_at": "2024-02-04T15:21:02.996363Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04415702819824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.match_job_titles", "compiled": true, "compiled_code": "with t_matched as (\n  select \n    t.job_title\n    , t.processed_title\n    , coalesce(m.matched_job_title, t.processed_title) as matched_title\n    , seniority\n    , op_org_id as organisation_id\n    , industry\n    , residential_state\n    , op_member_id as member_id\n    , annual_salary    \n  from \"dev\".\"salary_guide\".\"one_platform_v_au_fulltime_job_title_salary\" t \n    join \"dev\".\"salary_guide\".\"matched_job_titles\" m on t.processed_title = m.processed_title\n  ) \n\nselect \n    job_title\n    , processed_title\n    , matched_title\n    ,  \ncase \n        when INITCAP(seniority) in ('Associate', 'Assistant', 'Graduate', 'Apprentice', 'Trainee') then 'Junior'\n        when INITCAP(seniority) = '' or INITCAP(seniority) is null then 'Intermediate'\n        when INITCAP(seniority) in ('Principal', 'Leader') then 'Lead'\n        when INITCAP(seniority) in ('Managing') then 'Manager'\n        when INITCAP(seniority) in ('Head') then 'Head'\n        when INITCAP(seniority) in ('Vice', 'Executive') then 'Director'\n        else INITCAP(seniority) end \n as seniority\n    , organisation_id\n    , industry\n    , residential_state\n    , member_id\n    , annual_salary\n    , case when stddev(annual_salary) over (partition by matched_title) !=0 then (annual_salary-avg(annual_salary) over (partition by matched_title)) \n        / (stddev(annual_salary) over (partition by matched_title)) else null end as z_score_title_salary\n    , ntile(3) over (partition by matched_title, seniority, organisation_id order by annual_salary) as ntile_3_by_org\n    , ntile(3) over (partition by matched_title, seniority, organisation_id, residential_state order by annual_salary) as ntile_3_by_org_state\nfrom t_matched", "relation_name": "\"dev\".\"salary_guide\".\"match_job_titles\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:02.984691Z", "completed_at": "2024-02-04T15:21:02.997513Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.030391Z", "completed_at": "2024-02-04T15:21:03.030416Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0700843334197998, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_one_platform_v_au_fulltime_job_title_salary__op_org_id_op_member_id_.c38ba000ec", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (op_org_id || op_member_id) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"one_platform_v_au_fulltime_job_title_salary\"\nwhere (op_org_id || op_member_id) is not null\ngroup by (op_org_id || op_member_id)\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.319470Z", "completed_at": "2024-02-04T15:21:03.334688Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.353393Z", "completed_at": "2024-02-04T15:21:03.353411Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.2767751216888428, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_ebenefits_instapay_members_aggregation_date.587e750b1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"ebenefits\".\"instapay_members_aggregation\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.365544Z", "completed_at": "2024-02-04T15:21:03.372101Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.375035Z", "completed_at": "2024-02-04T15:21:03.375051Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.014068126678466797, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_ebenefits_instapay_members_aggregation_date.03b9baa4ac", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"ebenefits\".\"instapay_members_aggregation\"\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.381483Z", "completed_at": "2024-02-04T15:21:03.387553Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.390403Z", "completed_at": "2024-02-04T15:21:03.390417Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0128936767578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_customers_mdaumau_date.4cd341436a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"customers\".\"mdaumau\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.407965Z", "completed_at": "2024-02-04T15:21:03.413669Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.415779Z", "completed_at": "2024-02-04T15:21:03.415791Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.016910314559936523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_customers_mdaumau_date.88b0f3b879", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    date as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"customers\".\"mdaumau\"\nwhere date is not null\ngroup by date\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.421859Z", "completed_at": "2024-02-04T15:21:03.428519Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.430710Z", "completed_at": "2024-02-04T15:21:03.430722Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012566566467285156, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_mp_swag_daumau_country_date.8a775d1d23", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"dev\".\"mp\".\"swag_daumau_country\"\nwhere date is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.436869Z", "completed_at": "2024-02-04T15:21:03.441929Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.444037Z", "completed_at": "2024-02-04T15:21:03.444048Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010936498641967773, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_mp_swag_daumau_country__date_country_.47c4828d62", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    (date || country ) as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"mp\".\"swag_daumau_country\"\nwhere (date || country ) is not null\ngroup by (date || country )\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.450393Z", "completed_at": "2024-02-04T15:21:03.455426Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.457666Z", "completed_at": "2024-02-04T15:21:03.457679Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011335372924804688, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.unique_zendesk__sla_policies_sla_event_id.5daff4d2bd", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sla_event_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"zendesk__sla_policies\"\nwhere sla_event_id is not null\ngroup by sla_event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.463998Z", "completed_at": "2024-02-04T15:21:03.469663Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.471779Z", "completed_at": "2024-02-04T15:21:03.471792Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011566638946533203, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_summary", "compiled": true, "compiled_code": "with ticket_metrics as (\n    select *\n    from \"dev\".\"zendesk\".\"zendesk__ticket_metrics\"\n\n), user_table as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__user\"\n\n), user_sum as (\n    select\n        cast(1 as integer) as summary_helper,\n        sum(case when is_active = true\n            then 1\n            else 0\n                end) as user_count,\n        sum(case when lower(role) != 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as active_agent_count,\n        sum(case when is_active = false\n            then 1\n            else 0\n                end) as deleted_user_count,\n        sum(case when lower(role) = 'end-user' and is_active = true\n            then 1\n            else 0\n                end) as end_user_count,\n        sum(case when is_suspended = true\n            then 1\n            else 0\n                end) as suspended_user_count\n    from user_table\n\n    group by 1\n\n), ticket_metric_sum as (\n    select \n        cast(1 as integer) as summary_helper,\n        sum(case when lower(status) = 'new'\n            then 1\n            else 0\n                end) as new_ticket_count,\n        sum(case when lower(status) = 'hold'\n            then 1\n            else 0\n                end) as on_hold_ticket_count,\n        sum(case when lower(status) = 'open'\n            then 1\n            else 0\n                end) as open_ticket_count,\n        sum(case when lower(status) = 'pending'\n            then 1\n            else 0\n                end) as pending_ticket_count,\n        sum(case when lower(type) = 'problem'\n            then 1\n            else 0\n                end) as problem_ticket_count,\n        sum(case when first_assignee_id != last_assignee_id\n            then 1\n            else 0\n                end) as reassigned_ticket_count,\n        sum(case when count_reopens > 0\n            then 1\n            else 0\n                end) as reopened_ticket_count,\n\n        sum(case when lower(ticket_satisfaction_score) in ('offered', 'good', 'bad')\n            then 1\n            else 0\n                end) as surveyed_satisfaction_ticket_count,\n\n        sum(case when assignee_id is null and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unassigned_unsolved_ticket_count,\n        sum(case when total_agent_replies < 0\n            then 1\n            else 0\n                end) as unreplied_ticket_count,\n        sum(case when total_agent_replies < 0 and lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unreplied_unsolved_ticket_count,\n        sum(case when lower(status) not in ('solved', 'closed')\n            then 1\n            else 0\n                end) as unsolved_ticket_count,\n        sum(case when lower(status) in ('solved', 'closed')\n            then 1\n            else 0\n                end) as solved_ticket_count,\n        sum(case when lower(status) in ('deleted')\n            then 1\n            else 0\n                end) as deleted_ticket_count,\n        sum(case when total_ticket_recoveries > 0\n            then 1\n            else 0\n                end) as recovered_ticket_count,\n        sum(case when assignee_stations_count > 0\n            then 1\n            else 0\n                end) as assigned_ticket_count,\n        count(count_internal_comments) as total_internal_comments,\n        count(count_public_comments) as total_public_comments,\n        count(total_comments)\n    from ticket_metrics\n    \n    group by 1\n\n\n), final as (\n    select\n        user_sum.user_count,\n        user_sum.active_agent_count,\n        user_sum.deleted_user_count,\n        user_sum.end_user_count,\n        user_sum.suspended_user_count,\n        ticket_metric_sum.new_ticket_count,\n        ticket_metric_sum.on_hold_ticket_count,\n        ticket_metric_sum.open_ticket_count,\n        ticket_metric_sum.pending_ticket_count,\n        ticket_metric_sum.solved_ticket_count,\n        ticket_metric_sum.problem_ticket_count,\n        ticket_metric_sum.assigned_ticket_count,\n        ticket_metric_sum.reassigned_ticket_count,\n        ticket_metric_sum.reopened_ticket_count,\n        ticket_metric_sum.surveyed_satisfaction_ticket_count,\n        ticket_metric_sum.unassigned_unsolved_ticket_count,\n        ticket_metric_sum.unreplied_ticket_count,\n        ticket_metric_sum.unreplied_unsolved_ticket_count,\n        ticket_metric_sum.unsolved_ticket_count,\n        ticket_metric_sum.recovered_ticket_count,\n        ticket_metric_sum.deleted_ticket_count\n    from user_sum\n\n    left join ticket_metric_sum\n        using(summary_helper)\n)\n\nselect *\nfrom final", "relation_name": "\"dev\".\"zendesk\".\"zendesk__ticket_summary\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.478184Z", "completed_at": "2024-02-04T15:21:03.483682Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.485856Z", "completed_at": "2024-02-04T15:21:03.485868Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011665105819702148, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.not_null_zendesk__ticket_metrics_ticket_id.3466b76bbd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ticket_id\nfrom \"dev\".\"zendesk\".\"zendesk__ticket_metrics\"\nwhere ticket_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.492181Z", "completed_at": "2024-02-04T15:21:03.497580Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.499692Z", "completed_at": "2024-02-04T15:21:03.499705Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011288881301879883, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.zendesk.unique_zendesk__ticket_metrics_ticket_id.f3dc8eba5c", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ticket_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"zendesk\".\"zendesk__ticket_metrics\"\nwhere ticket_id is not null\ngroup by ticket_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.505830Z", "completed_at": "2024-02-04T15:21:03.511457Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.513645Z", "completed_at": "2024-02-04T15:21:03.513657Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01151418685913086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_employment_index_median_hours_worked_monthly_change_month.155b5709d4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect month\nfrom \"dev\".\"employment_index\".\"median_hours_worked_monthly_change\"\nwhere month is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.519708Z", "completed_at": "2024-02-04T15:21:03.526994Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.529170Z", "completed_at": "2024-02-04T15:21:03.529182Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.013158798217773438, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_employment_index_median_hours_worked_monthly_change_month.77b05f5fbb", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    month as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"employment_index\".\"median_hours_worked_monthly_change\"\nwhere month is not null\ngroup by month\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.535202Z", "completed_at": "2024-02-04T15:21:03.548501Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.550696Z", "completed_at": "2024-02-04T15:21:03.550709Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01912689208984375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.salary_range", "compiled": true, "compiled_code": "with \n    resample as (\n    select distinct \n        matched_title as occupation\n        , lower(seniority) as seniority\n        , organisation_id\n        , residential_state\n        , industry\n        , ntile_3_by_org_state\n        , median(annual_salary) over(partition by matched_title, seniority, organisation_id, residential_state, ntile_3_by_org_state) as sample_salary\n    from \n        \"dev\".\"salary_guide\".\"match_job_titles\" \n    where \n        z_score_title_salary between -1.96 and 1.96\n        and annual_salary > 10000\n        and matched_title not in ('Test', 'Employee', 'Tbd', 'Not Applicable', 'Salary', 'St', 'Salaried')\n        and matched_title not like 'Full Time%'\n        and matched_title not like 'Full-Time%'\n        and matched_title !~ '^(Senior|Level|Intermediate) [0-9]$'\n        and matched_title !~ '^(Senior|Level|Intermediate)$'\n    )\n\n    , by_state_industry_seniority as (\n    -- ()\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state,\n            industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state, \n            industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('residential_state',)\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state,\n            industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state, \n            industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('industry',)\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state,\n            'all' as industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state, \n            'all' as industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('seniority',)\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            'all' as seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state,\n            industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            'all' as seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state, \n            industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('residential_state', 'industry')\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state,\n            'all' as industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state, \n            'all' as industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('residential_state', 'seniority')\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            'all' as seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state,\n            industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            'all' as seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state, \n            industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('industry', 'seniority')\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            'all' as seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state,\n            'all' as industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            'all' as seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            residential_state, \n            'all' as industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    union all\n    -- ('residential_state', 'industry', 'seniority')\n    select \n        t.occupation\n        , t.country\n        , t.seniority\n        , t.employment_type\n        , t.residential_state\n        , t.industry\n        , m.samples\n        , m.orgs\n        , t.p10\n        , t.p25\n        , t.p50\n        , t.p75\n        , t.p90\n        , case\n        when m.orgs <= 13 and m.samples <= 16 then 'low'\n        when m.orgs <= 27 and m.samples <= 79 then 'mid'\n        when m.orgs <= 130 and m.samples <= 167 then 'high'\n        else 'very_high'\n        end as confidence_level\n    from \n        ( \n        select\n            occupation,\n            'AU' as country,\n            'all' as seniority,\n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state,\n            'all' as industry, \n            (percentile_cont(0.1) within group (order by sample_salary))::int as p10, \n            (percentile_cont(0.25) within group (order by sample_salary))::int as p25, \n            (percentile_cont(0.5) within group (order by sample_salary))::int as p50, \n            (percentile_cont(0.75) within group (order by sample_salary))::int as p75,\n            (percentile_cont(0.9) within group (order by sample_salary))::int as p90 \n        from resample\n        group by 1,2,3,4,5,6\n        ) t\n    join \n        (\n        select \n            occupation, \n            'AU' as country,\n            'all' as seniority, \n            'all' as employment_type, -- placeholder, currently all data is for Full-time\n            'all' as residential_state, \n            'all' as industry,\n            count(*) as samples, \n            count(distinct organisation_id) as orgs\n        from resample\n        group by 1,2,3,4,5,6\n        having orgs > 4 and samples > 9 \n        ) m on \n            t.occupation = m.occupation\n            and t.country = m.country\n            and t.seniority = m.seniority\n            and t.employment_type = m.employment_type\n            and t.residential_state = m.residential_state\n            and t.industry = m.industry\n\n    order by samples desc\n    )\n    , salary_ranges as (\n        select \n            md5(cast(coalesce(cast(occupation as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(country as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(seniority as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(employment_type as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(residential_state as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(industry as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as id\n            , * \n        from by_state_industry_seniority\n    )\n\nselect *, 'EH' as source from salary_ranges\n-- union\n-- -- -- add salary range from EH engineering bands for countries outside AU\n-- select *, 'ENG' as source from \"dev\".\"salary_guide\".\"eh_internal_engineering_salary_range\" where id not in (select id from salary_ranges)\n-- union\n-- -- -- add salary range from EH non engineering roles (using AON data) where we do not have coverage\n-- select *, 'AON' as source from \"dev\".\"salary_guide\".\"eh_internal_non_engineering_salary_range\" where id not in (select id from salary_ranges)", "relation_name": "\"dev\".\"salary_guide\".\"salary_range\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.557166Z", "completed_at": "2024-02-04T15:21:03.562609Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.564806Z", "completed_at": "2024-02-04T15:21:03.564818Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011654853820800781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_match_job_titles_matched_title.69356d4f01", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect matched_title\nfrom \"dev\".\"salary_guide\".\"match_job_titles\"\nwhere matched_title is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.570891Z", "completed_at": "2024-02-04T15:21:03.576587Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.578753Z", "completed_at": "2024-02-04T15:21:03.578764Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011606693267822266, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_match_job_titles_member_id.c018d4e178", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect member_id\nfrom \"dev\".\"salary_guide\".\"match_job_titles\"\nwhere member_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.584997Z", "completed_at": "2024-02-04T15:21:03.590205Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.592298Z", "completed_at": "2024-02-04T15:21:03.592323Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011196374893188477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_match_job_titles_seniority.d65abd9bc3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect seniority\nfrom \"dev\".\"salary_guide\".\"match_job_titles\"\nwhere seniority is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.598445Z", "completed_at": "2024-02-04T15:21:03.602401Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.604514Z", "completed_at": "2024-02-04T15:21:03.604526Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.009854316711425781, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.tableau_salary_range", "compiled": true, "compiled_code": "select * \nfrom \"dev\".\"salary_guide\".\"salary_range\"", "relation_name": "\"dev\".\"tableau\".\"tableau_salary_range\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.610783Z", "completed_at": "2024-02-04T15:21:03.615331Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.617524Z", "completed_at": "2024-02-04T15:21:03.617535Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010549068450927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "snapshot.dbt_project.salary_range_snapshot", "compiled": true, "compiled_code": "\n\n\n\nselect * from \"dev\".\"salary_guide\".\"salary_range\"\n", "relation_name": "\"dev\".\"salary_guide\".\"salary_range_snapshot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.623708Z", "completed_at": "2024-02-04T15:21:03.628985Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.631117Z", "completed_at": "2024-02-04T15:21:03.631128Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011220693588256836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.accepted_values_salary_range_confidence_level__low__mid__high__very_high__insufficient_data.bcef642287", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        confidence_level as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"salary_guide\".\"salary_range\"\n    group by confidence_level\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'low','mid','high','very_high','insufficient_data'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.637305Z", "completed_at": "2024-02-04T15:21:03.642654Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.644902Z", "completed_at": "2024-02-04T15:21:03.644914Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011405229568481445, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.accepted_values_salary_range_employment_type__all__casual__full_time__part_time.5b8c1f8552", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        employment_type as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"salary_guide\".\"salary_range\"\n    group by employment_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'all','casual','full-time','part-time'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.650947Z", "completed_at": "2024-02-04T15:21:03.656348Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.658499Z", "completed_at": "2024-02-04T15:21:03.658511Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011265993118286133, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.accepted_values_salary_range_seniority__all__junior__intermediate__senior__lead__manager__head__director__chief.685b9bc9bb", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        seniority as value_field,\n        count(*) as n_records\n\n    from \"dev\".\"salary_guide\".\"salary_range\"\n    group by seniority\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'all','junior','intermediate','senior','lead','manager','head','director','chief'\n)\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.664543Z", "completed_at": "2024-02-04T15:21:03.670369Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.672521Z", "completed_at": "2024-02-04T15:21:03.672533Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011655569076538086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_salary_range_id.d12a8ad9c7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"salary_guide\".\"salary_range\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.678630Z", "completed_at": "2024-02-04T15:21:03.683760Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.685961Z", "completed_at": "2024-02-04T15:21:03.685972Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011087656021118164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_salary_range_id.c250326d88", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"salary_guide\".\"salary_range\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.691989Z", "completed_at": "2024-02-04T15:21:03.698619Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.700757Z", "completed_at": "2024-02-04T15:21:03.700769Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012417316436767578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_tableau_salary_range_id.1d4316b22c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"dev\".\"tableau\".\"tableau_salary_range\"\nwhere id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.706798Z", "completed_at": "2024-02-04T15:21:03.711974Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:03.714550Z", "completed_at": "2024-02-04T15:21:03.714562Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011487007141113281, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_tableau_salary_range_id.4389e4c407", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"tableau\".\"tableau_salary_range\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.066281Z", "completed_at": "2024-02-04T15:21:04.019639Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:04.021845Z", "completed_at": "2024-02-04T15:21:04.021860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.0169870853424072, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.int_zendesk__field_history_scd", "compiled": true, "compiled_code": "-- model needs to materialize as a table to avoid erroneous null values\n \n\n\n\nwith change_data as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__field_history_pivot\"\n\n), set_values as (\n\n-- each row of the pivoted table includes field values if that field was updated on that day\n-- we need to backfill to persist values that have been previously updated and are still valid \n    select \n        date_day as valid_from,\n        ticket_id,\n        ticket_day_id\n\n         \n\n        ,priority\n        ,sum(case when priority is null \n                then 0 \n                else 1 \n                    end) over (order by ticket_id, date_day rows unbounded preceding) as priority_field_partition\n         \n\n        ,status\n        ,sum(case when status is null \n                then 0 \n                else 1 \n                    end) over (order by ticket_id, date_day rows unbounded preceding) as status_field_partition\n         \n\n        ,assignee_id\n        ,sum(case when assignee_id is null \n                then 0 \n                else 1 \n                    end) over (order by ticket_id, date_day rows unbounded preceding) as assignee_id_field_partition\n        \n\n    from change_data\n\n), fill_values as (\n    select\n        valid_from, \n        ticket_id,\n        ticket_day_id\n\n         \n\n        ,first_value( priority ) over (partition by priority_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as priority\n        \n         \n\n        ,first_value( status ) over (partition by status_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as status\n        \n         \n\n        ,first_value( assignee_id ) over (partition by assignee_id_field_partition, ticket_id order by valid_from asc rows between unbounded preceding and current row) as assignee_id\n        \n        \n    from set_values\n) \n\nselect *\nfrom fill_values", "relation_name": "\"dev\".\"zendesk\".\"int_zendesk__field_history_scd\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.044165Z", "completed_at": "2024-02-04T15:21:04.150640Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:04.152914Z", "completed_at": "2024-02-04T15:21:04.152930Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.1708014011383057, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.exports_braze_user_profile_payloads", "compiled": true, "compiled_code": "\n\n\n\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n\n\n\n\n\n\n\nwith\nrenamed as (\n    select\n        \n            \n                \n                \n                    cast(user_uuid as TEXT)                                                   as external_id\n                \n            \n            ,\n        \n            \n                cast(dbt_updated_at as timestamp)                                             as updated_at\n            \n            ,\n        \n            \n                \n                \n                    cast(email as TEXT)                                                   as email\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(first_name as TEXT)                                                   as first_name\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(last_name as TEXT)                                                   as last_name\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(phone_number_e164 as TEXT)                                                   as phone\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(alpha_two_letter as TEXT)                                                   as country\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(gender as TEXT)                                                   as gender\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(home_city as TEXT)                                                   as home_city\n                \n            \n            ,\n        \n            \n                \n                \n                    case when user_is_candidate then 'true' else 'false' end                  as user_is_candidate\n                \n            \n            ,\n        \n            \n                \n                \n                    to_char(user_date_created at time zone 'UTC', 'yyyy-MM-ddTHH:mm:ss:SSSZ') as user_date_created\n                \n            \n            ,\n        \n            \n                \n                \n                    case when user_actively_employed then 'true' else 'false' end                  as user_actively_employed\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(postcode as TEXT)                                                   as postcode\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(state_code as TEXT)                                                   as state\n                \n            \n            ,\n        \n            \n                \n                \n                    cast(candidate_recent_job_title as TEXT)                                                   as candidate_job_title\n                \n            \n            ,\n        \n            \n                cast('true' as TEXT)                                                          as swag_app_workspace_user\n            \n            \n        \n    from \"dev\".\"snapshots\".\"exports_braze_users_snapshot\"\n    where\n        1 = 1\n        \n            -- this filter will only be applied on an incremental run\n            and dbt_updated_at at time zone 'UTC' > (select max(updated_at) from \"dev\".\"exports\".\"exports_braze_user_profile_payloads\")\n        \n        and dbt_valid_to is NULL\n),\n\nnew_kvpairs as (\n    select *\n    from (\n        select\n            external_id,\n            updated_at,\n            \n                email\n                ,\n            \n                first_name\n                ,\n            \n                last_name\n                ,\n            \n                phone\n                ,\n            \n                country\n                ,\n            \n                gender\n                ,\n            \n                home_city\n                ,\n            \n                user_is_candidate\n                ,\n            \n                user_date_created\n                ,\n            \n                user_actively_employed\n                ,\n            \n                postcode\n                ,\n            \n                state\n                ,\n            \n                candidate_job_title\n                ,\n            \n                swag_app_workspace_user\n                \n            \n        from renamed\n    ) unpivot (\n        value for key in (\n            \n                email\n                ,\n            \n                first_name\n                ,\n            \n                last_name\n                ,\n            \n                phone\n                ,\n            \n                country\n                ,\n            \n                gender\n                ,\n            \n                home_city\n                ,\n            \n                user_is_candidate\n                ,\n            \n                user_date_created\n                ,\n            \n                user_actively_employed\n                ,\n            \n                postcode\n                ,\n            \n                state\n                ,\n            \n                candidate_job_title\n                ,\n            \n                swag_app_workspace_user\n                \n            \n        )\n    )\n)\n\n\n-- Below pulls in existing records and flattens them\n    , loaded_kvpairs as (\n        select\n            external_id,\n            key,\n            value,\n            updated_at\n        from (select\n            external_id,\n            updated_at,\n            json_parse(payload) as payload\n        from \"dev\".\"exports\".\"exports_braze_user_profile_payloads\") as t,\n            unpivot t.payload as value at key\n        where 1 = 1\n        qualify row_number() over (partition by external_id, key order by updated_at desc) = 1\n    )\n\n\n-- Compares the most recent records currently transmitted to Braze, by key and external_id\n-- If the new data is different from the existing data, that data will be transmitted\n-- Only the individual cells that have changed will be sent, or external_ids that are completely new\n, json_payloads as (\n    select\n        nkv.external_id,\n        '{' || listagg('\"' || nkv.key || '\":\"' || nkv.value || '\"', ', ') || '}' as payload_str,\n        max(nkv.updated_at)                                                      as updated_at\n    from new_kvpairs as nkv\n    \n        left join loaded_kvpairs as lkv on nkv.external_id = lkv.external_id and nkv.key = lkv.key\n        where coalesce(nkv.value, '|') != coalesce(lkv.value, '|')\n    \n    group by 1\n)\n\nselect\n    external_id,\n    payload_str                   as payload,\n    updated_at at time zone 'UTC' as updated_at\nfrom json_payloads\nwhere can_json_parse(payload_str)", "relation_name": "\"dev\".\"exports\".\"exports_braze_user_profile_payloads\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:04.059731Z", "completed_at": "2024-02-04T15:21:05.389301Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.391515Z", "completed_at": "2024-02-04T15:21:05.391530Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 1.377361536026001, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_field_history", "compiled": true, "compiled_code": "with change_data as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__field_history_scd\"\n  \n    \n\n), calendar as (\n\n    select *\n    from \"dev\".\"zendesk\".\"int_zendesk__field_calendar_spine\"\n    where date_day <= current_date\n    \n\n), joined as (\n\n    select \n        calendar.date_day,\n        calendar.ticket_id\n        \n             \n            , priority\n             \n            , status\n             \n            , assignee_id\n            \n        \n\n    from calendar\n    left join change_data\n        on calendar.ticket_id = change_data.ticket_id\n        and calendar.date_day = change_data.valid_from\n    \n    \n\n), set_values as (\n\n    select\n        date_day,\n        ticket_id\n\n        \n        , priority\n        -- create a batch/partition once a new value is provided\n        , sum( case when priority is null then 0 else 1 end) over ( partition by ticket_id\n            order by date_day rows unbounded preceding) as priority_field_partition\n\n        \n        , status\n        -- create a batch/partition once a new value is provided\n        , sum( case when status is null then 0 else 1 end) over ( partition by ticket_id\n            order by date_day rows unbounded preceding) as status_field_partition\n\n        \n        , assignee_id\n        -- create a batch/partition once a new value is provided\n        , sum( case when assignee_id is null then 0 else 1 end) over ( partition by ticket_id\n            order by date_day rows unbounded preceding) as assignee_id_field_partition\n\n        \n\n    from joined\n),\n\nfill_values as (\n\n    select  \n        date_day,\n        ticket_id\n\n        \n        -- grab the value that started this batch/partition\n        , first_value( priority ) over (\n            partition by ticket_id, priority_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as priority\n        \n        -- grab the value that started this batch/partition\n        , first_value( status ) over (\n            partition by ticket_id, status_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as status\n        \n        -- grab the value that started this batch/partition\n        , first_value( assignee_id ) over (\n            partition by ticket_id, assignee_id_field_partition \n            order by date_day asc rows between unbounded preceding and current row) as assignee_id\n        \n\n    from set_values\n\n), fix_null_values as (\n\n    select  \n        date_day,\n        ticket_id\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( priority as TEXT ) = 'is_null' then null else priority end as priority\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( status as TEXT ) = 'is_null' then null else status end as status\n         \n\n        -- we de-nulled the true null values earlier in order to differentiate them from nulls that just needed to be backfilled\n        , case when  cast( assignee_id as TEXT ) = 'is_null' then null else assignee_id end as assignee_id\n        \n\n    from fill_values\n\n), surrogate_key as (\n\n    select\n        md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(ticket_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as ticket_day_id,\n        *\n\n    from fix_null_values\n)\n\nselect *\nfrom surrogate_key", "relation_name": "\"dev\".\"zendesk\".\"zendesk__ticket_field_history\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:04.212056Z", "completed_at": "2024-02-04T15:21:05.438677Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.459886Z", "completed_at": "2024-02-04T15:21:05.459901Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.3002376556396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_user_profile_payloads_external_id.b8f9d5d953", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('EXTERNAL_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:05.512098Z", "completed_at": "2024-02-04T15:21:05.523226Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.542381Z", "completed_at": "2024-02-04T15:21:05.542396Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03568744659423828, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_unique_combination_of_columns_exports_braze_user_profile_payloads_external_id__updated_at.f243928a96", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        external_id, updated_at\n    from \"dev\".\"exports\".\"exports_braze_user_profile_payloads\"\n    group by external_id, updated_at\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:05.552884Z", "completed_at": "2024-02-04T15:21:05.558645Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.560831Z", "completed_at": "2024-02-04T15:21:05.560842Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011986255645751953, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_profile_payloads_external_id.00875453b3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect external_id\nfrom \"dev\".\"exports\".\"exports_braze_user_profile_payloads\"\nwhere external_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:05.567291Z", "completed_at": "2024-02-04T15:21:05.572731Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.574976Z", "completed_at": "2024-02-04T15:21:05.574989Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011525869369506836, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_profile_payloads_payload.f8242e825b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payload\nfrom \"dev\".\"exports\".\"exports_braze_user_profile_payloads\"\nwhere payload is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:05.581322Z", "completed_at": "2024-02-04T15:21:05.588143Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.590333Z", "completed_at": "2024-02-04T15:21:05.590345Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0128021240234375, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_profile_payloads_updated_at.5f72ec5a4a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"dev\".\"exports\".\"exports_braze_user_profile_payloads\"\nwhere updated_at is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:04.229440Z", "completed_at": "2024-02-04T15:21:05.541133Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.546701Z", "completed_at": "2024-02-04T15:21:05.546715Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 1.4026687145233154, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_user_profile_payloads_payload.4a7adbcfe2", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('PAYLOAD' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:05.596541Z", "completed_at": "2024-02-04T15:21:05.612050Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:05.614423Z", "completed_at": "2024-02-04T15:21:05.614435Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.021633386611938477, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.zendesk.zendesk__ticket_backlog", "compiled": true, "compiled_code": "--This model will only run if 'status' is included within the `ticket_field_history_columns` variable.\n\n\nwith ticket_field_history as (\n    select *\n    from \"dev\".\"zendesk\".\"zendesk__ticket_field_history\"\n\n), tickets as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__ticket\"\n\n), group_names as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__group\"\n\n), users as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__user\"\n\n), brands as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__brand\"\n\n--The below model is excluded if the user does not include ticket_form_id in the variable as a low percentage of accounts use ticket forms.\n\n\n), organizations as (\n    select *\n    from \"dev\".\"zendesk\".\"stg_zendesk__organization\"\n\n), backlog as (\n    select\n        ticket_field_history.date_day\n        ,ticket_field_history.ticket_id\n        ,ticket_field_history.status\n        ,tickets.created_channel\n         --Looking at all history fields the users passed through in their dbt_project.yml file\n             --Standard ID field where the name can easily be joined from stg model.\n                ,assignee.name as assignee_name\n\n            \n         --Looking at all history fields the users passed through in their dbt_project.yml file\n             --All other fields are not ID's and can simply be included in the query.\n                ,ticket_field_history.priority\n            \n        \n\n    from ticket_field_history\n\n    left join tickets\n        on tickets.ticket_id = ticket_field_history.ticket_id\n\n    \n\n    \n\n     --Join not needed if fields is not located in variable, otherwise it is included.\n    left join users as assignee\n        on assignee.user_id = cast(ticket_field_history.assignee_id as bigint)\n    \n\n    \n\n    \n\n    \n\n    where ticket_field_history.status not in ('closed', 'solved', 'deleted')\n)\n\nselect *\nfrom backlog", "relation_name": "\"dev\".\"zendesk\".\"zendesk__ticket_backlog\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:05.439928Z", "completed_at": "2024-02-04T15:21:06.308019Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:06.310396Z", "completed_at": "2024-02-04T15:21:06.310410Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.9226973056793213, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_expectations_expect_column_to_exist_exports_braze_user_profile_payloads_updated_at.0dd8df9feb", "compiled": true, "compiled_code": "\n\n    with test_data as (\n\n        select\n            cast('UPDATED_AT' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:03.004116Z", "completed_at": "2024-02-04T15:21:07.457235Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.459461Z", "completed_at": "2024-02-04T15:21:07.459476Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 4.49523138999939, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.exports_v_braze_user_events_tmp", "compiled": true, "compiled_code": "-- Generate union view\n  with base as (\n    \n\n        (\n            select\n                cast('\"dev\".\"exports\".\"int_exports__sign_in_app_events\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"event_id\" as character varying(256)) as \"event_id\" ,\n                    cast(\"user_uuid\" as character varying(4096)) as \"user_uuid\" ,\n                    cast(\"event_name\" as character varying(256)) as \"event_name\" ,\n                    cast(\"event_time\" as timestamp with time zone) as \"event_time\" ,\n                    cast(\"device\" as character varying(256)) as \"device\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_module\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_type\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_category\" ,\n                    cast(null as boolean) as \"public_profile_enabled\" ,\n                    cast(null as character varying(256)) as \"retailer\" ,\n                    cast(null as character varying(8)) as \"type_of_offer\" ,\n                    cast(null as double precision) as \"cashback_received\" ,\n                    cast(null as timestamp without time zone) as \"date_created\" ,\n                    cast(null as character varying(2048)) as \"certification_name\" ,\n                    cast(null as date) as \"certification_issue_date\" ,\n                    cast(null as date) as \"certification_end_date\" \n\n            from \"dev\".\"exports\".\"int_exports__sign_in_app_events\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dev\".\"exports\".\"int_exports__swag_user_events\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"event_id\" as character varying(256)) as \"event_id\" ,\n                    cast(\"user_uuid\" as character varying(4096)) as \"user_uuid\" ,\n                    cast(\"event_name\" as character varying(256)) as \"event_name\" ,\n                    cast(\"event_time\" as timestamp with time zone) as \"event_time\" ,\n                    cast(null as character varying(256)) as \"device\" ,\n                    cast(\"shopnow_offer_module\" as character varying(4096)) as \"shopnow_offer_module\" ,\n                    cast(\"shopnow_offer_type\" as character varying(4096)) as \"shopnow_offer_type\" ,\n                    cast(\"shopnow_offer_category\" as character varying(4096)) as \"shopnow_offer_category\" ,\n                    cast(\"public_profile_enabled\" as boolean) as \"public_profile_enabled\" ,\n                    cast(null as character varying(256)) as \"retailer\" ,\n                    cast(null as character varying(8)) as \"type_of_offer\" ,\n                    cast(null as double precision) as \"cashback_received\" ,\n                    cast(null as timestamp without time zone) as \"date_created\" ,\n                    cast(null as character varying(2048)) as \"certification_name\" ,\n                    cast(null as date) as \"certification_issue_date\" ,\n                    cast(null as date) as \"certification_end_date\" \n\n            from \"dev\".\"exports\".\"int_exports__swag_user_events\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dev\".\"exports\".\"int_exports__swag_cashback_transactions\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"event_id\" as character varying(256)) as \"event_id\" ,\n                    cast(\"user_uuid\" as character varying(4096)) as \"user_uuid\" ,\n                    cast(\"event_name\" as character varying(256)) as \"event_name\" ,\n                    cast(\"event_time\" as timestamp with time zone) as \"event_time\" ,\n                    cast(null as character varying(256)) as \"device\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_module\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_type\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_category\" ,\n                    cast(null as boolean) as \"public_profile_enabled\" ,\n                    cast(\"retailer\" as character varying(256)) as \"retailer\" ,\n                    cast(\"type_of_offer\" as character varying(8)) as \"type_of_offer\" ,\n                    cast(\"cashback_received\" as double precision) as \"cashback_received\" ,\n                    cast(null as timestamp without time zone) as \"date_created\" ,\n                    cast(null as character varying(2048)) as \"certification_name\" ,\n                    cast(null as date) as \"certification_issue_date\" ,\n                    cast(null as date) as \"certification_end_date\" \n\n            from \"dev\".\"exports\".\"int_exports__swag_cashback_transactions\"\n\n            \n        )\n\n        union all\n        \n\n        (\n            select\n                cast('\"dev\".\"exports\".\"int_exports__jobs_swagapp_dotcom_events\"' as TEXT) as _dbt_source_relation,\n\n                \n                    cast(\"event_id\" as character varying(256)) as \"event_id\" ,\n                    cast(\"user_uuid\" as character varying(4096)) as \"user_uuid\" ,\n                    cast(\"event_name\" as character varying(256)) as \"event_name\" ,\n                    cast(\"event_time\" as timestamp with time zone) as \"event_time\" ,\n                    cast(null as character varying(256)) as \"device\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_module\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_type\" ,\n                    cast(null as character varying(4096)) as \"shopnow_offer_category\" ,\n                    cast(null as boolean) as \"public_profile_enabled\" ,\n                    cast(null as character varying(256)) as \"retailer\" ,\n                    cast(null as character varying(8)) as \"type_of_offer\" ,\n                    cast(null as double precision) as \"cashback_received\" ,\n                    cast(\"date_created\" as timestamp without time zone) as \"date_created\" ,\n                    cast(\"certification_name\" as character varying(2048)) as \"certification_name\" ,\n                    cast(\"certification_issue_date\" as date) as \"certification_issue_date\" ,\n                    cast(\"certification_end_date\" as date) as \"certification_end_date\" \n\n            from \"dev\".\"exports\".\"int_exports__jobs_swagapp_dotcom_events\"\n\n            \n        )\n\n        \n  ),\n\n  renamed as (\n    select\n      event_id,\n      event_name,\n      event_time,\n      user_uuid,\n      _dbt_source_relation,\n          device                 as event_prop_device_type,\n          public_profile_enabled                 as event_prop_public_profile_enabled,\n          shopnow_offer_module                 as event_prop_shopnow_offer_module,\n          shopnow_offer_type                 as event_prop_shopnow_offer_type,\n          shopnow_offer_category                 as event_prop_shopnow_offer_category,\n          retailer                 as event_prop_retailer,\n          type_of_offer                 as event_prop_type_of_offer,\n          cashback_received                 as event_prop_cashback_received,\n          date_created                 as event_prop_date_created,\n          certification_name                 as event_prop_certification_name,\n          certification_issue_date                 as event_prop_certification_issue_date,\n          certification_end_date                 as event_prop_certification_end_date\n    from base\n  )\n\n  select * from renamed", "relation_name": "\"dev\".\"exports\".\"exports_v_braze_user_events_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.494396Z", "completed_at": "2024-02-04T15:21:07.501086Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.503240Z", "completed_at": "2024-02-04T15:21:07.503255Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.012666702270507812, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.exports_braze_user_events", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"dev\".\"exports\".\"exports_v_braze_user_events_tmp\"\nwhere\n    1 = 1\n    \n        and event_time > (select max(event_time) from \"dev\".\"exports\".\"exports_braze_user_events\")\n    \nqualify row_number() over (partition by event_id order by event_time desc) = 1", "relation_name": "\"dev\".\"exports\".\"exports_braze_user_events\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.553284Z", "completed_at": "2024-02-04T15:21:07.571654Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.580000Z", "completed_at": "2024-02-04T15:21:07.580016Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.07273340225219727, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_expression_is_true_exports_braze_user_events_event_prop_public_profile_enabled_is_null.e0a45ec102", "compiled": true, "compiled_code": "\n\n\n\nselect\n    1\nfrom (select * from \"dev\".\"exports\".\"exports_braze_user_events\" where event_name != 'candidate_profile_completed' and event_name != 'candidate_cv_uploaded' and event_name != 'candidate_public_profile') dbt_subquery\n\nwhere not(event_prop_public_profile_enabled is null)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.559005Z", "completed_at": "2024-02-04T15:21:07.574169Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.583515Z", "completed_at": "2024-02-04T15:21:07.583537Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0746920108795166, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.dbt_utils_recency_exports_braze_user_events_day__event_time__1.c6fc223a72", "compiled": true, "compiled_code": "\n\n\n\n\n\n\nwith recency as (\n\n    select \n\n      \n      \n        max(event_time) as most_recent\n\n    from \"dev\".\"exports\".\"exports_braze_user_events\"\n\n    \n\n)\n\nselect\n\n    \n    most_recent,\n    cast(\n\n    dateadd(\n        day,\n        -1,\n        getdate()\n        )\n\n as timestamp) as threshold\n\nfrom recency\nwhere most_recent < cast(\n\n    dateadd(\n        day,\n        -1,\n        getdate()\n        )\n\n as timestamp)\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.564873Z", "completed_at": "2024-02-04T15:21:07.576429Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.586523Z", "completed_at": "2024-02-04T15:21:07.586536Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.08513116836547852, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_events_event_id.43173ed6b4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"dev\".\"exports\".\"exports_braze_user_events\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.611749Z", "completed_at": "2024-02-04T15:21:07.635353Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.643870Z", "completed_at": "2024-02-04T15:21:07.643887Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.04623150825500488, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_events_event_name.6c5f837314", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_name\nfrom \"dev\".\"exports\".\"exports_braze_user_events\"\nwhere event_name is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.618588Z", "completed_at": "2024-02-04T15:21:07.636780Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.647306Z", "completed_at": "2024-02-04T15:21:07.647320Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04721331596374512, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_events_event_time.1fca84f2ba", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_time\nfrom \"dev\".\"exports\".\"exports_braze_user_events\"\nwhere event_time is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.625861Z", "completed_at": "2024-02-04T15:21:07.639290Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.651463Z", "completed_at": "2024-02-04T15:21:07.651484Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.048964738845825195, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_events_user_uuid.7d5f415f1c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect user_uuid\nfrom \"dev\".\"exports\".\"exports_braze_user_events\"\nwhere user_uuid is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.663200Z", "completed_at": "2024-02-04T15:21:07.668612Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:07.670834Z", "completed_at": "2024-02-04T15:21:07.670846Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.011677265167236328, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_exports_braze_user_events_event_id.1ad0d4e9d3", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"exports\".\"exports_braze_user_events\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:07.520114Z", "completed_at": "2024-02-04T15:21:08.088335Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:08.090580Z", "completed_at": "2024-02-04T15:21:08.090594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.610053539276123, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.dbt_project.exports_braze_user_event_payloads", "compiled": true, "compiled_code": "\n\n\n\n\n/* Build a dict of column names to column types */\n\n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n     \n\n\n\n    \n\n\nwith renamed as (\n    select\n        \n            \n\n            \n    \n\n\n            \n                cast(user_uuid as TEXT)                                                          as external_id\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_id as TEXT)                                                          as event_id\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_time as timestamp)                                                          as updated_at\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_time as timestamp)                                                          as time\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_name as TEXT)                                                          as name\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_device_type as TEXT)                                                          as device_type\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_cashback_received as TEXT)                                                          as cashback_received\n            ,\n        \n            \n\n            \n    \n\n\n            \n                \n  \n    case\n        when event_prop_public_profile_enabled is true then 'true'\n        when event_prop_public_profile_enabled is false then 'false'\n    end::text\n\n as public_profile_enabled\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_retailer as TEXT)                                                          as retailer\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_shopnow_offer_category as TEXT)                                                          as shopnow_offer_category\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_shopnow_offer_module as TEXT)                                                          as shopnow_offer_module\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_shopnow_offer_type as TEXT)                                                          as shopnow_offer_type\n            ,\n        \n            \n\n            \n    \n\n\n            \n                cast(event_prop_type_of_offer as TEXT)                                                          as type_of_offer\n            ,\n        \n            \n\n            \n    \n\n\n            \n                to_char(event_prop_date_created at time zone 'UTC', 'yyyy-MM-ddTHH:mm:ss:SSSZ') as date_created\n            \n        \n    from \"dev\".\"exports\".\"exports_braze_user_events\"\n    \n        where updated_at at time zone 'UTC' > (select max(updated_at) from \"dev\".\"exports\".\"exports_braze_user_event_payloads\")\n    \n),\n\n/* Build a list of columns that are event properties */\n\n\n    \n\n    \n\n    \n\n    \n\n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n    \n        \n    \n\n\n    \n\n\nnew_kvpairs as (\n    select\n        event_id,\n        updated_at,\n        field_name,\n        field_value\n    from renamed unpivot (\n        field_value for field_name in (\n            \n                device_type\n                ,\n            \n                cashback_received\n                ,\n            \n                public_profile_enabled\n                ,\n            \n                retailer\n                ,\n            \n                shopnow_offer_category\n                ,\n            \n                shopnow_offer_module\n                ,\n            \n                shopnow_offer_type\n                ,\n            \n                type_of_offer\n                ,\n            \n                date_created\n                \n            \n        )\n    )\n),\n\npayload as (\n    select\n        renamed.event_id,\n        renamed.external_id,\n        renamed.updated_at at time zone 'UTC'                                                                                                                                  as updated_at,\n        '{' || '\"name\":' || '\"' || renamed.name || '\"' || ', ' || '\"time\": ' || '\"' || renamed.time || '\"' || ', ' || '\"properties\": ' || coalesce(p.payload_str, '{}') || '}' as payload\n    from renamed\n    left join (\n        select\n            event_id,\n            '{' || listagg('\"' || field_name || '\":\"' || field_value || '\"', ', ') || '}' as payload_str\n        from new_kvpairs\n        group by 1\n    ) as p\n        on renamed.event_id = p.event_id\n)\n\nselect\n    event_id,\n    external_id,\n    updated_at,\n    payload\nfrom payload\nwhere can_json_parse(payload)", "relation_name": "\"dev\".\"exports\".\"exports_braze_user_event_payloads\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:08.137515Z", "completed_at": "2024-02-04T15:21:08.165930Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:08.169854Z", "completed_at": "2024-02-04T15:21:08.169869Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04919886589050293, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_event_payloads_event_id.ee49ae675f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect event_id\nfrom \"dev\".\"exports\".\"exports_braze_user_event_payloads\"\nwhere event_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:08.148108Z", "completed_at": "2024-02-04T15:21:08.168693Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:08.178301Z", "completed_at": "2024-02-04T15:21:08.178313Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.05432891845703125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_event_payloads_external_id.346c0312b9", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect external_id\nfrom \"dev\".\"exports\".\"exports_braze_user_event_payloads\"\nwhere external_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:08.153807Z", "completed_at": "2024-02-04T15:21:08.170972Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:08.179570Z", "completed_at": "2024-02-04T15:21:08.179586Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.05444192886352539, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.not_null_exports_braze_user_event_payloads_payload.01f633d213", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payload\nfrom \"dev\".\"exports\".\"exports_braze_user_event_payloads\"\nwhere payload is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2024-02-04T15:21:08.160866Z", "completed_at": "2024-02-04T15:21:08.172121Z"}, {"name": "execute", "started_at": "2024-02-04T15:21:08.180903Z", "completed_at": "2024-02-04T15:21:08.180917Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.05207467079162598, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.dbt_project.unique_exports_braze_user_event_payloads_event_id.60afea97e5", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    event_id as unique_field,\n    count(*) as n_records\n\nfrom \"dev\".\"exports\".\"exports_braze_user_event_payloads\"\nwhere event_id is not null\ngroup by event_id\nhaving count(*) > 1\n\n\n", "relation_name": null}], "elapsed_time": 87.72674870491028, "args": {"write_json": true, "favor_state": false, "use_colors": true, "vars": {}, "empty_catalog": false, "indirect_selection": "eager", "warn_error_options": {"include": [], "exclude": []}, "introspect": true, "defer": false, "log_file_max_bytes": 10485760, "compile": true, "enable_legacy_logger": false, "log_level_file": "debug", "printer_width": 80, "project_dir": "/runner/_work/gold-diggers/gold-diggers/dbt_fivetran", "macro_debugging": false, "static_parser": true, "invocation_command": "dbt docs generate --target prod", "partial_parse": true, "strict_mode": false, "exclude": [], "which": "generate", "print": true, "quiet": false, "log_format": "default", "use_colors_file": true, "send_anonymous_usage_stats": true, "static": false, "profiles_dir": "/runner/_work/gold-diggers/gold-diggers/dbt_fivetran", "log_level": "info", "cache_selected_only": false, "version_check": true, "log_path": "/runner/_work/gold-diggers/gold-diggers/dbt_fivetran/logs", "partial_parse_file_diff": true, "log_format_file": "debug", "target": "prod", "populate_cache": true, "select": [], "show_resource_report": false}}