name: Coding Quality

on:
  pull_request:
#    paths-ignore:
#      - 'dbt_fivetran/**'
#      - 'machine_learning/**'
  push:
    branches: [main]
#    paths-ignore:
#      - 'dbt_fivetran/**'
#      - 'machine_learning/**'

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3

    - id: 'changes'
      uses: dorny/paths-filter@v2
      with:
        filters: |
          dbt_ml:
            - 'dbt_fivetran/**'
            - 'machine_learning/**'

    - name: '❇️ Pre-commit'
      if: steps.changes.outputs.dbt_ml == 'false'
      uses: pre-commit/action@v3.0.0

  files-changed:
    name: detect what files changed
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      proposed_dbt_models_changed: ${{ steps.changes.outputs.proposed_dbt_models }}
      proposed_dbt_models_files: ${{ steps.changes.outputs.proposed_dbt_models_files }}
    steps:
      - uses: actions/checkout@v3

      - name: Detect file changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          list-files: escape
          filters: |
            proposed_dbt_models:
              - added|modified: 'dbt_fivetran/models/proposed/**/*.sql'
              - added|modified: 'dbt_fivetran/snapshots/proposed/**/*.sql'

  sqlfluff-lint-models:
    if: needs.files-changed.outputs.proposed_dbt_models_changed == 'true'
    needs: files-changed
    runs-on: [self-hosted, ci-general]
    permissions:
      actions: read
      checks: write
      contents: read
      pull-requests: read
    strategy:
      fail-fast: false
    env:
      DBT_REDSHIFT_HOST: ${{ secrets.REDSHIFT_HOST }}
      DBT_USER: ${{ secrets.REDSHIFT_USERNAME }}
      DBT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
      DBT_DATABASE: dev
      DBT_DEV_SCHEMA: ci
    steps:
      - uses: actions/checkout@v3

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version-file: 'pyproject.toml'
          cache-dependency-path: 'poetry.lock'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cp_poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Lint dbt models
        shell: bash -l {0}
        env:
          DBT_PROFILES_DIR: ${{ github.workspace }}/dbt_fivetran
          DBT_PROJECT_DIR: ${{ github.workspace }}/dbt_fivetran
        run: |
          poetry run dbt deps
          poetry run sqlfluff lint --config ${{ github.workspace }}/dbt_fivetran/.sqlfluff --format github-annotation --annotation-level failure ${{ needs.files-changed.outputs.proposed_dbt_models_files }} | grep -v "^None$" > ./annotations.json

      - name: Annotate
        if: always()
        uses: yuzutech/annotations-action@v0.4.0
        with:
          title: "SQLFluff Lint"
          input: "./annotations.json"
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          ignore-missing-file: "false"
